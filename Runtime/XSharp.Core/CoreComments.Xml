<?xml version="1.0" encoding="utf-8" ?>
<Comments>
  <Ansi2Oem>
    <span>
      <note type="warning">
      The Ansi2Oem() and Oem2Ansi() family of functions are compatibility functions. Do not use them unless you really have to.
      X# is a Unicode language and conversions from Unicode - Ansi - Oem - Unicode will take place
      if you use these functions. <br/>
        You should also realize that Ansi2Oem(Oem2Ansi(cSource)) will not always return cSource. Some characters may
        not be available in the OEM codepage and could be translated to other characters.
        For example: Windows codepage 1252 has Capital E Umlaut (Ë) on position 203.
        When translated to OEM codepage 437 this will become capital E without umlaut (69). Converting back to Ansi
        this will remain a E without umlaut.
        </note>
    </span>
  </Ansi2Oem>
  <StringCompare>
    <summary>
      Compare 2 strings. This function is used by the compiler for string comparisons.
    </summary>
    <returns>
      This function returns a numeric value to indicate the order in which the strings should be sorted: <br/>
      <table>
        <tr>
          <td>-1</td>
          <td>LHS precedes RHS in the sort order. </td>
        </tr>
        <tr>
          <td>0</td>
          <td>LHS occurs in the same position as RHS in the sort order.</td>
        </tr>
        <tr>
          <td>1</td>
          <td>LHS follows RHS in the sort order.</td>
        </tr>
        </table>
    </returns>
  </StringCompare>
  <File>
    <remarks>
      <note type="tip">
        The low level File IO functions in the X# runtime are using .Net filestreams in the background. <br/>
        That means that the file handles returned by FOpen() and FCreate() are not 'normal' file handles,
        but unique identifiers that are used to find the underlying stream object in a collection of
        streams in the runtime. <br/>
        That also means that you can't use file handles for functions such as FRead() and FWrite() that were not
        created in the X# runtime.<br/>
        If you want to access the underlying FileStream, then you should call the 
        function <see cref="M:XSharp.Core.Functions.FGetStream(System.IntPtr)">FGetStream() </see>
      </note>
    </remarks>
  </File>
  <PtrBin>
    <remarks>
      <note type="warning">
        This is a compatibility function that only works in x86 mode. The function will throw an exception when running in x64 mode.
      </note>
    </remarks>
  </PtrBin>
  <FileHandle>
    <span>
      The handle of the file. <em>Please see the remark below about the compatibility of X# Runtime file handles and Win32 file handles.</em>
    </span>
  </FileHandle>
  <Oem2AnsiFileIO>
    <span>
      <note type="tip">
        Conversions between OEM en Ansi were relevant in an Ansi environment like Visual Objects.
        In a Unicode environment this conversion is noto much a conversion between OEM and Ansi but a
        conversion between either Unicode and Ansi or Unicode and OEM. <br/>
        For these conversions the runtime uses the current values of the 
        <see cref="P:XSharp.RuntimeState.WinCodePage">Windows Codepage</see>
        and 
        <see cref="P:XSharp.RuntimeState.DosCodePage">DOS Codepage</see>.
      </note>
    </span>
  </Oem2AnsiFileIO>
  <DbRecordInfo>
    <summary>DbRecordInfo() define.</summary>
    <seealso cref='M:XSharp.RT.Functions.DbRecordInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)' >DbRecordInfo()</seealso>
    <seealso cref='T:XSharp.RDD.Enums.DbRecordInfo'>DbRecordInfo Enum</seealso>
  </DbRecordInfo>
  <DBFieldInfo>
     <summary>DbFieldInfo() define.</summary>
     <seealso cref='M:XSharp.RT.Functions.DbFieldInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)' >DbFieldInfo()</seealso>
     <seealso cref='T:XSharp.RDD.Enums.DbFieldInfo'>DbFieldInfo Enum</seealso>

  </DBFieldInfo>
  <DbRecordInfo>
  <summary>DbRecordInfo() define.</summary>
   <seealso cref='M:XSharp.RT.Functions.DbRecordInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)' >DbRecordInfo()</seealso>
   <seealso cref='T:XSharp.RDD.Enums.DbRecordInfo'>DbRecordInfo Enum</seealso>
  </DbRecordInfo>
  <DBInfo>
    <summary>DBInfo() define.</summary>
    <seealso cref='M:XSharp.RT.Functions.DbInfo(XSharp.__Usual,XSharp.__Usual)' >DbInfo()</seealso>
    <seealso cref='T:XSharp.RDD.Enums.DbInfo'>DbInfo Enum</seealso>
  </DBInfo>
  <DBOrderInfo>
    <summary>DBOrderInfo() define.</summary>
    <seealso cref='M:XSharp.RT.Functions.DbOrderInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)' >DbOrderInfo()</seealso>
    <seealso cref='T:XSharp.RDD.Enums.DbOrder_Info'>DBOrderInfo Enum</seealso>
  </DBOrderInfo>
  <BLOBInfo>
    <summary>DBBlobInfo() define.</summary>
    <seealso cref='M:XSharp.RT.Functions.DbBlobInfo(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)' >DbBlobInfo()</seealso>
    <seealso cref='T:XSharp.RDD.Enums.DbInfo'>DbInfo Enum</seealso>
  </BLOBInfo>
  <BLOBImportExport>
    <summary>BLOB Import/Export define.</summary>
  </BLOBImportExport>
  <OptLevel>
    <summary>DBOI_OPTLEVEL define.</summary>
  </OptLevel>
  <IndexType>
    <summary>DBOI_INDEXTYPE define.</summary>
  </IndexType>
  <LockScheme>
    <summary>LockScheme define.</summary>
  </LockScheme>
  <BlockSize>
    <summary>BlockSize define.</summary>
  </BlockSize>
  <RDDInfo>
    <summary>RDDInfo() define.</summary>
    <seealso cref='M:XSharp.RT.Functions.RddInfo(XSharp.__Usual,XSharp.__Usual)' >RddInfo()</seealso>
    <seealso cref='T:XSharp.RDD.Enums.RddInfo'>RddInfo Enum</seealso>
  </RDDInfo>
  <RDDError>
    <summary>RDD Error Number.</summary>
    <seealso cref='T:XSharp.Subcodes'>Subcodes Enum</seealso>
    <seealso cref='P:XSharp.Error.SubCode'>Subcode field in Error object</seealso>
  </RDDError>
  <Directory>
    <seealso cref="M:XSharp.RT.Functions.Directory(System.String,XSharp.__Usual)">Directory Function</seealso>
    <remarks>
      Compared to Clipper and Visual Objects the return value of Directory() has changed. 
      Each subarray returned from Directory() now contains some extra  values, such as creation date and 
      last access date. The normal Date and Time elements represent the last written date and time.
    </remarks>
  </Directory>
  <Set>
    <summary>Set() define</summary>
    <seealso cref='T:XSharp.Set'>Set Enum</seealso>
    <seealso cref='M:XSharp.RT.Functions.Set(XSharp.__Usual,XSharp.__Usual)' >Set() function</seealso>

  </Set>
  <Gencode>
    <summary>Error Gencode define</summary>
    <seealso cref='T:XSharp.Gencode'>Gencode Enum</seealso>

  </Gencode>
  <Severity>
    <summary>Error Severity define</summary>
    <seealso cref='T:XSharp.Severity'>Severity Enum</seealso>
  </Severity>
  <DateCountry>
    <summary>DateFormat define</summary>
    <seealso cref='T:XSharp.DateCountry'>DateCountry Enum</seealso>
  </DateCountry>
  <NationMessage>
    <summary>Nation message define</summary>
    <seealso cref='T:XSharp.VOErrors'>VOErrors Enum</seealso>
  </NationMessage>
  
</Comments>