<?xml version="1.0" encoding="utf-8" ?>
<Comments>
  <StaticMemory>
    <remarks>
      <note type="tip">
        The Static Memory Functions (MemAlloc, MemSet etc) are included for compatibility only.
        In most cases the static memory blocks can (and should) be replaced with arrays of bytes.<br/>
        Many of the functions in the runtime that take memory blocks as parameter, such as the low level IO functions, now have overloads that take arrays of bytes as parameter.<br/>
        We recommend that you use these overloads, because their performance is somewhat better.
      </note>
    </remarks>
  </StaticMemory>
  <PSZ>
    <remarks>
      <note type="tip">
        The PSZ type is included in the X# language and runtime for compatibility only.
        In most cases the type can and should be replaced with normal strings. <br/>
        If you need to interface with Win32 API functions that expect an ansi string, there is often also
        an alternative with a unicode string. We recommend to use that alternative when possible.
      </note>
    </remarks>
  </PSZ>
  <Symbol>
    <remarks>
      <note type="tip">
        The SYMBOL type is included in the X# language and runtime for compatibility only.
        In most cases the type can and should be replaced with normal strings.
      </note>
    </remarks>
  </Symbol>
  <Memvar>
    <remarks>
      <note type="tip">
        Dynamic memory variables (PUBLIC, PRIVATE, PARAMETERS) are supported in the X# language and runtime for compatibility only.<br/>
        In most cases the type can and should be replaced with lexically scoped variables, such as LOCALs and GLOBALs.
      </note>
    </remarks>
  </Memvar>
  <Operator>
    <summary>This operator is used in code generated by the compiler when needed.</summary>
  </Operator>
  <Converter>
  <summary>This converter is used in code generated by the compiler when needed.</summary>
  </Converter>
  <Constructor>
    <summary>This constructor is used in code generated by the compiler when needed.</summary>  
  </Constructor>
  <FileCompat>
    <remarks>
      <note type="tip">
        This function is included for compatibility. We do not recomment using static memory for file i/o operations.
        We recommend that you use the function overload that takes a byte array parameter in stead.
      </note>
    </remarks>
  </FileCompat>
</Comments>