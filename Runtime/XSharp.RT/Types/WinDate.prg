//
// Copyright (c) XSharp B.V.  All Rights Reserved.  
// Licensed under the Apache License, Version 2.0.  
// See License.txt in the project root for license information.
//
USING System.Collections
USING System.Collections.Generic
USING System.Linq
USING System.Diagnostics
USING System.Runtime.Serialization

BEGIN NAMESPACE XSharp	
	/// <summary>Internal type that implements the VO Compatible DATE type in UNIONs and VOSTRUCTs</summary>
    [DebuggerDisplay("WinDate({ToString(),nq})", Type := "LOGIC")];
    [Serializable];
    PUBLIC STRUCT __WinDate IMPLEMENTS ISerializable
        PRIVATE INITONLY _value AS DWORD			// Julian value 

        PUBLIC PROPERTY @@Value AS DATE => (DATE) _value
        PUBLIC PROPERTY @@JulianValue AS INT => (INT) _value

        PRIVATE CONSTRUCTOR(@@value AS DWORD)
            _value := @@value
            
       	/// <summary>This constructor is used in code generated by the compiler when needed.</summary>
        CONSTRUCTOR (dValue AS DATE)
            _value := (DWORD) dValue

		/// <inheritdoc />
        OVERRIDE METHOD GetHashCode() AS INT
            RETURN _value:GetHashCode()
            
       /// <exclude />
	    METHOD GetTypeCode() AS TypeCode
            RETURN TypeCode.DateTime

       /// <inheritdoc />
	    OVERRIDE METHOD ToString() AS STRING
            RETURN @@Value:ToString()

            
            #region Unary Operators
            #endregion
            
        #region Binary Operators
            /// <include file="RTComments.xml" path="Comments/Operator/*" />
        OPERATOR == (lhs AS __WinDate, rhs AS __WinDate) AS LOGIC
            RETURN lhs:_value == rhs:_value
            
            /// <include file="RTComments.xml" path="Comments/Operator/*" />
        OPERATOR != (lhs AS __WinDate, rhs AS __WinDate) AS LOGIC
            RETURN lhs:_value != rhs:_value
            
            /// <include file="RTComments.xml" path="Comments/Operator/*" />
        OPERATOR == (lhs AS __WinDate, rhs AS DATE) AS LOGIC
            RETURN lhs:@@Value == rhs
            
            /// <include file="RTComments.xml" path="Comments/Operator/*" />
        OPERATOR != (lhs AS __WinDate, rhs AS DATE) AS LOGIC
            RETURN lhs:@@Value != rhs
            
            /// <include file="RTComments.xml" path="Comments/Operator/*" />
        OPERATOR == (lhs AS DATE, rhs AS __WinDate) AS LOGIC
            RETURN lhs == rhs:@@Value
            
            /// <include file="RTComments.xml" path="Comments/Operator/*" />
        OPERATOR != (lhs AS DATE, rhs AS __WinDate) AS LOGIC
            RETURN lhs != rhs:@@Value
            
            /// <inheritdoc />
         PUBLIC OVERRIDE METHOD Equals(obj AS OBJECT) AS LOGIC
            IF obj IS __WinDate
                RETURN SELF:_value == ((__WinDate) obj):_value
            ENDIF
            RETURN FALSE
            #endregion 
            
        #region Implicit Converters
            /// <include file="RTComments.xml" path="Comments/Operator/*" />
        STATIC OPERATOR IMPLICIT(wd AS __WinDate) AS DATE
            RETURN wd:@@Value
            
            /// <include file="RTComments.xml" path="Comments/Operator/*" />
        STATIC OPERATOR IMPLICIT(u AS USUAL) AS __WinDate
            RETURN __WinDate{(DATE) u}
            
            /// <include file="RTComments.xml" path="Comments/Operator/*" />
        STATIC OPERATOR IMPLICIT(d AS DATE) AS __WinDate
            RETURN __WinDate{d}
            
            /// <include file="RTComments.xml" path="Comments/Operator/*" />
        STATIC OPERATOR IMPLICIT(wd AS __WinDate) AS USUAL
            RETURN wd:@@Value
            
            #endregion
  
        #region ISerializable
        /// <inheritdoc/>
        PUBLIC METHOD GetObjectData(info AS SerializationInfo, context AS StreamingContext) AS VOID
            IF info == NULL
                THROW System.ArgumentException{"info"}
            ENDIF
            info:AddValue("Value", _value)
            RETURN
            
        /// <include file="RTComments.xml" path="Comments/SerializeConstructor/*" />
        CONSTRUCTOR (info AS SerializationInfo, context AS StreamingContext)
            IF info == NULL
                THROW System.ArgumentException{"info"}
            ENDIF
            _value := info:GetUInt32("Value")
            #endregion
            
    END	STRUCT
END NAMESPACE
