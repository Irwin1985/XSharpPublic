/* ************************************************************************
 *  Filename: \Cavo27\KERNEL\VO32LexerPARSER\LSParser.g
 *  Author:   Don Caton, adapted for VO32 by Robert van der Hulst
 *  Purpose:  VO32 Language Service Parser Grammar
 *
 *  Copyright (c) 2005 Grafx Database Systems, Inc.
 *
 * $Revision: $
 *  $History: $
 *
 **************************************************************************/

header "pre_include_hpp"
{
#include "..\\stdafx.h"
#pragma warning( disable: 4511)
#ifdef _DEBUG
#define DEBOUT(cMsg)   OutputDebugString((cMsg))
#else
#define DEBOUT(cMsg)   (cMsg)
#endif

}

header "pre_include_cpp"
{
#include "stdafx.h"
#pragma warning( disable: 4127 4101 4511)


}

options 
{
   language     = "Cpp"; 
   genHashLines = true;    // generate #line's
}

class LSParser extends Parser;

options
{
   k            = 3;      //Note: don't set lower than 3 or attribute rules won't work
   buildAST     = false;
   importVocab  = LSLexer;
   defaultErrorHandler=true;
}


{
public:

   void init( void )
   {
      _init();
      m_addVars = false;
      defScope  = varscopeInvalid;
      defLoc	= varlocInvalid;
   }
   
   void initVars( vector<_Variable> * vars) 
   {
      init();
      m_vars	= vars;
      m_addVars = true;
   }

   
private:

   void _init( void )
   {
      getInputState()->reset();
   }


   void reportError( const antlr::RecognitionException & ex )
   {
#ifdef _DEBUG
   
        CHAR achBuffer[4096];
         wsprintf(achBuffer, "Parser Exception at %d, %d: %s", 
             ex.getLine(), ex.getColumn(), ex.getMessage().c_str() );
         DEBOUT( achBuffer );
#else
		ex;         
#endif
   }


   void addVariable( string var, string type, varScope scope, varLoc loc, bool dim, string dims)
   {
      if (m_addVars )
      {
		if (scope == varscopeInvalid)
			scope = defScope;
		if (fStatic && scope == varscopeLocal)
			scope = varscopeStatic;
			
		m_tmpvars.push_back( _Variable( var, type , scope, loc, dim, dims) );
	  }
   }
   
   void addVariable( string var, string type, varScope scope, varLoc loc)
   {
      if (m_addVars )
      {
		if (scope == varscopeInvalid)
			scope = defScope;
		m_tmpvars.push_back( _Variable( var, type , scope, loc) );
	  }
   }

   void copyVariables()
   {
	  if (m_addVars )
	  {
		size_t  ui, uiLen;
		uiLen = m_tmpvars.size();
		for (ui = 0; ui < uiLen; ui++)
		{
			_Variable& var = m_tmpvars[ui];
			if (var.vartype.length() == 0)
			{
				var.vartype = defStrtype  ;
			}
			if (var.scope == varscopeInvalid)									 
				var.scope = defScope;
				
			if (var.loc == varlocInvalid)
				var.loc = defLoc;

			m_vars->push_back( var );
		}
		m_tmpvars.clear();
	 }
   }


   vector<_Variable> *  m_vars;
   vector<_Variable>    m_tmpvars;
   string				defStrtype;
   varScope				defScope;
   varLoc				defLoc;
   bool					m_addVars;
   bool					fStatic;
}

///////////////////////////////////////////////////////////////////////////
// Parser entry point
///////////////////////////////////////////////////////////////////////////


// "end-of-statement" - matches 1 or more CRLFs or EOF (if last stmt in file doesn't have a CRLF after it)
      
eos 
   : e:EOS ( options { greedy = true; }: EOS! )*  // always return a single EOS and eat the rest
;

       
///////////////////////////////////////////////////////////////////////////       
// Entities
///////////////////////////////////////////////////////////////////////////

entity
	: define
	| sdefine
	| global
	| sglobal
	| structure
	| sstructure
	| union_
	| sunion
	| function
	| dllfunc
	| sfunction
	| procedure
	| sprocedure
	| dllproc
| class_
	| (( STATIC )? ( v:visibility )? methtype )=> clsmethod
   ;
  
     
// [STATIC] GLOBAL <idVar> [:= <uValue>] [AS | IS <idType>]
// [STATIC] GLOBAL DIM <ArraySpec> AS | IS <idType>
// [STATIC] GLOBAL <ArraySpec> [AS ARRAY]

// GLOBAL shares the same rules with CLASS fields since the syntax is
// the same.  The only difference is that the individual GLOBAL
// statments aren't collected under a common root, since a GLOBAL
// statment can appear anywhere in the source code.

global
   : GLOBAL^ {defScope=varscopeGlobal;} 
     instance_sub
   ;  
   
sglobal
   : STATIC! global
   ;
           
// [STATIC] STRUCTURE <idStructure> 
// MEMBER <idVarList> AS | IS <idType> [, ...] 
// MEMBER DIM <ArraySpec> [, ...] AS | IS <idType> [, ...] 
           
structure
   : s:STRUCTURE i:ID ( ALIGN INT_CONST )? eos members
   ;           
sstructure
   : STATIC! structure
   ;
           
// [STATIC] UNION <idUnion>
// MEMBER <idVarList> AS | IS <idType> [ ,…]
// MEMBER DIM <ArraySpec> [ ,…] AS | IS <idType> [ ,…]
          
union_
   : u:UNION i:ID eos members
   ;
           
sunion
   : STATIC! union_
   ;

// Note: the syntactic predicates in the members rule are necessary to work
// around a limitation in Antlr 2's linear approximate lookahead that 
// incorrectly enters the member or memberDim rule when something
// with an attribute follows a structure.  This example will parse
// incorrectly without the predicates.  Maybe in Antlr 3 these 
// predicates can be removed.
//
// STRUCTURE struct1
//    MEMBER     i           AS INT
//    MEMBER DIM ints[5,2]   AS INT
//    MEMBER DIM strings[10] AS STRING
//
// [Test] ;
// METHOD StructTest1() AS VOID CLASS StructTests
//
// The parser fails on the line beginning with [Test] because the parser
// incorrectly enters the member rule when it really should exit the
// members rule following the third structure member
           
members 
{
   string str;
}  

   :  ( options { greedy = true; } : MEMBER 
       ( i1:ID | ( d:DIM i2:ID LBRKT arraysub RBRKT ) )
       ( as:AS | is:IS )
       str = datatype_str
       eos
		{
			bool	dim = FALSE;
			string	id = "";
			varLoc loc;
			if (as)
				loc = varlocAs;
			else
				loc = varlocIs;
			
			if (i1)
			{
				id = i1->getText();
			}
			if (d)
			{
				dim = TRUE;
				id = i2->getText();
			}
				
				
			addVariable( id, str, varscopeMember, loc, dim, "");

		}   
     )+
   {
		copyVariables();
   }
   ;

            
            
// DEFINE           
           
define
   : DEFINE! ID^ ASSIGN_OP! expression ( AS! datatype )? eos!
   ;
          
sdefine
   : STATIC! define
   ;

// FUNCTION
          
function
   : f:FUNCTION 
     ID 
     formalargs 
     ( AS datatype )? 
     ( c:calltype )? 
     ( EXPORT LOCAL )? 
     ( DLLEXPORT STRING_CONST )? 
     eos
     localstmts
     statements
	;
           
sfunction
   : STATIC function
   ;


// PROCEDURE generates FUNCTION node - only difference is that procedures always have return type of VOID
procedure
   : p:PROCEDURE 
     ID 
     formalargs
     ( AS VOID_ )? 
     ( calltype )? 
     ( EXPORT LOCAL )? 
     ( INIT1 | INIT2 | INIT3 )?
     ( DLLEXPORT STRING_CONST )? 
     eos 
     localstmts 
     statements
	;
           
sprocedure
   : STATIC procedure
   ;
         
         
formalargs 
{
   defStrtype = "USUAL";
}
   : ( LPAREN (  formalarg ( COMMA formalarg  )* )? RPAREN ) { copyVariables(); }
   | ()
   ;
           
formalarg 
{
	string dt;
}
   : 
   ( i1:ID ( ASSIGN_OP e:expression )? ( as:AS | is:IS ) dt=datatype_str
   | i2:ID ref:REF dt=datatype_str
   | i3:ID { dt = "USUAL"; }
   | DOT DOT DOT { dt = "..."; }
   )
{
	string id	= "...";
	varLoc loc	= varlocAs;
	
	if (i1)
	{
		id = i1->getText();
		if (is)
			loc = varlocIs;
	}	
	else if (i2)
	{
		id = i2->getText();
		loc = varlocRef;
	}
	else if (i3)
	{
		id = i3->getText();
		loc = varlocAs;
	}
	addVariable( id, dt, varscopeArgument, loc);
}   ;
            
dllfunc
   : DLL f:FUNCTION i:ID 
     formalargs 
     ( AS datatype )? 
     ( c:calltype )? 
     ( EXPORT LOCAL )? 
     COLON ID ( NEQ ord:INT_CONST )? ( ID )? eos
{
   
};

dllproc
   : DLL p:PROCEDURE  i1:ID 
     formalargs 
     ( AS VOID_ )? 
     ( c:calltype )? 
     ( EXPORT LOCAL )? 
     ( INIT1 | INIT2 | INIT3 )?
     COLON ID ( NEQ ord:INT_CONST )? ( ID )? eos
;



             
// [PUBIC | PRIVATE] CLASS <idClass> [INHERIT <idClass>] 
//  [INSTANCE <idVar> [:= <uValue>] [, ...]
//    [AS <idType>] [, ...]]
//  [HIDDEN [INSTANCE] <idVar> [:= <uValue>] [, ...]
//    [AS <idType>] [, ...]]
//  [EXPORT [INSTANCE] <idVar> [:= <uValue>] [, ...]
//    [AS <idType>] [, ...]]
//  [PROTECT [INSTANCE] <idVar> [:= <uValue>] [, ...]
//    [AS <idType>] [, ...]]

class_
{
   antlr::RefToken start = LT(1);
}  
   : CLASS 
     ID 
     ( INHERIT ID )?  
     eos
     classvars
;
              
 
  
classvars 
   : ( options { warnWhenFollowAmbig = false; } : ( classvarType )=> classvar 
       | methdecls
     )*
   ;

classvar 
   : 
     classvarType
     instance_sub
   ;

classvarType
   : INSTANCE{defScope=varscopeInstance;} 
   | ( ( HIDDEN {defScope=varscopeHidden;}| 
		 PROTECT {defScope=varscopeProtect;}|
		 EXPORT {defScope=varscopeExport;})
		( INSTANCE )? )
   ;  
              
// one or more class var declarations of the same type within a single
// instance statement, anchored by a DATATYPE node
instance_sub 
{
   defStrtype = "USUAL";
}
   : class_var ( COMMA class_var )* defStrtype = vartype_str eos
{
	copyVariables();
}  ;
             
// a single class var declaration with an optional initializer expression             
class_var 
   : ( d: DIM )? 
     i:ID 
     ( LBRKT arraysub RBRKT )? 
     ( ASSIGN_OP expression )?
{
	bool dim = FALSE;
	string dims = "";
	if (d)
		dim = TRUE; 

	addVariable(i->getText(),"",varscopeInvalid, varlocInvalid , dim, dims);
}
   ;



methdecls 
   : DECLARE ( ACCESS | ASSIGN | METHOD ) ID ( COMMA! ID )* eos
   ;
           
// [HIDDEN | PROTECT] METHOD <idMethod> [([<idParamList>])] [AS <type>] CLASS <idClass> [EXPORT LOCAL]
//  [EXPORT LOCAL]
//  [<Declarations>]
//  [<MethodBody>]

visibility
   : HIDDEN | PROTECT 
   ;
   
methtype
   : METHOD | ACCESS | ASSIGN
   ;

clsmethod
{
   string args;
   antlr::RefToken start = LT(1);
   int type;
}
   : ( visibility )?
     { type = LA(1); } methtype
     i:ID 
     formalargs 
     ( AS datatype )? ( calltype )? 
     CLASS i2:ID 
     ( EXPORT LOCAL )? 
     ( DLLEXPORT STRING_CONST) ?
     eos
     localstmts
     statements
;


// these rules handle local statements in a function, method, etc.

// the whole list of local statements, anchored by a LOCALS node
localstmts
   : ( options { greedy = true; }: localstmt )*
   ;
             
// a single LOCAL, STATIC LOCAL , FIELD, MEMVAR, PRIVATE, PARAMETERS or PUBLIC statement             

// [STATIC] LOCAL <idVar> [:= <uValue>] [,...] [AS | IS <idType>] [, ...]
// [STATIC] LOCAL DIM <ArraySpec> [, ...] AS | IS <idType> [, ...]
// [STATIC] LOCAL <ArraySpec> [, ...] [AS ARRAY] [, ...]
// PRIVATE <idVar> [,...] 
// PUBLIC  <idVar> [,...] 
// MEMVAR  <idVar> [,...] 
// FIELD   <idVar> (IN <idArea> [,...] 
// PARAMETERS <idVar> [,...] 

// <ArraySpec> = <idVar><subscript>


localstmt
   : LOCAL!				 {fStatic = false;} localvars_str ( COMMA! localvars_str  )* eos! 
   | STATIC! ( LOCAL! )?  {fStatic = true;} localvars_str ( COMMA! localvars_str  )* eos! 
   | FIELD!			field_stmt
   | MEMVAR!		memvar_stmt
   | PRIVATE!		memvar_stmt
   | PARAMETERS!	param_stmt
   | PUBLIC!		public_stmt
   ;

            
localvars_str
{
	defStrtype = "USUAL";
}
   : local_var_str ( options { greedy = true; } : c:COMMA! local_var_str )* defStrtype=vartype_str!
{
	copyVariables();
}
   ;

   
local_var_str 
   : ( d:DIM )? i:ID ( LBRKT arraysub RBRKT )? ( a:ASSIGN_OP e:expression )?
{
	bool dim = FALSE;
	string dims = "";
	if (d)
		dim = TRUE;
		
	addVariable( i->getText(), "", varscopeLocal, varlocInvalid, dim, dims);
}   ;
   
             
// the AS or IS clause, defaults to USUAL if not specified
// note: ignoring the difference between AS and IS for now             
   
vartype_str returns [string ret]
   :  ( as:AS! | is:IS! ) ret=datatype_str
   { if (as)
		defLoc = varlocAs;
	 else
		defLoc = varlocIs;
   }
   |! ()
   ;

// a single field declaration in a FIELD statement 
// if IN <alias> clause is present, text of FIELD node contains alias name
field_stmt
   : field_decl ( COMMA! field_decl )* ( IN_! a:ID! )? eos!
   ;
   
field_decl
	: i:ID
{
	addVariable( i->getText(), "USUAL", varscopeField, varlocAs);
}   ;
   

// a memvar name or a list of memvars

memvar_stmt
   : memvar_decl ( COMMA! memvar_decl)* eos!
   ;

memvar_decl
	: i:ID
{
	addVariable( i->getText(), "USUAL", varscopeMemvar, varlocAs);
}   ;
	
// a parameters list

param_stmt
   : param_decl ( COMMA! param_decl)* eos!
   ;

param_decl
	: i:ID
{
	addVariable( i->getText(), "USUAL", varscopeArgument, varlocAs);
}   ;



public_stmt
   : public_decl ( COMMA! public_decl )* eos!
   ;

public_decl
	: i:ID
{
	addVariable( i->getText(), "USUAL", varscopePublic, varlocAs);
}   ;

        
// calling convention clause for FUNCTION, PROCEDURE and _DLL stmts
calltype
   : CLIPPER | STRICT_ | PASCAL_ | CALLBACK_ | WINCALL | THISCALL | ASPEN
   ;

///////////////////////////////////////////////////////////////////////////
// Statements
///////////////////////////////////////////////////////////////////////////


statements 
   : ( casestmt 
     | whilestmt 
     | forstmt
     | ifstmt 
     | retstmt 
     | seqstmt 
     | breakstmt 
     | exitstmt 
     | loopstmt 
     | qoutstmt
     | waitstmt
     | exprstmt 
     )*
   ;



//DO CASE
//CASE <lCondition>
//  <Statements>...
//[CASE <lCondition>]
//  <Statements>...
//[OTHERWISE]
//  <Statements>...
//END[CASE]

casestmt 
	: DO CASE eos
     ( onecase )+
     ( defcase )? 
     ( ( END! ( CASE! )? ) | ENDCASE! ) eos
	;
          
onecase
	: CASE expression eos statements
	;
   
defcase
	: OTHERWISE eos statements
	;


//[DO] WHILE <lCondition>
//  <Statements>...
//[EXIT]
//  <Statements>...
//[LOOP]
//  <Statements>...
//END[DO]

whilestmt
   : ( DO )? WHILE expression eos statements enddo eos
   ;
         
enddo
   : e:END ( d:DO! )?
   | ENDDO
   ;

//FOR <idCounter> := <nStart> TO | UPTO | DOWNTO <nEnd>
//[STEP <nDelta>]
//<Statements>...
//[EXIT]
//<Statements>...
//[LOOP]
//NEXT

forstmt 
  : FOR postfixExpression ASSIGN_OP expression stepdir expression ( STEP expression )? eos
    statements
    NEXT eos
;

stepdir
   : ( TO | UPTO | DOWNTO )
   ;
                    
//IF <lCondition>
//	<Statements>...
//[ELSEIF <lCondition>]
//	<Statements>...
//[ELSE]
//	<Statements>...
//END[IF]

ifstmt 
	: i:IF expression eos
     statements 
     ( elseifstmt )*
     ( elsestmt )? 
     ( ( END ( IF )? ) | ENDIF ) eos
	;
          
elseifstmt
	: ( options {greedy=true;} : ELSEIF expression eos statements )
	;
          
elsestmt
	: ( options {greedy=true;} : ELSE eos statements )
	;
	            
exitstmt  
   : EXIT eos
   ;
   
loopstmt  
   : LOOP eos
   ;
   
retstmt 
   : RETURN^ ( { LA(1) == VOID_ }? VOID_! | expression )? eos
   ;

qoutstmt 
   : QOUT! ( expression ( COMMA! expression )* )? eos
   | QQOUT! expression ( COMMA! expression )* eos
   | QQOUT eos
   ;
   
waitstmt 
   : WAIT ( expression )? ( TO ID )? eos
   ;


//BEGIN SEQUENCE
//  <Statements>...
//   BREAK [<uValue>]           // note: BREAK can occur anywhere, not just between a BEGIN SEQUENCE...END (ie in a nested function call)
//   RECOVER [USING <idvar>]
//  <Statements>...
//   END [SEQUENCE]

seqstmt 
  : BEGIN SEQUENCE eos
    statements 
    ( recover_ )? 
    END ( SEQUENCE )? eos
	;
          
recover_
	: RECOVER ( USING ID )? eos statements
{
   
};          
   
breakstmt 
   : BREAK ( expression )? eos
{
};

exprstmt 
   : e:expression ( COMMA! expression )* x:eos!
{


};

////////////////////////////////////////////////////////////////////////////
// Expressions

expression
   : assignmentExpression
   ;

// comma separated expression list
expressionList
   : expression ( COMMA! expression )* 
   ;

// comma separated expression list that allows missing expressions to
// default to NIL, raises warning if last expr is missing
//
// predicate prevents '{ }' from being treated as '{ NIL }' but 
// allows '{ , }' to be treated as '{ NIL, NIL }' (for VO32 compatibility)
expressionListNIL
   : ( ( expression | COMMA )=> exprOrNIL ( exprOrNIL2 )*
     | ()
     )
   ;

exprOrNIL
   : expression
   |! ()
   ;
                 
exprOrNIL2!
   : c:COMMA 
   ( e:expression
   | ()
   )
   ;
// this matches any expression other than an assignement   
noAssignExpression
   : bitwiseOrExpression;   

// The operators in VO have the following precedence level:
//    lowest (13)  assignment           := *= /= %= ^= += -= <<= >>=
//           (12)  logical or           .OR.
//           (11)  logical and          .AND.
//           (10)  logical negation     .NOT. !
//           ( 9)  bitwise or           | 
//           ( 8)  bitwise xor          ~
//           ( 7)  bitwise and          &
//           ( 6)  relational           < <= > >= = == <> # != $
//           ( 5)  shift                << >>
//           ( 4)  additive             + -
//           ( 3)  multiplicative       * / %
//           ( 2)  exponentation        ^ **
//           ( 1)  unary                + - ++ -- ~

// Expression rules are ordered from the lowest precedence to highest

// The assignment operators are right-associative and must be evaluated from right to left, e.g.
//   x := y := z
//   x += y += z
// rather than the normal left to right evaluation for other operators.
// Therefore the optional clauses in this rule is recursive, rather than calling
// the next highest rule. This creates the AST in the proper order for right to left evaluation.

assignOperators
   : ASSIGN_OP | ASSIGN_ADD | ASSIGN_SUB | ASSIGN_EXP | ASSIGN_MUL | ASSIGN_DIV | ASSIGN_MOD | ASSIGN_LSHIFT | ASSIGN_RSHIFT | ASSIGN_BITAND | ASSIGN_BITOR | ASSIGN_XOR 
   ;
// assignment expression (level 13)
assignmentExpression!
   : l:booleanOrExpression ( a:assignOperators r:assignmentExpression )?
{
};

// logical OR expression (level 12)
booleanOrExpression
   : l:booleanAndExpression ( OR^ r:booleanOrExpression )?
{
}; 

// logical AND expression (level 11)
booleanAndExpression
   : l:booleanNegationExpression ( AND^ r:booleanAndExpression )?
{
}; 

// logical negation expression (level 10)
booleanNegationExpression
   : ( o:NOT^ r:booleanNegationExpression )
   | bitwiseOrExpression
{
}; 

// bitwise OR expression (level 9)
bitwiseOrExpression
   : l:bitwiseXorExpression ( PIPE^ r:bitwiseOrExpression )?
{
}; 

// bitwise XOR expression (level 8)
bitwiseXorExpression
   : l:bitwiseAndExpression ( TILDE^ r:bitwiseXorExpression )?
{
}; 

// bitwise AND expression (level 7)
bitwiseAndExpression
   : l:relationalExpression ( AMP^ r:bitwiseAndExpression )?
{
}; 

// relational expression (level 6)
relationalExpression
   : l:shiftExpression ( ( LESSTHAN^ | LTE^ | GT^ | GTE^ | EQ^ | EEQ^ | NEQ^ | SUBSTR^ ) r:relationalExpression )? 
{
};
   
// shift expression (level 5)
shiftExpression
   : l:additiveExpression ( ( LSHIFT^ | RSHIFT^ ) r:additiveExpression )*
   ;

// additive expression (level 4)
additiveExpression
   : l:multiplicativeExpression ( ( PLUS^ | MINUS^ ) r:multiplicativeExpression )* 
{
}; 

// multiplicative expression (level 3)
multiplicativeExpression
   : l:exponentationExpression ( ( MULT^ | DIV^ | MOD^ ) r:exponentationExpression )* 
{
}; 

// exponent expression (level 2)
exponentationExpression
   : l:unaryExpression ( EXP^ r:unaryExpression )* 
{
}; 

// unary expression (level 1)
unaryExpression
	: (! ( i:INC | d:DEC ) r:unaryExpression
     |  PLUS^ unaryExpression
     |  MINUS^ unaryExpression
     | ADDROF^ unaryExpression
     | unaryPostfixExpression
     )
{
};

unaryPostfixExpression!
   : l:postfixExpression ( ( i:INC | d:DEC ) )?
   ;

// postfix expressions (array subscripts, method calls, postfix inc/dec, etc.)
postfixExpression
   : e:primaryExpression
   ( options { greedy = true; } : 
     { LA(2) == ID && LA(3) == LPAREN }? COLON^ m:methodcall
   | COLON^ i:identifier
   | LBRKT^ arraysub RBRKT!
   )*

   ;

arraysub
   : expression 
   ( { LA(1) == RBRKT && LA(2) == LBRKT }? 
      ( options { greedy=true; } : RBRKT! LBRKT! expression )+                
      | ( COMMA! expression )+
   )?
   ;   


primaryExpression
   : constantValue                             // literals
   | SELF                                      // 'self'
   | SUPER                                     // 'super'
   | codeblock                                 // {| [id [, id...] | expr [, expr...] }
   | literalArray                              // { expr [, expr] }
   | { LA(3) == CASTARG }? cast                // nativetype( "_cast", expr )
   | methodcall                                // id( expr [, expr ...] )
   | voconvert                                 // nativetype( expr )
   | iif                                       // iif( expr, expr, expr )
   | macroexpr                                 // &( expr )
   | macrovar                                  // &id
   | typeofOp                                  // typeof( type )
   | sizeofOp                                  // sizeof( type )
   | ( datatype LCURLY )=> classInit           // id{ [expr [, expr...] }            //17
   | identifier                                // generic identifier
   | typeName                                  // ARRAY, CODEBLOCK, etc.
   | { LA(4) == LPAREN }? aliasedFunctionCall  // foo->bar()
   | aliasedField                              // foo->bar
   | aliasedExpr                               // foo->( expr )
   | { LA(4) == ALIAS }?( LPAREN expression RPAREN ALIAS )=> extendedAliasExpr // (foo)-> ...
   | parenExpression                           // ( expr )
   ;
                          
constantValue
   : TRUE_CONST
   | FALSE_CONST
   | STRING_CONST
   | CHAR_CONST
   | HEX_CONST 
   | BIN_CONST 
   | REAL_CONST 
   | INT_CONST 
   | DATE_CONST
   | NIL
   | NULLARR 
   | NULLCB  
   | nullDate
   | NULLOBJ 
   | NULLPSZ 
   | NULLPTR 
   | NULLSTR 
   | nullSymbol
   | NULL_   
   | symbol
   | ENTITY
   | LINE
   | MODULE
   | FILENAME
   | TIME
   | VERSION
   | DEBUG_
   | SYSDIR
   | WINDIR
   | WINDRIVE
   | CAVODIR			  
   | CAVOBINDIR		  
   | CAVOSAMPLESROOTDIR 
   | EXECUTABLEDIR	  
   | AEFDIR			  
   | MEFDIR			  
   | PRGDIR			  
   | APPWIZDIR		  
   | MDFFILENAME		  
   | APPLICATION		  
   | PROJECT			  
   | OS				  
   | ENTITYSYM    
   | RESOURCEDIR      
   ;
                       
typeName
   : (
        ( ARRAY    
        | BYTE_    
        | CODEBLOCK
        | DATE     
        | DWORD_   
        | FLOAT    
        | SHORTINT 
        | INT      
        | LOGIC    
        | OBJECT   
        | PSZ_     
        | PTR      
        | REAL4    
        | REAL8    
        | STRING   
        | SYMBOL   
        | USUAL    
        | WORD_    
        | VOID_    
        )
     )   
   ;

nullDate!
   : d:NULLDATE
   ;
           
methodcall!
   : { LA(1) == ID && LA(2) == LPAREN && LA(3) == RPAREN }? i2:ID LPAREN! r2:RPAREN!  
   | ID LPAREN! e:actualArgs r1:RPAREN! 
   ;

actualArgs
   : actualArg ( COMMA! actualArg )*
   ;
                 
actualArg
   : expression
   |! ()
   ;
   
classInit!
   : dt:datatype LCURLY ( options { greedy = true; } : e:expressionListNIL )? RCURLY
   ;

symbol
   : s:SYMBOL_CONST
   ;
   
nullSymbol
   : NULLSYM
   ;


identifier
   : i:ID        // generic id
   ;
                 
codeblock!
   : lc:LCURLY 
     ( ( PIPE a:cbformalargs PIPE ) | o:OR ) // OR is "||"
     ( options { greedy = true; } : e:expressionListNIL )? 
     RCURLY
   ;
                 
cbformalargs
   : cbformalarg ( COMMA! cbformalarg )*
   ;

cbformalarg !
   : i:ID
{
};   
literalArray!
   : l:LCURLY ( options { greedy = true; } : e:expressionListNIL )? r:RCURLY
   ;

parenExpression
   : lp:LPAREN! expression rp:RPAREN!
{
};   
cast!
   : t:datatype LPAREN CAST COMMA e:expression rp:RPAREN 
   ;
   
voconvert!
   : t:nativetype LPAREN e:expression rp:RPAREN
{
   
};
   
iif
   : IIF^ LPAREN! e:expression COMMA! t:expression COMMA! f:expression RPAREN!
   ;

   
macroexpr
   : AMP^ LPAREN! expression RPAREN!
   ;
   
macrovar
   : AMP^ i:ID
   ;
               
typeofOp
   : TYPEOF^ LPAREN! datatype RPAREN!     
   ;
   
sizeofOp!
   : s:SIZEOF LPAREN dt:datatype RPAREN
   ;
   


aliasedField
   : i1:ID ALIAS^ i2:ID
{
};
aliasedFunctionCall
   : id:ID! a:ALIAS^ m:methodcall
{
};
aliasedExpr
   : id:ID! a:ALIAS^ LPAREN! expression rp:RPAREN!
{
};
extendedAliasExpr
   : lp:LPAREN! expression RPAREN! a:ALIAS^
     ( i:ID                               
     | LPAREN! expression rp:RPAREN!      
     | m:methodcall                       
     )
   ;
   
///////////////////////////////////////////////////////////////////////////              
// Data types
///////////////////////////////////////////////////////////////////////////

datatype
   : ( ( nativetype | ( ID  ) )
     ( options { greedy = true; }: PTR!  )?
     )
	;
	
nativetype
   :
   ( ARRAY		
   | BYTE_		
   | CODEBLOCK	
   | DATE		
   | DWORD_		
   | FLOAT		
   | SHORTINT	
   | INT		
   | LOGIC		
   | OBJECT		
   | PSZ_		
   | PTR		
   | REAL4		
   | REAL8		
   | STRING		
   | SYMBOL		
   | USUAL		
   | WORD_		
   | VOID_		
   )
   ;

nativetype_str returns [string ret]
   :
{
   ret = LT( 1 )->getText();
}
   ( ARRAY    
   | BYTE_    
   | CODEBLOCK
   | DATE     
   | DWORD_   
   | FLOAT    
   | SHORTINT 
   | INT      
   | LOGIC    
   | OBJECT   
   | PSZ_     
   | PTR      
   | REAL4    
   | REAL8    
   | STRING   
   | SYMBOL   
   | USUAL    
   | WORD_    
   | VOID_    
   )
   ;

           
// this rule turns a nativetype token or an ID token into a DATATYPE token
// and puts the original token type into the subtype of the returned DATATYPE token
// so we don't have to do string comparisons on the token text to find out the type

// if the PTR keyword follows the type, then an "*" is appended to the token's text

   
datatype_str returns [string ret]
   : ret=typeORid_str
   ;
   
// This rule does the same thing as datatype except it doesn't set the retuned node's type to DATATYPE      
// Note: for array and PTR types, set subtype to ID so built-in types are properly
// resolved (subtype is set in nativeType rule and has to be overridden in case of a ptr or array type)
typeORid
   : ( nativetype | i:ID ) 
     ( PTR )?
     ( LBRKT ( COMMA )* RBRKT )?
   ;
          
typeORid_str returns [string ret]
   : ( ret=nativetype_str | i:ID { ret = i->getText();  } ) 
     ( PTR { ret += " PTR"; } )?
     ( LBRKT { ret += '['; } ( COMMA { ret += ','; } )* RBRKT { ret += ']'; } )?
   ;
          
   


// end
