<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>GLOBAL</title>
  <keywords>
    <keyword>CONST</keyword>
    <keyword>DIM</keyword>
    <keyword>GLOBAL</keyword>
    <keyword>STATIC</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">GLOBAL</para>
    </header>
    <para styleclass="Heading2">Purpose</para>
    <para styleclass="Body Text">Declare a variable or array that is available to the entire application or module.</para>
    <para styleclass="Heading2">Syntax</para>
    <para styleclass="Body Text">[STATIC] GLOBAL &lt;idVar&gt; [:= &lt;uValue&gt;] [AS | IS &lt;idType&gt;]</para>
    <para styleclass="Body Text">[STATIC] GLOBAL DIM &lt;ArraySpec&gt; AS | IS &lt;idType&gt;</para>
    <para styleclass="Body Text">[STATIC] GLOBAL &lt;ArraySpec&gt; [AS ARRAY]</para>
    <para styleclass="Heading2">Arguments</para>
    <para styleclass="List">STATIC<tab />Restricts the visibility of the global variable to the module in which it is declared. If omitted, the variable has application-wide visibility.</para>
    <para styleclass="List">&lt;idVar&gt;<tab />A valid identifier name for the variable. A global variable is an entity and, as such, shares the same name space as other entities. This means that it is not possible to have a global variable and a function, for example, with the same name.</para>
    <para styleclass="List">&lt;uValue&gt;<tab />A constant value that is assigned to &lt;idVar&gt;. This value can be a literal representation of one of the data types listed below or a simple expression involving only operators, literals, and DEFINE constants; however, more complicated expressions (including class instantiation) are not allowed.<br/><text styleclass="Body Text">If &lt;uValue&gt; is not specified, the initial value of the variable depends on the data type you declare (e.g., NIL if you do not use strong typing, 0 for AS INT, etc.)</text></para>
    <para styleclass="List">DIM &lt;ArraySpec&gt;<tab />The specification for a dimensioned array to declare.</para>
    <para styleclass="List">&lt;ArraySpec&gt;<tab />The specification for a dynamic array to declare.<br/><text styleclass="Body Text">In both cases, &lt;ArraySpec&gt; is one of the following:</text><br/><text styleclass="Body Text">&lt;idArray&gt;[&lt;nElements&gt;, &lt;nElements&gt;, &lt;nElements&gt;]</text><br/><text styleclass="Body Text">&lt;idArray&gt;[&lt;nElements&gt;][&lt;nElements&gt;][&lt;nElements&gt;]</text><br/><text styleclass="Body Text">All dimensions except the first are optional.</text><br/><text styleclass="Body Text">&lt;idArray&gt; is a valid identifier name for the array to declare. For dynamic arrays, array elements are initialized to NIL. For dimensioned arrays, the initial value of the elements depends on the data type as explained above for &lt;uValue&gt;.</text><br/><text styleclass="Body Text">&lt;nElements&gt; defines the number of elements in a particular dimension of an array. The number of dimensions is determined by how many &lt;nElements&gt; arguments you specify.</text><br/><text styleclass="Body Text">&lt;nElements&gt; can be a literal numeric representation or a simple numeric expression involving only operators, literals, and DEFINE constants; however, more complicated expressions (such as function calls) are not allowed.</text></para>
    <para styleclass="List"><text styleclass="Body Text">AS &lt;idType&gt;</text><tab /><text styleclass="Body Text">Specifies the data type of the variable you are declaring (called strong typing). For DIM arrays, declares the data type for all array elements.</text></para>
    <para styleclass="List">IS &lt;idType&gt;<tab />Specifies a structure data type in which the memory needed to hold the structure is allocated on the stack (i.e., &lt;idStructure&gt; is the only &lt;idType&gt; allowed with the IS keyword). See the <link displaytype="text" defaultstyle="true" type="topiclink" href="command_VOSTRUCT">VOSTRUCT</link> entry in this guide for more information on data structure memory allocation.</para>
    <para styleclass="List">AS ARRAY<tab />For dynamic array declarations, specifies the data type of the entire array.</para>
    <para styleclass="List"></para>
    <para styleclass="Heading2">Notes</para>
    <para styleclass="Body Text">Search order for variables: You can hide a global variable name from a routine by declaring another variable with the same name (with LOCAL, MEMVAR, or FIELD). </para>
    <para styleclass="Body Text">The search order for a variable name is as follows:</para>
    <para styleclass="Body Text">1.<tab />LOCALs, local parameters, MEMVARs, and FIELDs</para>
    <para styleclass="Body Text">2.<tab />SELF instance variables (i.e., without &lt;idObject&gt;: prefix in class methods)</para>
    <para styleclass="Body Text">3.<tab />GLOBALs and DEFINEs</para>
    <para styleclass="Heading2">Examples</para>
    <para styleclass="Body Text">The following example illustrates using the GLOBAL statement to create a global variable, a global dimensioned array, and a global dynamic array. The dynamic array, since it is declared with STATIC GLOBAL, is visible only in the current module:</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">GLOBAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cAppName := &quot;Accounts Payable&quot; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">GLOBAL</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">DIM</text><text style="font-weight:normal; font-style:normal; color:#000000;"> aiValues[2][10] </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">STATIC</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">GLOBAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> aPoly[100]</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">...</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? &quot;Start of &quot;, cAppName, &quot; application.&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">AFill(aPoly, 0)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">...</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? &quot;End of &quot;, cAppName, &quot; application.&quot;</text></para>
    <para styleclass="Heading2">See Also</para>
    <para styleclass="Body Text"><link displaytype="text" defaultstyle="true" type="topiclink" href="Define">DEFINE</link>, <link displaytype="text" defaultstyle="true" type="topiclink" href="LOCAL">LOCAL</link></para>
    <para styleclass="Body Text"></para>
  </body>
</topic>
