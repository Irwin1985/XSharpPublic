<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>References</title>
  <keywords>
    <keyword>References to External .Net Assemblies</keyword>
    <keyword>References to External COM components</keyword>
    <keyword>References to other Visual Studio projects</keyword>
    <keyword>References to unmanaged code</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">References</para>
    </header>
    <para styleclass="Normal">XSharp projects inside Visual studio work with source code items and may contain references to code defined in external libraries.</para>
    <para styleclass="Normal">Inside Visual Studio you can set these references through the References dialog.</para>
    <para styleclass="Normal">In short there are 3 kinds of references:</para>
    <list id="117" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">External .Net assemblies</li>
      <li styleclass="Normal">External COM components</li>
      <li styleclass="Normal">Other projects inside the same Visual Studio solution.</li>
    </list>
    <para styleclass="Heading2">External .Net Assemblies</para>
    <para styleclass="Normal">These references can be consumed directly by the X# compiler. </para>
    <para styleclass="Heading2">External COM components</para>
    <para styleclass="Normal">These components cannot be consumed directly by the X# compiler. Therefore Visual Studio calls a tool (tlbimp.exe) that reads the typelibrary from the COM component and produces a managed wrapper around this COM object. This wrapper usually has a name that starts with &quot;interop&quot;. In the <link displaytype="text" defaultstyle="true" type="topiclink" href="Example-4-The-Email-Client-Exa">Email example</link> this is the case for the Internet Explorer component for which a Interop.SHDocVw.dll is generated.</para>
    <para styleclass="Normal">If the COM component is an ActiveX then a second assembly will be generated that has code that declares an object that inherits from System.Windows.Forms.AxHost, for the ActiveX control. Visual Stdio calls the tool &quot;aximp.exe&quot; for this. The file names for these wrappers usually start with &quot;axinterop&quot;, such as &quot;AxInterop.SHDocVw.dll&quot;</para>
    <para styleclass="Normal">Some COM components are used a lot and for these components a so called &quot;Primary Interop Assembly&quot; is installed on your machines. For these components no &quot;interop&quot; assemblies will be generated but the primary interop assemblies will be used when compiling. For example for ADO there is a primary interop assembly in the GAC. </para>
    <para styleclass="Heading2">References to other Visual Studio projects</para>
    <para styleclass="Normal">A third type of dependency is between Visual Studio projects. When you add a dependency of this type then Visual Studio (or actually MsBuild) will try to build that project first before building the project that depends on it. Unlike in Visual Objects you do not have to import a prototype library for the output generated by the project. Visual Studio (and our editor integration) will directly consume the output from the other projects.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">If the other project is also a X# Project then our source code editor support code will be able to jump between the declaration of a type and the place where it is used, even if it is in another project. When your X# project depends on project in another languages (such as C#) then we will consume the output of that project like we do with &quot;normal&quot; external .Net assemblies.</para>
    <para styleclass="Heading2">References to unmanaged code</para>
    <para styleclass="Normal">You cannot add references to unmanaged code using the Project References. </para>
    <para styleclass="Normal">To call unmanaged code you will have to declare either functions or procedures with the _DLL prefix, or you declare static methods or functions and add a special [DllImport()] attribute to them. </para>
  </body>
</topic>
