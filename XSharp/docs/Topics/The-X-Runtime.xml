<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>The X# Runtime</title>
  <body>
    <header>
      <para styleclass="Heading1">The X# Runtime</para>
    </header>
    <para styleclass="Heading2"><text style="font-weight:bold;">In X# version 2 - Bandol we have introduced the X# runtime.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">In this chapter we would like to give you an overview of the design decisions that we made, what the runtime looks like, where you can find which types and functions etc.</para>
    <para styleclass="Normal">We will also list here the features that are not supported yet.</para>
    <para styleclass="Heading2">Introduction</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">When we designed the X# compile and X# Runtime we had a few focus points in mind:</para>
    <list id="2" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">The language and runtime should be VO compatible whenever possible. We know that the Vulcan devteam made some decisions not to support certain features from VO, but we decided that we would like to be as compatible as technically possible.</li>
      <li styleclass="Normal">We want our runtime to be fully Unicode and AnyCPU. It should run on any platform and also both in x86 and x64 mode. &#160;That has caused some challenges because VO is Ansi (and not Unicode) and also X86. In VO you can cast a LONG to a PTR. That will not work in X64 mode because a LONG is 32 bits and a PTR 64 bits</li>
      <li styleclass="Normal">We want the code to compile in &quot;Safe&quot; mode. No unsafe code when not strictly needed. The biggest problem / challenge here is the PTR type. With a PTR you can access memory directly and read/write from memory, even if you don&apos;t &quot;own&quot; that memory. However the same PTR type is also used as &quot;unique identifier&quot; for example in the low level file i/o and in the GUI classes for Window and Control handles. These PTR values are never used to read/write memory but are like object references. We have decided to use the .Net IntPtr type for this kind of handles. Of course the compiler can transparently convert between PTR and IntPtr.</li>
      <li styleclass="Normal">We want to prove that the X# language is a first class .Net development language. That is why we decided to write the X# runtime in X#. By doing that we also create a large codebase to test the compiler. So that is a win - win situation.</li>
      <li styleclass="Normal">We want the runtime to be thread safe. Each thread has its own &quot;global&quot; state and its own list of open workareas. When a new thread is started it will inherit the state of the main thread but will not inherit the workareas from the main thread</li>
      <li styleclass="Normal">At this moment the X# Runtime is compiled against .Net Framework 4.0 The only exception to this is the macro compiler which requires .Net Framework 4.6.</li>
    </list>
    <para styleclass="Heading2">Assemblies in the X# Runtime</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">If you want to know in which Assembly a function or type is defined then your &quot;best friend&quot; is the documentation. We are using a tool to generate the documentation, so this is always correct. <br/>Some subsystems have functions XSharp.Core DLL and in XSharp.VO.DLL as well.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="6" colcount="4" style="head-row-background-color:#c0c0c0; alt-row-background-color:#ccffff;">
      <thead style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Component</text></para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Description</text></para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Language / dialect used</text></para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Framework Version</text></para>
        </td>
      </thead>
      <tr style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="XSharp_Core">XSharp.Core.DLL</link></para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal">This is the base DLL of the X# Runtime.</para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal">X# Core</para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal">4.0</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="XSharp_VO">XSharp.VO.DLL</link></para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal">This DLL adds features to the runtime that are needed for the VO dialect.</para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal">X# VO</para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal">4.0</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="XSharp_Macrocompiler">XSharp.Macrocompiler.DLL</link></para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal">This DLL is the X# &quot;full&quot; macro compiler.</para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal">X# Core</para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal">4.6</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="XSharp_RDD">XSharp.RDD.DLL</link></para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal">This will contain the various RDDs implemented for X#. <text style="font-weight:bold; font-style:italic;">It is not included yet.</text></para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal">X# Core</para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal">4.0</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal">VO SDK Class libraries</para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal"><text style="font-weight:bold; font-style:italic;">These are &#160;not included.</text></para>
          <para styleclass="Normal">Beta 2 will include a tool that will read the registration information from your VO installation and will then create a project on your machine to compile the SDK against the X# runtime</para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal">X# VO</para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal">4.0</para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Heading2">Known Issues</para>
    <para styleclass="Normal"></para>
    <list id="3" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Some of the string conversion functions such as Str() and NTrim() do not always return the same string as VO . In VO the return value of these functions heavily depends on state settings such as SetFixed, SetDecimals, SetScience and more. This will be most likely fixed in Beta 2</li>
      <li styleclass="Normal">Some of the TransForm() pictures also depend on the same settings as Str() and NTrim() and have the same problems</li>
      <li styleclass="Normal">The macro compiler in this release is fully functional but not as fast as we&apos;d like. We are working on a smaller and faster macro compiler.</li>
    </list>
    <para styleclass="Heading2">Missing or incomplete Features </para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="5" colcount="3" style="head-row-background-color:#c0c0c0; alt-row-background-color:#ccffff;">
      <thead style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Feature</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Description</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Expected when</text></para>
        </td>
      </thead>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">RDD system</para>
        </td>
        <td>
          <para styleclass="Normal">There are some helper classes, defines etc &#160;already defined in the runtime but the RDD system is not complete. You will NOT find the familiar Db functions and VoDb functions. Also functions like BOF(), EOF(), RecNo() and Found() are not included yet. </para>
        </td>
        <td>
          <para styleclass="Normal">Beta 2 will include the Db.. and VoDb functions and will most likely contain one of more RDDs</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">MemVar support</para>
        </td>
        <td>
          <para styleclass="Normal">There are already some statements in the language (like MEMVAR, PRIVATE etc) but the underlying runtime support and compiler support is not ready</para>
        </td>
        <td>
          <para styleclass="Normal">Beta 3 will most likely contain the MEMVAR support</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Some runtime functions are not supported yet:<br/>Crypt functions (Crypt(), CryptA())<br/>Encoding functions (B64Enc.., UUEnc.., GetChunkBase64 etc)<br/></para>
        </td>
        <td>
          <para styleclass="Normal">These functions will most likely be added in one of the next betas. For now they will throw a notimplementedexception when you use them</para>
        </td>
        <td>
          <para styleclass="Normal">Beta 2 and Beta 3</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Fast Macro compiler</para>
        </td>
        <td>
          <para styleclass="Normal">We are not happy with the speed of the current macro compiler. It is very powerful but compiling a macro simply takes too much time. We are working on a replacement for this. To help increase performance we are caching compiled macros at this moment, so the second time you compile the same macro you will get the same codeblock back as the first time. That helps but is not enough.</para>
        </td>
        <td>
          <para styleclass="Normal">September 2018.</para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2">Description of Various Subsystems</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="4" colcount="2" style="background-color:none; head-row-background-color:#c0c0c0; alt-row-background-color:#ccffff;">
      <thead style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Subsystem</text></para>
        </td>
        <td style="width:938px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Remarks</text></para>
        </td>
      </thead>
      <tr style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Body Text">Low Level File IO</para>
        </td>
        <td style="width:938px;">
          <para styleclass="Normal">These functions are implemented in XSharp.Core. <br/>There is an important difference between the implementation in XSharp.Core when compared to VO.<br/>In VO the file handles returned from functions such as FCreate() and FOpen() are OS file handles. That means that you can also pass them directly to Win32 API Functions. In the X# Runtime that is no longer possible. <br/>We use .Net FileStream objects for the File IO. The File handler returned (which is of the IntPtr type) is a unique key into a table where we are storing these File IO objects. The keys are generated from random numbering. You can&apos;t and shouldn&apos;t rely on the values of these keys. </para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Body Text">Static Memory IO</para>
        </td>
        <td style="width:938px;">
          <para styleclass="Body Text">The static memory subsystem allocates memory using the Marshal.AllocHGlobal functionality. Each memory block has 2 guard blocks that contain information about the group number, size and a magic number. We have also implemented memory groups.<br/>Unlike in VO you cannot release all blocks in a group by simply closing the Memory Group. <br/>If you want to enumerate allocated blocks you should first call MemTrace(TRUE) to enable block tracing.<br/>Then create a function with the following prototype</para>
          <para styleclass="Body Text"><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">FUNCTION MyMemWalker(pMem AS IntPtr, nSize AS DWORD) AS LOGIC</text></para>
          <para styleclass="Body Text">Then call MemWalk and pass your function as parameter. The runtime will call your function and will pass in all memory blocks that have been allocated and not released yet.</para>
          <para styleclass="Body Text"></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Body Text">Late Binding Support</para>
        </td>
        <td style="width:938px;">
          <para styleclass="Body Text">The Runtime fully supports late binding. The late binding support still needs some optimizations.<br/>We recommend to only use this when necessary. New code should either use the DYNAMIC type or try to use early bound code as much as possible.</para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2">Combining the X# Runtime and Vulcan Runtime</para>
    <para styleclass="Normal">Technically it is possible to include both the X# and the Vulcan runtime libraries in your application. When you do so then the compiler will assume that you want to use the X# implementations for the XBase types such as USUAL and DATE. If the compiler does not find the XSharp.Core and XSharp.VO assemblies then it will assume you want to map these types to the Vulcan runtime types.</para>
    <para styleclass="Normal">So you can mix things. However if you want to call code in the Vulcan runtime DLLs you may have to use the fully qualified classnames or typenames.</para>
    <para styleclass="Normal">And remember: there is no automatic translation between the X# types and Vulcan types. </para>
    <para styleclass="Normal">If you want to convert an X# variable to a Vulcan variable you may have to cast it to an intermediate type &#160;first.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Call Vulcans implementation of Left()</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">LOCAL cValue as STRING</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">cValue := VulcanRTFuncs.Functions.Left(&quot;abcdefg&quot;,2)</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">If you want to convert an X# usual to a Vulcan usual, cast to OBJECT</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">LOCAL xUsual as USUAL</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">LOCAL vUsual as Vulcan.__Usual</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">xUsual := 10</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">vUsual := (OBJECT) xUsual</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">For dates you can do something similar. In that case you should cast the X# date to a DateTime.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">LOCAL xDate as DATE</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">LOCAL vDate as Vulcan.__VODate</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">xDate := ToDay() &#160; &#160; &#160; &#160; &#160;</text><tab /><tab /><text style="font-weight:normal; font-style:italic; color:#339966;">// will call the X# implementation of ToDay()</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">vDate := (System.DateTime) xDate</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
