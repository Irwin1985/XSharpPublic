<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>The X# Runtime</title>
  <body>
    <header>
      <para styleclass="Heading1">The X# Runtime</para>
    </header>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text style="font-weight:bold;">In X# version 2 - Bandol we have introduced the X# runtime.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">In this chapter we would like to give you an overview of the design decisions that we made, what the runtime looks like, where you can find which types and functions etc.</para>
    <para styleclass="Normal">We will also list here the features that are not supported yet.</para>
    <para styleclass="Heading2">Introduction</para>
    <para styleclass="Normal">When we designed the X# compile and X# Runtime we had a few focus points in mind:</para>
    <list id="3" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">The language and runtime should be VO compatible whenever possible. We know that the Vulcan devteam made some decisions not to support certain features from VO, but we decided that we would like to be as compatible as technically possible.</li>
      <li styleclass="Normal">We want our runtime to be fully Unicode and AnyCPU. It should run on any platform and also both in x86 and x64 mode. &#160;That has caused some challenges because VO is Ansi (and not Unicode) and also X86. In VO you can cast a LONG to a PTR. That will not work in X64 mode because a LONG is 32 bits and a PTR 64 bits</li>
      <li styleclass="Normal">We want the code to compile in &quot;Safe&quot; mode. No unsafe code when not strictly needed. The biggest problem / challenge here is the PTR type. With a PTR you can access memory directly and read/write from memory, even if you don&apos;t &quot;own&quot; that memory. However the same PTR type is also used as &quot;unique identifier&quot; for example in the low level file i/o and in the GUI classes for Window and Control handles. These PTR values are never used to read/write memory but are like object references. We have decided to use the .Net IntPtr type for this kind of handles. Of course the compiler can transparently convert between PTR and IntPtr.</li>
      <li styleclass="Normal">We want to prove that the X# language is a first class .Net development language. That is why we decided to write the X# runtime in X#. By doing that we also create a large codebase to test the compiler. So that is a win - win situation.</li>
      <li styleclass="Normal">We want the runtime to be thread safe. Each thread has its own &quot;global&quot; state and its own list of open workareas. When a new thread is started it will inherit the state of the main thread but will not inherit the workareas from the main thread</li>
    </list>
    <para styleclass="Heading2">Assemblies in the X# Runtime</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">If you want to know in which Assembly a function or type is defined then your &quot;best friend&quot; is the documentation. We are using a tool to generate the documentation, so this is always correct. <br/>Some subsystems have functions XSharp.Core DLL and in XSharp.VO.DLL as well.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="6" colcount="4" style="head-row-background-color:#c0c0c0; alt-row-background-color:#ccffff;">
      <thead style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Component</text></para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Description</text></para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Language / dialect used</text></para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Framework Version</text></para>
        </td>
      </thead>
      <tr style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="XSharp_Core">XSharp.Core.DLL</link></para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal">This is the base DLL of the X# Runtime.</para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal">X# Core</para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal">4.0</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="XSharp_VO">XSharp.VO.DLL</link></para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal">This DLL adds features to the runtime that are needed for the VO dialect.</para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal">X# VO</para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal">4.0</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="XSharp_Macrocompiler">XSharp.Macrocompiler.DLL</link></para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal">This DLL is the X# &quot;full&quot; macro compiler.</para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal">X# Core</para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal">4.6</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="XSharp_RDD">XSharp.RDD.DLL</link></para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal">This will contain the various RDDs implemented for X#. <text style="font-weight:bold; font-style:italic;">It is not included yet.</text></para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal">X# Core</para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal">4.0</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:251px;">
          <para styleclass="Normal">VO SDK Class libraries</para>
        </td>
        <td style="width:618px;">
          <para styleclass="Normal"><text style="font-weight:bold; font-style:italic;">These are &#160;not included.</text></para>
          <para styleclass="Normal">Beta 2 will include a tool that will read the registration information from your VO installation and will then create a project on your machine to compile the SDK against the X# runtime</para>
        </td>
        <td style="width:271px;">
          <para styleclass="Normal">X# VO</para>
        </td>
        <td style="width:154px;">
          <para styleclass="Normal">4.0</para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Heading2">Known Issues</para>
    <list id="4" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Some of the string conversion functions such as Str() and NTrim() do not always return the same string as VO . In VO the return value of these functions heavily depends on state settings such as SetFixed, SetDecimals, SetScience and more. This will be most likely fixed in Beta 2</li>
      <li styleclass="Normal">Some of the TransForm() pictures also depend on the same settings as Str() and NTrim() and have the same problems</li>
      <li styleclass="Normal">The macro compiler in this release is fully functional but not as fast as we&apos;d like. We are working on a smaller and faster macro compiler.</li>
    </list>
    <para styleclass="Heading2">Missing Features</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="5" colcount="3" style="head-row-background-color:#c0c0c0; alt-row-background-color:#ccffff;">
      <thead style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Feature</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Description</text></para>
        </td>
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Expected when</text></para>
        </td>
      </thead>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">RDD system</para>
        </td>
        <td>
          <para styleclass="Normal">There are some helper classes, defines etc &#160;already defined in the runtime but the RDD system is not complete. You will NOT find the familiar Db functions and VoDb functions. Also functions like BOF(), EOF(), RecNo() and Found() are not included yet. </para>
        </td>
        <td>
          <para styleclass="Normal">Beta 2 will include the Db.. and VoDb functions and will most likely contain one of more RDDs</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">MemVar support</para>
        </td>
        <td>
          <para styleclass="Normal">There are already some statements in the language (like MEMVAR, PRIVATE etc) but the underlying runtime support and compiler support is not ready</para>
        </td>
        <td>
          <para styleclass="Normal">Beta 3 will most likely contain the MEMVAR support</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Some runtime functions are not supported yet:<br/>Crypt functions (Crypt(), CryptA())<br/>Encoding functions (B64Enc.., UUEnc.., GetChunkBase64 etc)<br/></para>
        </td>
        <td>
          <para styleclass="Normal">These functions will most likely be added in one of the next betas. For now they will throw a notimplementedexception when you use them</para>
        </td>
        <td>
          <para styleclass="Normal">Beta 2 and Beta 3</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Fast Macro compiler</para>
        </td>
        <td>
          <para styleclass="Normal">We are not happy with the speed of the current macro compiler. It is very powerful but compiling a macro simply takes too much time. We are working on a replacement for this. To help increase performance we are caching compiled macros at this moment, so the second time you compile the same macro you will get the same codeblock back as the first time. That helps but is not enough.</para>
        </td>
        <td>
          <para styleclass="Normal">September 2018.</para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2">Description of Various Subsystems</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="9" colcount="2" style="background-color:none; head-row-background-color:#c0c0c0; alt-row-background-color:#ccffff;">
      <thead style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Subsystem</text></para>
        </td>
        <td style="width:938px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Remarks</text></para>
        </td>
      </thead>
      <tr style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Body Text">Low Level File IO</para>
        </td>
        <td style="width:938px;">
          <para styleclass="Normal">These functions are implemented in XSharp.Core. <br/>There is an important difference between the implementation in XSharp.Core when compared to VO.<br/>In VO the file handles returned from functions such as FCreate() and FOpen() are OS file handles. That means that you can also pass them directly to Win32 API Functions. In the X# Runtime that is no longer possible. <br/>We use .Net FileStream objects for the File IO. The File handler returned (which is of the IntPtr type) is a unique key into a table where we are storing these File IO objects. The keys are generated from random numbering. You can&apos;t and shouldn&apos;t rely on the values of these keys. </para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Body Text">Usual Type</para>
        </td>
        <td style="width:938px;">
          <para styleclass="Normal">The USUAL type in X# is implemented as a .Net structure. It basically is a type flag and a value. We support the following types in a USUAL:</para>
          <para styleclass="Normal"><table styleclass="Default" rowcount="16" colcount="2" style="width:100%; background-color:#ffffff; head-row-background-color:#c0c0c0; alt-row-background-color:#ccffff;">
            <thead style="vertical-align:top">
              <td>
                <para styleclass="Normal"><text style="font-weight:bold;">Type</text></para>
              </td>
              <td>
                <para styleclass="Normal"><text style="font-weight:bold;">Usual Type Number</text></para>
              </td>
            </thead>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">NIL</para>
              </td>
              <td>
                <para styleclass="Normal">0</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Long</para>
              </td>
              <td>
                <para styleclass="Normal">1</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Date</para>
              </td>
              <td>
                <para styleclass="Normal">2</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Float</para>
              </td>
              <td>
                <para styleclass="Normal">3</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Array</para>
              </td>
              <td>
                <para styleclass="Normal">5</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Object</para>
              </td>
              <td>
                <para styleclass="Normal">6</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">String</para>
              </td>
              <td>
                <para styleclass="Normal">7</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Logic</para>
              </td>
              <td>
                <para styleclass="Normal">8</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Codeblock</para>
              </td>
              <td>
                <para styleclass="Normal">9</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Symbol</para>
              </td>
              <td>
                <para styleclass="Normal">10</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Psz</para>
              </td>
              <td>
                <para styleclass="Normal">17</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Ptr</para>
              </td>
              <td>
                <para styleclass="Normal">18</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Int64</para>
              </td>
              <td>
                <para styleclass="Normal">22</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">DateTime</para>
              </td>
              <td>
                <para styleclass="Normal">26</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Decimal</para>
              </td>
              <td>
                <para styleclass="Normal">27</para>
              </td>
            </tr>
          </table></para>
          <para styleclass="Normal"></para>
          <para styleclass="Normal">Note that some numbers are not included in this table. There are defines in the compiler for these numbers, but they are never stored in a USUAL.<br/>So you can write UsualType(uValue) == REAL8 but that will NEVER be true.</para>
          <para styleclass="Normal"><br/>You can assign values of these other types to a USUAL but the values will be converted to a type listed in the first table. For example if you assign a DWORD to a USUAL then the runtime will look at the value of the DWORD and if it is smaller or equal to MAX_LONG then it will store the value as a LONG. Otherwise it will store it as a FLOAT. Please note that although we support the Int64 type the DWORD conversion does not use this to be compatible with VO.<br/></para>
          <para styleclass="Normal"><table styleclass="Default" rowcount="11" colcount="2" style="background-color:#ffffff; head-row-background-color:#c0c0c0; alt-row-background-color:#ccffff;">
            <thead style="vertical-align:top">
              <td>
                <para styleclass="Normal"><text style="font-weight:bold;">Name</text></para>
              </td>
              <td>
                <para styleclass="Normal"><text style="font-weight:bold;">Usual Type Number</text></para>
              </td>
            </thead>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Byte</para>
              </td>
              <td>
                <para styleclass="Normal">11</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Short</para>
              </td>
              <td>
                <para styleclass="Normal">12</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Word</para>
              </td>
              <td>
                <para styleclass="Normal">13</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">DWord</para>
              </td>
              <td>
                <para styleclass="Normal">14</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Real4</para>
              </td>
              <td>
                <para styleclass="Normal">15</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Real8</para>
              </td>
              <td>
                <para styleclass="Normal">16</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Usual By Ref</para>
              </td>
              <td>
                <para styleclass="Normal">19</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">UInt64</para>
              </td>
              <td>
                <para styleclass="Normal">23</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Char</para>
              </td>
              <td>
                <para styleclass="Normal">24</para>
              </td>
            </tr>
            <tr style="vertical-align:top">
              <td>
                <para styleclass="Normal">Dynamic</para>
              </td>
              <td>
                <para styleclass="Normal">25</para>
              </td>
            </tr>
          </table></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Body Text">Date Type</para>
        </td>
        <td style="width:938px;">
          <para styleclass="Normal">The Date type is implemented in the XSharp.__VODate structure. This structure uses the DateTime type for calculations and stores the Year, Month and Date in a compact 32 bit value.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Body Text">Float Type</para>
        </td>
        <td style="width:938px;">
          <para styleclass="Body Text">The Float type in X# is implemented in the XSharp.__VOFloat structure. This Float structure contains a Real8 for the value and 2 flags to hold the with and number of decimals. That means that it is not a reference type like the VO Float type. The &quot;penalty&quot; for using a float in X# is not so big when compared to VO. </para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Body Text">Static Memory IO</para>
        </td>
        <td style="width:938px;">
          <para styleclass="Body Text">The static memory functions allocate memory from the DotNet runtime by calling Marshal.AllocHGlobal.</para>
          <para styleclass="Body Text"><text styleclass="Normal">The return type of the functions that returned a PTR in VO is IntPtr. But in this case these IntPtrs represent a real pointer to memory, unlike the IntPtr returned from the low level file io functions. </text></para>
          <para styleclass="Body Text"><text styleclass="Normal">Just like in VO each block of memory has 2 so called &quot;guard blocks&quot;. One block before the pointer that is returned and one block after the end of the block.</text></para>
          <para styleclass="Body Text">These guard blocks are the structures FixedMemBlockStart and FixedMemBlockEnd. These blocks contain information about the size and the memory group this block belongs to as well as &apos;magic numbers&apos; so we can detect accidental writing outside the boundaries of the allocated memory.</para>
          <para styleclass="Body Text"><text styleclass="Normal">The size of the guard blocks is &#160;24 bytes in total per allocated block.</text></para>
          <para styleclass="Body Text"><text styleclass="Normal">When you free a memory block we check to see if the guard blocks are still intact. When they are not, then we do not release the memory but return 65635. This is compatible with VO. We are considering to throw an exception or provide some logging option when this happens. Please let us know what you think about that. </text></para>
          <para styleclass="Body Text"><text styleclass="Normal">The Low level memory functions work both in 32 bits and 64 bits mode. If you use them yourself and your code should also work in both modes we recommend that you are extremely cautious. Casting can have unwanted effects if you are not careful !</text></para>
          <para styleclass="Body Text"><text styleclass="Normal">We have also implemented Memory Groups. These groups do not &quot;control&quot; the pointers allocated for these groups (like in VO where closing a group automatically releases all memory allocated for the group). </text></para>
          <para styleclass="Body Text"><text styleclass="Normal">If you want to trace static memory allocations in the X# runtime then do the following:</text></para>
          <list id="5" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
            <li styleclass="List">Call MemTrace(TRUE) before you start allocating memory</li>
            <li styleclass="List">Create a function or method that implements the MemWalker() delegate:<br/>DELEGATE MemWalker(pMem AS IntPtr, nSize AS DWORD) AS LOGIC</li>
            <li styleclass="List">Call MemWalk() and pass it your function or method</li>
            <li styleclass="List">The runtime will then call your function for every memory block allocated and not freed since you enabled MemTrace(TRUE)</li>
          </list>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Body Text">Late Binding Support</para>
        </td>
        <td style="width:938px;">
          <para styleclass="Body Text">The X# runtime fully supports late binding at this moment. However this code could use some optimizations. These will be added in Beta 2 or Beta 3.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Body Text">PSZ Type</para>
        </td>
        <td style="width:938px;">
          <para styleclass="Body Text">The PSZ Type is supported but should not be used for new code. In .Net there is a much better solution for passing Ansi Zero terminated strings to Win32 API Functions. <br/><text styleclass="Normal">Consider the following function definition from the Win32 API Library in VO:</text><br/><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#000000;">_DLL FUNCTION GetWindowText(hwnd AS PTR, lpString AS PSZ, nMaxCount AS INT) AS INT PASCAL:USER32.GetWindowTextA</text></para>
          <para styleclass="Body Text">This function can be rewritten so you no longer need to convert strings to PSZ:</para>
          <para styleclass="Body Text"><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#000000;">[DllImport(CharSet:=CharSet.Ansi)];</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#000000;">_DLL FUNCTION GetWindowText(hwnd AS PTR, lpString AS STRING, nMaxCount AS INT) AS INT PASCAL:USER32.GetWindowTextA</text></para>
          <para styleclass="Code Example"></para>
          <para styleclass="Body Text">The attribute tells the .Net runtime that the external function in User32 wants an Ansi string. That&apos;s all.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:376px;">
          <para styleclass="Body Text">More to come</para>
        </td>
        <td style="width:938px;">
          <para styleclass="Body Text"></para>
        </td>
      </tr>
    </table></para>
  </body>
</topic>
