//
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
#pragma warning disable RS0016
namespace XSharp.Build
{
    public class WriteCodeFragment : Task
    {
        #region Fields

        internal ITaskItem _outputFile;
        internal string _language;
        internal ITaskItem[] _assemblyAttributes;

        #endregion

        #region Public Properties
        public string Language
        {
            get
            {
                return _language;
            }
            set
            {
                _language = value;
            }
        }

        public ITaskItem[] AssemblyAttributes
        {
            get
            {
                return _assemblyAttributes;
            }
            set
            {
                _assemblyAttributes = value;
            }
        }

        public ITaskItem OutputFile
        {
            get
            {
                return _outputFile;
            }
            set
            {
                _outputFile = value;
            }
        }

        #endregion
        public WriteCodeFragment() : base()
        {
        }

        public override bool Execute()
        {
            if (_outputFile == null)
            {
                base.Log.LogError("Output File must be set");
                return false;
            }
            if (!string.Equals(Language, "X#", StringComparison.OrdinalIgnoreCase) &&
                !string.Equals(Language, "XSharp", StringComparison.OrdinalIgnoreCase))
            {
                base.Log.LogError("Language must be X#");
                return false;
            }
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("// Generated by the XSharp WriteCodeFragment class, version " + XSharp.Constants.FileVersion);
            sb.AppendLine("// Generated at " + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString());
            sb.AppendLine("// </auto-generated>");

            sb.Append(GenerateAttributes());
            var fileName = _outputFile.ItemSpec;
            File.WriteAllText(fileName, sb.ToString());
            return true;
        }

        private string GenerateAttributes()
        {
            var sb = new StringBuilder();
            foreach (var att in _assemblyAttributes)
            {
                var name = att.ItemSpec;
                if (name.EndsWith("Attribute"))
                {
                    name = name.Substring(0, name.Length - "Attribute".Length);
                }
                var value = att.GetMetadata("_Parameter1");
                sb.Append("[Assembly: " + name + "(\"");
                sb.Append(value);
                sb.AppendLine("\")]");
            }
            return sb.ToString();
        }
    }
}
