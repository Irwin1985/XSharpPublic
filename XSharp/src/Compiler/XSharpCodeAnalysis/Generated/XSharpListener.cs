//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Projects\XSharpDev\XSharp\\src\Compiler\XSharpCodeAnalysis\Parser\XSharp.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="XSharpParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public interface IXSharpListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.source"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSource([NotNull] XSharpParser.SourceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.source"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSource([NotNull] XSharpParser.SourceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.entity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntity([NotNull] XSharpParser.EntityContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.entity"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntity([NotNull] XSharpParser.EntityContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction([NotNull] XSharpParser.FunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction([NotNull] XSharpParser.FunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.procedure"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedure([NotNull] XSharpParser.ProcedureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.procedure"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedure([NotNull] XSharpParser.ProcedureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterList([NotNull] XSharpParser.ParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterList([NotNull] XSharpParser.ParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] XSharpParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] XSharpParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.statementBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementBlock([NotNull] XSharpParser.StatementBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.statementBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementBlock([NotNull] XSharpParser.StatementBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStmt([NotNull] XSharpParser.WhileStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStmt([NotNull] XSharpParser.WhileStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>repeatStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepeatStmt([NotNull] XSharpParser.RepeatStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>repeatStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepeatStmt([NotNull] XSharpParser.RepeatStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>forStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStmt([NotNull] XSharpParser.ForStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>forStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStmt([NotNull] XSharpParser.ForStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>foreachStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForeachStmt([NotNull] XSharpParser.ForeachStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>foreachStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForeachStmt([NotNull] XSharpParser.ForeachStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>condStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondStmt([NotNull] XSharpParser.CondStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>condStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondStmt([NotNull] XSharpParser.CondStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exitStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExitStmt([NotNull] XSharpParser.ExitStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exitStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExitStmt([NotNull] XSharpParser.ExitStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>loopStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopStmt([NotNull] XSharpParser.LoopStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>loopStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopStmt([NotNull] XSharpParser.LoopStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStmt([NotNull] XSharpParser.ExpressionStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStmt([NotNull] XSharpParser.ExpressionStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>breakStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStmt([NotNull] XSharpParser.BreakStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>breakStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStmt([NotNull] XSharpParser.BreakStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>throwStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThrowStmt([NotNull] XSharpParser.ThrowStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>throwStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThrowStmt([NotNull] XSharpParser.ThrowStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>tryStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryStmt([NotNull] XSharpParser.TryStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>tryStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryStmt([NotNull] XSharpParser.TryStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStmt([NotNull] XSharpParser.ReturnStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStmt([NotNull] XSharpParser.ReturnStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lockStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLockStmt([NotNull] XSharpParser.LockStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lockStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLockStmt([NotNull] XSharpParser.LockStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>scopeStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScopeStmt([NotNull] XSharpParser.ScopeStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>scopeStmt</c>
	/// labeled alternative in <see cref="XSharpParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScopeStmt([NotNull] XSharpParser.ScopeStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.conditionalBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalBlock([NotNull] XSharpParser.ConditionalBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.conditionalBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalBlock([NotNull] XSharpParser.ConditionalBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.catchBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchBlock([NotNull] XSharpParser.CatchBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.catchBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchBlock([NotNull] XSharpParser.CatchBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ctorCall</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCtorCall([NotNull] XSharpParser.CtorCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ctorCall</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCtorCall([NotNull] XSharpParser.CtorCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignmentExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentExpression([NotNull] XSharpParser.AssignmentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignmentExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentExpression([NotNull] XSharpParser.AssignmentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenExpression([NotNull] XSharpParser.ParenExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenExpression([NotNull] XSharpParser.ParenExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>typeOfExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeOfExpression([NotNull] XSharpParser.TypeOfExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeOfExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeOfExpression([NotNull] XSharpParser.TypeOfExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryExpression([NotNull] XSharpParser.BinaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryExpression([NotNull] XSharpParser.BinaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>typeCast</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeCast([NotNull] XSharpParser.TypeCastContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeCast</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeCast([NotNull] XSharpParser.TypeCastContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>prefixExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrefixExpression([NotNull] XSharpParser.PrefixExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>prefixExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrefixExpression([NotNull] XSharpParser.PrefixExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>sizeOfExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSizeOfExpression([NotNull] XSharpParser.SizeOfExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>sizeOfExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSizeOfExpression([NotNull] XSharpParser.SizeOfExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalArrayExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralArrayExpression([NotNull] XSharpParser.LiteralArrayExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalArrayExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralArrayExpression([NotNull] XSharpParser.LiteralArrayExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>iifExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIifExpression([NotNull] XSharpParser.IifExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>iifExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIifExpression([NotNull] XSharpParser.IifExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>codeblockExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeblockExpression([NotNull] XSharpParser.CodeblockExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>codeblockExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeblockExpression([NotNull] XSharpParser.CodeblockExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>arrayAccess</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayAccess([NotNull] XSharpParser.ArrayAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>arrayAccess</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayAccess([NotNull] XSharpParser.ArrayAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] XSharpParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] XSharpParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>accessMember</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAccessMember([NotNull] XSharpParser.AccessMemberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>accessMember</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAccessMember([NotNull] XSharpParser.AccessMemberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>nameExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNameExpression([NotNull] XSharpParser.NameExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>nameExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNameExpression([NotNull] XSharpParser.NameExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>postfixExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostfixExpression([NotNull] XSharpParser.PostfixExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>postfixExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostfixExpression([NotNull] XSharpParser.PostfixExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>typeExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeExpression([NotNull] XSharpParser.TypeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeExpression</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeExpression([NotNull] XSharpParser.TypeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>methodCall</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodCall([NotNull] XSharpParser.MethodCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>methodCall</c>
	/// labeled alternative in <see cref="XSharpParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodCall([NotNull] XSharpParser.MethodCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionList([NotNull] XSharpParser.ExpressionListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionList([NotNull] XSharpParser.ExpressionListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] XSharpParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] XSharpParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument([NotNull] XSharpParser.ArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument([NotNull] XSharpParser.ArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.iif"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIif([NotNull] XSharpParser.IifContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.iif"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIif([NotNull] XSharpParser.IifContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>genericName</c>
	/// labeled alternative in <see cref="XSharpParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericName([NotNull] XSharpParser.GenericNameContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>genericName</c>
	/// labeled alternative in <see cref="XSharpParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericName([NotNull] XSharpParser.GenericNameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>simpleName</c>
	/// labeled alternative in <see cref="XSharpParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleName([NotNull] XSharpParser.SimpleNameContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>simpleName</c>
	/// labeled alternative in <see cref="XSharpParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleName([NotNull] XSharpParser.SimpleNameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>qualifiedName</c>
	/// labeled alternative in <see cref="XSharpParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualifiedName([NotNull] XSharpParser.QualifiedNameContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>qualifiedName</c>
	/// labeled alternative in <see cref="XSharpParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualifiedName([NotNull] XSharpParser.QualifiedNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.genericArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericArgumentList([NotNull] XSharpParser.GenericArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.genericArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericArgumentList([NotNull] XSharpParser.GenericArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.identifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierName([NotNull] XSharpParser.IdentifierNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.identifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierName([NotNull] XSharpParser.IdentifierNameContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ptrDatatype</c>
	/// labeled alternative in <see cref="XSharpParser.datatype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPtrDatatype([NotNull] XSharpParser.PtrDatatypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ptrDatatype</c>
	/// labeled alternative in <see cref="XSharpParser.datatype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPtrDatatype([NotNull] XSharpParser.PtrDatatypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>arrayDatatype</c>
	/// labeled alternative in <see cref="XSharpParser.datatype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayDatatype([NotNull] XSharpParser.ArrayDatatypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>arrayDatatype</c>
	/// labeled alternative in <see cref="XSharpParser.datatype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayDatatype([NotNull] XSharpParser.ArrayDatatypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>simpleDatatype</c>
	/// labeled alternative in <see cref="XSharpParser.datatype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleDatatype([NotNull] XSharpParser.SimpleDatatypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>simpleDatatype</c>
	/// labeled alternative in <see cref="XSharpParser.datatype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleDatatype([NotNull] XSharpParser.SimpleDatatypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.arrayRank"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayRank([NotNull] XSharpParser.ArrayRankContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.arrayRank"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayRank([NotNull] XSharpParser.ArrayRankContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeName([NotNull] XSharpParser.TypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeName([NotNull] XSharpParser.TypeNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.literalArray"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralArray([NotNull] XSharpParser.LiteralArrayContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.literalArray"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralArray([NotNull] XSharpParser.LiteralArrayContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.codeblock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeblock([NotNull] XSharpParser.CodeblockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.codeblock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeblock([NotNull] XSharpParser.CodeblockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.codeblockParamList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCodeblockParamList([NotNull] XSharpParser.CodeblockParamListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.codeblockParamList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCodeblockParamList([NotNull] XSharpParser.CodeblockParamListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] XSharpParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] XSharpParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.nativeType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNativeType([NotNull] XSharpParser.NativeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.nativeType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNativeType([NotNull] XSharpParser.NativeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.literalValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralValue([NotNull] XSharpParser.LiteralValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.literalValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralValue([NotNull] XSharpParser.LiteralValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.accessModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAccessModifier([NotNull] XSharpParser.AccessModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.accessModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAccessModifier([NotNull] XSharpParser.AccessModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEos([NotNull] XSharpParser.EosContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEos([NotNull] XSharpParser.EosContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="XSharpParser.eof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEof([NotNull] XSharpParser.EofContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="XSharpParser.eof"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEof([NotNull] XSharpParser.EofContext context);
}
} // namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser
