//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\temp\xDev\XSharp\src\Compiler\XSharpCodeAnalysis\Parser\XSharp.g4 by ANTLR 4.6.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class XSharpParser : Parser {
	public const int
		FIRST_KEYWORD=1, ACCESS=2, ALIGN=3, AS=4, ASPEN=5, ASSIGN=6, BEGIN=7, 
		BREAK=8, CALLBACK=9, CASE=10, CAST=11, CLASS=12, CLIPPER=13, DECLARE=14, 
		DEFINE=15, DIM=16, DLL=17, DLLEXPORT=18, DO=19, DOWNTO=20, ELSE=21, ELSEIF=22, 
		END=23, ENDCASE=24, ENDDO=25, ENDIF=26, EXIT=27, EXPORT=28, FASTCALL=29, 
		FIELD=30, FOR=31, FUNC=32, FUNCTION=33, GLOBAL=34, HIDDEN=35, IF=36, IIF=37, 
		INHERIT=38, INIT1=39, INIT2=40, INIT3=41, INSTANCE=42, IS=43, IN=44, LOCAL=45, 
		LOOP=46, MEMBER=47, MEMVAR=48, METHOD=49, NAMEOF=50, NEXT=51, OTHERWISE=52, 
		PARAMETERS=53, PASCAL=54, PRIVATE=55, PROC=56, PROCEDURE=57, PROTECTED=58, 
		PUBLIC=59, RECOVER=60, RETURN=61, SELF=62, SEQUENCE=63, SIZEOF=64, STATIC=65, 
		STEP=66, STRICT=67, SUPER=68, THISCALL=69, TO=70, TYPEOF=71, UNION=72, 
		UPTO=73, USING=74, WHILE=75, WINCALL=76, CATCH=77, FINALLY=78, THROW=79, 
		FIRST_POSITIONAL_KEYWORD=80, ABSTRACT=81, ANSI=82, AUTO=83, CASTCLASS=84, 
		CONSTRUCTOR=85, CONST=86, DEFAULT=87, DELEGATE=88, DESTRUCTOR=89, ENUM=90, 
		EVENT=91, EXPLICIT=92, FOREACH=93, GET=94, IMPLEMENTS=95, IMPLICIT=96, 
		IMPLIED=97, INITONLY=98, INTERFACE=99, INTERNAL=100, LOCK=101, NAMESPACE=102, 
		NEW=103, OPERATOR=104, OUT=105, PARTIAL=106, PROPERTY=107, REPEAT=108, 
		SCOPE=109, SEALED=110, SET=111, STRUCTURE=112, TRY=113, UNICODE=114, UNTIL=115, 
		VALUE=116, VIRTUAL=117, VOSTRUCT=118, ADD=119, ARGLIST=120, ASCENDING=121, 
		ASSEMBLY=122, ASYNC=123, ASTYPE=124, AWAIT=125, BY=126, CHECKED=127, DESCENDING=128, 
		EQUALS=129, EXTERN=130, FIXED=131, FROM=132, GROUP=133, INTO=134, JOIN=135, 
		LET=136, NOP=137, MODULE=138, OF=139, ON=140, ORDERBY=141, OVERRIDE=142, 
		PARAMS=143, REMOVE=144, SELECT=145, SWITCH=146, UNCHECKED=147, UNSAFE=148, 
		VAR=149, VOLATILE=150, WHERE=151, YIELD=152, LAST_POSITIONAL_KEYWORD=153, 
		FIRST_TYPE=154, ARRAY=155, BYTE=156, CODEBLOCK=157, DATE=158, DWORD=159, 
		FLOAT=160, INT=161, LOGIC=162, LONGINT=163, OBJECT=164, PSZ=165, PTR=166, 
		REAL4=167, REAL8=168, REF=169, SHORTINT=170, STRING=171, SYMBOL=172, USUAL=173, 
		VOID=174, WORD=175, CHAR=176, INT64=177, UINT64=178, DYNAMIC=179, DECIMAL=180, 
		DATETIME=181, LAST_TYPE=182, UDC_KEYWORD=183, SCRIPT_REF=184, SCRIPT_LOAD=185, 
		ASSIGNMENT=186, DEFERRED=187, ENDCLASS=188, EXPORTED=189, FREEZE=190, 
		FINAL=191, INLINE=192, INTRODUCE=193, NOSAVE=194, READONLY=195, SHARING=196, 
		SHARED=197, SYNC=198, LAST_KEYWORD=199, FIRST_NULL=200, NIL=201, NULL=202, 
		NULL_ARRAY=203, NULL_CODEBLOCK=204, NULL_DATE=205, NULL_OBJECT=206, NULL_PSZ=207, 
		NULL_PTR=208, NULL_STRING=209, NULL_SYMBOL=210, LAST_NULL=211, FIRST_OPERATOR=212, 
		LT=213, LTE=214, GT=215, GTE=216, EQ=217, EEQ=218, SUBSTR=219, NEQ=220, 
		NEQ2=221, INC=222, DEC=223, PLUS=224, MINUS=225, DIV=226, MOD=227, EXP=228, 
		LSHIFT=229, RSHIFT=230, TILDE=231, MULT=232, QQMARK=233, QMARK=234, AND=235, 
		OR=236, NOT=237, VO_NOT=238, VO_AND=239, VO_OR=240, VO_XOR=241, ASSIGN_OP=242, 
		ASSIGN_ADD=243, ASSIGN_SUB=244, ASSIGN_EXP=245, ASSIGN_MUL=246, ASSIGN_DIV=247, 
		ASSIGN_MOD=248, ASSIGN_BITAND=249, ASSIGN_BITOR=250, ASSIGN_LSHIFT=251, 
		ASSIGN_RSHIFT=252, ASSIGN_XOR=253, LOGIC_AND=254, LOGIC_OR=255, LOGIC_NOT=256, 
		LOGIC_XOR=257, LPAREN=258, RPAREN=259, LCURLY=260, RCURLY=261, LBRKT=262, 
		RBRKT=263, COLON=264, COMMA=265, PIPE=266, AMP=267, ADDROF=268, ALIAS=269, 
		DOT=270, COLONCOLON=271, BACKSLASH=272, ELLIPSIS=273, LAST_OPERATOR=274, 
		FIRST_CONSTANT=275, FALSE_CONST=276, TRUE_CONST=277, HEX_CONST=278, BIN_CONST=279, 
		INT_CONST=280, DATE_CONST=281, REAL_CONST=282, SYMBOL_CONST=283, CHAR_CONST=284, 
		STRING_CONST=285, ESCAPED_STRING_CONST=286, INTERPOLATED_STRING_CONST=287, 
		INCOMPLETE_STRING_CONST=288, LAST_CONSTANT=289, PP_FIRST=290, PP_COMMAND=291, 
		PP_DEFINE=292, PP_ELSE=293, PP_ENDIF=294, PP_ENDREGION=295, PP_ERROR=296, 
		PP_IFDEF=297, PP_IFNDEF=298, PP_INCLUDE=299, PP_LINE=300, PP_REGION=301, 
		PP_TRANSLATE=302, PP_UNDEF=303, PP_WARNING=304, PP_LAST=305, MACRO=306, 
		UDCSEP=307, ID=308, KWID=309, PRAGMA=310, DOC_COMMENT=311, SL_COMMENT=312, 
		ML_COMMENT=313, LINE_CONT=314, LINE_CONT_OLD=315, SEMI=316, WS=317, NL=318, 
		EOS=319, UNRECOGNIZED=320;
	public const int
		RULE_script = 0, RULE_scriptEntity = 1, RULE_macroScript = 2, RULE_source = 3, 
		RULE_entity = 4, RULE_eos = 5, RULE_function = 6, RULE_procedure = 7, 
		RULE_callingconvention = 8, RULE_vodll = 9, RULE_dllcallconv = 10, RULE_parameterList = 11, 
		RULE_parameter = 12, RULE_parameterDeclMods = 13, RULE_statementBlock = 14, 
		RULE_funcprocModifiers = 15, RULE_using_ = 16, RULE_voglobal = 17, RULE_method = 18, 
		RULE_methodtype = 19, RULE_vodefine = 20, RULE_vostruct = 21, RULE_vostructmember = 22, 
		RULE_vounion = 23, RULE_votypeModifiers = 24, RULE_namespace_ = 25, RULE_interface_ = 26, 
		RULE_interfaceModifiers = 27, RULE_class_ = 28, RULE_classModifiers = 29, 
		RULE_typeparameters = 30, RULE_typeparameter = 31, RULE_typeparameterconstraintsclause = 32, 
		RULE_typeparameterconstraint = 33, RULE_structure_ = 34, RULE_structureModifiers = 35, 
		RULE_delegate_ = 36, RULE_delegateModifiers = 37, RULE_enum_ = 38, RULE_enumModifiers = 39, 
		RULE_enummember = 40, RULE_event_ = 41, RULE_eventModifiers = 42, RULE_eventLineAccessor = 43, 
		RULE_eventAccessor = 44, RULE_classvars = 45, RULE_classvarModifiers = 46, 
		RULE_classVarList = 47, RULE_classvar = 48, RULE_arraysub = 49, RULE_property = 50, 
		RULE_propertyParameterList = 51, RULE_propertyAutoAccessor = 52, RULE_propertyLineAccessor = 53, 
		RULE_accessorModifiers = 54, RULE_expressionList = 55, RULE_propertyAccessor = 56, 
		RULE_classmember = 57, RULE_constructor = 58, RULE_constructorModifiers = 59, 
		RULE_declare = 60, RULE_destructor = 61, RULE_destructorModifiers = 62, 
		RULE_overloadedOps = 63, RULE_conversionOps = 64, RULE_operator_ = 65, 
		RULE_operatorModifiers = 66, RULE_memberModifiers = 67, RULE_attributes = 68, 
		RULE_attributeBlock = 69, RULE_attributeTarget = 70, RULE_attribute = 71, 
		RULE_attributeParam = 72, RULE_globalAttributes = 73, RULE_globalAttributeTarget = 74, 
		RULE_statement = 75, RULE_ifElseBlock = 76, RULE_caseBlock = 77, RULE_switchBlock = 78, 
		RULE_catchBlock = 79, RULE_recoverBlock = 80, RULE_variableDeclaration = 81, 
		RULE_variableDeclarator = 82, RULE_localdecl = 83, RULE_localvar = 84, 
		RULE_impliedvar = 85, RULE_fielddecl = 86, RULE_xbasedecl = 87, RULE_expression = 88, 
		RULE_primary = 89, RULE_boundExpression = 90, RULE_objectOrCollectioninitializer = 91, 
		RULE_objectinitializer = 92, RULE_memberinitializer = 93, RULE_initializervalue = 94, 
		RULE_collectioninitializer = 95, RULE_bracketedArgumentList = 96, RULE_unnamedArgument = 97, 
		RULE_argumentList = 98, RULE_namedArgument = 99, RULE_iif = 100, RULE_nameDot = 101, 
		RULE_name = 102, RULE_aliasedName = 103, RULE_simpleName = 104, RULE_genericArgumentList = 105, 
		RULE_identifierName = 106, RULE_datatype = 107, RULE_arrayRank = 108, 
		RULE_typeName = 109, RULE_usualTypeName = 110, RULE_literalArray = 111, 
		RULE_arrayElement = 112, RULE_anonType = 113, RULE_anonMember = 114, RULE_codeblock = 115, 
		RULE_codeblockCode = 116, RULE_lambdaParameterList = 117, RULE_codeblockParamList = 118, 
		RULE_codeblockExprList = 119, RULE_anonymousMethodExpression = 120, RULE_explicitAnonymousFunctionParamList = 121, 
		RULE_explicitAnonymousFunctionParameter = 122, RULE_anonymousfunctionParameterModifier = 123, 
		RULE_linqQuery = 124, RULE_fromClause = 125, RULE_queryBody = 126, RULE_queryBodyClause = 127, 
		RULE_joinIntoClause = 128, RULE_ordering = 129, RULE_selectOrGroupclause = 130, 
		RULE_queryContinuation = 131, RULE_identifier = 132, RULE_identifierString = 133, 
		RULE_xbaseType = 134, RULE_nativeType = 135, RULE_literalValue = 136, 
		RULE_keyword = 137, RULE_keywordvo = 138, RULE_keywordvn = 139, RULE_keywordxs = 140, 
		RULE_keywordxpp = 141, RULE_xppsource = 142, RULE_xppnamespace = 143, 
		RULE_xppentity = 144, RULE_xppclass = 145, RULE_xppclassModifiers = 146, 
		RULE_xppclassMember = 147, RULE_xppmethodvis = 148, RULE_xppvisibility = 149, 
		RULE_xppdeclareMethod = 150, RULE_xppisin = 151, RULE_xppdeclareModifiers = 152, 
		RULE_xppclassvars = 153, RULE_xppvarassignment = 154, RULE_xppproperty = 155, 
		RULE_xppmethod = 156, RULE_xppinlineMethod = 157, RULE_xppmemberModifiers = 158, 
		RULE_xppmemvar = 159;
	public static readonly string[] ruleNames = {
		"script", "scriptEntity", "macroScript", "source", "entity", "eos", "function", 
		"procedure", "callingconvention", "vodll", "dllcallconv", "parameterList", 
		"parameter", "parameterDeclMods", "statementBlock", "funcprocModifiers", 
		"using_", "voglobal", "method", "methodtype", "vodefine", "vostruct", 
		"vostructmember", "vounion", "votypeModifiers", "namespace_", "interface_", 
		"interfaceModifiers", "class_", "classModifiers", "typeparameters", "typeparameter", 
		"typeparameterconstraintsclause", "typeparameterconstraint", "structure_", 
		"structureModifiers", "delegate_", "delegateModifiers", "enum_", "enumModifiers", 
		"enummember", "event_", "eventModifiers", "eventLineAccessor", "eventAccessor", 
		"classvars", "classvarModifiers", "classVarList", "classvar", "arraysub", 
		"property", "propertyParameterList", "propertyAutoAccessor", "propertyLineAccessor", 
		"accessorModifiers", "expressionList", "propertyAccessor", "classmember", 
		"constructor", "constructorModifiers", "declare", "destructor", "destructorModifiers", 
		"overloadedOps", "conversionOps", "operator_", "operatorModifiers", "memberModifiers", 
		"attributes", "attributeBlock", "attributeTarget", "attribute", "attributeParam", 
		"globalAttributes", "globalAttributeTarget", "statement", "ifElseBlock", 
		"caseBlock", "switchBlock", "catchBlock", "recoverBlock", "variableDeclaration", 
		"variableDeclarator", "localdecl", "localvar", "impliedvar", "fielddecl", 
		"xbasedecl", "expression", "primary", "boundExpression", "objectOrCollectioninitializer", 
		"objectinitializer", "memberinitializer", "initializervalue", "collectioninitializer", 
		"bracketedArgumentList", "unnamedArgument", "argumentList", "namedArgument", 
		"iif", "nameDot", "name", "aliasedName", "simpleName", "genericArgumentList", 
		"identifierName", "datatype", "arrayRank", "typeName", "usualTypeName", 
		"literalArray", "arrayElement", "anonType", "anonMember", "codeblock", 
		"codeblockCode", "lambdaParameterList", "codeblockParamList", "codeblockExprList", 
		"anonymousMethodExpression", "explicitAnonymousFunctionParamList", "explicitAnonymousFunctionParameter", 
		"anonymousfunctionParameterModifier", "linqQuery", "fromClause", "queryBody", 
		"queryBodyClause", "joinIntoClause", "ordering", "selectOrGroupclause", 
		"queryContinuation", "identifier", "identifierString", "xbaseType", "nativeType", 
		"literalValue", "keyword", "keywordvo", "keywordvn", "keywordxs", "keywordxpp", 
		"xppsource", "xppnamespace", "xppentity", "xppclass", "xppclassModifiers", 
		"xppclassMember", "xppmethodvis", "xppvisibility", "xppdeclareMethod", 
		"xppisin", "xppdeclareModifiers", "xppclassvars", "xppvarassignment", 
		"xppproperty", "xppmethod", "xppinlineMethod", "xppmemberModifiers", "xppmemvar"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "FIRST_KEYWORD", "ACCESS", "ALIGN", "AS", "ASPEN", "ASSIGN", "BEGIN", 
		"BREAK", "CALLBACK", "CASE", "CAST", "CLASS", "CLIPPER", "DECLARE", "DEFINE", 
		"DIM", "DLL", "DLLEXPORT", "DO", "DOWNTO", "ELSE", "ELSEIF", "END", "ENDCASE", 
		"ENDDO", "ENDIF", "EXIT", "EXPORT", "FASTCALL", "FIELD", "FOR", "FUNC", 
		"FUNCTION", "GLOBAL", "HIDDEN", "IF", "IIF", "INHERIT", "INIT1", "INIT2", 
		"INIT3", "INSTANCE", "IS", "IN", "LOCAL", "LOOP", "MEMBER", "MEMVAR", 
		"METHOD", "NAMEOF", "NEXT", "OTHERWISE", "PARAMETERS", "PASCAL", "PRIVATE", 
		"PROC", "PROCEDURE", "PROTECTED", "PUBLIC", "RECOVER", "RETURN", "SELF", 
		"SEQUENCE", "SIZEOF", "STATIC", "STEP", "STRICT", "SUPER", "THISCALL", 
		"TO", "TYPEOF", "UNION", "UPTO", "USING", "WHILE", "WINCALL", "CATCH", 
		"FINALLY", "THROW", "FIRST_POSITIONAL_KEYWORD", "ABSTRACT", "ANSI", "AUTO", 
		"CASTCLASS", "CONSTRUCTOR", "CONST", "DEFAULT", "DELEGATE", "DESTRUCTOR", 
		"ENUM", "EVENT", "EXPLICIT", "FOREACH", "GET", "IMPLEMENTS", "IMPLICIT", 
		"IMPLIED", "INITONLY", "INTERFACE", "INTERNAL", "LOCK", "NAMESPACE", "NEW", 
		"OPERATOR", "OUT", "PARTIAL", "PROPERTY", "REPEAT", "SCOPE", "SEALED", 
		"SET", "STRUCTURE", "TRY", "UNICODE", "UNTIL", "VALUE", "VIRTUAL", "VOSTRUCT", 
		"ADD", "ARGLIST", "ASCENDING", "ASSEMBLY", "ASYNC", "ASTYPE", "AWAIT", 
		"BY", "CHECKED", "DESCENDING", "EQUALS", "EXTERN", "FIXED", "FROM", "GROUP", 
		"INTO", "JOIN", "LET", "NOP", "MODULE", "OF", "ON", "ORDERBY", "OVERRIDE", 
		"PARAMS", "REMOVE", "SELECT", "SWITCH", "UNCHECKED", "UNSAFE", "VAR", 
		"VOLATILE", "WHERE", "YIELD", "LAST_POSITIONAL_KEYWORD", "FIRST_TYPE", 
		"ARRAY", "BYTE", "CODEBLOCK", "DATE", "DWORD", "FLOAT", "INT", "LOGIC", 
		"LONGINT", "OBJECT", "PSZ", "PTR", "REAL4", "REAL8", "REF", "SHORTINT", 
		"STRING", "SYMBOL", "USUAL", "VOID", "WORD", "CHAR", "INT64", "UINT64", 
		"DYNAMIC", "DECIMAL", "DATETIME", "LAST_TYPE", "UDC_KEYWORD", "SCRIPT_REF", 
		"SCRIPT_LOAD", "ASSIGNMENT", "DEFERRED", "ENDCLASS", "EXPORTED", "FREEZE", 
		"FINAL", "INLINE", "INTRODUCE", "NOSAVE", "READONLY", "SHARING", "SHARED", 
		"SYNC", "LAST_KEYWORD", "FIRST_NULL", "NIL", "NULL", "NULL_ARRAY", "NULL_CODEBLOCK", 
		"NULL_DATE", "NULL_OBJECT", "NULL_PSZ", "NULL_PTR", "NULL_STRING", "NULL_SYMBOL", 
		"LAST_NULL", "FIRST_OPERATOR", "LT", "LTE", "GT", "GTE", "EQ", "EEQ", 
		"SUBSTR", "NEQ", "NEQ2", "INC", "DEC", "PLUS", "MINUS", "DIV", "MOD", 
		"EXP", "LSHIFT", "RSHIFT", "TILDE", "MULT", "QQMARK", "QMARK", "AND", 
		"OR", "NOT", "VO_NOT", "VO_AND", "VO_OR", "VO_XOR", "ASSIGN_OP", "ASSIGN_ADD", 
		"ASSIGN_SUB", "ASSIGN_EXP", "ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", 
		"ASSIGN_BITAND", "ASSIGN_BITOR", "ASSIGN_LSHIFT", "ASSIGN_RSHIFT", "ASSIGN_XOR", 
		"LOGIC_AND", "LOGIC_OR", "LOGIC_NOT", "LOGIC_XOR", "LPAREN", "RPAREN", 
		"LCURLY", "RCURLY", "LBRKT", "RBRKT", "COLON", "COMMA", "PIPE", "AMP", 
		"ADDROF", "ALIAS", "DOT", "COLONCOLON", "BACKSLASH", "ELLIPSIS", "LAST_OPERATOR", 
		"FIRST_CONSTANT", "FALSE_CONST", "TRUE_CONST", "HEX_CONST", "BIN_CONST", 
		"INT_CONST", "DATE_CONST", "REAL_CONST", "SYMBOL_CONST", "CHAR_CONST", 
		"STRING_CONST", "ESCAPED_STRING_CONST", "INTERPOLATED_STRING_CONST", "INCOMPLETE_STRING_CONST", 
		"LAST_CONSTANT", "PP_FIRST", "PP_COMMAND", "PP_DEFINE", "PP_ELSE", "PP_ENDIF", 
		"PP_ENDREGION", "PP_ERROR", "PP_IFDEF", "PP_IFNDEF", "PP_INCLUDE", "PP_LINE", 
		"PP_REGION", "PP_TRANSLATE", "PP_UNDEF", "PP_WARNING", "PP_LAST", "MACRO", 
		"UDCSEP", "ID", "KWID", "PRAGMA", "DOC_COMMENT", "SL_COMMENT", "ML_COMMENT", 
		"LINE_CONT", "LINE_CONT_OLD", "SEMI", "WS", "NL", "EOS", "UNRECOGNIZED"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public XSharpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ScriptContext : XSharpParserRuleContext {
		public IToken _STRING_CONST;
		public IList<IToken> _Includes = new List<IToken>();
		public IList<IToken> _References = new List<IToken>();
		public ScriptEntityContext _scriptEntity;
		public IList<ScriptEntityContext> _Entities = new List<ScriptEntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public ITerminalNode[] SCRIPT_LOAD() { return GetTokens(XSharpParser.SCRIPT_LOAD); }
		public ITerminalNode SCRIPT_LOAD(int i) {
			return GetToken(XSharpParser.SCRIPT_LOAD, i);
		}
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode[] SCRIPT_REF() { return GetTokens(XSharpParser.SCRIPT_REF); }
		public ITerminalNode SCRIPT_REF(int i) {
			return GetToken(XSharpParser.SCRIPT_REF, i);
		}
		public ITerminalNode[] STRING_CONST() { return GetTokens(XSharpParser.STRING_CONST); }
		public ITerminalNode STRING_CONST(int i) {
			return GetToken(XSharpParser.STRING_CONST, i);
		}
		public ScriptEntityContext[] scriptEntity() {
			return GetRuleContexts<ScriptEntityContext>();
		}
		public ScriptEntityContext scriptEntity(int i) {
			return GetRuleContext<ScriptEntityContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 326;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case SCRIPT_LOAD:
						{
						State = 320; Match(SCRIPT_LOAD);
						State = 321; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._Includes.Add(_localctx._STRING_CONST);
						State = 322; Match(EOS);
						}
						break;
					case SCRIPT_REF:
						{
						State = 323; Match(SCRIPT_REF);
						State = 324; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._References.Add(_localctx._STRING_CONST);
						State = 325; Match(EOS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 330;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 334;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 331; _localctx._scriptEntity = scriptEntity();
					_localctx._Entities.Add(_localctx._scriptEntity);
					}
					} 
				}
				State = 336;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			State = 337; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptEntityContext : XSharpParserRuleContext {
		public StatementContext Stmt;
		public EntityContext Entity;
		public ExpressionContext Expr;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptEntity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScriptEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScriptEntity(this);
		}
	}

	[RuleVersion(0)]
	public ScriptEntityContext scriptEntity() {
		ScriptEntityContext _localctx = new ScriptEntityContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_scriptEntity);
		try {
			State = 342;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339; _localctx.Stmt = statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340; _localctx.Entity = entity();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 341; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroScriptContext : XSharpParserRuleContext {
		public CodeblockContext CbExpr;
		public CodeblockCodeContext Code;
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public MacroScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroScript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroScript(this);
		}
	}

	[RuleVersion(0)]
	public MacroScriptContext macroScript() {
		MacroScriptContext _localctx = new MacroScriptContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_macroScript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 344; _localctx.CbExpr = codeblock();
				}
				break;

			case 2:
				{
				State = 345; _localctx.Code = codeblockCode();
				}
				break;
			}
			State = 348; Match(EOS);
			State = 349; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : XSharpParserRuleContext {
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSource(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EOS) {
				{
				State = 351; eos();
				}
			}

			State = 357;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << BEGIN) | (1L << CLASS) | (1L << DEFINE) | (1L << DLL) | (1L << EXPORT) | (1L << FUNC) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROC) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STATIC - 65)) | (1L << (UNION - 65)) | (1L << (USING - 65)) | (1L << (ABSTRACT - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (DELEGATE - 65)) | (1L << (DESTRUCTOR - 65)) | (1L << (ENUM - 65)) | (1L << (EVENT - 65)) | (1L << (INTERFACE - 65)) | (1L << (INTERNAL - 65)) | (1L << (NEW - 65)) | (1L << (PARTIAL - 65)) | (1L << (SEALED - 65)) | (1L << (STRUCTURE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOSTRUCT - 65)) | (1L << (ASYNC - 65)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (OVERRIDE - 130)) | (1L << (UNSAFE - 130)))) != 0) || _la==LBRKT) {
				{
				{
				State = 354; _localctx._entity = entity();
				_localctx._Entities.Add(_localctx._entity);
				}
				}
				State = 359;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 360; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : XSharpParserRuleContext {
		public Namespace_Context namespace_() {
			return GetRuleContext<Namespace_Context>(0);
		}
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ProcedureContext procedure() {
			return GetRuleContext<ProcedureContext>(0);
		}
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public GlobalAttributesContext globalAttributes() {
			return GetRuleContext<GlobalAttributesContext>(0);
		}
		public Using_Context using_() {
			return GetRuleContext<Using_Context>(0);
		}
		public VodefineContext vodefine() {
			return GetRuleContext<VodefineContext>(0);
		}
		public VoglobalContext voglobal() {
			return GetRuleContext<VoglobalContext>(0);
		}
		public VodllContext vodll() {
			return GetRuleContext<VodllContext>(0);
		}
		public VostructContext vostruct() {
			return GetRuleContext<VostructContext>(0);
		}
		public VounionContext vounion() {
			return GetRuleContext<VounionContext>(0);
		}
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_entity);
		try {
			State = 381;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 362; namespace_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; class_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 364; structure_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 365; interface_();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 366; delegate_();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 367; event_();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 368; enum_();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 369; function();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 370; procedure();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 371; method();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 372; constructor();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 373; destructor();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 374; globalAttributes();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 375; using_();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 376; vodefine();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 377; voglobal();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 378; vodll();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 379; vostruct();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 380; vounion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : XSharpParserRuleContext {
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_eos);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 383; Match(EOS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 386;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode FUNC() { return GetToken(XSharpParser.FUNC, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 388; _localctx.Attributes = attributes();
				}
			}

			State = 392;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 391; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 394;
			_la = _input.La(1);
			if ( !(_la==FUNC || _la==FUNCTION) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 395; _localctx.Id = identifier();
			State = 397;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 396; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 400;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 399; _localctx.ParamList = parameterList();
				}
			}

			State = 404;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 402; Match(AS);
				State = 403; _localctx.Type = datatype();
				}
			}

			State = 409;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 406; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 411;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 413;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (STRICT - 67)) | (1L << (THISCALL - 67)) | (1L << (WINCALL - 67)))) != 0)) {
				{
				State = 412; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 417;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXPORT) {
				{
				State = 415; Match(EXPORT);
				State = 416; Match(LOCAL);
				}
			}

			State = 421;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DLLEXPORT) {
				{
				State = 419; Match(DLLEXPORT);
				State = 420; Match(STRING_CONST);
				}
			}

			State = 423; _localctx.end = eos();
			State = 424; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public IToken InitExit;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public ITerminalNode PROC() { return GetToken(XSharpParser.PROC, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public ITerminalNode INIT1() { return GetToken(XSharpParser.INIT1, 0); }
		public ITerminalNode INIT2() { return GetToken(XSharpParser.INIT2, 0); }
		public ITerminalNode INIT3() { return GetToken(XSharpParser.INIT3, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public ProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterProcedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitProcedure(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureContext procedure() {
		ProcedureContext _localctx = new ProcedureContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 426; _localctx.Attributes = attributes();
				}
			}

			State = 430;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 429; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 432;
			_la = _input.La(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 433; _localctx.Id = identifier();
			State = 435;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 434; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 438;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 437; _localctx.ParamList = parameterList();
				}
			}

			State = 442;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 440; Match(AS);
				State = 441; Match(VOID);
				}
			}

			State = 447;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 444; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 449;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 451;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (STRICT - 67)) | (1L << (THISCALL - 67)) | (1L << (WINCALL - 67)))) != 0)) {
				{
				State = 450; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 454;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) {
				{
				State = 453;
				_localctx.InitExit = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) ) {
					_localctx.InitExit = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 458;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXPORT) {
				{
				State = 456; Match(EXPORT);
				State = 457; Match(LOCAL);
				}
			}

			State = 462;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DLLEXPORT) {
				{
				State = 460; Match(DLLEXPORT);
				State = 461; Match(STRING_CONST);
				}
			}

			State = 464; _localctx.end = eos();
			State = 465; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallingconventionContext : XSharpParserRuleContext {
		public IToken Convention;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public CallingconventionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callingconvention; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCallingconvention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCallingconvention(this);
		}
	}

	[RuleVersion(0)]
	public CallingconventionContext callingconvention() {
		CallingconventionContext _localctx = new CallingconventionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_callingconvention);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			_localctx.Convention = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (STRICT - 67)) | (1L << (THISCALL - 67)) | (1L << (WINCALL - 67)))) != 0)) ) {
				_localctx.Convention = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodllContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken T;
		public IdentifierContext Id;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public DllcallconvContext CallingConvention;
		public IdentifierStringContext Dll;
		public IdentifierStringContext Extension;
		public IToken Ordinal;
		public IdentifierStringContext Entrypoint;
		public IToken Address;
		public IToken Number;
		public IToken CharSet;
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierStringContext[] identifierString() {
			return GetRuleContexts<IdentifierStringContext>();
		}
		public IdentifierStringContext identifierString(int i) {
			return GetRuleContext<IdentifierStringContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(XSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(XSharpParser.DOT, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode FUNC() { return GetToken(XSharpParser.FUNC, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public ITerminalNode PROC() { return GetToken(XSharpParser.PROC, 0); }
		public DllcallconvContext dllcallconv() {
			return GetRuleContext<DllcallconvContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode[] INT_CONST() { return GetTokens(XSharpParser.INT_CONST); }
		public ITerminalNode INT_CONST(int i) {
			return GetToken(XSharpParser.INT_CONST, i);
		}
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode ANSI() { return GetToken(XSharpParser.ANSI, 0); }
		public ITerminalNode UNICODE() { return GetToken(XSharpParser.UNICODE, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public VodllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodll(this);
		}
	}

	[RuleVersion(0)]
	public VodllContext vodll() {
		VodllContext _localctx = new VodllContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_vodll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 469; _localctx.Attributes = attributes();
				}
			}

			State = 473;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 472; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 475; Match(DLL);
			State = 487;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FUNC:
			case FUNCTION:
				{
				State = 476;
				_localctx.T = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==FUNC || _la==FUNCTION) ) {
					_localctx.T = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 477; _localctx.Id = identifier();
				State = 478; _localctx.ParamList = parameterList();
				State = 481;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 479; Match(AS);
					State = 480; _localctx.Type = datatype();
					}
				}

				}
				break;
			case PROC:
			case PROCEDURE:
				{
				State = 483;
				_localctx.T = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PROC || _la==PROCEDURE) ) {
					_localctx.T = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 484; _localctx.Id = identifier();
				State = 485; _localctx.ParamList = parameterList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 490;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (STRICT - 67)) | (1L << (THISCALL - 67)) | (1L << (WINCALL - 67)))) != 0)) {
				{
				State = 489; _localctx.CallingConvention = dllcallconv();
				}
			}

			State = 492; Match(COLON);
			State = 493; _localctx.Dll = identifierString();
			State = 496;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 494; Match(DOT);
				State = 495; _localctx.Extension = identifierString();
				}
				break;
			}
			State = 511;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case REAL_CONST:
				{
				State = 498; _localctx.Ordinal = Match(REAL_CONST);
				}
				break;
			case DOT:
				{
				State = 499; Match(DOT);
				State = 500; _localctx.Entrypoint = identifierString();
				State = 502;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADDROF) {
					{
					State = 501; _localctx.Address = Match(ADDROF);
					}
				}

				State = 505;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT_CONST) {
					{
					State = 504; _localctx.Number = Match(INT_CONST);
					}
				}

				State = 509;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NEQ2) {
					{
					State = 507; Match(NEQ2);
					State = 508; Match(INT_CONST);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (ANSI - 82)) | (1L << (AUTO - 82)) | (1L << (UNICODE - 82)))) != 0)) {
				{
				State = 513;
				_localctx.CharSet = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (ANSI - 82)) | (1L << (AUTO - 82)) | (1L << (UNICODE - 82)))) != 0)) ) {
					_localctx.CharSet = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 516; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DllcallconvContext : XSharpParserRuleContext {
		public IToken Cc;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public DllcallconvContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dllcallconv; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDllcallconv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDllcallconv(this);
		}
	}

	[RuleVersion(0)]
	public DllcallconvContext dllcallconv() {
		DllcallconvContext _localctx = new DllcallconvContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_dllcallconv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			_localctx.Cc = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (STRICT - 67)) | (1L << (THISCALL - 67)) | (1L << (WINCALL - 67)))) != 0)) ) {
				_localctx.Cc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : XSharpParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520; Match(LPAREN);
			State = 529;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SELF) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (LBRKT - 262)) | (1L << (ELLIPSIS - 262)) | (1L << (ID - 262)) | (1L << (KWID - 262)))) != 0)) {
				{
				State = 521; _localctx._parameter = parameter();
				_localctx._Params.Add(_localctx._parameter);
				State = 526;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 522; Match(COMMA);
					State = 523; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					}
					}
					State = 528;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 531; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken Self;
		public IdentifierContext Id;
		public ExpressionContext Default;
		public ParameterDeclModsContext Modifiers;
		public DatatypeContext Type;
		public IToken Ellipsis;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterDeclModsContext parameterDeclMods() {
			return GetRuleContext<ParameterDeclModsContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode ELLIPSIS() { return GetToken(XSharpParser.ELLIPSIS, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_parameter);
		int _la;
		try {
			State = 550;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ALIGN:
			case CALLBACK:
			case CLIPPER:
			case DECLARE:
			case DEFINE:
			case DIM:
			case DLLEXPORT:
			case DOWNTO:
			case FASTCALL:
			case FUNC:
			case GLOBAL:
			case INHERIT:
			case INSTANCE:
			case IN:
			case MEMVAR:
			case NAMEOF:
			case PARAMETERS:
			case PASCAL:
			case PROC:
			case SELF:
			case SEQUENCE:
			case STEP:
			case STRICT:
			case THISCALL:
			case TO:
			case UNION:
			case UPTO:
			case USING:
			case WINCALL:
			case ABSTRACT:
			case ANSI:
			case AUTO:
			case CONST:
			case DEFAULT:
			case DELEGATE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case FOREACH:
			case GET:
			case IMPLEMENTS:
			case IMPLICIT:
			case IMPLIED:
			case INITONLY:
			case INTERFACE:
			case INTERNAL:
			case LOCK:
			case NAMESPACE:
			case NEW:
			case OPERATOR:
			case OUT:
			case PARTIAL:
			case PROPERTY:
			case SCOPE:
			case SEALED:
			case SET:
			case STRUCTURE:
			case TRY:
			case UNICODE:
			case UNTIL:
			case VALUE:
			case VIRTUAL:
			case VOSTRUCT:
			case ADD:
			case ARGLIST:
			case ASCENDING:
			case ASSEMBLY:
			case ASYNC:
			case ASTYPE:
			case AWAIT:
			case BY:
			case CHECKED:
			case DESCENDING:
			case EQUALS:
			case EXTERN:
			case FIXED:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NOP:
			case MODULE:
			case OF:
			case ON:
			case ORDERBY:
			case OVERRIDE:
			case PARAMS:
			case REMOVE:
			case SELECT:
			case SWITCH:
			case UNCHECKED:
			case UNSAFE:
			case VAR:
			case VOLATILE:
			case WHERE:
			case YIELD:
			case CHAR:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
			case ASSIGNMENT:
			case ENDCLASS:
			case EXPORTED:
			case FREEZE:
			case FINAL:
			case INLINE:
			case INTRODUCE:
			case NOSAVE:
			case READONLY:
			case SHARING:
			case SHARED:
			case SYNC:
			case LBRKT:
			case ID:
			case KWID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 534;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT) {
					{
					State = 533; _localctx.Attributes = attributes();
					}
				}

				State = 537;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SELF) {
					{
					State = 536; _localctx.Self = Match(SELF);
					}
				}

				State = 539; _localctx.Id = identifier();
				State = 542;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ASSIGN_OP) {
					{
					State = 540; Match(ASSIGN_OP);
					State = 541; _localctx.Default = expression(0);
					}
				}

				State = 547;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS || _la==OUT || _la==PARAMS || _la==REF) {
					{
					State = 544; _localctx.Modifiers = parameterDeclMods();
					State = 545; _localctx.Type = datatype();
					}
				}

				}
				break;
			case ELLIPSIS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 549; _localctx.Ellipsis = Match(ELLIPSIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclModsContext : XSharpParserRuleContext {
		public IToken _AS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _REF;
		public IToken _OUT;
		public IToken _IS;
		public IToken _PARAMS;
		public IToken _tset776;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ParameterDeclModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclMods; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterDeclMods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterDeclMods(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclModsContext parameterDeclMods() {
		ParameterDeclModsContext _localctx = new ParameterDeclModsContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_parameterDeclMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			_localctx._tset776 = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==AS || _la==IS || _la==OUT || _la==PARAMS || _la==REF) ) {
				_localctx._tset776 = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			_localctx._Tokens.Add(_localctx._tset776);
			State = 554;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 553; Match(CONST);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : XSharpParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,47,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 556; _localctx._statement = statement();
					_localctx._Stmts.Add(_localctx._statement);
					}
					} 
				}
				State = 561;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,47,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncprocModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _INTERNAL;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _tset823;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public FuncprocModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcprocModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncprocModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncprocModifiers(this);
		}
	}

	[RuleVersion(0)]
	public FuncprocModifiersContext funcprocModifiers() {
		FuncprocModifiersContext _localctx = new FuncprocModifiersContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_funcprocModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 562;
				_localctx._tset823 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==UNSAFE) ) {
					_localctx._tset823 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset823);
				}
				}
				State = 565;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_Context : XSharpParserRuleContext {
		public IToken Static;
		public IdentifierNameContext Alias;
		public NameContext Name;
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public Using_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsing_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsing_(this);
		}
	}

	[RuleVersion(0)]
	public Using_Context using_() {
		Using_Context _localctx = new Using_Context(_ctx, State);
		EnterRule(_localctx, 32, RULE_using_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; Match(USING);
			State = 569;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC) {
				{
				State = 568; _localctx.Static = Match(STATIC);
				}
			}

			State = 574;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				State = 571; _localctx.Alias = identifierName();
				State = 572; Match(ASSIGN_OP);
				}
				break;
			}
			State = 576; _localctx.Name = name(0);
			State = 577; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoglobalContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken Const;
		public ClassVarListContext Vars;
		public EosContext end;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ClassVarListContext classVarList() {
			return GetRuleContext<ClassVarListContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public VoglobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voglobal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoglobal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoglobal(this);
		}
	}

	[RuleVersion(0)]
	public VoglobalContext voglobal() {
		VoglobalContext _localctx = new VoglobalContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_voglobal);
		int _la;
		try {
			State = 602;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 580;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT) {
					{
					State = 579; _localctx.Attributes = attributes();
					}
				}

				State = 583;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==UNSAFE) {
					{
					State = 582; _localctx.Modifiers = funcprocModifiers();
					}
				}

				State = 585; Match(GLOBAL);
				State = 587;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					State = 586; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 589; _localctx.Vars = classVarList();
				State = 590; _localctx.end = eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 593;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT) {
					{
					State = 592; _localctx.Attributes = attributes();
					}
				}

				State = 595; Match(STATIC);
				State = 597;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					State = 596; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 599; _localctx.Vars = classVarList();
				State = 600; _localctx.end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public MethodtypeContext T;
		public NameDotContext ExplicitIface;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public NameDotContext Namespace;
		public IdentifierContext ClassId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public MethodtypeContext methodtype() {
			return GetRuleContext<MethodtypeContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext[] nameDot() {
			return GetRuleContexts<NameDotContext>();
		}
		public NameDotContext nameDot(int i) {
			return GetRuleContext<NameDotContext>(i);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 604; _localctx.Attributes = attributes();
				}
			}

			State = 608;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (SEALED - 100)) | (1L << (VIRTUAL - 100)) | (1L << (ASYNC - 100)) | (1L << (EXTERN - 100)) | (1L << (OVERRIDE - 100)) | (1L << (UNSAFE - 100)))) != 0)) {
				{
				State = 607; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 610; _localctx.T = methodtype();
			State = 612;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 611; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 614; _localctx.Id = identifier();
			State = 616;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 615; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 619;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 618; _localctx.ParamList = parameterList();
				}
			}

			State = 623;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 621; Match(AS);
				State = 622; _localctx.Type = datatype();
				}
			}

			State = 628;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 625; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 630;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 632;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (STRICT - 67)) | (1L << (THISCALL - 67)) | (1L << (WINCALL - 67)))) != 0)) {
				{
				State = 631; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 639;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 634; Match(CLASS);
				State = 636;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					State = 635; _localctx.Namespace = nameDot(0);
					}
					break;
				}
				State = 638; _localctx.ClassId = identifier();
				}
			}

			State = 643;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXPORT) {
				{
				State = 641; Match(EXPORT);
				State = 642; Match(LOCAL);
				}
			}

			State = 647;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DLLEXPORT) {
				{
				State = 645; Match(DLLEXPORT);
				State = 646; Match(STRING_CONST);
				}
			}

			State = 649; _localctx.end = eos();
			State = 650; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodtypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public MethodtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodtype(this);
		}
	}

	[RuleVersion(0)]
	public MethodtypeContext methodtype() {
		MethodtypeContext _localctx = new MethodtypeContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_methodtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodefineContext : XSharpParserRuleContext {
		public FuncprocModifiersContext Modifiers;
		public IdentifierContext Id;
		public ExpressionContext Expr;
		public TypeNameContext DataType;
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public VodefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodefine(this);
		}
	}

	[RuleVersion(0)]
	public VodefineContext vodefine() {
		VodefineContext _localctx = new VodefineContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_vodefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 654; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 657; Match(DEFINE);
			State = 658; _localctx.Id = identifier();
			State = 659; Match(ASSIGN_OP);
			State = 660; _localctx.Expr = expression(0);
			State = 663;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 661; Match(AS);
				State = 662; _localctx.DataType = typeName();
				}
			}

			State = 665; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public IToken Alignment;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public ITerminalNode VOSTRUCT() { return GetToken(XSharpParser.VOSTRUCT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public VostructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostruct(this);
		}
	}

	[RuleVersion(0)]
	public VostructContext vostruct() {
		VostructContext _localctx = new VostructContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_vostruct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 667; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 670; Match(VOSTRUCT);
			State = 672;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 671; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 674; _localctx.Id = identifier();
			State = 677;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALIGN) {
				{
				State = 675; Match(ALIGN);
				State = 676; _localctx.Alignment = Match(INT_CONST);
				}
			}

			State = 679; _localctx.e = eos();
			State = 681;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 680; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 683;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,74,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructmemberContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public IToken As;
		public DatatypeContext DataType;
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public VostructmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostructmember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostructmember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostructmember(this);
		}
	}

	[RuleVersion(0)]
	public VostructmemberContext vostructmember() {
		VostructmemberContext _localctx = new VostructmemberContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_vostructmember);
		int _la;
		try {
			State = 705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 685; Match(MEMBER);
				State = 686; _localctx.Dim = Match(DIM);
				State = 687; _localctx.Id = identifier();
				State = 688; Match(LBRKT);
				State = 689; _localctx.ArraySub = arraysub();
				State = 690; Match(RBRKT);
				State = 693;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 691;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 692; _localctx.DataType = datatype();
					}
				}

				State = 695; eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 697; Match(MEMBER);
				State = 698; _localctx.Id = identifier();
				State = 701;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 699;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 700; _localctx.DataType = datatype();
					}
				}

				State = 703; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VounionContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public ITerminalNode UNION() { return GetToken(XSharpParser.UNION, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public VounionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vounion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVounion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVounion(this);
		}
	}

	[RuleVersion(0)]
	public VounionContext vounion() {
		VounionContext _localctx = new VounionContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_vounion);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 707; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 710; Match(UNION);
			State = 712;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 711; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 714; _localctx.Id = identifier();
			State = 715; _localctx.e = eos();
			State = 717;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 716; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 719;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,80,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VotypeModifiersContext : XSharpParserRuleContext {
		public IToken _INTERNAL;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _STATIC;
		public IToken _tset1294;
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public VotypeModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_votypeModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVotypeModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVotypeModifiers(this);
		}
	}

	[RuleVersion(0)]
	public VotypeModifiersContext votypeModifiers() {
		VotypeModifiersContext _localctx = new VotypeModifiersContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_votypeModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 721;
				_localctx._tset1294 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==UNSAFE) ) {
					_localctx._tset1294 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1294);
				}
				}
				State = 724;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_Context : XSharpParserRuleContext {
		public NameContext Name;
		public EosContext e;
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public NameContext Ignored;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] NAMESPACE() { return GetTokens(XSharpParser.NAMESPACE); }
		public ITerminalNode NAMESPACE(int i) {
			return GetToken(XSharpParser.NAMESPACE, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public Namespace_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamespace_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamespace_(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_Context namespace_() {
		Namespace_Context _localctx = new Namespace_Context(_ctx, State);
		EnterRule(_localctx, 50, RULE_namespace_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726; Match(BEGIN);
			State = 727; Match(NAMESPACE);
			State = 728; _localctx.Name = name(0);
			State = 729; _localctx.e = eos();
			State = 733;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << BEGIN) | (1L << CLASS) | (1L << DEFINE) | (1L << DLL) | (1L << EXPORT) | (1L << FUNC) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROC) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STATIC - 65)) | (1L << (UNION - 65)) | (1L << (USING - 65)) | (1L << (ABSTRACT - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (DELEGATE - 65)) | (1L << (DESTRUCTOR - 65)) | (1L << (ENUM - 65)) | (1L << (EVENT - 65)) | (1L << (INTERFACE - 65)) | (1L << (INTERNAL - 65)) | (1L << (NEW - 65)) | (1L << (PARTIAL - 65)) | (1L << (SEALED - 65)) | (1L << (STRUCTURE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOSTRUCT - 65)) | (1L << (ASYNC - 65)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (OVERRIDE - 130)) | (1L << (UNSAFE - 130)))) != 0) || _la==LBRKT) {
				{
				{
				State = 730; _localctx._entity = entity();
				_localctx._Entities.Add(_localctx._entity);
				}
				}
				State = 735;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 736; Match(END);
			State = 737; Match(NAMESPACE);
			State = 739;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
				{
				State = 738; _localctx.Ignored = name(0);
				}
			}

			State = 741; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public InterfaceModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Parents = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IdentifierContext Ignored;
		public ITerminalNode[] INTERFACE() { return GetTokens(XSharpParser.INTERFACE); }
		public ITerminalNode INTERFACE(int i) {
			return GetToken(XSharpParser.INTERFACE, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public InterfaceModifiersContext interfaceModifiers() {
			return GetRuleContext<InterfaceModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public Interface_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInterface_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInterface_(this);
		}
	}

	[RuleVersion(0)]
	public Interface_Context interface_() {
		Interface_Context _localctx = new Interface_Context(_ctx, State);
		EnterRule(_localctx, 52, RULE_interface_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 743; _localctx.Attributes = attributes();
				}
			}

			State = 747;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (PARTIAL - 100)) | (1L << (UNSAFE - 100)))) != 0)) {
				{
				State = 746; _localctx.Modifiers = interfaceModifiers();
				}
			}

			State = 749; Match(INTERFACE);
			State = 751;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 750; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 753; _localctx.Id = identifier();
			State = 755;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 754; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 759;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT || _la==COLON) {
				{
				State = 757;
				_la = _input.La(1);
				if ( !(_la==INHERIT || _la==COLON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 758; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
			}

			State = 765;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 761; Match(COMMA);
				State = 762; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
				}
				State = 767;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 771;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 768; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 773;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 774; _localctx.e = eos();
			State = 778;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,91,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 775; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 780;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,91,_ctx);
			}
			State = 781; Match(END);
			State = 782; Match(INTERFACE);
			State = 784;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
				{
				State = 783; _localctx.Ignored = identifier();
				}
			}

			State = 786; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _UNSAFE;
		public IToken _PARTIAL;
		public IToken _tset1457;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] PARTIAL() { return GetTokens(XSharpParser.PARTIAL); }
		public ITerminalNode PARTIAL(int i) {
			return GetToken(XSharpParser.PARTIAL, i);
		}
		public InterfaceModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInterfaceModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInterfaceModifiers(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceModifiersContext interfaceModifiers() {
		InterfaceModifiersContext _localctx = new InterfaceModifiersContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_interfaceModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 788;
				_localctx._tset1457 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (PARTIAL - 100)) | (1L << (UNSAFE - 100)))) != 0)) ) {
					_localctx._tset1457 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1457);
				}
				}
				State = 791;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (PARTIAL - 100)) | (1L << (UNSAFE - 100)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IdentifierContext Ignored;
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Class_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClass_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClass_(this);
		}
	}

	[RuleVersion(0)]
	public Class_Context class_() {
		Class_Context _localctx = new Class_Context(_ctx, State);
		EnterRule(_localctx, 56, RULE_class_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 793; _localctx.Attributes = attributes();
				}
			}

			State = 797;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (PARTIAL - 100)) | (1L << (SEALED - 100)) | (1L << (UNSAFE - 100)))) != 0)) {
				{
				State = 796; _localctx.Modifiers = classModifiers();
				}
			}

			State = 799; Match(CLASS);
			State = 801;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				State = 800; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 803; _localctx.Id = identifier();
			State = 805;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 804; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 809;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT) {
				{
				State = 807; Match(INHERIT);
				State = 808; _localctx.BaseType = datatype();
				}
			}

			State = 820;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 811; Match(IMPLEMENTS);
				State = 812; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 817;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 813; Match(COMMA);
					State = 814; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 819;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 825;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 822; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 827;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 828; _localctx.e = eos();
			State = 832;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,102,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 829; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 834;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,102,_ctx);
			}
			State = 835; Match(END);
			State = 836; Match(CLASS);
			State = 838;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
				{
				State = 837; _localctx.Ignored = identifier();
				}
			}

			State = 840; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _ABSTRACT;
		public IToken _SEALED;
		public IToken _STATIC;
		public IToken _UNSAFE;
		public IToken _PARTIAL;
		public IToken _tset1604;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] PARTIAL() { return GetTokens(XSharpParser.PARTIAL); }
		public ITerminalNode PARTIAL(int i) {
			return GetToken(XSharpParser.PARTIAL, i);
		}
		public ClassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifiersContext classModifiers() {
		ClassModifiersContext _localctx = new ClassModifiersContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_classModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 842;
				_localctx._tset1604 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (PARTIAL - 100)) | (1L << (SEALED - 100)) | (1L << (UNSAFE - 100)))) != 0)) ) {
					_localctx._tset1604 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1604);
				}
				}
				State = 845;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (PARTIAL - 100)) | (1L << (SEALED - 100)) | (1L << (UNSAFE - 100)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparametersContext : XSharpParserRuleContext {
		public TypeparameterContext _typeparameter;
		public IList<TypeparameterContext> _TypeParams = new List<TypeparameterContext>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public TypeparameterContext[] typeparameter() {
			return GetRuleContexts<TypeparameterContext>();
		}
		public TypeparameterContext typeparameter(int i) {
			return GetRuleContext<TypeparameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public TypeparametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeparametersContext typeparameters() {
		TypeparametersContext _localctx = new TypeparametersContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_typeparameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847; Match(LT);
			State = 848; _localctx._typeparameter = typeparameter();
			_localctx._TypeParams.Add(_localctx._typeparameter);
			State = 856;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 849; Match(COMMA);
				State = 851;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					State = 850; attributes();
					}
					break;
				}
				State = 853; _localctx._typeparameter = typeparameter();
				_localctx._TypeParams.Add(_localctx._typeparameter);
				}
				}
				State = 858;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 859; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken VarianceKeyword;
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public TypeparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterContext typeparameter() {
		TypeparameterContext _localctx = new TypeparameterContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_typeparameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 861; _localctx.Attributes = attributes();
				}
			}

			State = 865;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 864;
				_localctx.VarianceKeyword = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==IN || _la==OUT) ) {
					_localctx.VarianceKeyword = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 867; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintsclauseContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public TypeparameterconstraintContext _typeparameterconstraint;
		public IList<TypeparameterconstraintContext> _Constraints = new List<TypeparameterconstraintContext>();
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public TypeparameterconstraintContext[] typeparameterconstraint() {
			return GetRuleContexts<TypeparameterconstraintContext>();
		}
		public TypeparameterconstraintContext typeparameterconstraint(int i) {
			return GetRuleContext<TypeparameterconstraintContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TypeparameterconstraintsclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraintsclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameterconstraintsclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameterconstraintsclause(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintsclauseContext typeparameterconstraintsclause() {
		TypeparameterconstraintsclauseContext _localctx = new TypeparameterconstraintsclauseContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_typeparameterconstraintsclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869; Match(WHERE);
			State = 870; _localctx.Name = identifierName();
			State = 871; Match(IS);
			State = 872; _localctx._typeparameterconstraint = typeparameterconstraint();
			_localctx._Constraints.Add(_localctx._typeparameterconstraint);
			State = 877;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 873; Match(COMMA);
				State = 874; _localctx._typeparameterconstraint = typeparameterconstraint();
				_localctx._Constraints.Add(_localctx._typeparameterconstraint);
				}
				}
				State = 879;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintContext : XSharpParserRuleContext {
		public TypeparameterconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraint; } }
	 
		public TypeparameterconstraintContext() { }
		public virtual void CopyFrom(TypeparameterconstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassOrStructConstraintContext : TypeparameterconstraintContext {
		public IToken Key;
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ClassOrStructConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassOrStructConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassOrStructConstraint(this);
		}
	}
	public partial class ConstructorConstraintContext : TypeparameterconstraintContext {
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ConstructorConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
	}
	public partial class TypeConstraintContext : TypeparameterconstraintContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintContext typeparameterconstraint() {
		TypeparameterconstraintContext _localctx = new TypeparameterconstraintContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_typeparameterconstraint);
		int _la;
		try {
			State = 885;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
			case 1:
				_localctx = new ClassOrStructConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 880;
				((ClassOrStructConstraintContext)_localctx).Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STRUCTURE) ) {
					((ClassOrStructConstraintContext)_localctx).Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 881; ((TypeConstraintContext)_localctx).Type = typeName();
				}
				break;

			case 3:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 882; Match(NEW);
				State = 883; Match(LPAREN);
				State = 884; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public StructureModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IdentifierContext Ignored;
		public ITerminalNode[] STRUCTURE() { return GetTokens(XSharpParser.STRUCTURE); }
		public ITerminalNode STRUCTURE(int i) {
			return GetToken(XSharpParser.STRUCTURE, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public StructureModifiersContext structureModifiers() {
			return GetRuleContext<StructureModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Structure_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStructure_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStructure_(this);
		}
	}

	[RuleVersion(0)]
	public Structure_Context structure_() {
		Structure_Context _localctx = new Structure_Context(_ctx, State);
		EnterRule(_localctx, 68, RULE_structure_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 887; _localctx.Attributes = attributes();
				}
			}

			State = 891;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (PARTIAL - 100)) | (1L << (UNSAFE - 100)))) != 0)) {
				{
				State = 890; _localctx.Modifiers = structureModifiers();
				}
			}

			State = 893; Match(STRUCTURE);
			State = 895;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				State = 894; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 897; _localctx.Id = identifier();
			State = 899;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 898; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 910;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 901; Match(IMPLEMENTS);
				State = 902; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 907;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 903; Match(COMMA);
					State = 904; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 909;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 915;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 912; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 917;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 918; _localctx.e = eos();
			State = 922;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,118,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 919; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 924;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,118,_ctx);
			}
			State = 925; Match(END);
			State = 926; Match(STRUCTURE);
			State = 928;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
				{
				State = 927; _localctx.Ignored = identifier();
				}
			}

			State = 930; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _UNSAFE;
		public IToken _PARTIAL;
		public IToken _tset1875;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] PARTIAL() { return GetTokens(XSharpParser.PARTIAL); }
		public ITerminalNode PARTIAL(int i) {
			return GetToken(XSharpParser.PARTIAL, i);
		}
		public StructureModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStructureModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStructureModifiers(this);
		}
	}

	[RuleVersion(0)]
	public StructureModifiersContext structureModifiers() {
		StructureModifiersContext _localctx = new StructureModifiersContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_structureModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 932;
				_localctx._tset1875 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (PARTIAL - 100)) | (1L << (UNSAFE - 100)))) != 0)) ) {
					_localctx._tset1875 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1875);
				}
				}
				State = 935;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (PARTIAL - 100)) | (1L << (UNSAFE - 100)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DelegateModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public DelegateModifiersContext delegateModifiers() {
			return GetRuleContext<DelegateModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public Delegate_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegate_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegate_(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_Context delegate_() {
		Delegate_Context _localctx = new Delegate_Context(_ctx, State);
		EnterRule(_localctx, 72, RULE_delegate_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 937; _localctx.Attributes = attributes();
				}
			}

			State = 941;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (UNSAFE - 100)))) != 0)) {
				{
				State = 940; _localctx.Modifiers = delegateModifiers();
				}
			}

			State = 943; Match(DELEGATE);
			State = 945;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 944; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 947; _localctx.Id = identifier();
			State = 949;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 948; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 952;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 951; _localctx.ParamList = parameterList();
				}
			}

			State = 956;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 954; Match(AS);
				State = 955; _localctx.Type = datatype();
				}
			}

			State = 961;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 958; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 963;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 964; _localctx.e = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _UNSAFE;
		public IToken _tset1987;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public DelegateModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegateModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegateModifiers(this);
		}
	}

	[RuleVersion(0)]
	public DelegateModifiersContext delegateModifiers() {
		DelegateModifiersContext _localctx = new DelegateModifiersContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_delegateModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 966;
				_localctx._tset1987 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (UNSAFE - 100)))) != 0)) ) {
					_localctx._tset1987 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1987);
				}
				}
				State = 969;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (UNSAFE - 100)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public EnumModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public EosContext e;
		public EnummemberContext _enummember;
		public IList<EnummemberContext> _Members = new List<EnummemberContext>();
		public IdentifierContext Ignored;
		public ITerminalNode[] ENUM() { return GetTokens(XSharpParser.ENUM); }
		public ITerminalNode ENUM(int i) {
			return GetToken(XSharpParser.ENUM, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public EnumModifiersContext enumModifiers() {
			return GetRuleContext<EnumModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EnummemberContext[] enummember() {
			return GetRuleContexts<EnummemberContext>();
		}
		public EnummemberContext enummember(int i) {
			return GetRuleContext<EnummemberContext>(i);
		}
		public Enum_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnum_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnum_(this);
		}
	}

	[RuleVersion(0)]
	public Enum_Context enum_() {
		Enum_Context _localctx = new Enum_Context(_ctx, State);
		EnterRule(_localctx, 76, RULE_enum_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 971; _localctx.Attributes = attributes();
				}
			}

			State = 975;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL || _la==NEW) {
				{
				State = 974; _localctx.Modifiers = enumModifiers();
				}
			}

			State = 977; Match(ENUM);
			State = 979;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				State = 978; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 981; _localctx.Id = identifier();
			State = 984;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==INHERIT) {
				{
				State = 982;
				_la = _input.La(1);
				if ( !(_la==AS || _la==INHERIT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 983; _localctx.Type = datatype();
				}
			}

			State = 986; _localctx.e = eos();
			State = 988;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 987; _localctx._enummember = enummember();
				_localctx._Members.Add(_localctx._enummember);
				}
				}
				State = 990;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMBER) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (LBRKT - 262)) | (1L << (ID - 262)) | (1L << (KWID - 262)))) != 0) );
			State = 992; Match(END);
			State = 994;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				State = 993; Match(ENUM);
				}
				break;
			}
			State = 997;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
				{
				State = 996; _localctx.Ignored = identifier();
				}
			}

			State = 999; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _tset2101;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public EnumModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnumModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnumModifiers(this);
		}
	}

	[RuleVersion(0)]
	public EnumModifiersContext enumModifiers() {
		EnumModifiersContext _localctx = new EnumModifiersContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_enumModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1001;
				_localctx._tset2101 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL || _la==NEW) ) {
					_localctx._tset2101 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset2101);
				}
				}
				State = 1004;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL || _la==NEW );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnummemberContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IdentifierContext Id;
		public ExpressionContext Expr;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnummemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enummember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnummember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnummember(this);
		}
	}

	[RuleVersion(0)]
	public EnummemberContext enummember() {
		EnummemberContext _localctx = new EnummemberContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_enummember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1006; _localctx.Attributes = attributes();
				}
			}

			State = 1010;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==MEMBER) {
				{
				State = 1009; Match(MEMBER);
				}
			}

			State = 1012; _localctx.Id = identifier();
			State = 1015;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGN_OP) {
				{
				State = 1013; Match(ASSIGN_OP);
				State = 1014; _localctx.Expr = expression(0);
				}
			}

			State = 1017; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public EventModifiersContext Modifiers;
		public NameDotContext ExplicitIface;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public EosContext end;
		public EventLineAccessorContext _eventLineAccessor;
		public IList<EventLineAccessorContext> _LineAccessors = new List<EventLineAccessorContext>();
		public EosContext Multi;
		public EventAccessorContext _eventAccessor;
		public IList<EventAccessorContext> _Accessors = new List<EventAccessorContext>();
		public IdentifierContext Ignored;
		public ITerminalNode[] EVENT() { return GetTokens(XSharpParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(XSharpParser.EVENT, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public EventModifiersContext eventModifiers() {
			return GetRuleContext<EventModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EventLineAccessorContext[] eventLineAccessor() {
			return GetRuleContexts<EventLineAccessorContext>();
		}
		public EventLineAccessorContext eventLineAccessor(int i) {
			return GetRuleContext<EventLineAccessorContext>(i);
		}
		public EventAccessorContext[] eventAccessor() {
			return GetRuleContexts<EventAccessorContext>();
		}
		public EventAccessorContext eventAccessor(int i) {
			return GetRuleContext<EventAccessorContext>(i);
		}
		public Event_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEvent_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEvent_(this);
		}
	}

	[RuleVersion(0)]
	public Event_Context event_() {
		Event_Context _localctx = new Event_Context(_ctx, State);
		EnterRule(_localctx, 82, RULE_event_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1019; _localctx.Attributes = attributes();
				}
			}

			State = 1023;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (SEALED - 100)) | (1L << (VIRTUAL - 100)) | (1L << (UNSAFE - 100)))) != 0)) {
				{
				State = 1022; _localctx.Modifiers = eventModifiers();
				}
			}

			State = 1025; Match(EVENT);
			State = 1027;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				State = 1026; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 1029; _localctx.Id = identifier();
			State = 1032;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
			case 1:
				{
				State = 1030; Match(AS);
				State = 1031; _localctx.Type = datatype();
				}
				break;
			}
			State = 1057;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				State = 1034; _localctx.end = eos();
				}
				break;

			case 2:
				{
				State = 1036;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1035; _localctx._eventLineAccessor = eventLineAccessor();
						_localctx._LineAccessors.Add(_localctx._eventLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1038;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,144,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1040; _localctx.end = eos();
				}
				break;

			case 3:
				{
				State = 1042; _localctx.Multi = eos();
				State = 1044;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1043; _localctx._eventAccessor = eventAccessor();
					_localctx._Accessors.Add(_localctx._eventAccessor);
					}
					}
					State = 1046;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (ADD - 100)) | (1L << (REMOVE - 100)))) != 0) || _la==LBRKT );
				State = 1048; Match(END);
				State = 1050;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					State = 1049; Match(EVENT);
					}
					break;
				}
				State = 1053;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
					{
					State = 1052; _localctx.Ignored = identifier();
					}
				}

				State = 1055; eos();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _STATIC;
		public IToken _VIRTUAL;
		public IToken _SEALED;
		public IToken _ABSTRACT;
		public IToken _UNSAFE;
		public IToken _tset2262;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] VIRTUAL() { return GetTokens(XSharpParser.VIRTUAL); }
		public ITerminalNode VIRTUAL(int i) {
			return GetToken(XSharpParser.VIRTUAL, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public EventModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventModifiers(this);
		}
	}

	[RuleVersion(0)]
	public EventModifiersContext eventModifiers() {
		EventModifiersContext _localctx = new EventModifiersContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_eventModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1059;
				_localctx._tset2262 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (SEALED - 100)) | (1L << (VIRTUAL - 100)) | (1L << (UNSAFE - 100)))) != 0)) ) {
					_localctx._tset2262 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset2262);
				}
				}
				State = 1062;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (SEALED - 100)) | (1L << (VIRTUAL - 100)) | (1L << (UNSAFE - 100)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionListContext ExprList;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public EventLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventLineAccessorContext eventLineAccessor() {
		EventLineAccessorContext _localctx = new EventLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_eventLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				State = 1064; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1068;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				State = 1067; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1081;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				State = 1070;
				if (!(InputStream.La(2) != REMOVE)) throw new FailedPredicateException(this, "InputStream.La(2) != REMOVE");
				State = 1071; _localctx.Key = Match(ADD);
				State = 1073;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					State = 1072; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1075;
				if (!(InputStream.La(2) != ADD)) throw new FailedPredicateException(this, "InputStream.La(2) != ADD");
				State = 1076; _localctx.Key = Match(REMOVE);
				State = 1078;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
				case 1:
					{
					State = 1077; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1080;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ADD || _la==REMOVE) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] ADD() { return GetTokens(XSharpParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(XSharpParser.ADD, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode[] REMOVE() { return GetTokens(XSharpParser.REMOVE); }
		public ITerminalNode REMOVE(int i) {
			return GetToken(XSharpParser.REMOVE, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public EventAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventAccessorContext eventAccessor() {
		EventAccessorContext _localctx = new EventAccessorContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_eventAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1084;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1083; _localctx.Attributes = attributes();
				}
			}

			State = 1087;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1086; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1103;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ADD:
				{
				State = 1089; _localctx.Key = Match(ADD);
				State = 1090; _localctx.end = eos();
				State = 1091; _localctx.StmtBlk = statementBlock();
				State = 1092; Match(END);
				State = 1094;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADD) {
					{
					State = 1093; Match(ADD);
					}
				}

				}
				break;
			case REMOVE:
				{
				State = 1096; _localctx.Key = Match(REMOVE);
				State = 1097; _localctx.end = eos();
				State = 1098; _localctx.StmtBlk = statementBlock();
				State = 1099; Match(END);
				State = 1101;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==REMOVE) {
					{
					State = 1100; Match(REMOVE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1105; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarsContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public ClassVarListContext Vars;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClassVarListContext classVarList() {
			return GetRuleContext<ClassVarListContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ClassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvars(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarsContext classvars() {
		ClassvarsContext _localctx = new ClassvarsContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_classvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1108;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1107; _localctx.Attributes = attributes();
				}
			}

			State = 1111;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				State = 1110; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 1113; _localctx.Vars = classVarList();
			State = 1114; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarModifiersContext : XSharpParserRuleContext {
		public IToken _INSTANCE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _CONST;
		public IToken _INITONLY;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _VOLATILE;
		public IToken _UNSAFE;
		public IToken _FIXED;
		public IToken _tset2463;
		public ITerminalNode[] INSTANCE() { return GetTokens(XSharpParser.INSTANCE); }
		public ITerminalNode INSTANCE(int i) {
			return GetToken(XSharpParser.INSTANCE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] CONST() { return GetTokens(XSharpParser.CONST); }
		public ITerminalNode CONST(int i) {
			return GetToken(XSharpParser.CONST, i);
		}
		public ITerminalNode[] INITONLY() { return GetTokens(XSharpParser.INITONLY); }
		public ITerminalNode INITONLY(int i) {
			return GetToken(XSharpParser.INITONLY, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] VOLATILE() { return GetTokens(XSharpParser.VOLATILE); }
		public ITerminalNode VOLATILE(int i) {
			return GetToken(XSharpParser.VOLATILE, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public ClassvarModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvarModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvarModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvarModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarModifiersContext classvarModifiers() {
		ClassvarModifiersContext _localctx = new ClassvarModifiersContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_classvarModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1116;
					_localctx._tset2463 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (INSTANCE - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (CONST - 28)))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (INITONLY - 98)) | (1L << (INTERNAL - 98)) | (1L << (FIXED - 98)) | (1L << (UNSAFE - 98)) | (1L << (VOLATILE - 98)))) != 0)) ) {
						_localctx._tset2463 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset2463);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1119;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,162,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassVarListContext : XSharpParserRuleContext {
		public ClassvarContext _classvar;
		public IList<ClassvarContext> _Var = new List<ClassvarContext>();
		public IToken As;
		public DatatypeContext DataType;
		public ClassvarContext[] classvar() {
			return GetRuleContexts<ClassvarContext>();
		}
		public ClassvarContext classvar(int i) {
			return GetRuleContext<ClassvarContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ClassVarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classVarList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassVarList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassVarList(this);
		}
	}

	[RuleVersion(0)]
	public ClassVarListContext classVarList() {
		ClassVarListContext _localctx = new ClassVarListContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_classVarList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121; _localctx._classvar = classvar();
			_localctx._Var.Add(_localctx._classvar);
			State = 1126;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1122; Match(COMMA);
				State = 1123; _localctx._classvar = classvar();
				_localctx._Var.Add(_localctx._classvar);
				}
				}
				State = 1128;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1131;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==IS) {
				{
				State = 1129;
				_localctx.As = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AS || _la==IS) ) {
					_localctx.As = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1130; _localctx.DataType = datatype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public ExpressionContext Initializer;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ClassvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvar(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarContext classvar() {
		ClassvarContext _localctx = new ClassvarContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_classvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				State = 1133; _localctx.Dim = Match(DIM);
				}
				break;
			}
			State = 1136; _localctx.Id = identifier();
			State = 1141;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1137; Match(LBRKT);
				State = 1138; _localctx.ArraySub = arraysub();
				State = 1139; Match(RBRKT);
				}
			}

			State = 1145;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGN_OP) {
				{
				State = 1143; Match(ASSIGN_OP);
				State = 1144; _localctx.Initializer = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraysubContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _ArrayIndex = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RBRKT() { return GetTokens(XSharpParser.RBRKT); }
		public ITerminalNode RBRKT(int i) {
			return GetToken(XSharpParser.RBRKT, i);
		}
		public ITerminalNode[] LBRKT() { return GetTokens(XSharpParser.LBRKT); }
		public ITerminalNode LBRKT(int i) {
			return GetToken(XSharpParser.LBRKT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArraysubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraysub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArraysub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArraysub(this);
		}
	}

	[RuleVersion(0)]
	public ArraysubContext arraysub() {
		ArraysubContext _localctx = new ArraysubContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_arraysub);
		int _la;
		try {
			int _alt;
			State = 1163;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1147; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1151;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1148; Match(RBRKT);
						State = 1149; Match(LBRKT);
						State = 1150; _localctx._expression = expression(0);
						_localctx._ArrayIndex.Add(_localctx._expression);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1153;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,168,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1155; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1158;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1156; Match(COMMA);
					State = 1157; _localctx._expression = expression(0);
					_localctx._ArrayIndex.Add(_localctx._expression);
					}
					}
					State = 1160;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COMMA );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1162; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public PropertyParameterListContext ParamList;
		public NameDotContext ExplicitIface;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken Auto;
		public PropertyAutoAccessorContext _propertyAutoAccessor;
		public IList<PropertyAutoAccessorContext> _AutoAccessors = new List<PropertyAutoAccessorContext>();
		public ExpressionContext Initializer;
		public EosContext end;
		public PropertyLineAccessorContext _propertyLineAccessor;
		public IList<PropertyLineAccessorContext> _LineAccessors = new List<PropertyLineAccessorContext>();
		public EosContext Multi;
		public PropertyAccessorContext _propertyAccessor;
		public IList<PropertyAccessorContext> _Accessors = new List<PropertyAccessorContext>();
		public IdentifierContext Ignored;
		public ITerminalNode[] PROPERTY() { return GetTokens(XSharpParser.PROPERTY); }
		public ITerminalNode PROPERTY(int i) {
			return GetToken(XSharpParser.PROPERTY, i);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public PropertyParameterListContext[] propertyParameterList() {
			return GetRuleContexts<PropertyParameterListContext>();
		}
		public PropertyParameterListContext propertyParameterList(int i) {
			return GetRuleContext<PropertyParameterListContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public PropertyAutoAccessorContext[] propertyAutoAccessor() {
			return GetRuleContexts<PropertyAutoAccessorContext>();
		}
		public PropertyAutoAccessorContext propertyAutoAccessor(int i) {
			return GetRuleContext<PropertyAutoAccessorContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyLineAccessorContext[] propertyLineAccessor() {
			return GetRuleContexts<PropertyLineAccessorContext>();
		}
		public PropertyLineAccessorContext propertyLineAccessor(int i) {
			return GetRuleContext<PropertyLineAccessorContext>(i);
		}
		public PropertyAccessorContext[] propertyAccessor() {
			return GetRuleContexts<PropertyAccessorContext>();
		}
		public PropertyAccessorContext propertyAccessor(int i) {
			return GetRuleContext<PropertyAccessorContext>(i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_property);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1166;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1165; _localctx.Attributes = attributes();
				}
			}

			State = 1169;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (SEALED - 100)) | (1L << (VIRTUAL - 100)) | (1L << (ASYNC - 100)) | (1L << (EXTERN - 100)) | (1L << (OVERRIDE - 100)) | (1L << (UNSAFE - 100)))) != 0)) {
				{
				State = 1168; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 1171; Match(PROPERTY);
			State = 1178;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SELF:
				{
				State = 1172; Match(SELF);
				State = 1173; _localctx.ParamList = propertyParameterList();
				}
				break;
			case ALIGN:
			case CALLBACK:
			case CLIPPER:
			case DECLARE:
			case DEFINE:
			case DIM:
			case DLLEXPORT:
			case DOWNTO:
			case FASTCALL:
			case FUNC:
			case GLOBAL:
			case INHERIT:
			case INSTANCE:
			case IN:
			case MEMVAR:
			case NAMEOF:
			case PARAMETERS:
			case PASCAL:
			case PROC:
			case SEQUENCE:
			case STEP:
			case STRICT:
			case THISCALL:
			case TO:
			case UNION:
			case UPTO:
			case USING:
			case WINCALL:
			case ABSTRACT:
			case ANSI:
			case AUTO:
			case CONST:
			case DEFAULT:
			case DELEGATE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case FOREACH:
			case GET:
			case IMPLEMENTS:
			case IMPLICIT:
			case IMPLIED:
			case INITONLY:
			case INTERFACE:
			case INTERNAL:
			case LOCK:
			case NAMESPACE:
			case NEW:
			case OPERATOR:
			case OUT:
			case PARTIAL:
			case PROPERTY:
			case SCOPE:
			case SEALED:
			case SET:
			case STRUCTURE:
			case TRY:
			case UNICODE:
			case UNTIL:
			case VALUE:
			case VIRTUAL:
			case VOSTRUCT:
			case ADD:
			case ARGLIST:
			case ASCENDING:
			case ASSEMBLY:
			case ASYNC:
			case ASTYPE:
			case AWAIT:
			case BY:
			case CHECKED:
			case DESCENDING:
			case EQUALS:
			case EXTERN:
			case FIXED:
			case FROM:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NOP:
			case MODULE:
			case OF:
			case ON:
			case ORDERBY:
			case OVERRIDE:
			case PARAMS:
			case REMOVE:
			case SELECT:
			case SWITCH:
			case UNCHECKED:
			case UNSAFE:
			case VAR:
			case VOLATILE:
			case WHERE:
			case YIELD:
			case CHAR:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
			case ASSIGNMENT:
			case ENDCLASS:
			case EXPORTED:
			case FREEZE:
			case FINAL:
			case INLINE:
			case INTRODUCE:
			case NOSAVE:
			case READONLY:
			case SHARING:
			case SHARED:
			case SYNC:
			case ID:
			case KWID:
				{
				State = 1175;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,173,_ctx) ) {
				case 1:
					{
					State = 1174; _localctx.ExplicitIface = nameDot(0);
					}
					break;
				}
				State = 1177; _localctx.Id = identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				State = 1180; _localctx.ParamList = propertyParameterList();
				}
				break;
			}
			State = 1185;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 1183; Match(AS);
				State = 1184; _localctx.Type = datatype();
				}
				break;
			}
			State = 1221;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				State = 1187; _localctx.Auto = Match(AUTO);
				State = 1191;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (GET - 94)) | (1L << (INTERNAL - 94)) | (1L << (SET - 94)))) != 0) || _la==LBRKT) {
					{
					{
					State = 1188; _localctx._propertyAutoAccessor = propertyAutoAccessor();
					_localctx._AutoAccessors.Add(_localctx._propertyAutoAccessor);
					}
					}
					State = 1193;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1196;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ASSIGN_OP) {
					{
					State = 1194; Match(ASSIGN_OP);
					State = 1195; _localctx.Initializer = expression(0);
					}
				}

				State = 1198; _localctx.end = eos();
				}
				break;

			case 2:
				{
				State = 1200;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1199; _localctx._propertyLineAccessor = propertyLineAccessor();
						_localctx._LineAccessors.Add(_localctx._propertyLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1202;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,179,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1204; _localctx.end = eos();
				}
				break;

			case 3:
				{
				State = 1206; _localctx.Multi = eos();
				State = 1208;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1207; _localctx._propertyAccessor = propertyAccessor();
					_localctx._Accessors.Add(_localctx._propertyAccessor);
					}
					}
					State = 1210;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (GET - 94)) | (1L << (INTERNAL - 94)) | (1L << (SET - 94)))) != 0) || _la==LBRKT );
				State = 1212; Match(END);
				State = 1214;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
				case 1:
					{
					State = 1213; Match(PROPERTY);
					}
					break;
				}
				State = 1217;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
					{
					State = 1216; _localctx.Ignored = identifier();
					}
				}

				State = 1219; eos();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyParameterListContext : XSharpParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public PropertyParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyParameterList(this);
		}
	}

	[RuleVersion(0)]
	public PropertyParameterListContext propertyParameterList() {
		PropertyParameterListContext _localctx = new PropertyParameterListContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_propertyParameterList);
		int _la;
		try {
			State = 1247;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1223; Match(LBRKT);
				State = 1232;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SELF) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (LBRKT - 262)) | (1L << (ELLIPSIS - 262)) | (1L << (ID - 262)) | (1L << (KWID - 262)))) != 0)) {
					{
					State = 1224; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1229;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1225; Match(COMMA);
						State = 1226; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1231;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 1234; Match(RBRKT);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1235; Match(LPAREN);
				State = 1244;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SELF) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (LBRKT - 262)) | (1L << (ELLIPSIS - 262)) | (1L << (ID - 262)) | (1L << (KWID - 262)))) != 0)) {
					{
					State = 1236; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1241;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1237; Match(COMMA);
						State = 1238; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1243;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 1246; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAutoAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public PropertyAutoAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAutoAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAutoAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAutoAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAutoAccessorContext propertyAutoAccessor() {
		PropertyAutoAccessorContext _localctx = new PropertyAutoAccessorContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_propertyAutoAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1249; _localctx.Attributes = attributes();
				}
			}

			State = 1253;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1252; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1255;
			_localctx.Key = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==GET || _la==SET) ) {
				_localctx.Key = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionContext Expr;
		public ExpressionListContext ExprList;
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public PropertyLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLineAccessorContext propertyLineAccessor() {
		PropertyLineAccessorContext _localctx = new PropertyLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_propertyLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				State = 1257; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1261;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				State = 1260; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1274;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				State = 1263;
				if (!(InputStream.La(2) != SET)) throw new FailedPredicateException(this, "InputStream.La(2) != SET");
				State = 1264; _localctx.Key = Match(GET);
				State = 1266;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,193,_ctx) ) {
				case 1:
					{
					State = 1265; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1268;
				if (!(InputStream.La(2) != GET)) throw new FailedPredicateException(this, "InputStream.La(2) != GET");
				State = 1269; _localctx.Key = Match(SET);
				State = 1271;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
				case 1:
					{
					State = 1270; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1273;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==GET || _la==SET) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorModifiersContext : XSharpParserRuleContext {
		public IToken _PRIVATE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _tset2903;
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public AccessorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public AccessorModifiersContext accessorModifiers() {
		AccessorModifiersContext _localctx = new AccessorModifiersContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_accessorModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1277;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1276;
					_localctx._tset2903 = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) ) {
						_localctx._tset2903 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset2903);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1279;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,196,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281; _localctx._expression = expression(0);
			_localctx._Exprs.Add(_localctx._expression);
			State = 1286;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,197,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1282; Match(COMMA);
					State = 1283; _localctx._expression = expression(0);
					_localctx._Exprs.Add(_localctx._expression);
					}
					} 
				}
				State = 1288;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,197,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] GET() { return GetTokens(XSharpParser.GET); }
		public ITerminalNode GET(int i) {
			return GetToken(XSharpParser.GET, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode[] SET() { return GetTokens(XSharpParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(XSharpParser.SET, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public PropertyAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAccessorContext propertyAccessor() {
		PropertyAccessorContext _localctx = new PropertyAccessorContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_propertyAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1289; _localctx.Attributes = attributes();
				}
			}

			State = 1293;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1292; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1309;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case GET:
				{
				State = 1295; _localctx.Key = Match(GET);
				State = 1296; _localctx.end = eos();
				State = 1297; _localctx.StmtBlk = statementBlock();
				State = 1298; Match(END);
				State = 1300;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==GET) {
					{
					State = 1299; Match(GET);
					}
				}

				}
				break;
			case SET:
				{
				State = 1302; _localctx.Key = Match(SET);
				State = 1303; _localctx.end = eos();
				State = 1304; _localctx.StmtBlk = statementBlock();
				State = 1305; Match(END);
				State = 1307;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SET) {
					{
					State = 1306; Match(SET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1311; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassmemberContext : XSharpParserRuleContext {
		public ClassmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classmember; } }
	 
		public ClassmemberContext() { }
		public virtual void CopyFrom(ClassmemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassContext : ClassmemberContext {
		public Class_Context Member;
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public NestedClassContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedClass(this);
		}
	}
	public partial class NestedStructureContext : ClassmemberContext {
		public Structure_Context Member;
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public NestedStructureContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedStructure(this);
		}
	}
	public partial class NestedEventContext : ClassmemberContext {
		public Event_Context Member;
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public NestedEventContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEvent(this);
		}
	}
	public partial class ClsmethodContext : ClassmemberContext {
		public MethodContext Member;
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public ClsmethodContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsmethod(this);
		}
	}
	public partial class ClsdtorContext : ClassmemberContext {
		public DestructorContext Member;
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public ClsdtorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdtor(this);
		}
	}
	public partial class ClspropertyContext : ClassmemberContext {
		public PropertyContext Member;
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ClspropertyContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsproperty(this);
		}
	}
	public partial class ClsctorContext : ClassmemberContext {
		public ConstructorContext Member;
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public ClsctorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsctor(this);
		}
	}
	public partial class ClsvarsContext : ClassmemberContext {
		public ClassvarsContext Member;
		public ClassvarsContext classvars() {
			return GetRuleContext<ClassvarsContext>(0);
		}
		public ClsvarsContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsvars(this);
		}
	}
	public partial class NestedDelegateContext : ClassmemberContext {
		public Delegate_Context Member;
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public NestedDelegateContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedDelegate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedDelegate(this);
		}
	}
	public partial class ClsprocedureContext : ClassmemberContext {
		public ProcedureContext Member;
		public ProcedureContext procedure() {
			return GetRuleContext<ProcedureContext>(0);
		}
		public ClsprocedureContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsprocedure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsprocedure(this);
		}
	}
	public partial class NestedInterfaceContext : ClassmemberContext {
		public Interface_Context Member;
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public NestedInterfaceContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedInterface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedInterface(this);
		}
	}
	public partial class ClsfunctionContext : ClassmemberContext {
		public FunctionContext Member;
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ClsfunctionContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsfunction(this);
		}
	}
	public partial class ClsoperatorContext : ClassmemberContext {
		public Operator_Context Member;
		public Operator_Context operator_() {
			return GetRuleContext<Operator_Context>(0);
		}
		public ClsoperatorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsoperator(this);
		}
	}
	public partial class ClsdeclareContext : ClassmemberContext {
		public DeclareContext decl;
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public ClsdeclareContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdeclare(this);
		}
	}
	public partial class NestedEnumContext : ClassmemberContext {
		public Enum_Context Member;
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public NestedEnumContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEnum(this);
		}
	}

	[RuleVersion(0)]
	public ClassmemberContext classmember() {
		ClassmemberContext _localctx = new ClassmemberContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_classmember);
		try {
			State = 1330;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,203,_ctx) ) {
			case 1:
				_localctx = new ClsmethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1313; ((ClsmethodContext)_localctx).Member = method();
				}
				break;

			case 2:
				_localctx = new ClsdeclareContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1314; ((ClsdeclareContext)_localctx).decl = declare();
				}
				break;

			case 3:
				_localctx = new ClsctorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1315; ((ClsctorContext)_localctx).Member = constructor();
				}
				break;

			case 4:
				_localctx = new ClsdtorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1316; ((ClsdtorContext)_localctx).Member = destructor();
				}
				break;

			case 5:
				_localctx = new ClsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1317; ((ClsvarsContext)_localctx).Member = classvars();
				}
				break;

			case 6:
				_localctx = new ClspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1318; ((ClspropertyContext)_localctx).Member = property();
				}
				break;

			case 7:
				_localctx = new ClsoperatorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1319; ((ClsoperatorContext)_localctx).Member = operator_();
				}
				break;

			case 8:
				_localctx = new NestedStructureContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1320; ((NestedStructureContext)_localctx).Member = structure_();
				}
				break;

			case 9:
				_localctx = new NestedClassContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1321; ((NestedClassContext)_localctx).Member = class_();
				}
				break;

			case 10:
				_localctx = new NestedDelegateContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1322; ((NestedDelegateContext)_localctx).Member = delegate_();
				}
				break;

			case 11:
				_localctx = new NestedEnumContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1323; ((NestedEnumContext)_localctx).Member = enum_();
				}
				break;

			case 12:
				_localctx = new NestedEventContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1324; ((NestedEventContext)_localctx).Member = event_();
				}
				break;

			case 13:
				_localctx = new NestedInterfaceContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1325; ((NestedInterfaceContext)_localctx).Member = interface_();
				}
				break;

			case 14:
				_localctx = new ClsfunctionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1326;
				if (!(AllowFunctionInsideClass)) throw new FailedPredicateException(this, "AllowFunctionInsideClass");
				State = 1327; ((ClsfunctionContext)_localctx).Member = function();
				}
				break;

			case 15:
				_localctx = new ClsprocedureContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1328;
				if (!(AllowFunctionInsideClass)) throw new FailedPredicateException(this, "AllowFunctionInsideClass");
				State = 1329; ((ClsprocedureContext)_localctx).Member = procedure();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ConstructorModifiersContext Modifiers;
		public ParameterListContext ParamList;
		public CallingconventionContext CallingConvention;
		public NameDotContext Namespace;
		public IdentifierContext ClassId;
		public EosContext end;
		public IToken Chain;
		public ArgumentListContext ArgList;
		public StatementBlockContext StmtBlk;
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ConstructorModifiersContext constructorModifiers() {
			return GetRuleContext<ConstructorModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1333;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1332; _localctx.Attributes = attributes();
				}
			}

			State = 1336;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==EXTERN) {
				{
				State = 1335; _localctx.Modifiers = constructorModifiers();
				}
			}

			State = 1338; Match(CONSTRUCTOR);
			State = 1340;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1339; _localctx.ParamList = parameterList();
				}
			}

			State = 1344;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1342; Match(AS);
				State = 1343; Match(VOID);
				}
			}

			State = 1347;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (STRICT - 67)) | (1L << (THISCALL - 67)) | (1L << (WINCALL - 67)))) != 0)) {
				{
				State = 1346; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 1354;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1349; Match(CLASS);
				State = 1351;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
				case 1:
					{
					State = 1350; _localctx.Namespace = nameDot(0);
					}
					break;
				}
				State = 1353; _localctx.ClassId = identifier();
				}
			}

			State = 1356; _localctx.end = eos();
			State = 1367;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,212,_ctx) ) {
			case 1:
				{
				State = 1357;
				_localctx.Chain = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SELF || _la==SUPER) ) {
					_localctx.Chain = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1364;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,211,_ctx) ) {
				case 1:
					{
					{
					State = 1358; Match(LPAREN);
					State = 1359; Match(RPAREN);
					}
					}
					break;

				case 2:
					{
					{
					State = 1360; Match(LPAREN);
					State = 1361; _localctx.ArgList = argumentList();
					State = 1362; Match(RPAREN);
					}
					}
					break;
				}
				State = 1366; eos();
				}
				break;
			}
			State = 1369; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _EXTERN;
		public IToken _STATIC;
		public IToken _tset3272;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ConstructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifiersContext constructorModifiers() {
		ConstructorModifiersContext _localctx = new ConstructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_constructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1372;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1371;
				_localctx._tset3272 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==EXTERN) ) {
					_localctx._tset3272 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3272);
				}
				}
				State = 1374;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)))) != 0) || _la==INTERNAL || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : XSharpParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Ids = new List<IdentifierContext>();
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_declare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1376; Match(DECLARE);
			State = 1377;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1378; _localctx._identifier = identifier();
			_localctx._Ids.Add(_localctx._identifier);
			State = 1383;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1379; Match(COMMA);
				State = 1380; _localctx._identifier = identifier();
				_localctx._Ids.Add(_localctx._identifier);
				}
				}
				State = 1385;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1386; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DestructorModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext ClassId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode DESTRUCTOR() { return GetToken(XSharpParser.DESTRUCTOR, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public DestructorModifiersContext destructorModifiers() {
			return GetRuleContext<DestructorModifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public DestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
	}

	[RuleVersion(0)]
	public DestructorContext destructor() {
		DestructorContext _localctx = new DestructorContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_destructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1389;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1388; _localctx.Attributes = attributes();
				}
			}

			State = 1392;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXTERN) {
				{
				State = 1391; _localctx.Modifiers = destructorModifiers();
				}
			}

			State = 1394; Match(DESTRUCTOR);
			State = 1397;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1395; Match(LPAREN);
				State = 1396; Match(RPAREN);
				}
			}

			State = 1404;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1399; Match(CLASS);
				State = 1401;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
				case 1:
					{
					State = 1400; _localctx.Namespace = nameDot(0);
					}
					break;
				}
				State = 1403; _localctx.ClassId = identifier();
				}
			}

			State = 1406; _localctx.end = eos();
			State = 1407; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorModifiersContext : XSharpParserRuleContext {
		public IToken _EXTERN;
		public IList<IToken> _Tokens = new List<IToken>();
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public DestructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public DestructorModifiersContext destructorModifiers() {
		DestructorModifiersContext _localctx = new DestructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_destructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1410;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1409; _localctx._EXTERN = Match(EXTERN);
				_localctx._Tokens.Add(_localctx._EXTERN);
				}
				}
				State = 1412;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadedOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode RSHIFT() { return GetToken(XSharpParser.RSHIFT, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public OverloadedOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadedOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOverloadedOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOverloadedOps(this);
		}
	}

	[RuleVersion(0)]
	public OverloadedOpsContext overloadedOps() {
		OverloadedOpsContext _localctx = new OverloadedOpsContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_overloadedOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1414;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 213)) & ~0x3f) == 0 && ((1L << (_la - 213)) & ((1L << (LT - 213)) | (1L << (LTE - 213)) | (1L << (GT - 213)) | (1L << (GTE - 213)) | (1L << (EEQ - 213)) | (1L << (NEQ - 213)) | (1L << (NEQ2 - 213)) | (1L << (INC - 213)) | (1L << (DEC - 213)) | (1L << (PLUS - 213)) | (1L << (MINUS - 213)) | (1L << (DIV - 213)) | (1L << (MOD - 213)) | (1L << (LSHIFT - 213)) | (1L << (RSHIFT - 213)) | (1L << (TILDE - 213)) | (1L << (MULT - 213)) | (1L << (AND - 213)) | (1L << (OR - 213)) | (1L << (NOT - 213)) | (1L << (PIPE - 213)) | (1L << (AMP - 213)) | (1L << (FALSE_CONST - 213)))) != 0) || _la==TRUE_CONST) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ConversionOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConversionOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConversionOps(this);
		}
	}

	[RuleVersion(0)]
	public ConversionOpsContext conversionOps() {
		ConversionOpsContext _localctx = new ConversionOpsContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_conversionOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1416;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public OperatorModifiersContext Modifiers;
		public OverloadedOpsContext Operation;
		public ConversionOpsContext Conversion;
		public IToken Gt;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode OPERATOR() { return GetToken(XSharpParser.OPERATOR, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public OverloadedOpsContext overloadedOps() {
			return GetRuleContext<OverloadedOpsContext>(0);
		}
		public ConversionOpsContext conversionOps() {
			return GetRuleContext<ConversionOpsContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public OperatorModifiersContext operatorModifiers() {
			return GetRuleContext<OperatorModifiersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public Operator_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperator_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperator_(this);
		}
	}

	[RuleVersion(0)]
	public Operator_Context operator_() {
		Operator_Context _localctx = new Operator_Context(_ctx, State);
		EnterRule(_localctx, 130, RULE_operator_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1419;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1418; _localctx.Attributes = attributes();
				}
			}

			State = 1422;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PUBLIC || _la==STATIC || _la==EXTERN) {
				{
				State = 1421; _localctx.Modifiers = operatorModifiers();
				}
			}

			State = 1424; Match(OPERATOR);
			State = 1427;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LT:
			case LTE:
			case GT:
			case GTE:
			case EEQ:
			case NEQ:
			case NEQ2:
			case INC:
			case DEC:
			case PLUS:
			case MINUS:
			case DIV:
			case MOD:
			case LSHIFT:
			case RSHIFT:
			case TILDE:
			case MULT:
			case AND:
			case OR:
			case NOT:
			case PIPE:
			case AMP:
			case FALSE_CONST:
			case TRUE_CONST:
				{
				State = 1425; _localctx.Operation = overloadedOps();
				}
				break;
			case EXPLICIT:
			case IMPLICIT:
				{
				State = 1426; _localctx.Conversion = conversionOps();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1430;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==GT) {
				{
				State = 1429; _localctx.Gt = Match(GT);
				}
			}

			State = 1432; _localctx.ParamList = parameterList();
			State = 1435;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1433; Match(AS);
				State = 1434; _localctx.Type = datatype();
				}
			}

			State = 1437; _localctx.end = eos();
			State = 1438; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _EXTERN;
		public IToken _tset3607;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public OperatorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperatorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperatorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public OperatorModifiersContext operatorModifiers() {
		OperatorModifiersContext _localctx = new OperatorModifiersContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_operatorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1440;
				_localctx._tset3607 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PUBLIC || _la==STATIC || _la==EXTERN) ) {
					_localctx._tset3607 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3607);
				}
				}
				State = 1443;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==PUBLIC || _la==STATIC || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _STATIC;
		public IToken _VIRTUAL;
		public IToken _SEALED;
		public IToken _ABSTRACT;
		public IToken _ASYNC;
		public IToken _UNSAFE;
		public IToken _EXTERN;
		public IToken _OVERRIDE;
		public IToken _tset3632;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] VIRTUAL() { return GetTokens(XSharpParser.VIRTUAL); }
		public ITerminalNode VIRTUAL(int i) {
			return GetToken(XSharpParser.VIRTUAL, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public MemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifiersContext memberModifiers() {
		MemberModifiersContext _localctx = new MemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_memberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1446;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1445;
				_localctx._tset3632 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (SEALED - 100)) | (1L << (VIRTUAL - 100)) | (1L << (ASYNC - 100)) | (1L << (EXTERN - 100)) | (1L << (OVERRIDE - 100)) | (1L << (UNSAFE - 100)))) != 0)) ) {
					_localctx._tset3632 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3632);
				}
				}
				State = 1448;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (INTERNAL - 100)) | (1L << (NEW - 100)) | (1L << (SEALED - 100)) | (1L << (VIRTUAL - 100)) | (1L << (ASYNC - 100)) | (1L << (EXTERN - 100)) | (1L << (OVERRIDE - 100)) | (1L << (UNSAFE - 100)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : XSharpParserRuleContext {
		public AttributeBlockContext _attributeBlock;
		public IList<AttributeBlockContext> _AttrBlk = new List<AttributeBlockContext>();
		public AttributeBlockContext[] attributeBlock() {
			return GetRuleContexts<AttributeBlockContext>();
		}
		public AttributeBlockContext attributeBlock(int i) {
			return GetRuleContext<AttributeBlockContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1451;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1450; _localctx._attributeBlock = attributeBlock();
					_localctx._AttrBlk.Add(_localctx._attributeBlock);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1453;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,228,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeBlockContext : XSharpParserRuleContext {
		public AttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeTargetContext attributeTarget() {
			return GetRuleContext<AttributeTargetContext>(0);
		}
		public AttributeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeBlock(this);
		}
	}

	[RuleVersion(0)]
	public AttributeBlockContext attributeBlock() {
		AttributeBlockContext _localctx = new AttributeBlockContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_attributeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455; Match(LBRKT);
			State = 1457;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				State = 1456; _localctx.Target = attributeTarget();
				}
				break;
			}
			State = 1459; _localctx._attribute = attribute();
			_localctx._Attributes.Add(_localctx._attribute);
			State = 1464;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1460; Match(COMMA);
				State = 1461; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				}
				}
				State = 1466;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1467; Match(RBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeTargetContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public KeywordContext Kw;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public AttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public AttributeTargetContext attributeTarget() {
		AttributeTargetContext _localctx = new AttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_attributeTarget);
		try {
			State = 1475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1469; _localctx.Id = identifier();
				State = 1470; Match(COLON);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1472; _localctx.Kw = keyword();
				State = 1473; Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : XSharpParserRuleContext {
		public NameContext Name;
		public AttributeParamContext _attributeParam;
		public IList<AttributeParamContext> _Params = new List<AttributeParamContext>();
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AttributeParamContext[] attributeParam() {
			return GetRuleContexts<AttributeParamContext>();
		}
		public AttributeParamContext attributeParam(int i) {
			return GetRuleContext<AttributeParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1477; _localctx.Name = name(0);
			State = 1490;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1478; Match(LPAREN);
				State = 1487;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,233,_ctx) ) {
				case 1:
					{
					State = 1479; _localctx._attributeParam = attributeParam();
					_localctx._Params.Add(_localctx._attributeParam);
					State = 1484;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1480; Match(COMMA);
						State = 1481; _localctx._attributeParam = attributeParam();
						_localctx._Params.Add(_localctx._attributeParam);
						}
						}
						State = 1486;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1489; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeParamContext : XSharpParserRuleContext {
		public AttributeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeParam; } }
	 
		public AttributeParamContext() { }
		public virtual void CopyFrom(AttributeParamContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprAttributeParamContext : AttributeParamContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExprAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExprAttributeParam(this);
		}
	}
	public partial class PropertyAttributeParamContext : AttributeParamContext {
		public IdentifierNameContext Name;
		public ExpressionContext Expr;
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAttributeParam(this);
		}
	}

	[RuleVersion(0)]
	public AttributeParamContext attributeParam() {
		AttributeParamContext _localctx = new AttributeParamContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_attributeParam);
		try {
			State = 1497;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
			case 1:
				_localctx = new PropertyAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1492; ((PropertyAttributeParamContext)_localctx).Name = identifierName();
				State = 1493; Match(ASSIGN_OP);
				State = 1494; ((PropertyAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;

			case 2:
				_localctx = new ExprAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1496; ((ExprAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributesContext : XSharpParserRuleContext {
		public GlobalAttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public GlobalAttributeTargetContext globalAttributeTarget() {
			return GetRuleContext<GlobalAttributeTargetContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GlobalAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributes(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributesContext globalAttributes() {
		GlobalAttributesContext _localctx = new GlobalAttributesContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_globalAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1499; Match(LBRKT);
			State = 1500; _localctx.Target = globalAttributeTarget();
			State = 1501; _localctx._attribute = attribute();
			_localctx._Attributes.Add(_localctx._attribute);
			State = 1506;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1502; Match(COMMA);
				State = 1503; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				}
				}
				State = 1508;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1509; Match(RBRKT);
			State = 1510; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributeTargetContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(XSharpParser.ASSEMBLY, 0); }
		public ITerminalNode MODULE() { return GetToken(XSharpParser.MODULE, 0); }
		public GlobalAttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributeTargetContext globalAttributeTarget() {
		GlobalAttributeTargetContext _localctx = new GlobalAttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_globalAttributeTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==ASSEMBLY || _la==MODULE) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1513; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : XSharpParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForStmtContext : StatementContext {
		public ExpressionContext AssignExpr;
		public IToken ForDecl;
		public IdentifierContext ForIter;
		public IToken Op;
		public ExpressionContext Expr;
		public DatatypeContext Type;
		public IToken Dir;
		public ExpressionContext FinalExpr;
		public ExpressionContext Step;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public IdentifierContext Ignored;
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ForStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
	}
	public partial class SeqStmtContext : StatementContext {
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public RecoverBlockContext RecoverBlock;
		public StatementBlockContext FinBlock;
		public IToken e;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] SEQUENCE() { return GetTokens(XSharpParser.SEQUENCE); }
		public ITerminalNode SEQUENCE(int i) {
			return GetToken(XSharpParser.SEQUENCE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode RECOVER() { return GetToken(XSharpParser.RECOVER, 0); }
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public RecoverBlockContext recoverBlock() {
			return GetRuleContext<RecoverBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public SeqStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSeqStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSeqStmt(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ExpressionContext Ignored;
		public ITerminalNode[] WHILE() { return GetTokens(XSharpParser.WHILE); }
		public ITerminalNode WHILE(int i) {
			return GetToken(XSharpParser.WHILE, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode[] DO() { return GetTokens(XSharpParser.DO); }
		public ITerminalNode DO(int i) {
			return GetToken(XSharpParser.DO, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDDO() { return GetToken(XSharpParser.ENDDO, 0); }
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
	}
	public partial class ForeachStmtContext : StatementContext {
		public IdentifierContext Id;
		public DatatypeContext Type;
		public ExpressionContext Container;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public IdentifierContext Ignored;
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ForeachStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForeachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForeachStmt(this);
		}
	}
	public partial class TryStmtContext : StatementContext {
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public CatchBlockContext _catchBlock;
		public IList<CatchBlockContext> _CatchBlock = new List<CatchBlockContext>();
		public StatementBlockContext FinBlock;
		public IToken e;
		public ITerminalNode[] TRY() { return GetTokens(XSharpParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(XSharpParser.TRY, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(XSharpParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(XSharpParser.CATCH, i);
		}
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public CatchBlockContext[] catchBlock() {
			return GetRuleContexts<CatchBlockContext>();
		}
		public CatchBlockContext catchBlock(int i) {
			return GetRuleContext<CatchBlockContext>(i);
		}
		public TryStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTryStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTryStmt(this);
		}
	}
	public partial class YieldStmtContext : StatementContext {
		public ExpressionContext Expr;
		public EosContext end;
		public IToken Break;
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public YieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterYieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitYieldStmt(this);
		}
	}
	public partial class ExpressionStmtContext : StatementContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public IToken t;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionStmt(this);
		}
	}
	public partial class FieldStmtContext : StatementContext {
		public FielddeclContext Decl;
		public FielddeclContext fielddecl() {
			return GetRuleContext<FielddeclContext>(0);
		}
		public FieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFieldStmt(this);
		}
	}
	public partial class ReturnStmtContext : StatementContext {
		public IToken Void;
		public ExpressionContext Expr;
		public EosContext end;
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}
	public partial class QoutStmtContext : StatementContext {
		public IToken Q;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public ITerminalNode QQMARK() { return GetToken(XSharpParser.QQMARK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public QoutStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQoutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQoutStmt(this);
		}
	}
	public partial class SwitchStmtContext : StatementContext {
		public ExpressionContext Expr;
		public EosContext end;
		public SwitchBlockContext _switchBlock;
		public IList<SwitchBlockContext> _SwitchBlock = new List<SwitchBlockContext>();
		public IToken e;
		public ITerminalNode[] SWITCH() { return GetTokens(XSharpParser.SWITCH); }
		public ITerminalNode SWITCH(int i) {
			return GetToken(XSharpParser.SWITCH, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public SwitchBlockContext[] switchBlock() {
			return GetRuleContexts<SwitchBlockContext>();
		}
		public SwitchBlockContext switchBlock(int i) {
			return GetRuleContext<SwitchBlockContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public SwitchStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
	}
	public partial class DeclarationStmtContext : StatementContext {
		public LocaldeclContext Decl;
		public LocaldeclContext localdecl() {
			return GetRuleContext<LocaldeclContext>(0);
		}
		public DeclarationStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDeclarationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDeclarationStmt(this);
		}
	}
	public partial class JumpStmtContext : StatementContext {
		public IToken Key;
		public EosContext end;
		public ExpressionContext Expr;
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LOOP() { return GetToken(XSharpParser.LOOP, 0); }
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THROW() { return GetToken(XSharpParser.THROW, 0); }
		public JumpStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJumpStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJumpStmt(this);
		}
	}
	public partial class IfStmtContext : StatementContext {
		public IfElseBlockContext IfStmt;
		public IToken e;
		public ExpressionContext Ignored;
		public ITerminalNode[] IF() { return GetTokens(XSharpParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(XSharpParser.IF, i);
		}
		public IfElseBlockContext ifElseBlock() {
			return GetRuleContext<IfElseBlockContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDIF() { return GetToken(XSharpParser.ENDIF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}
	public partial class BlockStmtContext : StatementContext {
		public IToken Key;
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public VariableDeclarationContext VarDecl;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] LOCK() { return GetTokens(XSharpParser.LOCK); }
		public ITerminalNode LOCK(int i) {
			return GetToken(XSharpParser.LOCK, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] SCOPE() { return GetTokens(XSharpParser.SCOPE); }
		public ITerminalNode SCOPE(int i) {
			return GetToken(XSharpParser.SCOPE, i);
		}
		public ITerminalNode[] USING() { return GetTokens(XSharpParser.USING); }
		public ITerminalNode USING(int i) {
			return GetToken(XSharpParser.USING, i);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] CHECKED() { return GetTokens(XSharpParser.CHECKED); }
		public ITerminalNode CHECKED(int i) {
			return GetToken(XSharpParser.CHECKED, i);
		}
		public ITerminalNode[] UNCHECKED() { return GetTokens(XSharpParser.UNCHECKED); }
		public ITerminalNode UNCHECKED(int i) {
			return GetToken(XSharpParser.UNCHECKED, i);
		}
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public BlockStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
	}
	public partial class CaseStmtContext : StatementContext {
		public EosContext end;
		public CaseBlockContext CaseStmt;
		public IToken e;
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public ITerminalNode[] CASE() { return GetTokens(XSharpParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(XSharpParser.CASE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDCASE() { return GetToken(XSharpParser.ENDCASE, 0); }
		public CaseStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCaseStmt(this);
		}
	}
	public partial class XbasedeclStmtContext : StatementContext {
		public XbasedeclContext xbasedecl() {
			return GetRuleContext<XbasedeclContext>(0);
		}
		public XbasedeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbasedeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbasedeclStmt(this);
		}
	}
	public partial class NopStmtContext : StatementContext {
		public EosContext end;
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NopStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNopStmt(this);
		}
	}
	public partial class RepeatStmtContext : StatementContext {
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext Expr;
		public ITerminalNode REPEAT() { return GetToken(XSharpParser.REPEAT, 0); }
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRepeatStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRepeatStmt(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 1852;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
			case 1:
				_localctx = new DeclarationStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1515; ((DeclarationStmtContext)_localctx).Decl = localdecl();
				}
				break;

			case 2:
				_localctx = new XbasedeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1516;
				if (!(AllowXBaseVariables)) throw new FailedPredicateException(this, "AllowXBaseVariables");
				State = 1517; xbasedecl();
				}
				break;

			case 3:
				_localctx = new FieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1518; ((FieldStmtContext)_localctx).Decl = fielddecl();
				}
				break;

			case 4:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1520;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==DO) {
					{
					State = 1519; Match(DO);
					}
				}

				State = 1522; Match(WHILE);
				State = 1523; ((WhileStmtContext)_localctx).Expr = expression(0);
				State = 1524; ((WhileStmtContext)_localctx).end = eos();
				State = 1525; ((WhileStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1537;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,241,_ctx) ) {
				case 1:
					{
					State = 1531;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case END:
						{
						State = 1526; ((WhileStmtContext)_localctx).e = Match(END);
						State = 1528;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
						case 1:
							{
							State = 1527;
							_la = _input.La(1);
							if ( !(_la==DO || _la==WHILE) ) {
							_errHandler.RecoverInline(this);
							} else {
								if (_input.La(1) == TokenConstants.Eof) {
									matchedEOF = true;
								}

								_errHandler.ReportMatch(this);
								Consume();
							}
							}
							break;
						}
						}
						break;
					case ENDDO:
						{
						State = 1530; ((WhileStmtContext)_localctx).e = Match(ENDDO);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1534;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,240,_ctx) ) {
					case 1:
						{
						State = 1533; ((WhileStmtContext)_localctx).Ignored = expression(0);
						}
						break;
					}
					State = 1536; eos();
					}
					break;
				}
				}
				break;

			case 5:
				_localctx = new NopStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1539; Match(NOP);
				State = 1542;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LPAREN) {
					{
					State = 1540; Match(LPAREN);
					State = 1541; Match(RPAREN);
					}
				}

				State = 1544; ((NopStmtContext)_localctx).end = eos();
				}
				break;

			case 6:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1545; Match(FOR);
				State = 1566;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					State = 1546; ((ForStmtContext)_localctx).AssignExpr = expression(0);
					}
					break;

				case 2:
					{
					State = 1552;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case LOCAL:
					case IMPLIED:
						{
						State = 1548;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==LOCAL) {
							{
							State = 1547; Match(LOCAL);
							}
						}

						State = 1550; ((ForStmtContext)_localctx).ForDecl = Match(IMPLIED);
						}
						break;
					case VAR:
						{
						State = 1551; ((ForStmtContext)_localctx).ForDecl = Match(VAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1554; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1555;
					((ForStmtContext)_localctx).Op = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==EQ || _la==ASSIGN_OP) ) {
						((ForStmtContext)_localctx).Op = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 1556; ((ForStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 3:
					{
					State = 1558; ((ForStmtContext)_localctx).ForDecl = Match(LOCAL);
					State = 1559; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1560;
					((ForStmtContext)_localctx).Op = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==EQ || _la==ASSIGN_OP) ) {
						((ForStmtContext)_localctx).Op = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 1561; ((ForStmtContext)_localctx).Expr = expression(0);
					State = 1564;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1562; Match(AS);
						State = 1563; ((ForStmtContext)_localctx).Type = datatype();
						}
					}

					}
					break;
				}
				State = 1568;
				((ForStmtContext)_localctx).Dir = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & ((1L << (DOWNTO - 20)) | (1L << (TO - 20)) | (1L << (UPTO - 20)))) != 0)) ) {
					((ForStmtContext)_localctx).Dir = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1569; ((ForStmtContext)_localctx).FinalExpr = expression(0);
				State = 1572;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STEP) {
					{
					State = 1570; Match(STEP);
					State = 1571; ((ForStmtContext)_localctx).Step = expression(0);
					}
				}

				State = 1574; ((ForStmtContext)_localctx).end = eos();
				State = 1575; ((ForStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1581;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					State = 1576; ((ForStmtContext)_localctx).e = Match(NEXT);
					State = 1578;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
						{
						State = 1577; ((ForStmtContext)_localctx).Ignored = identifier();
						}
					}

					State = 1580; eos();
					}
					break;
				}
				}
				break;

			case 7:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1583; Match(IF);
				State = 1584; ((IfStmtContext)_localctx).IfStmt = ifElseBlock();
				State = 1596;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					State = 1590;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case END:
						{
						State = 1585; ((IfStmtContext)_localctx).e = Match(END);
						State = 1587;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,250,_ctx) ) {
						case 1:
							{
							State = 1586; Match(IF);
							}
							break;
						}
						}
						break;
					case ENDIF:
						{
						State = 1589; ((IfStmtContext)_localctx).e = Match(ENDIF);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1593;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
					case 1:
						{
						State = 1592; ((IfStmtContext)_localctx).Ignored = expression(0);
						}
						break;
					}
					State = 1595; eos();
					}
					break;
				}
				}
				break;

			case 8:
				_localctx = new CaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1598; Match(DO);
				State = 1599; Match(CASE);
				State = 1600; ((CaseStmtContext)_localctx).end = eos();
				State = 1602;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					State = 1601; ((CaseStmtContext)_localctx).CaseStmt = caseBlock();
					}
					break;
				}
				State = 1612;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					State = 1609;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case END:
						{
						State = 1604; ((CaseStmtContext)_localctx).e = Match(END);
						State = 1606;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==CASE) {
							{
							State = 1605; Match(CASE);
							}
						}

						}
						break;
					case ENDCASE:
						{
						State = 1608; ((CaseStmtContext)_localctx).e = Match(ENDCASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1611; eos();
					}
					break;
				}
				}
				break;

			case 9:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1614; ((JumpStmtContext)_localctx).Key = Match(EXIT);
				State = 1615; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 10:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1616; ((JumpStmtContext)_localctx).Key = Match(LOOP);
				State = 1617; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 11:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1618; ((JumpStmtContext)_localctx).Key = Match(BREAK);
				State = 1620;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					State = 1619; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1622; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 12:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1623; Match(RETURN);
				State = 1626;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					State = 1624; ((ReturnStmtContext)_localctx).Void = Match(VOID);
					}
					break;

				case 2:
					{
					State = 1625; ((ReturnStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1628; ((ReturnStmtContext)_localctx).end = eos();
				}
				break;

			case 13:
				_localctx = new QoutStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1629;
				((QoutStmtContext)_localctx).Q = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==QQMARK || _la==QMARK) ) {
					((QoutStmtContext)_localctx).Q = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1638;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
				case 1:
					{
					State = 1630; ((QoutStmtContext)_localctx)._expression = expression(0);
					((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
					State = 1635;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1631; Match(COMMA);
						State = 1632; ((QoutStmtContext)_localctx)._expression = expression(0);
						((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
						}
						}
						State = 1637;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1640; ((QoutStmtContext)_localctx).end = eos();
				}
				break;

			case 14:
				_localctx = new SeqStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1641; Match(BEGIN);
				State = 1642; Match(SEQUENCE);
				State = 1643; ((SeqStmtContext)_localctx).end = eos();
				State = 1644; ((SeqStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1647;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					State = 1645; Match(RECOVER);
					State = 1646; ((SeqStmtContext)_localctx).RecoverBlock = recoverBlock();
					}
					break;
				}
				State = 1653;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					State = 1649; Match(FINALLY);
					State = 1650; eos();
					State = 1651; ((SeqStmtContext)_localctx).FinBlock = statementBlock();
					}
					break;
				}
				State = 1660;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
				case 1:
					{
					State = 1655; ((SeqStmtContext)_localctx).e = Match(END);
					State = 1657;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==SEQUENCE) {
						{
						State = 1656; Match(SEQUENCE);
						}
					}

					State = 1659; eos();
					}
					break;
				}
				}
				break;

			case 15:
				_localctx = new RepeatStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1662; Match(REPEAT);
				State = 1663; ((RepeatStmtContext)_localctx).end = eos();
				State = 1664; ((RepeatStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1665; Match(UNTIL);
				State = 1666; ((RepeatStmtContext)_localctx).Expr = expression(0);
				State = 1667; eos();
				}
				break;

			case 16:
				_localctx = new ForeachStmtContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1669; Match(FOREACH);
				State = 1678;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					State = 1670; Match(IMPLIED);
					State = 1671; ((ForeachStmtContext)_localctx).Id = identifier();
					}
					break;

				case 2:
					{
					State = 1672; ((ForeachStmtContext)_localctx).Id = identifier();
					State = 1673; Match(AS);
					State = 1674; ((ForeachStmtContext)_localctx).Type = datatype();
					}
					break;

				case 3:
					{
					State = 1676; Match(VAR);
					State = 1677; ((ForeachStmtContext)_localctx).Id = identifier();
					}
					break;
				}
				State = 1680; Match(IN);
				State = 1681; ((ForeachStmtContext)_localctx).Container = expression(0);
				State = 1682; ((ForeachStmtContext)_localctx).end = eos();
				State = 1683; ((ForeachStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1689;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					State = 1684; ((ForeachStmtContext)_localctx).e = Match(NEXT);
					State = 1686;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
						{
						State = 1685; ((ForeachStmtContext)_localctx).Ignored = identifier();
						}
					}

					State = 1688; eos();
					}
					break;
				}
				}
				break;

			case 17:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1691; ((JumpStmtContext)_localctx).Key = Match(THROW);
				State = 1693;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
				case 1:
					{
					State = 1692; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1695; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 18:
				_localctx = new TryStmtContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1696; Match(TRY);
				State = 1697; ((TryStmtContext)_localctx).end = eos();
				State = 1698; ((TryStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1705;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,271,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1699; Match(CATCH);
						State = 1701;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
						case 1:
							{
							State = 1700; ((TryStmtContext)_localctx)._catchBlock = catchBlock();
							((TryStmtContext)_localctx)._CatchBlock.Add(((TryStmtContext)_localctx)._catchBlock);
							}
							break;
						}
						}
						} 
					}
					State = 1707;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,271,_ctx);
				}
				State = 1712;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					State = 1708; Match(FINALLY);
					State = 1709; eos();
					State = 1710; ((TryStmtContext)_localctx).FinBlock = statementBlock();
					}
					break;
				}
				State = 1719;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					State = 1714; ((TryStmtContext)_localctx).e = Match(END);
					State = 1716;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==TRY) {
						{
						State = 1715; Match(TRY);
						}
					}

					State = 1718; eos();
					}
					break;
				}
				}
				break;

			case 19:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1721; Match(BEGIN);
				State = 1722; ((BlockStmtContext)_localctx).Key = Match(LOCK);
				State = 1723; ((BlockStmtContext)_localctx).Expr = expression(0);
				State = 1724; ((BlockStmtContext)_localctx).end = eos();
				State = 1725; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1731;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					State = 1726; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1728;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LOCK) {
						{
						State = 1727; Match(LOCK);
						}
					}

					State = 1730; eos();
					}
					break;
				}
				}
				break;

			case 20:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1733; Match(BEGIN);
				State = 1734; ((BlockStmtContext)_localctx).Key = Match(SCOPE);
				State = 1735; ((BlockStmtContext)_localctx).end = eos();
				State = 1736; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1742;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					State = 1737; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1739;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==SCOPE) {
						{
						State = 1738; Match(SCOPE);
						}
					}

					State = 1741; eos();
					}
					break;
				}
				}
				break;

			case 21:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1744; Match(YIELD);
				State = 1745; Match(RETURN);
				State = 1748;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,279,_ctx) ) {
				case 1:
					{
					State = 1746; Match(VOID);
					}
					break;

				case 2:
					{
					State = 1747; ((YieldStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1750; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 22:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1751; Match(YIELD);
				State = 1752;
				((YieldStmtContext)_localctx).Break = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BREAK || _la==EXIT) ) {
					((YieldStmtContext)_localctx).Break = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1753; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 23:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1755;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BEGIN || _la==DO) {
					{
					State = 1754;
					_la = _input.La(1);
					if ( !(_la==BEGIN || _la==DO) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 1757; Match(SWITCH);
				State = 1758; ((SwitchStmtContext)_localctx).Expr = expression(0);
				State = 1759; ((SwitchStmtContext)_localctx).end = eos();
				State = 1761;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1760; ((SwitchStmtContext)_localctx)._switchBlock = switchBlock();
						((SwitchStmtContext)_localctx)._SwitchBlock.Add(((SwitchStmtContext)_localctx)._switchBlock);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1763;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,281,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1770;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					State = 1765; ((SwitchStmtContext)_localctx).e = Match(END);
					State = 1767;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==SWITCH) {
						{
						State = 1766; Match(SWITCH);
						}
					}

					State = 1769; eos();
					}
					break;
				}
				}
				break;

			case 24:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1772; Match(BEGIN);
				State = 1773; ((BlockStmtContext)_localctx).Key = Match(USING);
				State = 1776;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					State = 1774; ((BlockStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 2:
					{
					State = 1775; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
					}
					break;
				}
				State = 1778; ((BlockStmtContext)_localctx).end = eos();
				State = 1779; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1785;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					State = 1780; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1782;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==USING) {
						{
						State = 1781; Match(USING);
						}
					}

					State = 1784; eos();
					}
					break;
				}
				}
				break;

			case 25:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1787; Match(BEGIN);
				State = 1788; ((BlockStmtContext)_localctx).Key = Match(UNSAFE);
				State = 1789; ((BlockStmtContext)_localctx).end = eos();
				State = 1790; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1796;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					State = 1791; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1793;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==UNSAFE) {
						{
						State = 1792; Match(UNSAFE);
						}
					}

					State = 1795; eos();
					}
					break;
				}
				}
				break;

			case 26:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1798; Match(BEGIN);
				State = 1799; ((BlockStmtContext)_localctx).Key = Match(CHECKED);
				State = 1800; ((BlockStmtContext)_localctx).end = eos();
				State = 1801; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1807;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					State = 1802; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1804;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==CHECKED) {
						{
						State = 1803; Match(CHECKED);
						}
					}

					State = 1806; eos();
					}
					break;
				}
				}
				break;

			case 27:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1809; Match(BEGIN);
				State = 1810; ((BlockStmtContext)_localctx).Key = Match(UNCHECKED);
				State = 1811; ((BlockStmtContext)_localctx).end = eos();
				State = 1812; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1818;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					State = 1813; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1815;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==UNCHECKED) {
						{
						State = 1814; Match(UNCHECKED);
						}
					}

					State = 1817; eos();
					}
					break;
				}
				}
				break;

			case 28:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 1820; Match(BEGIN);
				State = 1821; ((BlockStmtContext)_localctx).Key = Match(FIXED);
				{
				State = 1822; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
				}
				State = 1823; ((BlockStmtContext)_localctx).end = eos();
				State = 1824; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1830;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					State = 1825; ((BlockStmtContext)_localctx).e = Match(END);
					State = 1827;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==FIXED) {
						{
						State = 1826; Match(FIXED);
						}
					}

					State = 1829; eos();
					}
					break;
				}
				}
				break;

			case 29:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 1832;
				if (!(validExpressionStmt())) throw new FailedPredicateException(this, "validExpressionStmt()");
				State = 1833; ((ExpressionStmtContext)_localctx)._expression = expression(0);
				((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
				State = 1834; ((ExpressionStmtContext)_localctx).end = eos();
				}
				break;

			case 30:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 1836;
				if (!(validExpressionStmt())) throw new FailedPredicateException(this, "validExpressionStmt()");
				State = 1837; ((ExpressionStmtContext)_localctx)._expression = expression(0);
				((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
				State = 1838;
				((ExpressionStmtContext)_localctx).t = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (RPAREN - 259)) | (1L << (RCURLY - 259)) | (1L << (RBRKT - 259)))) != 0)) ) {
					((ExpressionStmtContext)_localctx).t = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1839; ((ExpressionStmtContext)_localctx).end = eos();
				eosExpected(((ExpressionStmtContext)_localctx).t);
				}
				break;

			case 31:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 1842;
				if (!(validExpressionStmt())) throw new FailedPredicateException(this, "validExpressionStmt()");
				State = 1843; ((ExpressionStmtContext)_localctx)._expression = expression(0);
				((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
				State = 1846;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1844; Match(COMMA);
					State = 1845; ((ExpressionStmtContext)_localctx)._expression = expression(0);
					((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
					}
					}
					State = 1848;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COMMA );
				State = 1850; ((ExpressionStmtContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockContext : XSharpParserRuleContext {
		public ExpressionContext Cond;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IfElseBlockContext ElseIfBlock;
		public StatementBlockContext ElseBlock;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode ELSEIF() { return GetToken(XSharpParser.ELSEIF, 0); }
		public ITerminalNode ELSE() { return GetToken(XSharpParser.ELSE, 0); }
		public IfElseBlockContext ifElseBlock() {
			return GetRuleContext<IfElseBlockContext>(0);
		}
		public IfElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIfElseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIfElseBlock(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockContext ifElseBlock() {
		IfElseBlockContext _localctx = new IfElseBlockContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_ifElseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1854; _localctx.Cond = expression(0);
			State = 1855; _localctx.end = eos();
			State = 1856; _localctx.StmtBlk = statementBlock();
			State = 1863;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 1857; Match(ELSEIF);
				State = 1858; _localctx.ElseIfBlock = ifElseBlock();
				}
				break;

			case 2:
				{
				State = 1859; Match(ELSE);
				State = 1860; eos();
				State = 1861; _localctx.ElseBlock = statementBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : XSharpParserRuleContext {
		public IToken Key;
		public ExpressionContext Cond;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public CaseBlockContext NextCase;
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_caseBlock);
		try {
			State = 1876;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1865; _localctx.Key = Match(CASE);
				State = 1866; _localctx.Cond = expression(0);
				State = 1867; _localctx.end = eos();
				State = 1868; _localctx.StmtBlk = statementBlock();
				State = 1870;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					State = 1869; _localctx.NextCase = caseBlock();
					}
					break;
				}
				}
				break;
			case OTHERWISE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1872; _localctx.Key = Match(OTHERWISE);
				State = 1873; _localctx.end = eos();
				State = 1874; _localctx.StmtBlk = statementBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : XSharpParserRuleContext {
		public IToken Key;
		public ExpressionContext Const;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_switchBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1881;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CASE:
				{
				State = 1878; _localctx.Key = Match(CASE);
				State = 1879; _localctx.Const = expression(0);
				}
				break;
			case OTHERWISE:
				{
				State = 1880; _localctx.Key = Match(OTHERWISE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1883; _localctx.end = eos();
			State = 1884; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchBlockContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public DatatypeContext Type;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public CatchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCatchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCatchBlock(this);
		}
	}

	[RuleVersion(0)]
	public CatchBlockContext catchBlock() {
		CatchBlockContext _localctx = new CatchBlockContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_catchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1887;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
				{
				State = 1886; _localctx.Id = identifier();
				}
			}

			State = 1891;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1889; Match(AS);
				State = 1890; _localctx.Type = datatype();
				}
			}

			State = 1893; _localctx.end = eos();
			State = 1894; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecoverBlockContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public EosContext end;
		public StatementBlockContext StmtBlock;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RecoverBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recoverBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRecoverBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRecoverBlock(this);
		}
	}

	[RuleVersion(0)]
	public RecoverBlockContext recoverBlock() {
		RecoverBlockContext _localctx = new RecoverBlockContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_recoverBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 1896; Match(USING);
				State = 1897; _localctx.Id = identifier();
				}
			}

			State = 1900; _localctx.end = eos();
			State = 1901; _localctx.StmtBlock = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : XSharpParserRuleContext {
		public IToken Var;
		public VariableDeclaratorContext _variableDeclarator;
		public IList<VariableDeclaratorContext> _Decl = new List<VariableDeclaratorContext>();
		public DatatypeContext Type;
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_variableDeclaration);
		int _la;
		try {
			State = 1931;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1908;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LOCAL:
				case IMPLIED:
					{
					State = 1904;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LOCAL) {
						{
						State = 1903; Match(LOCAL);
						}
					}

					State = 1906; _localctx.Var = Match(IMPLIED);
					}
					break;
				case VAR:
					{
					State = 1907; _localctx.Var = Match(VAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1910; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 1915;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1911; Match(COMMA);
					State = 1912; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 1917;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1918; Match(LOCAL);
				State = 1919; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 1924;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1920; Match(COMMA);
					State = 1921; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 1926;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1929;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 1927; Match(AS);
					State = 1928; _localctx.Type = datatype();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IToken Op;
		public ExpressionContext Expr;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1933; _localctx.Id = identifier();
			State = 1934;
			_localctx.Op = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EQ || _la==ASSIGN_OP) ) {
				_localctx.Op = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1935; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocaldeclContext : XSharpParserRuleContext {
		public LocaldeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localdecl; } }
	 
		public LocaldeclContext() { }
		public virtual void CopyFrom(LocaldeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommonLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public LocalvarContext _localvar;
		public IList<LocalvarContext> _LocalVars = new List<LocalvarContext>();
		public EosContext end;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public LocalvarContext[] localvar() {
			return GetRuleContexts<LocalvarContext>();
		}
		public LocalvarContext localvar(int i) {
			return GetRuleContext<LocalvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public CommonLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCommonLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCommonLocalDecl(this);
		}
	}
	public partial class VarLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public ImpliedvarContext _impliedvar;
		public IList<ImpliedvarContext> _ImpliedVars = new List<ImpliedvarContext>();
		public EosContext end;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ImpliedvarContext[] impliedvar() {
			return GetRuleContexts<ImpliedvarContext>();
		}
		public ImpliedvarContext impliedvar(int i) {
			return GetRuleContext<ImpliedvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public VarLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVarLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVarLocalDecl(this);
		}
	}

	[RuleVersion(0)]
	public LocaldeclContext localdecl() {
		LocaldeclContext _localctx = new LocaldeclContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_localdecl);
		int _la;
		try {
			State = 2019;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,320,_ctx) ) {
			case 1:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1937; Match(LOCAL);
				State = 1939;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 1938; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 1941; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 1946;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1942; Match(COMMA);
					State = 1943; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 1948;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1949; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 2:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1951; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 1952; Match(LOCAL);
				State = 1953; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 1958;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1954; Match(COMMA);
					State = 1955; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 1960;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1961; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 3:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1963;
				if (!(!XSharpLexer.IsKeyword(InputStream.La(2)))) throw new FailedPredicateException(this, "!XSharpLexer.IsKeyword(InputStream.La(2))");
				State = 1964; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 1965; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 1970;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1966; Match(COMMA);
					State = 1967; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 1972;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1973; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 4:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1976;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 1975; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 1978; Match(VAR);
				State = 1979; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 1984;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1980; Match(COMMA);
					State = 1981; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 1986;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1987; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 5:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1989; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 1991;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCAL) {
					{
					State = 1990; Match(LOCAL);
					}
				}

				State = 1993; Match(IMPLIED);
				State = 1994; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 1999;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1995; Match(COMMA);
					State = 1996; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2001;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2002; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 6:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2004; Match(LOCAL);
				State = 2006;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2005; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2008; Match(IMPLIED);
				State = 2009; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2014;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2010; Match(COMMA);
					State = 2011; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2016;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2017; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalvarContext : XSharpParserRuleContext {
		public IToken Const;
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public ExpressionContext Expression;
		public IToken As;
		public DatatypeContext DataType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public LocalvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalvar(this);
		}
	}

	[RuleVersion(0)]
	public LocalvarContext localvar() {
		LocalvarContext _localctx = new LocalvarContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_localvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2022;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				State = 2021; _localctx.Const = Match(CONST);
				}
				break;
			}
			State = 2025;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				State = 2024; _localctx.Dim = Match(DIM);
				}
				break;
			}
			State = 2027; _localctx.Id = identifier();
			State = 2032;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 2028; Match(LBRKT);
				State = 2029; _localctx.ArraySub = arraysub();
				State = 2030; Match(RBRKT);
				}
			}

			State = 2036;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGN_OP) {
				{
				State = 2034; Match(ASSIGN_OP);
				State = 2035; _localctx.Expression = expression(0);
				}
			}

			State = 2040;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==IS) {
				{
				State = 2038;
				_localctx.As = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AS || _la==IS) ) {
					_localctx.As = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2039; _localctx.DataType = datatype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpliedvarContext : XSharpParserRuleContext {
		public IToken Const;
		public IdentifierContext Id;
		public IToken Op;
		public ExpressionContext Expression;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ImpliedvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impliedvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterImpliedvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitImpliedvar(this);
		}
	}

	[RuleVersion(0)]
	public ImpliedvarContext impliedvar() {
		ImpliedvarContext _localctx = new ImpliedvarContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_impliedvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2043;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				State = 2042; _localctx.Const = Match(CONST);
				}
				break;
			}
			State = 2045; _localctx.Id = identifier();
			State = 2046;
			_localctx.Op = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EQ || _la==ASSIGN_OP) ) {
				_localctx.Op = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2047; _localctx.Expression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FielddeclContext : XSharpParserRuleContext {
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Fields = new List<IdentifierNameContext>();
		public IdentifierNameContext Alias;
		public EosContext end;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public FielddeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFielddecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFielddecl(this);
		}
	}

	[RuleVersion(0)]
	public FielddeclContext fielddecl() {
		FielddeclContext _localctx = new FielddeclContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_fielddecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2049; Match(FIELD);
			State = 2050; _localctx._identifierName = identifierName();
			_localctx._Fields.Add(_localctx._identifierName);
			State = 2055;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2051; Match(COMMA);
				State = 2052; _localctx._identifierName = identifierName();
				_localctx._Fields.Add(_localctx._identifierName);
				}
				}
				State = 2057;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2060;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 2058; Match(IN);
				State = 2059; _localctx.Alias = identifierName();
				}
			}

			State = 2062; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbasedeclContext : XSharpParserRuleContext {
		public IToken T;
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Vars = new List<IdentifierNameContext>();
		public EosContext end;
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XbasedeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbasedecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbasedecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbasedecl(this);
		}
	}

	[RuleVersion(0)]
	public XbasedeclContext xbasedecl() {
		XbasedeclContext _localctx = new XbasedeclContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_xbasedecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2064;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MEMVAR) | (1L << PARAMETERS) | (1L << PRIVATE) | (1L << PUBLIC))) != 0)) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2065; _localctx._identifierName = identifierName();
			_localctx._Vars.Add(_localctx._identifierName);
			State = 2070;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2066; Match(COMMA);
				State = 2067; _localctx._identifierName = identifierName();
				_localctx._Vars.Add(_localctx._identifierName);
				}
				}
				State = 2072;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2073; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : XSharpParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public PrimaryContext Expr;
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}
	public partial class CondAccessExprContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public CondAccessExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCondAccessExpr(this);
		}
	}
	public partial class AwaitExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode ASSIGN_ADD() { return GetToken(XSharpParser.ASSIGN_ADD, 0); }
		public ITerminalNode ASSIGN_SUB() { return GetToken(XSharpParser.ASSIGN_SUB, 0); }
		public ITerminalNode ASSIGN_EXP() { return GetToken(XSharpParser.ASSIGN_EXP, 0); }
		public ITerminalNode ASSIGN_MUL() { return GetToken(XSharpParser.ASSIGN_MUL, 0); }
		public ITerminalNode ASSIGN_DIV() { return GetToken(XSharpParser.ASSIGN_DIV, 0); }
		public ITerminalNode ASSIGN_MOD() { return GetToken(XSharpParser.ASSIGN_MOD, 0); }
		public ITerminalNode ASSIGN_BITAND() { return GetToken(XSharpParser.ASSIGN_BITAND, 0); }
		public ITerminalNode ASSIGN_BITOR() { return GetToken(XSharpParser.ASSIGN_BITOR, 0); }
		public ITerminalNode ASSIGN_LSHIFT() { return GetToken(XSharpParser.ASSIGN_LSHIFT, 0); }
		public ITerminalNode ASSIGN_RSHIFT() { return GetToken(XSharpParser.ASSIGN_RSHIFT, 0); }
		public ITerminalNode ASSIGN_XOR() { return GetToken(XSharpParser.ASSIGN_XOR, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}
	public partial class AccessMemberLateNameContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public IdentifierNameContext Name;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public AccessMemberLateNameContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMemberLateName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMemberLateName(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public IToken Gt;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode[] GT() { return GetTokens(XSharpParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(XSharpParser.GT, i);
		}
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode SUBSTR() { return GetToken(XSharpParser.SUBSTR, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LOGIC_AND() { return GetToken(XSharpParser.LOGIC_AND, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode LOGIC_XOR() { return GetToken(XSharpParser.LOGIC_XOR, 0); }
		public ITerminalNode LOGIC_OR() { return GetToken(XSharpParser.LOGIC_OR, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
	}
	public partial class TypeCastContext : ExpressionContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeCastContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCast(this);
		}
	}
	public partial class PrefixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(XSharpParser.LOGIC_NOT, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public PrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrefixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrefixExpression(this);
		}
	}
	public partial class TypeCheckExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public DatatypeContext Type;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public TypeCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCheckExpression(this);
		}
	}
	public partial class AccessMemberLateContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public AccessMemberLateContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMemberLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMemberLate(this);
		}
	}
	public partial class ArrayAccessContext : ExpressionContext {
		public ExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public ArrayAccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}
	public partial class AccessMemberContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public AccessMemberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMember(this);
		}
	}
	public partial class PostfixExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public PostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}
	public partial class MethodCallContext : ExpressionContext {
		public ExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 176;
		EnterRecursionRule(_localctx, 176, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2090;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				_localctx = new AccessMemberContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2076; ((AccessMemberContext)_localctx).Op = Match(COLONCOLON);
				State = 2077; ((AccessMemberContext)_localctx).Name = simpleName();
				}
				break;

			case 2:
				{
				_localctx = new TypeCastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2078; Match(LPAREN);
				State = 2079; ((TypeCastContext)_localctx).Type = datatype();
				State = 2080; Match(RPAREN);
				State = 2081; ((TypeCastContext)_localctx).Expr = expression(22);
				}
				break;

			case 3:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2083; ((AwaitExpressionContext)_localctx).Op = Match(AWAIT);
				State = 2084; ((AwaitExpressionContext)_localctx).Expr = expression(20);
				}
				break;

			case 4:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2085;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (INC - 222)) | (1L << (DEC - 222)) | (1L << (PLUS - 222)) | (1L << (MINUS - 222)) | (1L << (TILDE - 222)) | (1L << (ADDROF - 222)))) != 0)) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2086; ((PrefixExpressionContext)_localctx).Expr = expression(19);
				}
				break;

			case 5:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2087;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==NOT || _la==LOGIC_NOT) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2088; ((PrefixExpressionContext)_localctx).Expr = expression(7);
				}
				break;

			case 6:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2089; ((PrimaryExpressionContext)_localctx).Expr = primary();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2175;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,332,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2173;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,331,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2092;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2093; ((BinaryExpressionContext)_localctx).Op = Match(EXP);
						State = 2094; ((BinaryExpressionContext)_localctx).Right = expression(17);
						}
						break;

					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2095;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2096;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (DIV - 226)) | (1L << (MOD - 226)) | (1L << (MULT - 226)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2097; ((BinaryExpressionContext)_localctx).Right = expression(16);
						}
						break;

					case 3:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2098;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 2099;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2100; ((BinaryExpressionContext)_localctx).Right = expression(15);
						}
						break;

					case 4:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2101;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 2102; ((BinaryExpressionContext)_localctx).Op = Match(LSHIFT);
						State = 2103; ((BinaryExpressionContext)_localctx).Right = expression(14);
						}
						break;

					case 5:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2104;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2105; ((BinaryExpressionContext)_localctx).Op = Match(GT);
						State = 2106; ((BinaryExpressionContext)_localctx).Gt = Match(GT);
						State = 2107; ((BinaryExpressionContext)_localctx).Right = expression(13);
						}
						break;

					case 6:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2108;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2109;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 213)) & ~0x3f) == 0 && ((1L << (_la - 213)) & ((1L << (LT - 213)) | (1L << (LTE - 213)) | (1L << (GT - 213)) | (1L << (GTE - 213)) | (1L << (EQ - 213)) | (1L << (EEQ - 213)) | (1L << (SUBSTR - 213)) | (1L << (NEQ - 213)) | (1L << (NEQ2 - 213)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2110; ((BinaryExpressionContext)_localctx).Right = expression(12);
						}
						break;

					case 7:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2111;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2112; ((BinaryExpressionContext)_localctx).Op = Match(AMP);
						State = 2113; ((BinaryExpressionContext)_localctx).Right = expression(11);
						}
						break;

					case 8:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2114;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2115; ((BinaryExpressionContext)_localctx).Op = Match(TILDE);
						State = 2116; ((BinaryExpressionContext)_localctx).Right = expression(10);
						}
						break;

					case 9:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2117;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2118; ((BinaryExpressionContext)_localctx).Op = Match(PIPE);
						State = 2119; ((BinaryExpressionContext)_localctx).Right = expression(9);
						}
						break;

					case 10:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2120;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2121;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==AND || _la==LOGIC_AND) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2122; ((BinaryExpressionContext)_localctx).Right = expression(7);
						}
						break;

					case 11:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2123;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2124; ((BinaryExpressionContext)_localctx).Op = Match(LOGIC_XOR);
						State = 2125; ((BinaryExpressionContext)_localctx).Right = expression(6);
						}
						break;

					case 12:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2126;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2127;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==OR || _la==LOGIC_OR) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2128; ((BinaryExpressionContext)_localctx).Right = expression(5);
						}
						break;

					case 13:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2129;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2130; ((BinaryExpressionContext)_localctx).Op = Match(DEFAULT);
						State = 2131; ((BinaryExpressionContext)_localctx).Right = expression(4);
						}
						break;

					case 14:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2132;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2133;
						((AssignmentExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & ((1L << (ASSIGN_OP - 242)) | (1L << (ASSIGN_ADD - 242)) | (1L << (ASSIGN_SUB - 242)) | (1L << (ASSIGN_EXP - 242)) | (1L << (ASSIGN_MUL - 242)) | (1L << (ASSIGN_DIV - 242)) | (1L << (ASSIGN_MOD - 242)) | (1L << (ASSIGN_BITAND - 242)) | (1L << (ASSIGN_BITOR - 242)) | (1L << (ASSIGN_LSHIFT - 242)) | (1L << (ASSIGN_RSHIFT - 242)) | (1L << (ASSIGN_XOR - 242)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2134; ((AssignmentExpressionContext)_localctx).Right = expression(2);
						}
						break;

					case 15:
						{
						_localctx = new AccessMemberContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2135;
						if (!(Precpred(_ctx, 30))) throw new FailedPredicateException(this, "Precpred(_ctx, 30)");
						State = 2136;
						((AccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2137; ((AccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 16:
						{
						_localctx = new AccessMemberLateContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberLateContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2138;
						if (!(Precpred(_ctx, 28))) throw new FailedPredicateException(this, "Precpred(_ctx, 28)");
						State = 2139;
						((AccessMemberLateContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberLateContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2140; Match(AMP);
						State = 2141; Match(LPAREN);
						State = 2142; ((AccessMemberLateContext)_localctx).Right = expression(0);
						State = 2143; Match(RPAREN);
						}
						break;

					case 17:
						{
						_localctx = new AccessMemberLateNameContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberLateNameContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2145;
						if (!(Precpred(_ctx, 27))) throw new FailedPredicateException(this, "Precpred(_ctx, 27)");
						State = 2146;
						((AccessMemberLateNameContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberLateNameContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2147; Match(AMP);
						State = 2148; ((AccessMemberLateNameContext)_localctx).Name = identifierName();
						}
						break;

					case 18:
						{
						_localctx = new MethodCallContext(new ExpressionContext(_parentctx, _parentState));
						((MethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2149;
						if (!(Precpred(_ctx, 26))) throw new FailedPredicateException(this, "Precpred(_ctx, 26)");
						State = 2150; Match(LPAREN);
						State = 2151; Match(RPAREN);
						}
						break;

					case 19:
						{
						_localctx = new MethodCallContext(new ExpressionContext(_parentctx, _parentState));
						((MethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2152;
						if (!(Precpred(_ctx, 25))) throw new FailedPredicateException(this, "Precpred(_ctx, 25)");
						State = 2153; Match(LPAREN);
						State = 2154; ((MethodCallContext)_localctx).ArgList = argumentList();
						State = 2155; Match(RPAREN);
						}
						break;

					case 20:
						{
						_localctx = new ArrayAccessContext(new ExpressionContext(_parentctx, _parentState));
						((ArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2157;
						if (!(Precpred(_ctx, 24))) throw new FailedPredicateException(this, "Precpred(_ctx, 24)");
						State = 2158; Match(LBRKT);
						State = 2159; ((ArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2160; Match(RBRKT);
						}
						break;

					case 21:
						{
						_localctx = new CondAccessExprContext(new ExpressionContext(_parentctx, _parentState));
						((CondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2162;
						if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
						State = 2163; ((CondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2164; ((CondAccessExprContext)_localctx).Right = boundExpression(0);
						}
						break;

					case 22:
						{
						_localctx = new PostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostfixExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2165;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 2166;
						((PostfixExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==INC || _la==DEC) ) {
							((PostfixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 23:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2167;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2168; ((TypeCheckExpressionContext)_localctx).Op = Match(IS);
						State = 2169; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						}
						break;

					case 24:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2170;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2171; ((TypeCheckExpressionContext)_localctx).Op = Match(ASTYPE);
						State = 2172; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						}
						break;
					}
					} 
				}
				State = 2177;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,332,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : XSharpParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VoConversionExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public VoConversionExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoConversionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoConversionExpression(this);
		}
	}
	public partial class VoCastPtrExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VoCastPtrExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastPtrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastPtrExpression(this);
		}
	}
	public partial class ParenExpressionContext : PrimaryContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParenExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
	}
	public partial class AliasedFieldContext : PrimaryContext {
		public IdentifierContext Alias;
		public IdentifierContext Field;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AliasedFieldContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedField(this);
		}
	}
	public partial class SuperExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public SuperExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
	}
	public partial class AliasedFieldLateContext : PrimaryContext {
		public IdentifierContext Alias;
		public ExpressionContext Expr;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasedFieldLateContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedFieldLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedFieldLate(this);
		}
	}
	public partial class SizeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode SIZEOF() { return GetToken(XSharpParser.SIZEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public SizeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSizeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSizeOfExpression(this);
		}
	}
	public partial class CheckedExpressionContext : PrimaryContext {
		public IToken ch;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public CheckedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
	}
	public partial class VoCastExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode CAST() { return GetToken(XSharpParser.CAST, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public ITerminalNode CASTCLASS() { return GetToken(XSharpParser.CASTCLASS, 0); }
		public VoCastExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastExpression(this);
		}
	}
	public partial class NameExpressionContext : PrimaryContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
	}
	public partial class TypeExpressionContext : PrimaryContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
	}
	public partial class AnonTypeExpressionContext : PrimaryContext {
		public AnonTypeContext AnonType;
		public AnonTypeContext anonType() {
			return GetRuleContext<AnonTypeContext>(0);
		}
		public AnonTypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonTypeExpression(this);
		}
	}
	public partial class MacroContext : PrimaryContext {
		public ExpressionContext Expr;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MacroContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
	}
	public partial class AliasedMemvarContext : PrimaryContext {
		public IdentifierContext VarName;
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasedMemvarContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedMemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedMemvar(this);
		}
	}
	public partial class CtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ObjectOrCollectioninitializerContext Init;
		public ArgumentListContext ArgList;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCtorCall(this);
		}
	}
	public partial class DefaultExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public DefaultExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDefaultExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDefaultExpression(this);
		}
	}
	public partial class ArgListExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ArgListExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgListExpression(this);
		}
	}
	public partial class QueryExpressionContext : PrimaryContext {
		public LinqQueryContext Query;
		public LinqQueryContext linqQuery() {
			return GetRuleContext<LinqQueryContext>(0);
		}
		public QueryExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
	}
	public partial class AliasedExprContext : PrimaryContext {
		public IdentifierContext Id;
		public ExpressionContext Expr;
		public ExpressionContext Alias;
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AliasedExprContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedExpr(this);
		}
	}
	public partial class TypeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode TYPEOF() { return GetToken(XSharpParser.TYPEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeOfExpression(this);
		}
	}
	public partial class MacroNameContext : PrimaryContext {
		public IdentifierNameContext Name;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public MacroNameContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroName(this);
		}
	}
	public partial class SelfExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public SelfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
	}
	public partial class LiteralArrayExpressionContext : PrimaryContext {
		public LiteralArrayContext LiteralArray;
		public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public LiteralArrayExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArrayExpression(this);
		}
	}
	public partial class UsualTypeNameExpressionContext : PrimaryContext {
		public UsualTypeNameContext Name;
		public UsualTypeNameContext usualTypeName() {
			return GetRuleContext<UsualTypeNameContext>(0);
		}
		public UsualTypeNameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeNameExpression(this);
		}
	}
	public partial class IifExpressionContext : PrimaryContext {
		public IifContext Expr;
		public IifContext iif() {
			return GetRuleContext<IifContext>(0);
		}
		public IifExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIifExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIifExpression(this);
		}
	}
	public partial class CodeblockExpressionContext : PrimaryContext {
		public CodeblockContext CbExpr;
		public AnonymousMethodExpressionContext AnoExpr;
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public AnonymousMethodExpressionContext anonymousMethodExpression() {
			return GetRuleContext<AnonymousMethodExpressionContext>(0);
		}
		public CodeblockExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExpression(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryContext {
		public LiteralValueContext Literal;
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public LiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class IntrinsicExpressionContext : PrimaryContext {
		public IToken Op;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode VO_AND() { return GetToken(XSharpParser.VO_AND, 0); }
		public ITerminalNode VO_OR() { return GetToken(XSharpParser.VO_OR, 0); }
		public ITerminalNode VO_XOR() { return GetToken(XSharpParser.VO_XOR, 0); }
		public ITerminalNode VO_NOT() { return GetToken(XSharpParser.VO_NOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public IntrinsicExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIntrinsicExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIntrinsicExpression(this);
		}
	}
	public partial class DelegateCtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Obj;
		public NameContext Func;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DelegateCtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegateCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegateCtorCall(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_primary);
		int _la;
		try {
			State = 2349;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,339,_ctx) ) {
			case 1:
				_localctx = new SelfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2178; ((SelfExpressionContext)_localctx).Key = Match(SELF);
				}
				break;

			case 2:
				_localctx = new SuperExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2179; ((SuperExpressionContext)_localctx).Key = Match(SUPER);
				}
				break;

			case 3:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2180; ((LiteralExpressionContext)_localctx).Literal = literalValue();
				}
				break;

			case 4:
				_localctx = new LiteralArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2181; ((LiteralArrayExpressionContext)_localctx).LiteralArray = literalArray();
				}
				break;

			case 5:
				_localctx = new AnonTypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2182; ((AnonTypeExpressionContext)_localctx).AnonType = anonType();
				}
				break;

			case 6:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2183; ((CodeblockExpressionContext)_localctx).CbExpr = codeblock();
				}
				break;

			case 7:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2184; ((CodeblockExpressionContext)_localctx).AnoExpr = anonymousMethodExpression();
				}
				break;

			case 8:
				_localctx = new QueryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2185; ((QueryExpressionContext)_localctx).Query = linqQuery();
				}
				break;

			case 9:
				_localctx = new DelegateCtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2186; ((DelegateCtorCallContext)_localctx).Type = datatype();
				State = 2187; Match(LCURLY);
				State = 2188; ((DelegateCtorCallContext)_localctx).Obj = expression(0);
				State = 2189; Match(COMMA);
				State = 2190; Match(ADDROF);
				State = 2191; ((DelegateCtorCallContext)_localctx).Func = name(0);
				State = 2192; Match(LPAREN);
				State = 2193; Match(RPAREN);
				State = 2194; Match(RCURLY);
				}
				break;

			case 10:
				_localctx = new CtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2196; ((CtorCallContext)_localctx).Type = datatype();
				State = 2197; Match(LCURLY);
				State = 2198; Match(RCURLY);
				State = 2200;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,333,_ctx) ) {
				case 1:
					{
					State = 2199; ((CtorCallContext)_localctx).Init = objectOrCollectioninitializer();
					}
					break;
				}
				}
				break;

			case 11:
				_localctx = new CtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2202; ((CtorCallContext)_localctx).Type = datatype();
				State = 2203; Match(LCURLY);
				State = 2204; ((CtorCallContext)_localctx).ArgList = argumentList();
				State = 2205; Match(RCURLY);
				State = 2207;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					State = 2206; ((CtorCallContext)_localctx).Init = objectOrCollectioninitializer();
					}
					break;
				}
				}
				break;

			case 12:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2209; ((CheckedExpressionContext)_localctx).ch = Match(CHECKED);
				State = 2210; Match(LPAREN);
				{
				State = 2211; ((CheckedExpressionContext)_localctx).Expr = expression(0);
				}
				State = 2212; Match(RPAREN);
				}
				break;

			case 13:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2214; ((CheckedExpressionContext)_localctx).ch = Match(UNCHECKED);
				State = 2215; Match(LPAREN);
				{
				State = 2216; ((CheckedExpressionContext)_localctx).Expr = expression(0);
				}
				State = 2217; Match(RPAREN);
				}
				break;

			case 14:
				_localctx = new TypeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2219; Match(TYPEOF);
				State = 2220; Match(LPAREN);
				State = 2221; ((TypeOfExpressionContext)_localctx).Type = datatype();
				State = 2222; Match(RPAREN);
				}
				break;

			case 15:
				_localctx = new SizeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2224; Match(SIZEOF);
				State = 2225; Match(LPAREN);
				State = 2226; ((SizeOfExpressionContext)_localctx).Type = datatype();
				State = 2227; Match(RPAREN);
				}
				break;

			case 16:
				_localctx = new DefaultExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2229; Match(DEFAULT);
				State = 2230; Match(LPAREN);
				State = 2231; ((DefaultExpressionContext)_localctx).Type = datatype();
				State = 2232; Match(RPAREN);
				}
				break;

			case 17:
				_localctx = new NameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2234; ((NameExpressionContext)_localctx).Name = simpleName();
				}
				break;

			case 18:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2235; ((VoConversionExpressionContext)_localctx).Type = nativeType();
				State = 2236; Match(LPAREN);
				State = 2237; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2238; Match(RPAREN);
				}
				break;

			case 19:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2240; ((VoConversionExpressionContext)_localctx).XType = xbaseType();
				State = 2241; Match(LPAREN);
				State = 2242; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2243; Match(RPAREN);
				}
				break;

			case 20:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2245; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2246; Match(LPAREN);
				State = 2247; Match(CAST);
				State = 2248; Match(COMMA);
				State = 2249; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2250; Match(RPAREN);
				}
				break;

			case 21:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2252; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2253; Match(LPAREN);
				State = 2254; Match(CAST);
				State = 2255; Match(COMMA);
				State = 2256; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2257; Match(RPAREN);
				}
				break;

			case 22:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2259; Match(CASTCLASS);
				State = 2260; Match(LPAREN);
				State = 2261; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2262; Match(COMMA);
				State = 2263; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2264; Match(RPAREN);
				}
				break;

			case 23:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2266; Match(CASTCLASS);
				State = 2267; Match(LPAREN);
				State = 2268; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2269; Match(COMMA);
				State = 2270; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2271; Match(RPAREN);
				}
				break;

			case 24:
				_localctx = new VoCastPtrExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2273; Match(PTR);
				State = 2274; Match(LPAREN);
				State = 2275; ((VoCastPtrExpressionContext)_localctx).Type = datatype();
				State = 2276; Match(COMMA);
				State = 2277; ((VoCastPtrExpressionContext)_localctx).Expr = expression(0);
				State = 2278; Match(RPAREN);
				}
				break;

			case 25:
				_localctx = new UsualTypeNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2280; ((UsualTypeNameExpressionContext)_localctx).Name = usualTypeName();
				}
				break;

			case 26:
				_localctx = new TypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2281; ((TypeExpressionContext)_localctx).Type = typeName();
				}
				break;

			case 27:
				_localctx = new IifExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2282; ((IifExpressionContext)_localctx).Expr = iif();
				}
				break;

			case 28:
				_localctx = new IntrinsicExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2283;
				((IntrinsicExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (VO_NOT - 238)) | (1L << (VO_AND - 238)) | (1L << (VO_OR - 238)) | (1L << (VO_XOR - 238)))) != 0)) ) {
					((IntrinsicExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2284; Match(LPAREN);
				State = 2285; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
				((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
				State = 2290;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2286; Match(COMMA);
					State = 2287; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
					((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
					}
					}
					State = 2292;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2293; Match(RPAREN);
				}
				break;

			case 29:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2295; Match(FIELD);
				State = 2296; Match(ALIAS);
				State = 2300;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
				case 1:
					{
					State = 2297; ((AliasedFieldContext)_localctx).Alias = identifier();
					State = 2298; Match(ALIAS);
					}
					break;
				}
				State = 2302; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 30:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2303; Match(FIELD);
				State = 2304; Match(ALIAS);
				State = 2308;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
					{
					State = 2305; ((AliasedFieldLateContext)_localctx).Alias = identifier();
					State = 2306; Match(ALIAS);
					}
				}

				State = 2310; Match(AMP);
				State = 2311; ((AliasedFieldLateContext)_localctx).Expr = expression(0);
				}
				break;

			case 31:
				_localctx = new AliasedMemvarContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2312; Match(MEMVAR);
				State = 2313; Match(ALIAS);
				State = 2314; ((AliasedMemvarContext)_localctx).VarName = identifier();
				}
				break;

			case 32:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2315;
				if (!(InputStream.La(4) != LPAREN)) throw new FailedPredicateException(this, "InputStream.La(4) != LPAREN");
				State = 2316; ((AliasedFieldContext)_localctx).Alias = identifier();
				State = 2317; Match(ALIAS);
				State = 2318; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 33:
				_localctx = new AliasedExprContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 2320; ((AliasedExprContext)_localctx).Id = identifier();
				State = 2321; Match(ALIAS);
				State = 2322; ((AliasedExprContext)_localctx).Expr = expression(0);
				}
				break;

			case 34:
				_localctx = new AliasedExprContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2324; Match(LPAREN);
				State = 2325; ((AliasedExprContext)_localctx).Alias = expression(0);
				State = 2326; Match(RPAREN);
				State = 2327; Match(ALIAS);
				State = 2328; ((AliasedExprContext)_localctx).Expr = expression(0);
				}
				break;

			case 35:
				_localctx = new MacroContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 2330; Match(AMP);
				State = 2331; Match(LPAREN);
				State = 2332; ((MacroContext)_localctx).Expr = expression(0);
				State = 2333; Match(RPAREN);
				}
				break;

			case 36:
				_localctx = new MacroNameContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 2335; Match(AMP);
				State = 2336; ((MacroNameContext)_localctx).Name = identifierName();
				}
				break;

			case 37:
				_localctx = new ParenExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 2337; Match(LPAREN);
				State = 2338; ((ParenExpressionContext)_localctx)._expression = expression(0);
				((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
				State = 2343;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2339; Match(COMMA);
					State = 2340; ((ParenExpressionContext)_localctx)._expression = expression(0);
					((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
					}
					}
					State = 2345;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2346; Match(RPAREN);
				}
				break;

			case 38:
				_localctx = new ArgListExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 2348; ((ArgListExpressionContext)_localctx).Key = Match(ARGLIST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundExpressionContext : XSharpParserRuleContext {
		public BoundExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundExpression; } }
	 
		public BoundExpressionContext() { }
		public virtual void CopyFrom(BoundExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BindMemberAccessContext : BoundExpressionContext {
		public IToken Op;
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BindMemberAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindMemberAccess(this);
		}
	}
	public partial class BoundMethodCallContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BoundMethodCallContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundMethodCall(this);
		}
	}
	public partial class BoundCondAccessExprContext : BoundExpressionContext {
		public BoundExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public BoundExpressionContext[] boundExpression() {
			return GetRuleContexts<BoundExpressionContext>();
		}
		public BoundExpressionContext boundExpression(int i) {
			return GetRuleContext<BoundExpressionContext>(i);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundCondAccessExprContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundCondAccessExpr(this);
		}
	}
	public partial class BoundArrayAccessContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BoundArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundArrayAccess(this);
		}
	}
	public partial class BindArrayAccessContext : BoundExpressionContext {
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BindArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindArrayAccess(this);
		}
	}
	public partial class BoundAccessMemberContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BoundAccessMemberContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundAccessMember(this);
		}
	}

	[RuleVersion(0)]
	public BoundExpressionContext boundExpression() {
		return boundExpression(0);
	}

	private BoundExpressionContext boundExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		BoundExpressionContext _localctx = new BoundExpressionContext(_ctx, _parentState);
		BoundExpressionContext _prevctx = _localctx;
		int _startState = 180;
		EnterRecursionRule(_localctx, 180, RULE_boundExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2358;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COLON:
			case DOT:
				{
				_localctx = new BindMemberAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2352;
				((BindMemberAccessContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==COLON || _la==DOT) ) {
					((BindMemberAccessContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2353; ((BindMemberAccessContext)_localctx).Name = simpleName();
				}
				break;
			case LBRKT:
				{
				_localctx = new BindArrayAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2354; Match(LBRKT);
				State = 2355; ((BindArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
				State = 2356; Match(RBRKT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2381;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,342,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2379;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
					case 1:
						{
						_localctx = new BoundCondAccessExprContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundCondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2360;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2361; ((BoundCondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2362; ((BoundCondAccessExprContext)_localctx).Right = boundExpression(3);
						}
						break;

					case 2:
						{
						_localctx = new BoundAccessMemberContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundAccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2363;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2364;
						((BoundAccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((BoundAccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2365; ((BoundAccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 3:
						{
						_localctx = new BoundMethodCallContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundMethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2366;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2367; Match(LPAREN);
						State = 2368; Match(RPAREN);
						}
						break;

					case 4:
						{
						_localctx = new BoundMethodCallContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundMethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2369;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2370; Match(LPAREN);
						State = 2371; ((BoundMethodCallContext)_localctx).ArgList = argumentList();
						State = 2372; Match(RPAREN);
						}
						break;

					case 5:
						{
						_localctx = new BoundArrayAccessContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2374;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2375; Match(LBRKT);
						State = 2376; ((BoundArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2377; Match(RBRKT);
						}
						break;
					}
					} 
				}
				State = 2383;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,342,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ObjectOrCollectioninitializerContext : XSharpParserRuleContext {
		public ObjectinitializerContext ObjInit;
		public CollectioninitializerContext CollInit;
		public ObjectinitializerContext objectinitializer() {
			return GetRuleContext<ObjectinitializerContext>(0);
		}
		public CollectioninitializerContext collectioninitializer() {
			return GetRuleContext<CollectioninitializerContext>(0);
		}
		public ObjectOrCollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectOrCollectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectOrCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectOrCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
		ObjectOrCollectioninitializerContext _localctx = new ObjectOrCollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_objectOrCollectioninitializer);
		try {
			State = 2386;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,343,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2384; _localctx.ObjInit = objectinitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2385; _localctx.CollInit = collectioninitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectinitializerContext : XSharpParserRuleContext {
		public MemberinitializerContext _memberinitializer;
		public IList<MemberinitializerContext> _Members = new List<MemberinitializerContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public MemberinitializerContext[] memberinitializer() {
			return GetRuleContexts<MemberinitializerContext>();
		}
		public MemberinitializerContext memberinitializer(int i) {
			return GetRuleContext<MemberinitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ObjectinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectinitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectinitializerContext objectinitializer() {
		ObjectinitializerContext _localctx = new ObjectinitializerContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_objectinitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2388; Match(LCURLY);
			State = 2397;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
				{
				State = 2389; _localctx._memberinitializer = memberinitializer();
				_localctx._Members.Add(_localctx._memberinitializer);
				State = 2394;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2390; Match(COMMA);
					State = 2391; _localctx._memberinitializer = memberinitializer();
					_localctx._Members.Add(_localctx._memberinitializer);
					}
					}
					State = 2396;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 2399; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberinitializerContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public InitializervalueContext Expr;
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public InitializervalueContext initializervalue() {
			return GetRuleContext<InitializervalueContext>(0);
		}
		public MemberinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberinitializer(this);
		}
	}

	[RuleVersion(0)]
	public MemberinitializerContext memberinitializer() {
		MemberinitializerContext _localctx = new MemberinitializerContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_memberinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2401; _localctx.Name = identifierName();
			State = 2402; Match(ASSIGN_OP);
			State = 2403; _localctx.Expr = initializervalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializervalueContext : XSharpParserRuleContext {
		public ObjectOrCollectioninitializerContext Init;
		public ExpressionContext Expr;
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializervalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializervalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInitializervalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInitializervalue(this);
		}
	}

	[RuleVersion(0)]
	public InitializervalueContext initializervalue() {
		InitializervalueContext _localctx = new InitializervalueContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_initializervalue);
		try {
			State = 2407;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2405; _localctx.Init = objectOrCollectioninitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2406; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectioninitializerContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Members = new List<ExpressionContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public CollectioninitializerContext collectioninitializer() {
		CollectioninitializerContext _localctx = new CollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_collectioninitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2409; Match(LCURLY);
			State = 2410; _localctx._expression = expression(0);
			_localctx._Members.Add(_localctx._expression);
			State = 2415;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2411; Match(COMMA);
				State = 2412; _localctx._expression = expression(0);
				_localctx._Members.Add(_localctx._expression);
				}
				}
				State = 2417;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2418; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketedArgumentListContext : XSharpParserRuleContext {
		public UnnamedArgumentContext _unnamedArgument;
		public IList<UnnamedArgumentContext> _Args = new List<UnnamedArgumentContext>();
		public UnnamedArgumentContext[] unnamedArgument() {
			return GetRuleContexts<UnnamedArgumentContext>();
		}
		public UnnamedArgumentContext unnamedArgument(int i) {
			return GetRuleContext<UnnamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public BracketedArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBracketedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBracketedArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public BracketedArgumentListContext bracketedArgumentList() {
		BracketedArgumentListContext _localctx = new BracketedArgumentListContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_bracketedArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2420; _localctx._unnamedArgument = unnamedArgument();
			_localctx._Args.Add(_localctx._unnamedArgument);
			State = 2425;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2421; Match(COMMA);
				State = 2422; _localctx._unnamedArgument = unnamedArgument();
				_localctx._Args.Add(_localctx._unnamedArgument);
				}
				}
				State = 2427;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnnamedArgumentContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnnamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnamedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUnnamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUnnamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public UnnamedArgumentContext unnamedArgument() {
		UnnamedArgumentContext _localctx = new UnnamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_unnamedArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2429;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				State = 2428; _localctx.Expr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : XSharpParserRuleContext {
		public NamedArgumentContext _namedArgument;
		public IList<NamedArgumentContext> _Args = new List<NamedArgumentContext>();
		public NamedArgumentContext[] namedArgument() {
			return GetRuleContexts<NamedArgumentContext>();
		}
		public NamedArgumentContext namedArgument(int i) {
			return GetRuleContext<NamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2431; _localctx._namedArgument = namedArgument();
			_localctx._Args.Add(_localctx._namedArgument);
			State = 2436;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2432; Match(COMMA);
				State = 2433; _localctx._namedArgument = namedArgument();
				_localctx._Args.Add(_localctx._namedArgument);
				}
				}
				State = 2438;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public IToken RefOut;
		public ExpressionContext Expr;
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_namedArgument);
		int _la;
		try {
			State = 2454;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2439;
				if (!(AllowNamedArgs)) throw new FailedPredicateException(this, "AllowNamedArgs");
				State = 2440; _localctx.Name = identifierName();
				State = 2441; Match(ASSIGN_OP);
				State = 2443;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
				case 1:
					{
					State = 2442;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2446;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					State = 2445; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2449;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
				case 1:
					{
					State = 2448;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2452;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					State = 2451; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IifContext : XSharpParserRuleContext {
		public ExpressionContext Cond;
		public ExpressionContext TrueExpr;
		public ExpressionContext FalseExpr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode IIF() { return GetToken(XSharpParser.IIF, 0); }
		public ITerminalNode IF() { return GetToken(XSharpParser.IF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIif(this);
		}
	}

	[RuleVersion(0)]
	public IifContext iif() {
		IifContext _localctx = new IifContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_iif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2456;
			_la = _input.La(1);
			if ( !(_la==IF || _la==IIF) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2457; Match(LPAREN);
			State = 2458; _localctx.Cond = expression(0);
			State = 2459; Match(COMMA);
			State = 2461;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				State = 2460; _localctx.TrueExpr = expression(0);
				}
				break;
			}
			State = 2463; Match(COMMA);
			State = 2465;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,357,_ctx) ) {
			case 1:
				{
				State = 2464; _localctx.FalseExpr = expression(0);
				}
				break;
			}
			State = 2467; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDotContext : XSharpParserRuleContext {
		public NameDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDot; } }
	 
		public NameDotContext() { }
		public virtual void CopyFrom(NameDotContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleOrAliasedNameDotContext : NameDotContext {
		public AliasedNameContext Name;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedNameDot(this);
		}
	}
	public partial class QualifiedNameDotContext : NameDotContext {
		public NameDotContext Left;
		public SimpleNameContext Right;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedNameDot(this);
		}
	}

	[RuleVersion(0)]
	public NameDotContext nameDot() {
		return nameDot(0);
	}

	private NameDotContext nameDot(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameDotContext _localctx = new NameDotContext(_ctx, _parentState);
		NameDotContext _prevctx = _localctx;
		int _startState = 202;
		EnterRecursionRule(_localctx, 202, RULE_nameDot, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameDotContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 2470; ((SimpleOrAliasedNameDotContext)_localctx).Name = aliasedName();
			State = 2471; Match(DOT);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2479;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,358,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameDotContext(new NameDotContext(_parentctx, _parentState));
					((QualifiedNameDotContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nameDot);
					State = 2473;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 2474; ((QualifiedNameDotContext)_localctx).Right = simpleName();
					State = 2475; Match(DOT);
					}
					} 
				}
				State = 2481;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,358,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NameContext : XSharpParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext Left;
		public IToken Op;
		public SimpleNameContext Right;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}
	public partial class SimpleOrAliasedNameContext : NameContext {
		public AliasedNameContext Name;
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameContext _localctx = new NameContext(_ctx, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 204;
		EnterRecursionRule(_localctx, 204, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 2483; ((SimpleOrAliasedNameContext)_localctx).Name = aliasedName();
			}
			_ctx.stop = _input.Lt(-1);
			State = 2490;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,359,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 2485;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 2486; ((QualifiedNameContext)_localctx).Op = Match(DOT);
					State = 2487; ((QualifiedNameContext)_localctx).Right = simpleName();
					}
					} 
				}
				State = 2492;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,359,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AliasedNameContext : XSharpParserRuleContext {
		public AliasedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasedName; } }
	 
		public AliasedNameContext() { }
		public virtual void CopyFrom(AliasedNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierOrGenericNameContext : AliasedNameContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public IdentifierOrGenericNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierOrGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierOrGenericName(this);
		}
	}
	public partial class AliasQualifiedNameContext : AliasedNameContext {
		public IdentifierNameContext Alias;
		public IToken Op;
		public SimpleNameContext Right;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public AliasQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasQualifiedName(this);
		}
	}
	public partial class GlobalQualifiedNameContext : AliasedNameContext {
		public IToken Global;
		public IToken Op;
		public SimpleNameContext Right;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public GlobalQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public AliasedNameContext aliasedName() {
		AliasedNameContext _localctx = new AliasedNameContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_aliasedName);
		try {
			State = 2501;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
			case 1:
				_localctx = new GlobalQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2493; ((GlobalQualifiedNameContext)_localctx).Global = Match(GLOBAL);
				State = 2494; ((GlobalQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 2495; ((GlobalQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 2:
				_localctx = new AliasQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2496; ((AliasQualifiedNameContext)_localctx).Alias = identifierName();
				State = 2497; ((AliasQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 2498; ((AliasQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 3:
				_localctx = new IdentifierOrGenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2500; ((IdentifierOrGenericNameContext)_localctx).Name = simpleName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public GenericArgumentListContext GenericArgList;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GenericArgumentListContext genericArgumentList() {
			return GetRuleContext<GenericArgumentListContext>(0);
		}
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleName(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_simpleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2503; _localctx.Id = identifier();
			State = 2505;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				State = 2504; _localctx.GenericArgList = genericArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgumentListContext : XSharpParserRuleContext {
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _GenericArgs = new List<DatatypeContext>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GenericArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGenericArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGenericArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgumentListContext genericArgumentList() {
		GenericArgumentListContext _localctx = new GenericArgumentListContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_genericArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2507; Match(LT);
			State = 2508; _localctx._datatype = datatype();
			_localctx._GenericArgs.Add(_localctx._datatype);
			State = 2513;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2509; Match(COMMA);
				State = 2510; _localctx._datatype = datatype();
				_localctx._GenericArgs.Add(_localctx._datatype);
				}
				}
				State = 2515;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2516; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_identifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2518; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : XSharpParserRuleContext {
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
	 
		public DatatypeContext() { }
		public virtual void CopyFrom(DatatypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullableDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NullableDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNullableDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNullableDatatype(this);
		}
	}
	public partial class ArrayOfTypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayOfTypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayOfType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayOfType(this);
		}
	}
	public partial class PtrDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PtrDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPtrDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPtrDatatype(this);
		}
	}
	public partial class ArrayDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ArrayRankContext _arrayRank;
		public IList<ArrayRankContext> _Ranks = new List<ArrayRankContext>();
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayRankContext[] arrayRank() {
			return GetRuleContexts<ArrayRankContext>();
		}
		public ArrayRankContext arrayRank(int i) {
			return GetRuleContext<ArrayRankContext>(i);
		}
		public ArrayDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayDatatype(this);
		}
	}
	public partial class SimpleDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SimpleDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleDatatype(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_datatype);
		try {
			int _alt;
			State = 2536;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,364,_ctx) ) {
			case 1:
				_localctx = new ArrayOfTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2520; Match(ARRAY);
				State = 2521; Match(OF);
				State = 2522; ((ArrayOfTypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 2:
				_localctx = new PtrDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2523; ((PtrDatatypeContext)_localctx).TypeName = typeName();
				State = 2524; Match(PTR);
				}
				break;

			case 3:
				_localctx = new ArrayDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2526; ((ArrayDatatypeContext)_localctx).TypeName = typeName();
				State = 2528;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2527; ((ArrayDatatypeContext)_localctx)._arrayRank = arrayRank();
						((ArrayDatatypeContext)_localctx)._Ranks.Add(((ArrayDatatypeContext)_localctx)._arrayRank);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2530;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,363,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 4:
				_localctx = new SimpleDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2532; ((SimpleDatatypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 5:
				_localctx = new NullableDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2533; ((NullableDatatypeContext)_localctx).TypeName = typeName();
				State = 2534; Match(QMARK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRankContext : XSharpParserRuleContext {
		public IToken _COMMA;
		public IList<IToken> _Commas = new List<IToken>();
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArrayRankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRank; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayRank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayRank(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRankContext arrayRank() {
		ArrayRankContext _localctx = new ArrayRankContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_arrayRank);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2538; Match(LBRKT);
			State = 2542;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2539; _localctx._COMMA = Match(COMMA);
				_localctx._Commas.Add(_localctx._COMMA);
				}
				}
				State = 2544;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2545; Match(RBRKT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NameContext Name;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_typeName);
		try {
			State = 2550;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2547; _localctx.NativeType = nativeType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2548; _localctx.XType = xbaseType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2549; _localctx.Name = name(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsualTypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public UsualTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usualTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeName(this);
		}
	}

	[RuleVersion(0)]
	public UsualTypeNameContext usualTypeName() {
		UsualTypeNameContext _localctx = new UsualTypeNameContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_usualTypeName);
		try {
			State = 2554;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BYTE:
			case DWORD:
			case INT:
			case LOGIC:
			case LONGINT:
			case OBJECT:
			case PTR:
			case REAL4:
			case REAL8:
			case SHORTINT:
			case STRING:
			case VOID:
			case WORD:
			case CHAR:
			case INT64:
			case UINT64:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2552; _localctx.NativeType = nativeType();
				}
				break;
			case ARRAY:
			case CODEBLOCK:
			case DATE:
			case FLOAT:
			case PSZ:
			case SYMBOL:
			case USUAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2553; _localctx.XType = xbaseType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public ArrayElementContext _arrayElement;
		public IList<ArrayElementContext> _Elements = new List<ArrayElementContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_literalArray);
		int _la;
		try {
			State = 2581;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2560;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2556; Match(LT);
					State = 2557; _localctx.Type = datatype();
					State = 2558; Match(GT);
					}
				}

				State = 2562; Match(LCURLY);
				State = 2563; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2568;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 2564; Match(LT);
					State = 2565; _localctx.Type = datatype();
					State = 2566; Match(GT);
					}
				}

				State = 2570; Match(LCURLY);
				State = 2571; _localctx._arrayElement = arrayElement();
				_localctx._Elements.Add(_localctx._arrayElement);
				State = 2576;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2572; Match(COMMA);
					State = 2573; _localctx._arrayElement = arrayElement();
					_localctx._Elements.Add(_localctx._arrayElement);
					}
					}
					State = 2578;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2579; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_arrayElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2584;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				State = 2583; _localctx.Expr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonTypeContext : XSharpParserRuleContext {
		public AnonMemberContext _anonMember;
		public IList<AnonMemberContext> _Members = new List<AnonMemberContext>();
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public AnonMemberContext[] anonMember() {
			return GetRuleContexts<AnonMemberContext>();
		}
		public AnonMemberContext anonMember(int i) {
			return GetRuleContext<AnonMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AnonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonType(this);
		}
	}

	[RuleVersion(0)]
	public AnonTypeContext anonType() {
		AnonTypeContext _localctx = new AnonTypeContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_anonType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2586; Match(CLASS);
			State = 2587; Match(LCURLY);
			State = 2596;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
			case 1:
				{
				State = 2588; _localctx._anonMember = anonMember();
				_localctx._Members.Add(_localctx._anonMember);
				State = 2593;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2589; Match(COMMA);
					State = 2590; _localctx._anonMember = anonMember();
					_localctx._Members.Add(_localctx._anonMember);
					}
					}
					State = 2595;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 2598; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonMemberContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public ExpressionContext Expr;
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnonMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonMember(this);
		}
	}

	[RuleVersion(0)]
	public AnonMemberContext anonMember() {
		AnonMemberContext _localctx = new AnonMemberContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_anonMember);
		try {
			State = 2605;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2600; _localctx.Name = identifierName();
				State = 2601; Match(ASSIGN_OP);
				State = 2602; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2604; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockContext : XSharpParserRuleContext {
		public IToken Or;
		public IToken P1;
		public LambdaParameterListContext LambdaParamList;
		public IToken P2;
		public CodeblockCodeContext Code;
		public IToken lambda;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public ITerminalNode[] PIPE() { return GetTokens(XSharpParser.PIPE); }
		public ITerminalNode PIPE(int i) {
			return GetToken(XSharpParser.PIPE, i);
		}
		public LambdaParameterListContext lambdaParameterList() {
			return GetRuleContext<LambdaParameterListContext>(0);
		}
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public CodeblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblock(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockContext codeblock() {
		CodeblockContext _localctx = new CodeblockContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_codeblock);
		int _la;
		try {
			State = 2636;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2607; Match(LCURLY);
				State = 2614;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case OR:
					{
					State = 2608; _localctx.Or = Match(OR);
					}
					break;
				case PIPE:
					{
					State = 2609; _localctx.P1 = Match(PIPE);
					State = 2611;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
						{
						State = 2610; _localctx.LambdaParamList = lambdaParameterList();
						}
					}

					State = 2613; _localctx.P2 = Match(PIPE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2616; _localctx.Code = codeblockCode();
				State = 2617; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2619; Match(LCURLY);
				State = 2630;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case OR:
					{
					State = 2620; _localctx.Or = Match(OR);
					}
					break;
				case ALIGN:
				case CALLBACK:
				case CLIPPER:
				case DECLARE:
				case DEFINE:
				case DIM:
				case DLLEXPORT:
				case DOWNTO:
				case FASTCALL:
				case FUNC:
				case GLOBAL:
				case INHERIT:
				case INSTANCE:
				case IN:
				case MEMVAR:
				case NAMEOF:
				case PARAMETERS:
				case PASCAL:
				case PROC:
				case SEQUENCE:
				case STEP:
				case STRICT:
				case THISCALL:
				case TO:
				case UNION:
				case UPTO:
				case USING:
				case WINCALL:
				case ABSTRACT:
				case ANSI:
				case AUTO:
				case CONST:
				case DEFAULT:
				case DELEGATE:
				case ENUM:
				case EVENT:
				case EXPLICIT:
				case FOREACH:
				case GET:
				case IMPLEMENTS:
				case IMPLICIT:
				case IMPLIED:
				case INITONLY:
				case INTERFACE:
				case INTERNAL:
				case LOCK:
				case NAMESPACE:
				case NEW:
				case OPERATOR:
				case OUT:
				case PARTIAL:
				case PROPERTY:
				case SCOPE:
				case SEALED:
				case SET:
				case STRUCTURE:
				case TRY:
				case UNICODE:
				case UNTIL:
				case VALUE:
				case VIRTUAL:
				case VOSTRUCT:
				case ADD:
				case ARGLIST:
				case ASCENDING:
				case ASSEMBLY:
				case ASYNC:
				case ASTYPE:
				case AWAIT:
				case BY:
				case CHECKED:
				case DESCENDING:
				case EQUALS:
				case EXTERN:
				case FIXED:
				case FROM:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case NOP:
				case MODULE:
				case OF:
				case ON:
				case ORDERBY:
				case OVERRIDE:
				case PARAMS:
				case REMOVE:
				case SELECT:
				case SWITCH:
				case UNCHECKED:
				case UNSAFE:
				case VAR:
				case VOLATILE:
				case WHERE:
				case YIELD:
				case CHAR:
				case DYNAMIC:
				case DECIMAL:
				case DATETIME:
				case ASSIGNMENT:
				case ENDCLASS:
				case EXPORTED:
				case FREEZE:
				case FINAL:
				case INLINE:
				case INTRODUCE:
				case NOSAVE:
				case READONLY:
				case SHARING:
				case SHARED:
				case SYNC:
				case PIPE:
				case UDCSEP:
				case ID:
				case KWID:
					{
					State = 2622;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
					case 1:
						{
						State = 2621; _localctx.P1 = Match(PIPE);
						}
						break;
					}
					State = 2625;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
						{
						State = 2624; _localctx.LambdaParamList = lambdaParameterList();
						}
					}

					State = 2628;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==PIPE) {
						{
						State = 2627; _localctx.P2 = Match(PIPE);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2632; _localctx.lambda = Match(UDCSEP);
				State = 2633; _localctx.Code = codeblockCode();
				State = 2634; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockCodeContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public StatementBlockContext StmtBlk;
		public CodeblockExprListContext ExprList;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CodeblockExprListContext codeblockExprList() {
			return GetRuleContext<CodeblockExprListContext>(0);
		}
		public CodeblockCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockCodeContext codeblockCode() {
		CodeblockCodeContext _localctx = new CodeblockCodeContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_codeblockCode);
		try {
			State = 2645;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2639;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					State = 2638; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2641; eos();
				State = 2642; _localctx.StmtBlk = statementBlock();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2644; _localctx.ExprList = codeblockExprList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParameterListContext : XSharpParserRuleContext {
		public CodeblockParamListContext ImplicitParams;
		public ExplicitAnonymousFunctionParamListContext ExplicitParams;
		public CodeblockParamListContext codeblockParamList() {
			return GetRuleContext<CodeblockParamListContext>(0);
		}
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public LambdaParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLambdaParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLambdaParameterList(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParameterListContext lambdaParameterList() {
		LambdaParameterListContext _localctx = new LambdaParameterListContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_lambdaParameterList);
		try {
			State = 2649;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2647; _localctx.ImplicitParams = codeblockParamList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2648; _localctx.ExplicitParams = explicitAnonymousFunctionParamList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockParamListContext : XSharpParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Ids = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockParamList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockParamListContext codeblockParamList() {
		CodeblockParamListContext _localctx = new CodeblockParamListContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_codeblockParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2651; _localctx._identifier = identifier();
			_localctx._Ids.Add(_localctx._identifier);
			State = 2656;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2652; Match(COMMA);
				State = 2653; _localctx._identifier = identifier();
				_localctx._Ids.Add(_localctx._identifier);
				}
				}
				State = 2658;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockExprListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext ReturnExpr;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockExprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExprList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockExprListContext codeblockExprList() {
		CodeblockExprListContext _localctx = new CodeblockExprListContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_codeblockExprList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2663;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2660;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
					case 1:
						{
						State = 2659; _localctx._expression = expression(0);
						_localctx._Exprs.Add(_localctx._expression);
						}
						break;
					}
					State = 2662; Match(COMMA);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2665;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,388,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2667; _localctx.ReturnExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousMethodExpressionContext : XSharpParserRuleContext {
		public IToken Async;
		public IToken Delegate;
		public ExplicitAnonymousFunctionParamListContext ParamList;
		public CodeblockCodeContext Code;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public AnonymousMethodExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousMethodExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousMethodExpressionContext anonymousMethodExpression() {
		AnonymousMethodExpressionContext _localctx = new AnonymousMethodExpressionContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_anonymousMethodExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2670;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASYNC) {
				{
				State = 2669; _localctx.Async = Match(ASYNC);
				}
			}

			State = 2672; _localctx.Delegate = Match(DELEGATE);
			State = 2678;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 2673; Match(LPAREN);
				State = 2675;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
					{
					State = 2674; _localctx.ParamList = explicitAnonymousFunctionParamList();
					}
				}

				State = 2677; Match(RPAREN);
				}
			}

			State = 2680; Match(LCURLY);
			State = 2681; _localctx.Code = codeblockCode();
			State = 2682; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParamListContext : XSharpParserRuleContext {
		public ExplicitAnonymousFunctionParameterContext _explicitAnonymousFunctionParameter;
		public IList<ExplicitAnonymousFunctionParameterContext> _Params = new List<ExplicitAnonymousFunctionParameterContext>();
		public ExplicitAnonymousFunctionParameterContext[] explicitAnonymousFunctionParameter() {
			return GetRuleContexts<ExplicitAnonymousFunctionParameterContext>();
		}
		public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter(int i) {
			return GetRuleContext<ExplicitAnonymousFunctionParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExplicitAnonymousFunctionParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParamList(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
		ExplicitAnonymousFunctionParamListContext _localctx = new ExplicitAnonymousFunctionParamListContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_explicitAnonymousFunctionParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2684; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
			_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
			State = 2689;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2685; Match(COMMA);
				State = 2686; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
				_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
				}
				}
				State = 2691;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public AnonymousfunctionParameterModifierContext Mod;
		public DatatypeContext Type;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnonymousfunctionParameterModifierContext anonymousfunctionParameterModifier() {
			return GetRuleContext<AnonymousfunctionParameterModifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExplicitAnonymousFunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter() {
		ExplicitAnonymousFunctionParameterContext _localctx = new ExplicitAnonymousFunctionParameterContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_explicitAnonymousFunctionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2692; _localctx.Id = identifier();
			State = 2693; _localctx.Mod = anonymousfunctionParameterModifier();
			State = 2694; _localctx.Type = datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousfunctionParameterModifierContext : XSharpParserRuleContext {
		public IToken _AS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _REF;
		public IToken _OUT;
		public IToken _tset7994;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public AnonymousfunctionParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousfunctionParameterModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonymousfunctionParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonymousfunctionParameterModifier(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousfunctionParameterModifierContext anonymousfunctionParameterModifier() {
		AnonymousfunctionParameterModifierContext _localctx = new AnonymousfunctionParameterModifierContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_anonymousfunctionParameterModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2696;
			_localctx._tset7994 = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==AS || _la==OUT || _la==REF) ) {
				_localctx._tset7994 = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			_localctx._Tokens.Add(_localctx._tset7994);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinqQueryContext : XSharpParserRuleContext {
		public FromClauseContext From;
		public QueryBodyContext Body;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public LinqQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linqQuery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLinqQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLinqQuery(this);
		}
	}

	[RuleVersion(0)]
	public LinqQueryContext linqQuery() {
		LinqQueryContext _localctx = new LinqQueryContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_linqQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2698; _localctx.From = fromClause();
			State = 2699; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public TypeNameContext Type;
		public ExpressionContext Expr;
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2701; Match(FROM);
			State = 2702; _localctx.Id = identifier();
			State = 2705;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2703; Match(AS);
				State = 2704; _localctx.Type = typeName();
				}
			}

			State = 2707; Match(IN);
			State = 2708; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyContext : XSharpParserRuleContext {
		public QueryBodyClauseContext _queryBodyClause;
		public IList<QueryBodyClauseContext> _Bodyclauses = new List<QueryBodyClauseContext>();
		public SelectOrGroupclauseContext SorG;
		public QueryContinuationContext Continuation;
		public SelectOrGroupclauseContext selectOrGroupclause() {
			return GetRuleContext<SelectOrGroupclauseContext>(0);
		}
		public QueryBodyClauseContext[] queryBodyClause() {
			return GetRuleContexts<QueryBodyClauseContext>();
		}
		public QueryBodyClauseContext queryBodyClause(int i) {
			return GetRuleContext<QueryBodyClauseContext>(i);
		}
		public QueryContinuationContext queryContinuation() {
			return GetRuleContext<QueryContinuationContext>(0);
		}
		public QueryBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryBody(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyContext queryBody() {
		QueryBodyContext _localctx = new QueryBodyContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_queryBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2713;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (FROM - 132)) | (1L << (JOIN - 132)) | (1L << (LET - 132)) | (1L << (ORDERBY - 132)) | (1L << (WHERE - 132)))) != 0)) {
				{
				{
				State = 2710; _localctx._queryBodyClause = queryBodyClause();
				_localctx._Bodyclauses.Add(_localctx._queryBodyClause);
				}
				}
				State = 2715;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2716; _localctx.SorG = selectOrGroupclause();
			State = 2718;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				State = 2717; _localctx.Continuation = queryContinuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyClauseContext : XSharpParserRuleContext {
		public QueryBodyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBodyClause; } }
	 
		public QueryBodyClauseContext() { }
		public virtual void CopyFrom(QueryBodyClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhereClauseContext : QueryBodyClauseContext {
		public ExpressionContext Expr;
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhereClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
	}
	public partial class LetClauseContext : QueryBodyClauseContext {
		public IdentifierContext Id;
		public ExpressionContext Expr;
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLetClause(this);
		}
	}
	public partial class OrderbyClauseContext : QueryBodyClauseContext {
		public OrderingContext _ordering;
		public IList<OrderingContext> _Orders = new List<OrderingContext>();
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public OrderbyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrderbyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrderbyClause(this);
		}
	}
	public partial class JoinClauseContext : QueryBodyClauseContext {
		public IdentifierContext Id;
		public TypeNameContext Type;
		public ExpressionContext Expr;
		public ExpressionContext OnExpr;
		public ExpressionContext EqExpr;
		public JoinIntoClauseContext Into;
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public JoinIntoClauseContext joinIntoClause() {
			return GetRuleContext<JoinIntoClauseContext>(0);
		}
		public JoinClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinClause(this);
		}
	}
	public partial class FromBodyClauseContext : QueryBodyClauseContext {
		public FromClauseContext From;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public FromBodyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromBodyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromBodyClause(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyClauseContext queryBodyClause() {
		QueryBodyClauseContext _localctx = new QueryBodyClauseContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_queryBodyClause);
		int _la;
		try {
			State = 2752;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FROM:
				_localctx = new FromBodyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2720; ((FromBodyClauseContext)_localctx).From = fromClause();
				}
				break;
			case LET:
				_localctx = new LetClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2721; Match(LET);
				State = 2722; ((LetClauseContext)_localctx).Id = identifier();
				State = 2723; Match(ASSIGN_OP);
				State = 2724; ((LetClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case WHERE:
				_localctx = new WhereClauseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2726; Match(WHERE);
				State = 2727; ((WhereClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case JOIN:
				_localctx = new JoinClauseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2728; Match(JOIN);
				State = 2729; ((JoinClauseContext)_localctx).Id = identifier();
				State = 2732;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2730; Match(AS);
					State = 2731; ((JoinClauseContext)_localctx).Type = typeName();
					}
				}

				State = 2734; Match(IN);
				State = 2735; ((JoinClauseContext)_localctx).Expr = expression(0);
				State = 2736; Match(ON);
				State = 2737; ((JoinClauseContext)_localctx).OnExpr = expression(0);
				State = 2738; Match(EQUALS);
				State = 2739; ((JoinClauseContext)_localctx).EqExpr = expression(0);
				State = 2741;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INTO) {
					{
					State = 2740; ((JoinClauseContext)_localctx).Into = joinIntoClause();
					}
				}

				}
				break;
			case ORDERBY:
				_localctx = new OrderbyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2743; Match(ORDERBY);
				State = 2744; ((OrderbyClauseContext)_localctx)._ordering = ordering();
				((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
				State = 2749;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2745; Match(COMMA);
					State = 2746; ((OrderbyClauseContext)_localctx)._ordering = ordering();
					((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
					}
					}
					State = 2751;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinIntoClauseContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public JoinIntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinIntoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinIntoClause(this);
		}
	}

	[RuleVersion(0)]
	public JoinIntoClauseContext joinIntoClause() {
		JoinIntoClauseContext _localctx = new JoinIntoClauseContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_joinIntoClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2754; Match(INTO);
			State = 2755; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public IToken Direction;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2757; _localctx.Expr = expression(0);
			State = 2759;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 2758;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrGroupclauseContext : XSharpParserRuleContext {
		public SelectOrGroupclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrGroupclause; } }
	 
		public SelectOrGroupclauseContext() { }
		public virtual void CopyFrom(SelectOrGroupclauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupClauseContext : SelectOrGroupclauseContext {
		public ExpressionContext Expr;
		public ExpressionContext ByExpr;
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GroupClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGroupClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGroupClause(this);
		}
	}
	public partial class SelectClauseContext : SelectOrGroupclauseContext {
		public ExpressionContext Expr;
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrGroupclauseContext selectOrGroupclause() {
		SelectOrGroupclauseContext _localctx = new SelectOrGroupclauseContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_selectOrGroupclause);
		try {
			State = 2768;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SELECT:
				_localctx = new SelectClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2761; Match(SELECT);
				State = 2762; ((SelectClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case GROUP:
				_localctx = new GroupClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2763; Match(GROUP);
				State = 2764; ((GroupClauseContext)_localctx).Expr = expression(0);
				State = 2765; Match(BY);
				State = 2766; ((GroupClauseContext)_localctx).ByExpr = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContinuationContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public QueryBodyContext Body;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public QueryContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryContinuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryContinuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryContinuation(this);
		}
	}

	[RuleVersion(0)]
	public QueryContinuationContext queryContinuation() {
		QueryContinuationContext _localctx = new QueryContinuationContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_queryContinuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2770; Match(INTO);
			State = 2771; _localctx.Id = identifier();
			State = 2772; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : XSharpParserRuleContext {
		public IToken Token;
		public KeywordvnContext VnToken;
		public KeywordxsContext XsToken;
		public KeywordxppContext XppToken;
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode KWID() { return GetToken(XSharpParser.KWID, 0); }
		public KeywordvnContext keywordvn() {
			return GetRuleContext<KeywordvnContext>(0);
		}
		public KeywordxsContext keywordxs() {
			return GetRuleContext<KeywordxsContext>(0);
		}
		public KeywordxppContext keywordxpp() {
			return GetRuleContext<KeywordxppContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_identifier);
		int _la;
		try {
			State = 2778;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2774;
				_localctx.Token = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ID || _la==KWID) ) {
					_localctx.Token = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2775; _localctx.VnToken = keywordvn();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2776; _localctx.XsToken = keywordxs();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2777; _localctx.XppToken = keywordxpp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStringContext : XSharpParserRuleContext {
		public IToken Token;
		public KeywordvnContext VnToken;
		public KeywordxsContext XsToken;
		public KeywordxppContext XppToken;
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode KWID() { return GetToken(XSharpParser.KWID, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public KeywordvnContext keywordvn() {
			return GetRuleContext<KeywordvnContext>(0);
		}
		public KeywordxsContext keywordxs() {
			return GetRuleContext<KeywordxsContext>(0);
		}
		public KeywordxppContext keywordxpp() {
			return GetRuleContext<KeywordxppContext>(0);
		}
		public IdentifierStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierString(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStringContext identifierString() {
		IdentifierStringContext _localctx = new IdentifierStringContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_identifierString);
		int _la;
		try {
			State = 2784;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2780;
				_localctx.Token = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (STRING_CONST - 285)) | (1L << (ID - 285)) | (1L << (KWID - 285)))) != 0)) ) {
					_localctx.Token = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2781; _localctx.VnToken = keywordvn();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2782; _localctx.XsToken = keywordxs();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2783; _localctx.XppToken = keywordxpp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbaseTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode CODEBLOCK() { return GetToken(XSharpParser.CODEBLOCK, 0); }
		public ITerminalNode DATE() { return GetToken(XSharpParser.DATE, 0); }
		public ITerminalNode FLOAT() { return GetToken(XSharpParser.FLOAT, 0); }
		public ITerminalNode PSZ() { return GetToken(XSharpParser.PSZ, 0); }
		public ITerminalNode SYMBOL() { return GetToken(XSharpParser.SYMBOL, 0); }
		public ITerminalNode USUAL() { return GetToken(XSharpParser.USUAL, 0); }
		public XbaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbaseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbaseType(this);
		}
	}

	[RuleVersion(0)]
	public XbaseTypeContext xbaseType() {
		XbaseTypeContext _localctx = new XbaseTypeContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_xbaseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2786;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (ARRAY - 155)) | (1L << (CODEBLOCK - 155)) | (1L << (DATE - 155)) | (1L << (FLOAT - 155)) | (1L << (PSZ - 155)) | (1L << (SYMBOL - 155)) | (1L << (USUAL - 155)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode BYTE() { return GetToken(XSharpParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DWORD() { return GetToken(XSharpParser.DWORD, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode INT() { return GetToken(XSharpParser.INT, 0); }
		public ITerminalNode INT64() { return GetToken(XSharpParser.INT64, 0); }
		public ITerminalNode LOGIC() { return GetToken(XSharpParser.LOGIC, 0); }
		public ITerminalNode LONGINT() { return GetToken(XSharpParser.LONGINT, 0); }
		public ITerminalNode OBJECT() { return GetToken(XSharpParser.OBJECT, 0); }
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode REAL4() { return GetToken(XSharpParser.REAL4, 0); }
		public ITerminalNode REAL8() { return GetToken(XSharpParser.REAL8, 0); }
		public ITerminalNode SHORTINT() { return GetToken(XSharpParser.SHORTINT, 0); }
		public ITerminalNode STRING() { return GetToken(XSharpParser.STRING, 0); }
		public ITerminalNode UINT64() { return GetToken(XSharpParser.UINT64, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode WORD() { return GetToken(XSharpParser.WORD, 0); }
		public NativeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}

	[RuleVersion(0)]
	public NativeTypeContext nativeType() {
		NativeTypeContext _localctx = new NativeTypeContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_nativeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2788;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (BYTE - 156)) | (1L << (DWORD - 156)) | (1L << (INT - 156)) | (1L << (LOGIC - 156)) | (1L << (LONGINT - 156)) | (1L << (OBJECT - 156)) | (1L << (PTR - 156)) | (1L << (REAL4 - 156)) | (1L << (REAL8 - 156)) | (1L << (SHORTINT - 156)) | (1L << (STRING - 156)) | (1L << (VOID - 156)) | (1L << (WORD - 156)) | (1L << (CHAR - 156)) | (1L << (INT64 - 156)) | (1L << (UINT64 - 156)) | (1L << (DYNAMIC - 156)) | (1L << (DECIMAL - 156)) | (1L << (DATETIME - 156)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode CHAR_CONST() { return GetToken(XSharpParser.CHAR_CONST, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public ITerminalNode ESCAPED_STRING_CONST() { return GetToken(XSharpParser.ESCAPED_STRING_CONST, 0); }
		public ITerminalNode INTERPOLATED_STRING_CONST() { return GetToken(XSharpParser.INTERPOLATED_STRING_CONST, 0); }
		public ITerminalNode INCOMPLETE_STRING_CONST() { return GetToken(XSharpParser.INCOMPLETE_STRING_CONST, 0); }
		public ITerminalNode SYMBOL_CONST() { return GetToken(XSharpParser.SYMBOL_CONST, 0); }
		public ITerminalNode HEX_CONST() { return GetToken(XSharpParser.HEX_CONST, 0); }
		public ITerminalNode BIN_CONST() { return GetToken(XSharpParser.BIN_CONST, 0); }
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public ITerminalNode DATE_CONST() { return GetToken(XSharpParser.DATE_CONST, 0); }
		public ITerminalNode NIL() { return GetToken(XSharpParser.NIL, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public ITerminalNode NULL_ARRAY() { return GetToken(XSharpParser.NULL_ARRAY, 0); }
		public ITerminalNode NULL_CODEBLOCK() { return GetToken(XSharpParser.NULL_CODEBLOCK, 0); }
		public ITerminalNode NULL_DATE() { return GetToken(XSharpParser.NULL_DATE, 0); }
		public ITerminalNode NULL_OBJECT() { return GetToken(XSharpParser.NULL_OBJECT, 0); }
		public ITerminalNode NULL_PSZ() { return GetToken(XSharpParser.NULL_PSZ, 0); }
		public ITerminalNode NULL_PTR() { return GetToken(XSharpParser.NULL_PTR, 0); }
		public ITerminalNode NULL_STRING() { return GetToken(XSharpParser.NULL_STRING, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(XSharpParser.NULL_SYMBOL, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2790;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (NIL - 201)) | (1L << (NULL - 201)) | (1L << (NULL_ARRAY - 201)) | (1L << (NULL_CODEBLOCK - 201)) | (1L << (NULL_DATE - 201)) | (1L << (NULL_OBJECT - 201)) | (1L << (NULL_PSZ - 201)) | (1L << (NULL_PTR - 201)) | (1L << (NULL_STRING - 201)) | (1L << (NULL_SYMBOL - 201)))) != 0) || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (FALSE_CONST - 276)) | (1L << (TRUE_CONST - 276)) | (1L << (HEX_CONST - 276)) | (1L << (BIN_CONST - 276)) | (1L << (INT_CONST - 276)) | (1L << (DATE_CONST - 276)) | (1L << (REAL_CONST - 276)) | (1L << (SYMBOL_CONST - 276)) | (1L << (CHAR_CONST - 276)) | (1L << (STRING_CONST - 276)) | (1L << (ESCAPED_STRING_CONST - 276)) | (1L << (INTERPOLATED_STRING_CONST - 276)) | (1L << (INCOMPLETE_STRING_CONST - 276)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : XSharpParserRuleContext {
		public KeywordvoContext KwVo;
		public KeywordvnContext KwVn;
		public KeywordxsContext KwXs;
		public KeywordvoContext keywordvo() {
			return GetRuleContext<KeywordvoContext>(0);
		}
		public KeywordvnContext keywordvn() {
			return GetRuleContext<KeywordvnContext>(0);
		}
		public KeywordxsContext keywordxs() {
			return GetRuleContext<KeywordxsContext>(0);
		}
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2795;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				State = 2792; _localctx.KwVo = keywordvo();
				}
				break;

			case 2:
				{
				State = 2793; _localctx.KwVn = keywordvn();
				}
				break;

			case 3:
				{
				State = 2794; _localctx.KwXs = keywordxs();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordvoContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ITerminalNode CAST() { return GetToken(XSharpParser.CAST, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public ITerminalNode ELSE() { return GetToken(XSharpParser.ELSE, 0); }
		public ITerminalNode ELSEIF() { return GetToken(XSharpParser.ELSEIF, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDCASE() { return GetToken(XSharpParser.ENDCASE, 0); }
		public ITerminalNode ENDDO() { return GetToken(XSharpParser.ENDDO, 0); }
		public ITerminalNode ENDIF() { return GetToken(XSharpParser.ENDIF, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode HIDDEN() { return GetToken(XSharpParser.HIDDEN, 0); }
		public ITerminalNode IF() { return GetToken(XSharpParser.IF, 0); }
		public ITerminalNode IIF() { return GetToken(XSharpParser.IIF, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode LOOP() { return GetToken(XSharpParser.LOOP, 0); }
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(XSharpParser.PROTECTED, 0); }
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode RECOVER() { return GetToken(XSharpParser.RECOVER, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode SIZEOF() { return GetToken(XSharpParser.SIZEOF, 0); }
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public ITerminalNode TYPEOF() { return GetToken(XSharpParser.TYPEOF, 0); }
		public ITerminalNode WHILE() { return GetToken(XSharpParser.WHILE, 0); }
		public ITerminalNode TRY() { return GetToken(XSharpParser.TRY, 0); }
		public ITerminalNode VO_AND() { return GetToken(XSharpParser.VO_AND, 0); }
		public ITerminalNode VO_NOT() { return GetToken(XSharpParser.VO_NOT, 0); }
		public ITerminalNode VO_OR() { return GetToken(XSharpParser.VO_OR, 0); }
		public ITerminalNode VO_XOR() { return GetToken(XSharpParser.VO_XOR, 0); }
		public ITerminalNode REPEAT() { return GetToken(XSharpParser.REPEAT, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode CATCH() { return GetToken(XSharpParser.CATCH, 0); }
		public ITerminalNode DESTRUCTOR() { return GetToken(XSharpParser.DESTRUCTOR, 0); }
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public KeywordvoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordvo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordvo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordvo(this);
		}
	}

	[RuleVersion(0)]
	public KeywordvoContext keywordvo() {
		KeywordvoContext _localctx = new KeywordvoContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_keywordvo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2797;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << AS) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << DLL) | (1L << DO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FOR) | (1L << FUNCTION) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << IS) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << METHOD) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (SIZEOF - 64)) | (1L << (SUPER - 64)) | (1L << (TYPEOF - 64)) | (1L << (WHILE - 64)) | (1L << (CATCH - 64)) | (1L << (FINALLY - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (REPEAT - 64)) | (1L << (TRY - 64)))) != 0) || _la==PTR || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (VO_NOT - 238)) | (1L << (VO_AND - 238)) | (1L << (VO_OR - 238)) | (1L << (VO_XOR - 238)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordvnContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ABSTRACT() { return GetToken(XSharpParser.ABSTRACT, 0); }
		public ITerminalNode ANSI() { return GetToken(XSharpParser.ANSI, 0); }
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode INITONLY() { return GetToken(XSharpParser.INITONLY, 0); }
		public ITerminalNode INTERNAL() { return GetToken(XSharpParser.INTERNAL, 0); }
		public ITerminalNode LOCK() { return GetToken(XSharpParser.LOCK, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(XSharpParser.NAMESPACE, 0); }
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode PARTIAL() { return GetToken(XSharpParser.PARTIAL, 0); }
		public ITerminalNode SCOPE() { return GetToken(XSharpParser.SCOPE, 0); }
		public ITerminalNode SEALED() { return GetToken(XSharpParser.SEALED, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode TRY() { return GetToken(XSharpParser.TRY, 0); }
		public ITerminalNode UNICODE() { return GetToken(XSharpParser.UNICODE, 0); }
		public ITerminalNode VALUE() { return GetToken(XSharpParser.VALUE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(XSharpParser.VIRTUAL, 0); }
		public KeywordvnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordvn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordvn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordvn(this);
		}
	}

	[RuleVersion(0)]
	public KeywordvnContext keywordvn() {
		KeywordvnContext _localctx = new KeywordvnContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_keywordvn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2799;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (ABSTRACT - 81)) | (1L << (ANSI - 81)) | (1L << (AUTO - 81)) | (1L << (CONST - 81)) | (1L << (DEFAULT - 81)) | (1L << (EXPLICIT - 81)) | (1L << (FOREACH - 81)) | (1L << (GET - 81)) | (1L << (IMPLEMENTS - 81)) | (1L << (IMPLICIT - 81)) | (1L << (IMPLIED - 81)) | (1L << (INITONLY - 81)) | (1L << (INTERNAL - 81)) | (1L << (LOCK - 81)) | (1L << (NAMESPACE - 81)) | (1L << (NEW - 81)) | (1L << (OUT - 81)) | (1L << (PARTIAL - 81)) | (1L << (SCOPE - 81)) | (1L << (SEALED - 81)) | (1L << (SET - 81)) | (1L << (TRY - 81)) | (1L << (UNICODE - 81)) | (1L << (VALUE - 81)) | (1L << (VIRTUAL - 81)))) != 0) || _la==CHAR) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordxsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode ASSEMBLY() { return GetToken(XSharpParser.ASSEMBLY, 0); }
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public ITerminalNode EXTERN() { return GetToken(XSharpParser.EXTERN, 0); }
		public ITerminalNode FIXED() { return GetToken(XSharpParser.FIXED, 0); }
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public ITerminalNode MODULE() { return GetToken(XSharpParser.MODULE, 0); }
		public ITerminalNode NAMEOF() { return GetToken(XSharpParser.NAMEOF, 0); }
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(XSharpParser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ITerminalNode SWITCH() { return GetToken(XSharpParser.SWITCH, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(XSharpParser.UNSAFE, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode VOLATILE() { return GetToken(XSharpParser.VOLATILE, 0); }
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public ITerminalNode ENUM() { return GetToken(XSharpParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(XSharpParser.INTERFACE, 0); }
		public ITerminalNode OPERATOR() { return GetToken(XSharpParser.OPERATOR, 0); }
		public ITerminalNode PROPERTY() { return GetToken(XSharpParser.PROPERTY, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ITerminalNode VOSTRUCT() { return GetToken(XSharpParser.VOSTRUCT, 0); }
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode EVENT() { return GetToken(XSharpParser.EVENT, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode FUNC() { return GetToken(XSharpParser.FUNC, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode INSTANCE() { return GetToken(XSharpParser.INSTANCE, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode PROC() { return GetToken(XSharpParser.PROC, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(XSharpParser.SEQUENCE, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode UNION() { return GetToken(XSharpParser.UNION, 0); }
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public KeywordxsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordxs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordxs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordxs(this);
		}
	}

	[RuleVersion(0)]
	public KeywordxsContext keywordxs() {
		KeywordxsContext _localctx = new KeywordxsContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_keywordxs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2801;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (INTERFACE - 66)) | (1L << (OPERATOR - 66)) | (1L << (PROPERTY - 66)) | (1L << (STRUCTURE - 66)) | (1L << (UNTIL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordxppContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ENDCLASS() { return GetToken(XSharpParser.ENDCLASS, 0); }
		public ITerminalNode FREEZE() { return GetToken(XSharpParser.FREEZE, 0); }
		public ITerminalNode FINAL() { return GetToken(XSharpParser.FINAL, 0); }
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode INLINE() { return GetToken(XSharpParser.INLINE, 0); }
		public ITerminalNode SYNC() { return GetToken(XSharpParser.SYNC, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public ITerminalNode INTRODUCE() { return GetToken(XSharpParser.INTRODUCE, 0); }
		public KeywordxppContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordxpp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordxpp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordxpp(this);
		}
	}

	[RuleVersion(0)]
	public KeywordxppContext keywordxpp() {
		KeywordxppContext _localctx = new KeywordxppContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_keywordxpp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2803;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (ASSIGNMENT - 186)) | (1L << (ENDCLASS - 186)) | (1L << (EXPORTED - 186)) | (1L << (FREEZE - 186)) | (1L << (FINAL - 186)) | (1L << (INLINE - 186)) | (1L << (INTRODUCE - 186)) | (1L << (NOSAVE - 186)) | (1L << (READONLY - 186)) | (1L << (SHARING - 186)) | (1L << (SHARED - 186)) | (1L << (SYNC - 186)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppsourceContext : XSharpParserRuleContext {
		public XppentityContext _xppentity;
		public IList<XppentityContext> _Entities = new List<XppentityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public XppentityContext[] xppentity() {
			return GetRuleContexts<XppentityContext>();
		}
		public XppentityContext xppentity(int i) {
			return GetRuleContext<XppentityContext>(i);
		}
		public XppsourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppsource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppsource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppsource(this);
		}
	}

	[RuleVersion(0)]
	public XppsourceContext xppsource() {
		XppsourceContext _localctx = new XppsourceContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_xppsource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2806;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EOS) {
				{
				State = 2805; eos();
				}
			}

			State = 2811;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << BEGIN) | (1L << CLASS) | (1L << DEFINE) | (1L << DLL) | (1L << EXPORT) | (1L << FUNC) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << MEMVAR) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROC) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STATIC - 65)) | (1L << (UNION - 65)) | (1L << (USING - 65)) | (1L << (ABSTRACT - 65)) | (1L << (DELEGATE - 65)) | (1L << (ENUM - 65)) | (1L << (EVENT - 65)) | (1L << (INTERFACE - 65)) | (1L << (INTERNAL - 65)) | (1L << (NEW - 65)) | (1L << (PARTIAL - 65)) | (1L << (SEALED - 65)) | (1L << (STRUCTURE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOSTRUCT - 65)))) != 0) || ((((_la - 148)) & ~0x3f) == 0 && ((1L << (_la - 148)) & ((1L << (UNSAFE - 148)) | (1L << (FREEZE - 148)) | (1L << (FINAL - 148)))) != 0) || _la==LBRKT) {
				{
				{
				State = 2808; _localctx._xppentity = xppentity();
				_localctx._Entities.Add(_localctx._xppentity);
				}
				}
				State = 2813;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2814; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppnamespaceContext : XSharpParserRuleContext {
		public NameContext Name;
		public EosContext e;
		public XppentityContext _xppentity;
		public IList<XppentityContext> _Entities = new List<XppentityContext>();
		public NameContext Ignored;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] NAMESPACE() { return GetTokens(XSharpParser.NAMESPACE); }
		public ITerminalNode NAMESPACE(int i) {
			return GetToken(XSharpParser.NAMESPACE, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public XppentityContext[] xppentity() {
			return GetRuleContexts<XppentityContext>();
		}
		public XppentityContext xppentity(int i) {
			return GetRuleContext<XppentityContext>(i);
		}
		public XppnamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppnamespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppnamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppnamespace(this);
		}
	}

	[RuleVersion(0)]
	public XppnamespaceContext xppnamespace() {
		XppnamespaceContext _localctx = new XppnamespaceContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_xppnamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2816; Match(BEGIN);
			State = 2817; Match(NAMESPACE);
			State = 2818; _localctx.Name = name(0);
			State = 2819; _localctx.e = eos();
			State = 2823;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << BEGIN) | (1L << CLASS) | (1L << DEFINE) | (1L << DLL) | (1L << EXPORT) | (1L << FUNC) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << MEMVAR) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROC) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STATIC - 65)) | (1L << (UNION - 65)) | (1L << (USING - 65)) | (1L << (ABSTRACT - 65)) | (1L << (DELEGATE - 65)) | (1L << (ENUM - 65)) | (1L << (EVENT - 65)) | (1L << (INTERFACE - 65)) | (1L << (INTERNAL - 65)) | (1L << (NEW - 65)) | (1L << (PARTIAL - 65)) | (1L << (SEALED - 65)) | (1L << (STRUCTURE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOSTRUCT - 65)))) != 0) || ((((_la - 148)) & ~0x3f) == 0 && ((1L << (_la - 148)) & ((1L << (UNSAFE - 148)) | (1L << (FREEZE - 148)) | (1L << (FINAL - 148)))) != 0) || _la==LBRKT) {
				{
				{
				State = 2820; _localctx._xppentity = xppentity();
				_localctx._Entities.Add(_localctx._xppentity);
				}
				}
				State = 2825;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2826; Match(END);
			State = 2827; Match(NAMESPACE);
			State = 2829;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
				{
				State = 2828; _localctx.Ignored = name(0);
				}
			}

			State = 2831; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppentityContext : XSharpParserRuleContext {
		public XppnamespaceContext xppnamespace() {
			return GetRuleContext<XppnamespaceContext>(0);
		}
		public XppclassContext xppclass() {
			return GetRuleContext<XppclassContext>(0);
		}
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ProcedureContext procedure() {
			return GetRuleContext<ProcedureContext>(0);
		}
		public XppmethodContext xppmethod() {
			return GetRuleContext<XppmethodContext>(0);
		}
		public GlobalAttributesContext globalAttributes() {
			return GetRuleContext<GlobalAttributesContext>(0);
		}
		public Using_Context using_() {
			return GetRuleContext<Using_Context>(0);
		}
		public VodefineContext vodefine() {
			return GetRuleContext<VodefineContext>(0);
		}
		public VoglobalContext voglobal() {
			return GetRuleContext<VoglobalContext>(0);
		}
		public VodllContext vodll() {
			return GetRuleContext<VodllContext>(0);
		}
		public VostructContext vostruct() {
			return GetRuleContext<VostructContext>(0);
		}
		public VounionContext vounion() {
			return GetRuleContext<VounionContext>(0);
		}
		public XppmemvarContext xppmemvar() {
			return GetRuleContext<XppmemvarContext>(0);
		}
		public XppentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppentity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppentity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppentity(this);
		}
	}

	[RuleVersion(0)]
	public XppentityContext xppentity() {
		XppentityContext _localctx = new XppentityContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_xppentity);
		try {
			State = 2851;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2833; xppnamespace();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2834; xppclass();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2835; structure_();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2836; interface_();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2837; delegate_();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2838; event_();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2839; enum_();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2840; function();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2841; procedure();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2842; xppmethod();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2843; globalAttributes();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2844; using_();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2845; vodefine();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2846; voglobal();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2847; vodll();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2848; vostruct();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2849; vounion();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2850; xppmemvar();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppclassModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public IToken From;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _BaseTypes = new List<DatatypeContext>();
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public EosContext e;
		public XppclassMemberContext _xppclassMember;
		public IList<XppclassMemberContext> _Members = new List<XppclassMemberContext>();
		public IdentifierContext Ignored;
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode ENDCLASS() { return GetToken(XSharpParser.ENDCLASS, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppclassModifiersContext xppclassModifiers() {
			return GetRuleContext<XppclassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public XppclassMemberContext[] xppclassMember() {
			return GetRuleContexts<XppclassMemberContext>();
		}
		public XppclassMemberContext xppclassMember(int i) {
			return GetRuleContext<XppclassMemberContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclass(this);
		}
	}

	[RuleVersion(0)]
	public XppclassContext xppclass() {
		XppclassContext _localctx = new XppclassContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_xppclass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2854;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 2853; _localctx.Attributes = attributes();
				}
			}

			State = 2857;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC || _la==FREEZE || _la==FINAL) {
				{
				State = 2856; _localctx.Modifiers = xppclassModifiers();
				}
			}

			State = 2859; Match(CLASS);
			State = 2861;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 2860; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 2863; _localctx.Id = identifier();
			State = 2873;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM || _la==SHARING) {
				{
				State = 2864;
				_localctx.From = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==FROM || _la==SHARING) ) {
					_localctx.From = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2865; _localctx._datatype = datatype();
				_localctx._BaseTypes.Add(_localctx._datatype);
				State = 2870;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2866; Match(COMMA);
					State = 2867; _localctx._datatype = datatype();
					_localctx._BaseTypes.Add(_localctx._datatype);
					}
					}
					State = 2872;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 2884;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 2875; Match(IMPLEMENTS);
				State = 2876; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 2881;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2877; Match(COMMA);
					State = 2878; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 2883;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 2886; _localctx.e = eos();
			State = 2890;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (ACCESS - 2)) | (1L << (ASSIGN - 2)) | (1L << (CLASS - 2)) | (1L << (HIDDEN - 2)) | (1L << (METHOD - 2)) | (1L << (PROTECTED - 2)) | (1L << (STATIC - 2)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OVERRIDE - 142)) | (1L << (VAR - 142)) | (1L << (DEFERRED - 142)) | (1L << (EXPORTED - 142)) | (1L << (FINAL - 142)) | (1L << (INLINE - 142)) | (1L << (INTRODUCE - 142)) | (1L << (SYNC - 142)))) != 0) || _la==LBRKT) {
				{
				{
				State = 2887; _localctx._xppclassMember = xppclassMember();
				_localctx._Members.Add(_localctx._xppclassMember);
				}
				}
				State = 2892;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2893; Match(ENDCLASS);
			State = 2895;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FUNC) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PROC) | (1L << SEQUENCE))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (STEP - 66)) | (1L << (STRICT - 66)) | (1L << (THISCALL - 66)) | (1L << (TO - 66)) | (1L << (UNION - 66)) | (1L << (UPTO - 66)) | (1L << (USING - 66)) | (1L << (WINCALL - 66)) | (1L << (ABSTRACT - 66)) | (1L << (ANSI - 66)) | (1L << (AUTO - 66)) | (1L << (CONST - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELEGATE - 66)) | (1L << (ENUM - 66)) | (1L << (EVENT - 66)) | (1L << (EXPLICIT - 66)) | (1L << (FOREACH - 66)) | (1L << (GET - 66)) | (1L << (IMPLEMENTS - 66)) | (1L << (IMPLICIT - 66)) | (1L << (IMPLIED - 66)) | (1L << (INITONLY - 66)) | (1L << (INTERFACE - 66)) | (1L << (INTERNAL - 66)) | (1L << (LOCK - 66)) | (1L << (NAMESPACE - 66)) | (1L << (NEW - 66)) | (1L << (OPERATOR - 66)) | (1L << (OUT - 66)) | (1L << (PARTIAL - 66)) | (1L << (PROPERTY - 66)) | (1L << (SCOPE - 66)) | (1L << (SEALED - 66)) | (1L << (SET - 66)) | (1L << (STRUCTURE - 66)) | (1L << (TRY - 66)) | (1L << (UNICODE - 66)) | (1L << (UNTIL - 66)) | (1L << (VALUE - 66)) | (1L << (VIRTUAL - 66)) | (1L << (VOSTRUCT - 66)) | (1L << (ADD - 66)) | (1L << (ARGLIST - 66)) | (1L << (ASCENDING - 66)) | (1L << (ASSEMBLY - 66)) | (1L << (ASYNC - 66)) | (1L << (ASTYPE - 66)) | (1L << (AWAIT - 66)) | (1L << (BY - 66)) | (1L << (CHECKED - 66)) | (1L << (DESCENDING - 66)) | (1L << (EQUALS - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXTERN - 130)) | (1L << (FIXED - 130)) | (1L << (FROM - 130)) | (1L << (GROUP - 130)) | (1L << (INTO - 130)) | (1L << (JOIN - 130)) | (1L << (LET - 130)) | (1L << (NOP - 130)) | (1L << (MODULE - 130)) | (1L << (OF - 130)) | (1L << (ON - 130)) | (1L << (ORDERBY - 130)) | (1L << (OVERRIDE - 130)) | (1L << (PARAMS - 130)) | (1L << (REMOVE - 130)) | (1L << (SELECT - 130)) | (1L << (SWITCH - 130)) | (1L << (UNCHECKED - 130)) | (1L << (UNSAFE - 130)) | (1L << (VAR - 130)) | (1L << (VOLATILE - 130)) | (1L << (WHERE - 130)) | (1L << (YIELD - 130)) | (1L << (CHAR - 130)) | (1L << (DYNAMIC - 130)) | (1L << (DECIMAL - 130)) | (1L << (DATETIME - 130)) | (1L << (ASSIGNMENT - 130)) | (1L << (ENDCLASS - 130)) | (1L << (EXPORTED - 130)) | (1L << (FREEZE - 130)) | (1L << (FINAL - 130)) | (1L << (INLINE - 130)) | (1L << (INTRODUCE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (SYNC - 194)))) != 0) || _la==ID || _la==KWID) {
				{
				State = 2894; _localctx.Ignored = identifier();
				}
			}

			State = 2897; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FREEZE;
		public IToken _FINAL;
		public IToken _tset9559;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] FREEZE() { return GetTokens(XSharpParser.FREEZE); }
		public ITerminalNode FREEZE(int i) {
			return GetToken(XSharpParser.FREEZE, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public XppclassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppclassModifiersContext xppclassModifiers() {
		XppclassModifiersContext _localctx = new XppclassModifiersContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_xppclassModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2900;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2899;
				_localctx._tset9559 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==STATIC || _la==FREEZE || _la==FINAL) ) {
					_localctx._tset9559 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset9559);
				}
				}
				State = 2902;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==STATIC || _la==FREEZE || _la==FINAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassMemberContext : XSharpParserRuleContext {
		public XppclassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassMember; } }
	 
		public XppclassMemberContext() { }
		public virtual void CopyFrom(XppclassMemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class XppclsvisibilityContext : XppclassMemberContext {
		public XppmethodvisContext Member;
		public XppmethodvisContext xppmethodvis() {
			return GetRuleContext<XppmethodvisContext>(0);
		}
		public XppclsvisibilityContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvisibility(this);
		}
	}
	public partial class XppclsdeclaremethodContext : XppclassMemberContext {
		public XppdeclareMethodContext Member;
		public XppdeclareMethodContext xppdeclareMethod() {
			return GetRuleContext<XppdeclareMethodContext>(0);
		}
		public XppclsdeclaremethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsdeclaremethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsdeclaremethod(this);
		}
	}
	public partial class XppclsinlinemethodContext : XppclassMemberContext {
		public XppinlineMethodContext Member;
		public XppinlineMethodContext xppinlineMethod() {
			return GetRuleContext<XppinlineMethodContext>(0);
		}
		public XppclsinlinemethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsinlinemethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsinlinemethod(this);
		}
	}
	public partial class XppclspropertyContext : XppclassMemberContext {
		public XpppropertyContext Member;
		public XpppropertyContext xppproperty() {
			return GetRuleContext<XpppropertyContext>(0);
		}
		public XppclspropertyContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsproperty(this);
		}
	}
	public partial class XppclsvarsContext : XppclassMemberContext {
		public XppclassvarsContext Member;
		public XppclassvarsContext xppclassvars() {
			return GetRuleContext<XppclassvarsContext>(0);
		}
		public XppclsvarsContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassMemberContext xppclassMember() {
		XppclassMemberContext _localctx = new XppclassMemberContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_xppclassMember);
		try {
			State = 2909;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
			case 1:
				_localctx = new XppclsvisibilityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2904; ((XppclsvisibilityContext)_localctx).Member = xppmethodvis();
				}
				break;

			case 2:
				_localctx = new XppclsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2905; ((XppclsvarsContext)_localctx).Member = xppclassvars();
				}
				break;

			case 3:
				_localctx = new XppclsinlinemethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2906; ((XppclsinlinemethodContext)_localctx).Member = xppinlineMethod();
				}
				break;

			case 4:
				_localctx = new XppclsdeclaremethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2907; ((XppclsdeclaremethodContext)_localctx).Member = xppdeclareMethod();
				}
				break;

			case 5:
				_localctx = new XppclspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2908; ((XppclspropertyContext)_localctx).Member = xppproperty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodvisContext : XSharpParserRuleContext {
		public XppvisibilityContext Vis;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppmethodvisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethodvis; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethodvis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethodvis(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodvisContext xppmethodvis() {
		XppmethodvisContext _localctx = new XppmethodvisContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_xppmethodvis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2911; _localctx.Vis = xppvisibility();
			State = 2912; Match(COLON);
			State = 2913; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvisibilityContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode HIDDEN() { return GetToken(XSharpParser.HIDDEN, 0); }
		public ITerminalNode PROTECTED() { return GetToken(XSharpParser.PROTECTED, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public XppvisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvisibility(this);
		}
	}

	[RuleVersion(0)]
	public XppvisibilityContext xppvisibility() {
		XppvisibilityContext _localctx = new XppvisibilityContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_xppvisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2915;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==HIDDEN || _la==PROTECTED || _la==EXPORTED) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclareMethodContext : XSharpParserRuleContext {
		public XppdeclareModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Methods = new List<IdentifierContext>();
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public XppdeclareModifiersContext xppdeclareModifiers() {
			return GetRuleContext<XppdeclareModifiersContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppdeclareMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclareMethodContext xppdeclareMethod() {
		XppdeclareMethodContext _localctx = new XppdeclareMethodContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_xppdeclareMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2918;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OVERRIDE - 142)) | (1L << (DEFERRED - 142)) | (1L << (FINAL - 142)) | (1L << (INTRODUCE - 142)) | (1L << (SYNC - 142)))) != 0)) {
				{
				State = 2917; _localctx.Modifiers = xppdeclareModifiers();
				}
			}

			State = 2920; Match(METHOD);
			State = 2921; _localctx._identifier = identifier();
			_localctx._Methods.Add(_localctx._identifier);
			State = 2930;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IS:
			case IN:
				{
				State = 2922; xppisin();
				}
				break;
			case COMMA:
			case EOS:
				{
				State = 2927;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2923; Match(COMMA);
					State = 2924; _localctx._identifier = identifier();
					_localctx._Methods.Add(_localctx._identifier);
					}
					}
					State = 2929;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2932; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppisinContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext SuperClass;
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public XppisinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppisin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppisin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppisin(this);
		}
	}

	[RuleVersion(0)]
	public XppisinContext xppisin() {
		XppisinContext _localctx = new XppisinContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_xppisin);
		int _la;
		try {
			State = 2942;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2934; Match(IS);
				State = 2935; _localctx.Id = identifier();
				State = 2938;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IN) {
					{
					State = 2936; Match(IN);
					State = 2937; _localctx.SuperClass = identifier();
					}
				}

				}
				break;
			case IN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2940; Match(IN);
				State = 2941; _localctx.SuperClass = identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclareModifiersContext : XSharpParserRuleContext {
		public IToken _DEFERRED;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FINAL;
		public IToken _INTRODUCE;
		public IToken _OVERRIDE;
		public IToken _CLASS;
		public IToken _SYNC;
		public IToken _tset9746;
		public ITerminalNode[] DEFERRED() { return GetTokens(XSharpParser.DEFERRED); }
		public ITerminalNode DEFERRED(int i) {
			return GetToken(XSharpParser.DEFERRED, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public ITerminalNode[] INTRODUCE() { return GetTokens(XSharpParser.INTRODUCE); }
		public ITerminalNode INTRODUCE(int i) {
			return GetToken(XSharpParser.INTRODUCE, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public ITerminalNode[] SYNC() { return GetTokens(XSharpParser.SYNC); }
		public ITerminalNode SYNC(int i) {
			return GetToken(XSharpParser.SYNC, i);
		}
		public XppdeclareModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclareModifiersContext xppdeclareModifiers() {
		XppdeclareModifiersContext _localctx = new XppdeclareModifiersContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_xppdeclareModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2945;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2944;
				_localctx._tset9746 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OVERRIDE - 142)) | (1L << (DEFERRED - 142)) | (1L << (FINAL - 142)) | (1L << (INTRODUCE - 142)) | (1L << (SYNC - 142)))) != 0)) ) {
					_localctx._tset9746 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset9746);
				}
				}
				State = 2947;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CLASS || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OVERRIDE - 142)) | (1L << (DEFERRED - 142)) | (1L << (FINAL - 142)) | (1L << (INTRODUCE - 142)) | (1L << (SYNC - 142)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassvarsContext : XSharpParserRuleContext {
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Vars = new List<IdentifierContext>();
		public XppisinContext Is;
		public DatatypeContext DataType;
		public IToken Shared;
		public IToken ReadOnly;
		public XppvarassignmentContext Assignment;
		public IToken Nosave;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public XppvarassignmentContext xppvarassignment() {
			return GetRuleContext<XppvarassignmentContext>(0);
		}
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XppclassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassvarsContext xppclassvars() {
		XppclassvarsContext _localctx = new XppclassvarsContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_xppclassvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2950;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC) {
				{
				State = 2949; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 2952; Match(VAR);
			State = 2953; _localctx._identifier = identifier();
			_localctx._Vars.Add(_localctx._identifier);
			State = 2966;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IS:
			case IN:
				{
				State = 2954; _localctx.Is = xppisin();
				}
				break;
			case AS:
			case ASSIGNMENT:
			case NOSAVE:
			case READONLY:
			case SHARED:
			case COMMA:
			case EOS:
				{
				{
				State = 2959;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2955; Match(COMMA);
					State = 2956; _localctx._identifier = identifier();
					_localctx._Vars.Add(_localctx._identifier);
					}
					}
					State = 2961;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2964;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2962; Match(AS);
					State = 2963; _localctx.DataType = datatype();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2969;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SHARED) {
				{
				State = 2968; _localctx.Shared = Match(SHARED);
				}
			}

			State = 2972;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==READONLY) {
				{
				State = 2971; _localctx.ReadOnly = Match(READONLY);
				}
			}

			State = 2975;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 2974; _localctx.Assignment = xppvarassignment();
				}
			}

			State = 2978;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOSAVE) {
				{
				State = 2977; _localctx.Nosave = Match(NOSAVE);
				}
			}

			State = 2980; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvarassignmentContext : XSharpParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppvarassignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvarassignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvarassignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvarassignment(this);
		}
	}

	[RuleVersion(0)]
	public XppvarassignmentContext xppvarassignment() {
		XppvarassignmentContext _localctx = new XppvarassignmentContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_xppvarassignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2982; Match(ASSIGNMENT);
			State = 2983; xppvisibility();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XpppropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken Access;
		public IToken Assign;
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext Id;
		public IdentifierContext VarName;
		public DatatypeContext Type;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XpppropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppproperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppproperty(this);
		}
	}

	[RuleVersion(0)]
	public XpppropertyContext xppproperty() {
		XpppropertyContext _localctx = new XpppropertyContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_xppproperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2986;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 2985; _localctx.Attributes = attributes();
				}
			}

			State = 2996;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ACCESS:
				{
				State = 2988; _localctx.Access = Match(ACCESS);
				State = 2990;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ASSIGN) {
					{
					State = 2989; _localctx.Assign = Match(ASSIGN);
					}
				}

				}
				break;
			case ASSIGN:
				{
				State = 2992; _localctx.Assign = Match(ASSIGN);
				State = 2994;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ACCESS) {
					{
					State = 2993; _localctx.Access = Match(ACCESS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2999;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC) {
				{
				State = 2998; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3001; Match(METHOD);
			State = 3002; _localctx.Id = identifier();
			State = 3005;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VAR) {
				{
				State = 3003; Match(VAR);
				State = 3004; _localctx.VarName = identifier();
				}
			}

			State = 3009;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3007; Match(AS);
				State = 3008; _localctx.Type = datatype();
				}
			}

			State = 3011; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken MethodType;
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext ClassId;
		public IdentifierContext Id;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public XppmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethod(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodContext xppmethod() {
		XppmethodContext _localctx = new XppmethodContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_xppmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3014;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 3013; _localctx.Attributes = attributes();
				}
			}

			State = 3017;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ACCESS || _la==ASSIGN) {
				{
				State = 3016;
				_localctx.MethodType = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ACCESS || _la==ASSIGN) ) {
					_localctx.MethodType = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 3020;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC) {
				{
				State = 3019; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3022; Match(METHOD);
			State = 3026;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				State = 3023; _localctx.ClassId = identifier();
				State = 3024; Match(COLON);
				}
				break;
			}
			State = 3028; _localctx.Id = identifier();
			State = 3030;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3029; _localctx.ParamList = parameterList();
				}
			}

			State = 3034;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3032; Match(AS);
				State = 3033; _localctx.Type = datatype();
				}
			}

			State = 3036; _localctx.end = eos();
			State = 3037; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppinlineMethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext Id;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode INLINE() { return GetToken(XSharpParser.INLINE, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XppinlineMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppinlineMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppinlineMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppinlineMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppinlineMethodContext xppinlineMethod() {
		XppinlineMethodContext _localctx = new XppinlineMethodContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_xppinlineMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3040;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 3039; _localctx.Attributes = attributes();
				}
			}

			State = 3042; Match(INLINE);
			State = 3044;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC) {
				{
				State = 3043; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3046; Match(METHOD);
			State = 3047; _localctx.Id = identifier();
			State = 3049;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3048; _localctx.ParamList = parameterList();
				}
			}

			State = 3053;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3051; Match(AS);
				State = 3052; _localctx.Type = datatype();
				}
			}

			State = 3055; _localctx.end = eos();
			State = 3056; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmemberModifiersContext : XSharpParserRuleContext {
		public IToken _CLASS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _tset10132;
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public XppmemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmemberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppmemberModifiersContext xppmemberModifiers() {
		XppmemberModifiersContext _localctx = new XppmemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_xppmemberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3059;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3058;
				_localctx._tset10132 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STATIC) ) {
					_localctx._tset10132 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset10132);
				}
				}
				State = 3061;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CLASS || _la==STATIC );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmemvarContext : XSharpParserRuleContext {
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Vars = new List<IdentifierNameContext>();
		public EosContext end;
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppmemvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmemvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmemvar(this);
		}
	}

	[RuleVersion(0)]
	public XppmemvarContext xppmemvar() {
		XppmemvarContext _localctx = new XppmemvarContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_xppmemvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3063; Match(MEMVAR);
			State = 3064; _localctx._identifierName = identifierName();
			_localctx._Vars.Add(_localctx._identifierName);
			State = 3069;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3065; Match(COMMA);
				State = 3066; _localctx._identifierName = identifierName();
				_localctx._Vars.Add(_localctx._identifierName);
				}
				}
				State = 3071;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3072; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 43: return eventLineAccessor_sempred((EventLineAccessorContext)_localctx, predIndex);

		case 53: return propertyLineAccessor_sempred((PropertyLineAccessorContext)_localctx, predIndex);

		case 57: return classmember_sempred((ClassmemberContext)_localctx, predIndex);

		case 75: return statement_sempred((StatementContext)_localctx, predIndex);

		case 83: return localdecl_sempred((LocaldeclContext)_localctx, predIndex);

		case 88: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 89: return primary_sempred((PrimaryContext)_localctx, predIndex);

		case 90: return boundExpression_sempred((BoundExpressionContext)_localctx, predIndex);

		case 99: return namedArgument_sempred((NamedArgumentContext)_localctx, predIndex);

		case 101: return nameDot_sempred((NameDotContext)_localctx, predIndex);

		case 102: return name_sempred((NameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool eventLineAccessor_sempred(EventLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return InputStream.La(2) != REMOVE;

		case 1: return InputStream.La(2) != ADD;
		}
		return true;
	}
	private bool propertyLineAccessor_sempred(PropertyLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return InputStream.La(2) != SET;

		case 3: return InputStream.La(2) != GET;
		}
		return true;
	}
	private bool classmember_sempred(ClassmemberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return AllowFunctionInsideClass;

		case 5: return AllowFunctionInsideClass;
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return AllowXBaseVariables;

		case 7: return validExpressionStmt();

		case 8: return validExpressionStmt();

		case 9: return validExpressionStmt();
		}
		return true;
	}
	private bool localdecl_sempred(LocaldeclContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return !XSharpLexer.IsKeyword(InputStream.La(2));
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(_ctx, 16);

		case 12: return Precpred(_ctx, 15);

		case 13: return Precpred(_ctx, 14);

		case 14: return Precpred(_ctx, 13);

		case 15: return Precpred(_ctx, 12);

		case 16: return Precpred(_ctx, 11);

		case 17: return Precpred(_ctx, 10);

		case 18: return Precpred(_ctx, 9);

		case 19: return Precpred(_ctx, 8);

		case 20: return Precpred(_ctx, 6);

		case 21: return Precpred(_ctx, 5);

		case 22: return Precpred(_ctx, 4);

		case 23: return Precpred(_ctx, 3);

		case 24: return Precpred(_ctx, 2);

		case 25: return Precpred(_ctx, 30);

		case 26: return Precpred(_ctx, 28);

		case 27: return Precpred(_ctx, 27);

		case 28: return Precpred(_ctx, 26);

		case 29: return Precpred(_ctx, 25);

		case 30: return Precpred(_ctx, 24);

		case 31: return Precpred(_ctx, 23);

		case 32: return Precpred(_ctx, 21);

		case 33: return Precpred(_ctx, 18);

		case 34: return Precpred(_ctx, 17);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return InputStream.La(4) != LPAREN;
		}
		return true;
	}
	private bool boundExpression_sempred(BoundExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return Precpred(_ctx, 3);

		case 37: return Precpred(_ctx, 7);

		case 38: return Precpred(_ctx, 6);

		case 39: return Precpred(_ctx, 5);

		case 40: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool namedArgument_sempred(NamedArgumentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return AllowNamedArgs;
		}
		return true;
	}
	private bool nameDot_sempred(NameDotContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x142\xC05\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\a\x2\x149\n\x2\f\x2\xE\x2\x14C\v\x2\x3\x2\a\x2\x14F"+
		"\n\x2\f\x2\xE\x2\x152\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3\x159\n"+
		"\x3\x3\x4\x3\x4\x5\x4\x15D\n\x4\x3\x4\x3\x4\x3\x4\x3\x5\x5\x5\x163\n\x5"+
		"\x3\x5\a\x5\x166\n\x5\f\x5\xE\x5\x169\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x180\n\x6\x3\a\x6\a\x183\n\a\r\a"+
		"\xE\a\x184\x3\b\x5\b\x188\n\b\x3\b\x5\b\x18B\n\b\x3\b\x3\b\x3\b\x5\b\x190"+
		"\n\b\x3\b\x5\b\x193\n\b\x3\b\x3\b\x5\b\x197\n\b\x3\b\a\b\x19A\n\b\f\b"+
		"\xE\b\x19D\v\b\x3\b\x5\b\x1A0\n\b\x3\b\x3\b\x5\b\x1A4\n\b\x3\b\x3\b\x5"+
		"\b\x1A8\n\b\x3\b\x3\b\x3\b\x3\t\x5\t\x1AE\n\t\x3\t\x5\t\x1B1\n\t\x3\t"+
		"\x3\t\x3\t\x5\t\x1B6\n\t\x3\t\x5\t\x1B9\n\t\x3\t\x3\t\x5\t\x1BD\n\t\x3"+
		"\t\a\t\x1C0\n\t\f\t\xE\t\x1C3\v\t\x3\t\x5\t\x1C6\n\t\x3\t\x5\t\x1C9\n"+
		"\t\x3\t\x3\t\x5\t\x1CD\n\t\x3\t\x3\t\x5\t\x1D1\n\t\x3\t\x3\t\x3\t\x3\n"+
		"\x3\n\x3\v\x5\v\x1D9\n\v\x3\v\x5\v\x1DC\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x5\v\x1E4\n\v\x3\v\x3\v\x3\v\x3\v\x5\v\x1EA\n\v\x3\v\x5\v\x1ED\n\v"+
		"\x3\v\x3\v\x3\v\x3\v\x5\v\x1F3\n\v\x3\v\x3\v\x3\v\x3\v\x5\v\x1F9\n\v\x3"+
		"\v\x5\v\x1FC\n\v\x3\v\x3\v\x5\v\x200\n\v\x5\v\x202\n\v\x3\v\x5\v\x205"+
		"\n\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\a\r\x20F\n\r\f\r\xE\r\x212"+
		"\v\r\x5\r\x214\n\r\x3\r\x3\r\x3\xE\x5\xE\x219\n\xE\x3\xE\x5\xE\x21C\n"+
		"\xE\x3\xE\x3\xE\x3\xE\x5\xE\x221\n\xE\x3\xE\x3\xE\x3\xE\x5\xE\x226\n\xE"+
		"\x3\xE\x5\xE\x229\n\xE\x3\xF\x3\xF\x5\xF\x22D\n\xF\x3\x10\a\x10\x230\n"+
		"\x10\f\x10\xE\x10\x233\v\x10\x3\x11\x6\x11\x236\n\x11\r\x11\xE\x11\x237"+
		"\x3\x12\x3\x12\x5\x12\x23C\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\x241\n\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x13\x5\x13\x247\n\x13\x3\x13\x5\x13\x24A\n\x13"+
		"\x3\x13\x3\x13\x5\x13\x24E\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x254"+
		"\n\x13\x3\x13\x3\x13\x5\x13\x258\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x25D"+
		"\n\x13\x3\x14\x5\x14\x260\n\x14\x3\x14\x5\x14\x263\n\x14\x3\x14\x3\x14"+
		"\x5\x14\x267\n\x14\x3\x14\x3\x14\x5\x14\x26B\n\x14\x3\x14\x5\x14\x26E"+
		"\n\x14\x3\x14\x3\x14\x5\x14\x272\n\x14\x3\x14\a\x14\x275\n\x14\f\x14\xE"+
		"\x14\x278\v\x14\x3\x14\x5\x14\x27B\n\x14\x3\x14\x3\x14\x5\x14\x27F\n\x14"+
		"\x3\x14\x5\x14\x282\n\x14\x3\x14\x3\x14\x5\x14\x286\n\x14\x3\x14\x3\x14"+
		"\x5\x14\x28A\n\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x5\x16\x292"+
		"\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x29A\n\x16\x3"+
		"\x16\x3\x16\x3\x17\x5\x17\x29F\n\x17\x3\x17\x3\x17\x5\x17\x2A3\n\x17\x3"+
		"\x17\x3\x17\x3\x17\x5\x17\x2A8\n\x17\x3\x17\x3\x17\x6\x17\x2AC\n\x17\r"+
		"\x17\xE\x17\x2AD\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x5\x18\x2B8\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x2C0"+
		"\n\x18\x3\x18\x3\x18\x5\x18\x2C4\n\x18\x3\x19\x5\x19\x2C7\n\x19\x3\x19"+
		"\x3\x19\x5\x19\x2CB\n\x19\x3\x19\x3\x19\x3\x19\x6\x19\x2D0\n\x19\r\x19"+
		"\xE\x19\x2D1\x3\x1A\x6\x1A\x2D5\n\x1A\r\x1A\xE\x1A\x2D6\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\a\x1B\x2DE\n\x1B\f\x1B\xE\x1B\x2E1\v\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x5\x1B\x2E6\n\x1B\x3\x1B\x3\x1B\x3\x1C\x5\x1C\x2EB\n\x1C"+
		"\x3\x1C\x5\x1C\x2EE\n\x1C\x3\x1C\x3\x1C\x5\x1C\x2F2\n\x1C\x3\x1C\x3\x1C"+
		"\x5\x1C\x2F6\n\x1C\x3\x1C\x3\x1C\x5\x1C\x2FA\n\x1C\x3\x1C\x3\x1C\a\x1C"+
		"\x2FE\n\x1C\f\x1C\xE\x1C\x301\v\x1C\x3\x1C\a\x1C\x304\n\x1C\f\x1C\xE\x1C"+
		"\x307\v\x1C\x3\x1C\x3\x1C\a\x1C\x30B\n\x1C\f\x1C\xE\x1C\x30E\v\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x5\x1C\x313\n\x1C\x3\x1C\x3\x1C\x3\x1D\x6\x1D\x318"+
		"\n\x1D\r\x1D\xE\x1D\x319\x3\x1E\x5\x1E\x31D\n\x1E\x3\x1E\x5\x1E\x320\n"+
		"\x1E\x3\x1E\x3\x1E\x5\x1E\x324\n\x1E\x3\x1E\x3\x1E\x5\x1E\x328\n\x1E\x3"+
		"\x1E\x3\x1E\x5\x1E\x32C\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x332\n"+
		"\x1E\f\x1E\xE\x1E\x335\v\x1E\x5\x1E\x337\n\x1E\x3\x1E\a\x1E\x33A\n\x1E"+
		"\f\x1E\xE\x1E\x33D\v\x1E\x3\x1E\x3\x1E\a\x1E\x341\n\x1E\f\x1E\xE\x1E\x344"+
		"\v\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x349\n\x1E\x3\x1E\x3\x1E\x3\x1F\x6"+
		"\x1F\x34E\n\x1F\r\x1F\xE\x1F\x34F\x3 \x3 \x3 \x3 \x5 \x356\n \x3 \a \x359"+
		"\n \f \xE \x35C\v \x3 \x3 \x3!\x5!\x361\n!\x3!\x5!\x364\n!\x3!\x3!\x3"+
		"\"\x3\"\x3\"\x3\"\x3\"\x3\"\a\"\x36E\n\"\f\"\xE\"\x371\v\"\x3#\x3#\x3"+
		"#\x3#\x3#\x5#\x378\n#\x3$\x5$\x37B\n$\x3$\x5$\x37E\n$\x3$\x3$\x5$\x382"+
		"\n$\x3$\x3$\x5$\x386\n$\x3$\x3$\x3$\x3$\a$\x38C\n$\f$\xE$\x38F\v$\x5$"+
		"\x391\n$\x3$\a$\x394\n$\f$\xE$\x397\v$\x3$\x3$\a$\x39B\n$\f$\xE$\x39E"+
		"\v$\x3$\x3$\x3$\x5$\x3A3\n$\x3$\x3$\x3%\x6%\x3A8\n%\r%\xE%\x3A9\x3&\x5"+
		"&\x3AD\n&\x3&\x5&\x3B0\n&\x3&\x3&\x5&\x3B4\n&\x3&\x3&\x5&\x3B8\n&\x3&"+
		"\x5&\x3BB\n&\x3&\x3&\x5&\x3BF\n&\x3&\a&\x3C2\n&\f&\xE&\x3C5\v&\x3&\x3"+
		"&\x3\'\x6\'\x3CA\n\'\r\'\xE\'\x3CB\x3(\x5(\x3CF\n(\x3(\x5(\x3D2\n(\x3"+
		"(\x3(\x5(\x3D6\n(\x3(\x3(\x3(\x5(\x3DB\n(\x3(\x3(\x6(\x3DF\n(\r(\xE(\x3E0"+
		"\x3(\x3(\x5(\x3E5\n(\x3(\x5(\x3E8\n(\x3(\x3(\x3)\x6)\x3ED\n)\r)\xE)\x3EE"+
		"\x3*\x5*\x3F2\n*\x3*\x5*\x3F5\n*\x3*\x3*\x3*\x5*\x3FA\n*\x3*\x3*\x3+\x5"+
		"+\x3FF\n+\x3+\x5+\x402\n+\x3+\x3+\x5+\x406\n+\x3+\x3+\x3+\x5+\x40B\n+"+
		"\x3+\x3+\x6+\x40F\n+\r+\xE+\x410\x3+\x3+\x3+\x3+\x6+\x417\n+\r+\xE+\x418"+
		"\x3+\x3+\x5+\x41D\n+\x3+\x5+\x420\n+\x3+\x3+\x5+\x424\n+\x3,\x6,\x427"+
		"\n,\r,\xE,\x428\x3-\x5-\x42C\n-\x3-\x5-\x42F\n-\x3-\x3-\x3-\x5-\x434\n"+
		"-\x3-\x3-\x3-\x5-\x439\n-\x3-\x5-\x43C\n-\x3.\x5.\x43F\n.\x3.\x5.\x442"+
		"\n.\x3.\x3.\x3.\x3.\x3.\x5.\x449\n.\x3.\x3.\x3.\x3.\x3.\x5.\x450\n.\x5"+
		".\x452\n.\x3.\x3.\x3/\x5/\x457\n/\x3/\x5/\x45A\n/\x3/\x3/\x3/\x3\x30\x6"+
		"\x30\x460\n\x30\r\x30\xE\x30\x461\x3\x31\x3\x31\x3\x31\a\x31\x467\n\x31"+
		"\f\x31\xE\x31\x46A\v\x31\x3\x31\x3\x31\x5\x31\x46E\n\x31\x3\x32\x5\x32"+
		"\x471\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x478\n\x32\x3\x32"+
		"\x3\x32\x5\x32\x47C\n\x32\x3\x33\x3\x33\x3\x33\x3\x33\x6\x33\x482\n\x33"+
		"\r\x33\xE\x33\x483\x3\x33\x3\x33\x3\x33\x6\x33\x489\n\x33\r\x33\xE\x33"+
		"\x48A\x3\x33\x5\x33\x48E\n\x33\x3\x34\x5\x34\x491\n\x34\x3\x34\x5\x34"+
		"\x494\n\x34\x3\x34\x3\x34\x3\x34\x3\x34\x5\x34\x49A\n\x34\x3\x34\x5\x34"+
		"\x49D\n\x34\x3\x34\x5\x34\x4A0\n\x34\x3\x34\x3\x34\x5\x34\x4A4\n\x34\x3"+
		"\x34\x3\x34\a\x34\x4A8\n\x34\f\x34\xE\x34\x4AB\v\x34\x3\x34\x3\x34\x5"+
		"\x34\x4AF\n\x34\x3\x34\x3\x34\x6\x34\x4B3\n\x34\r\x34\xE\x34\x4B4\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x6\x34\x4BB\n\x34\r\x34\xE\x34\x4BC\x3\x34\x3\x34"+
		"\x5\x34\x4C1\n\x34\x3\x34\x5\x34\x4C4\n\x34\x3\x34\x3\x34\x5\x34\x4C8"+
		"\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\a\x35\x4CE\n\x35\f\x35\xE\x35\x4D1"+
		"\v\x35\x5\x35\x4D3\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\a\x35\x4DA"+
		"\n\x35\f\x35\xE\x35\x4DD\v\x35\x5\x35\x4DF\n\x35\x3\x35\x5\x35\x4E2\n"+
		"\x35\x3\x36\x5\x36\x4E5\n\x36\x3\x36\x5\x36\x4E8\n\x36\x3\x36\x3\x36\x3"+
		"\x37\x5\x37\x4ED\n\x37\x3\x37\x5\x37\x4F0\n\x37\x3\x37\x3\x37\x3\x37\x5"+
		"\x37\x4F5\n\x37\x3\x37\x3\x37\x3\x37\x5\x37\x4FA\n\x37\x3\x37\x5\x37\x4FD"+
		"\n\x37\x3\x38\x6\x38\x500\n\x38\r\x38\xE\x38\x501\x3\x39\x3\x39\x3\x39"+
		"\a\x39\x507\n\x39\f\x39\xE\x39\x50A\v\x39\x3:\x5:\x50D\n:\x3:\x5:\x510"+
		"\n:\x3:\x3:\x3:\x3:\x3:\x5:\x517\n:\x3:\x3:\x3:\x3:\x3:\x5:\x51E\n:\x5"+
		":\x520\n:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;"+
		"\x3;\x3;\x3;\x3;\x5;\x535\n;\x3<\x5<\x538\n<\x3<\x5<\x53B\n<\x3<\x3<\x5"+
		"<\x53F\n<\x3<\x3<\x5<\x543\n<\x3<\x5<\x546\n<\x3<\x3<\x5<\x54A\n<\x3<"+
		"\x5<\x54D\n<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x557\n<\x3<\x5<\x55A"+
		"\n<\x3<\x3<\x3=\x6=\x55F\n=\r=\xE=\x560\x3>\x3>\x3>\x3>\x3>\a>\x568\n"+
		">\f>\xE>\x56B\v>\x3>\x3>\x3?\x5?\x570\n?\x3?\x5?\x573\n?\x3?\x3?\x3?\x5"+
		"?\x578\n?\x3?\x3?\x5?\x57C\n?\x3?\x5?\x57F\n?\x3?\x3?\x3?\x3@\x6@\x585"+
		"\n@\r@\xE@\x586\x3\x41\x3\x41\x3\x42\x3\x42\x3\x43\x5\x43\x58E\n\x43\x3"+
		"\x43\x5\x43\x591\n\x43\x3\x43\x3\x43\x3\x43\x5\x43\x596\n\x43\x3\x43\x5"+
		"\x43\x599\n\x43\x3\x43\x3\x43\x3\x43\x5\x43\x59E\n\x43\x3\x43\x3\x43\x3"+
		"\x43\x3\x44\x6\x44\x5A4\n\x44\r\x44\xE\x44\x5A5\x3\x45\x6\x45\x5A9\n\x45"+
		"\r\x45\xE\x45\x5AA\x3\x46\x6\x46\x5AE\n\x46\r\x46\xE\x46\x5AF\x3G\x3G"+
		"\x5G\x5B4\nG\x3G\x3G\x3G\aG\x5B9\nG\fG\xEG\x5BC\vG\x3G\x3G\x3H\x3H\x3"+
		"H\x3H\x3H\x3H\x5H\x5C6\nH\x3I\x3I\x3I\x3I\x3I\aI\x5CD\nI\fI\xEI\x5D0\v"+
		"I\x5I\x5D2\nI\x3I\x5I\x5D5\nI\x3J\x3J\x3J\x3J\x3J\x5J\x5DC\nJ\x3K\x3K"+
		"\x3K\x3K\x3K\aK\x5E3\nK\fK\xEK\x5E6\vK\x3K\x3K\x3K\x3L\x3L\x3L\x3M\x3"+
		"M\x3M\x3M\x3M\x5M\x5F3\nM\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x5FB\nM\x3M\x5M"+
		"\x5FE\nM\x3M\x5M\x601\nM\x3M\x5M\x604\nM\x3M\x3M\x3M\x5M\x609\nM\x3M\x3"+
		"M\x3M\x3M\x5M\x60F\nM\x3M\x3M\x5M\x613\nM\x3M\x3M\x3M\x3M\x3M\x3M\x3M"+
		"\x3M\x3M\x3M\x5M\x61F\nM\x5M\x621\nM\x3M\x3M\x3M\x3M\x5M\x627\nM\x3M\x3"+
		"M\x3M\x3M\x5M\x62D\nM\x3M\x5M\x630\nM\x3M\x3M\x3M\x3M\x5M\x636\nM\x3M"+
		"\x5M\x639\nM\x3M\x5M\x63C\nM\x3M\x5M\x63F\nM\x3M\x3M\x3M\x3M\x5M\x645"+
		"\nM\x3M\x3M\x5M\x649\nM\x3M\x5M\x64C\nM\x3M\x5M\x64F\nM\x3M\x3M\x3M\x3"+
		"M\x3M\x3M\x5M\x657\nM\x3M\x3M\x3M\x3M\x5M\x65D\nM\x3M\x3M\x3M\x3M\x3M"+
		"\aM\x664\nM\fM\xEM\x667\vM\x5M\x669\nM\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x5"+
		"M\x672\nM\x3M\x3M\x3M\x3M\x5M\x678\nM\x3M\x3M\x5M\x67C\nM\x3M\x5M\x67F"+
		"\nM\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x5"+
		"M\x691\nM\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x699\nM\x3M\x5M\x69C\nM\x3M\x3M"+
		"\x5M\x6A0\nM\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x6A8\nM\aM\x6AA\nM\fM\xEM\x6AD"+
		"\vM\x3M\x3M\x3M\x3M\x5M\x6B3\nM\x3M\x3M\x5M\x6B7\nM\x3M\x5M\x6BA\nM\x3"+
		"M\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x6C3\nM\x3M\x5M\x6C6\nM\x3M\x3M\x3M\x3M"+
		"\x3M\x3M\x5M\x6CE\nM\x3M\x5M\x6D1\nM\x3M\x3M\x3M\x3M\x5M\x6D7\nM\x3M\x3"+
		"M\x3M\x3M\x3M\x5M\x6DE\nM\x3M\x3M\x3M\x3M\x6M\x6E4\nM\rM\xEM\x6E5\x3M"+
		"\x3M\x5M\x6EA\nM\x3M\x5M\x6ED\nM\x3M\x3M\x3M\x3M\x5M\x6F3\nM\x3M\x3M\x3"+
		"M\x3M\x5M\x6F9\nM\x3M\x5M\x6FC\nM\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x704\nM"+
		"\x3M\x5M\x707\nM\x3M\x3M\x3M\x3M\x3M\x3M\x5M\x70F\nM\x3M\x5M\x712\nM\x3"+
		"M\x3M\x3M\x3M\x3M\x3M\x5M\x71A\nM\x3M\x5M\x71D\nM\x3M\x3M\x3M\x3M\x3M"+
		"\x3M\x3M\x5M\x726\nM\x3M\x5M\x729\nM\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3M\x3"+
		"M\x3M\x3M\x3M\x3M\x3M\x6M\x739\nM\rM\xEM\x73A\x3M\x3M\x5M\x73F\nM\x3N"+
		"\x3N\x3N\x3N\x3N\x3N\x3N\x3N\x3N\x5N\x74A\nN\x3O\x3O\x3O\x3O\x3O\x5O\x751"+
		"\nO\x3O\x3O\x3O\x3O\x5O\x757\nO\x3P\x3P\x3P\x5P\x75C\nP\x3P\x3P\x3P\x3"+
		"Q\x5Q\x762\nQ\x3Q\x3Q\x5Q\x766\nQ\x3Q\x3Q\x3Q\x3R\x3R\x5R\x76D\nR\x3R"+
		"\x3R\x3R\x3S\x5S\x773\nS\x3S\x3S\x5S\x777\nS\x3S\x3S\x3S\aS\x77C\nS\f"+
		"S\xES\x77F\vS\x3S\x3S\x3S\x3S\aS\x785\nS\fS\xES\x788\vS\x3S\x3S\x5S\x78C"+
		"\nS\x5S\x78E\nS\x3T\x3T\x3T\x3T\x3U\x3U\x5U\x796\nU\x3U\x3U\x3U\aU\x79B"+
		"\nU\fU\xEU\x79E\vU\x3U\x3U\x3U\x3U\x3U\x3U\x3U\aU\x7A7\nU\fU\xEU\x7AA"+
		"\vU\x3U\x3U\x3U\x3U\x3U\x3U\x3U\aU\x7B3\nU\fU\xEU\x7B6\vU\x3U\x3U\x3U"+
		"\x5U\x7BB\nU\x3U\x3U\x3U\x3U\aU\x7C1\nU\fU\xEU\x7C4\vU\x3U\x3U\x3U\x3"+
		"U\x5U\x7CA\nU\x3U\x3U\x3U\x3U\aU\x7D0\nU\fU\xEU\x7D3\vU\x3U\x3U\x3U\x3"+
		"U\x5U\x7D9\nU\x3U\x3U\x3U\x3U\aU\x7DF\nU\fU\xEU\x7E2\vU\x3U\x3U\x5U\x7E6"+
		"\nU\x3V\x5V\x7E9\nV\x3V\x5V\x7EC\nV\x3V\x3V\x3V\x3V\x3V\x5V\x7F3\nV\x3"+
		"V\x3V\x5V\x7F7\nV\x3V\x3V\x5V\x7FB\nV\x3W\x5W\x7FE\nW\x3W\x3W\x3W\x3W"+
		"\x3X\x3X\x3X\x3X\aX\x808\nX\fX\xEX\x80B\vX\x3X\x3X\x5X\x80F\nX\x3X\x3"+
		"X\x3Y\x3Y\x3Y\x3Y\aY\x817\nY\fY\xEY\x81A\vY\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x3"+
		"Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x5Z\x82D\nZ\x3Z\x3Z\x3Z\x3Z"+
		"\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3"+
		"Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z"+
		"\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3"+
		"Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z"+
		"\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\x3Z\aZ\x880\nZ\fZ\xEZ\x883\vZ\x3[\x3[\x3[\x3"+
		"[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3["+
		"\x3[\x5[\x89B\n[\x3[\x3[\x3[\x3[\x3[\x5[\x8A2\n[\x3[\x3[\x3[\x3[\x3[\x3"+
		"[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3["+
		"\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3"+
		"[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3["+
		"\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3"+
		"[\x3[\x3[\x3[\a[\x8F3\n[\f[\xE[\x8F6\v[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x5"+
		"[\x8FF\n[\x3[\x3[\x3[\x3[\x3[\x3[\x5[\x907\n[\x3[\x3[\x3[\x3[\x3[\x3["+
		"\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\x3"+
		"[\x3[\x3[\x3[\x3[\x3[\x3[\x3[\a[\x928\n[\f[\xE[\x92B\v[\x3[\x3[\x3[\x5"+
		"[\x930\n[\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x5\\\x939\n\\\x3\\\x3\\\x3"+
		"\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3\\\x3"+
		"\\\x3\\\x3\\\a\\\x94E\n\\\f\\\xE\\\x951\v\\\x3]\x3]\x5]\x955\n]\x3^\x3"+
		"^\x3^\x3^\a^\x95B\n^\f^\xE^\x95E\v^\x5^\x960\n^\x3^\x3^\x3_\x3_\x3_\x3"+
		"_\x3`\x3`\x5`\x96A\n`\x3\x61\x3\x61\x3\x61\x3\x61\a\x61\x970\n\x61\f\x61"+
		"\xE\x61\x973\v\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\a\x62\x97A\n\x62"+
		"\f\x62\xE\x62\x97D\v\x62\x3\x63\x5\x63\x980\n\x63\x3\x64\x3\x64\x3\x64"+
		"\a\x64\x985\n\x64\f\x64\xE\x64\x988\v\x64\x3\x65\x3\x65\x3\x65\x3\x65"+
		"\x5\x65\x98E\n\x65\x3\x65\x5\x65\x991\n\x65\x3\x65\x5\x65\x994\n\x65\x3"+
		"\x65\x5\x65\x997\n\x65\x5\x65\x999\n\x65\x3\x66\x3\x66\x3\x66\x3\x66\x3"+
		"\x66\x5\x66\x9A0\n\x66\x3\x66\x3\x66\x5\x66\x9A4\n\x66\x3\x66\x3\x66\x3"+
		"g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\ag\x9B0\ng\fg\xEg\x9B3\vg\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\ah\x9BB\nh\fh\xEh\x9BE\vh\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x5"+
		"i\x9C8\ni\x3j\x3j\x5j\x9CC\nj\x3k\x3k\x3k\x3k\ak\x9D2\nk\fk\xEk\x9D5\v"+
		"k\x3k\x3k\x3l\x3l\x3m\x3m\x3m\x3m\x3m\x3m\x3m\x3m\x6m\x9E3\nm\rm\xEm\x9E4"+
		"\x3m\x3m\x3m\x3m\x5m\x9EB\nm\x3n\x3n\an\x9EF\nn\fn\xEn\x9F2\vn\x3n\x3"+
		"n\x3o\x3o\x3o\x5o\x9F9\no\x3p\x3p\x5p\x9FD\np\x3q\x3q\x3q\x3q\x5q\xA03"+
		"\nq\x3q\x3q\x3q\x3q\x3q\x3q\x5q\xA0B\nq\x3q\x3q\x3q\x3q\aq\xA11\nq\fq"+
		"\xEq\xA14\vq\x3q\x3q\x5q\xA18\nq\x3r\x5r\xA1B\nr\x3s\x3s\x3s\x3s\x3s\a"+
		"s\xA22\ns\fs\xEs\xA25\vs\x5s\xA27\ns\x3s\x3s\x3t\x3t\x3t\x3t\x3t\x5t\xA30"+
		"\nt\x3u\x3u\x3u\x3u\x5u\xA36\nu\x3u\x5u\xA39\nu\x3u\x3u\x3u\x3u\x3u\x3"+
		"u\x5u\xA41\nu\x3u\x5u\xA44\nu\x3u\x5u\xA47\nu\x5u\xA49\nu\x3u\x3u\x3u"+
		"\x3u\x5u\xA4F\nu\x3v\x5v\xA52\nv\x3v\x3v\x3v\x3v\x5v\xA58\nv\x3w\x3w\x5"+
		"w\xA5C\nw\x3x\x3x\x3x\ax\xA61\nx\fx\xEx\xA64\vx\x3y\x5y\xA67\ny\x3y\x6"+
		"y\xA6A\ny\ry\xEy\xA6B\x3y\x3y\x3z\x5z\xA71\nz\x3z\x3z\x3z\x5z\xA76\nz"+
		"\x3z\x5z\xA79\nz\x3z\x3z\x3z\x3z\x3{\x3{\x3{\a{\xA82\n{\f{\xE{\xA85\v"+
		"{\x3|\x3|\x3|\x3|\x3}\x3}\x3~\x3~\x3~\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x5\x7F"+
		"\xA94\n\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x80\a\x80\xA9A\n\x80\f\x80\xE\x80"+
		"\xA9D\v\x80\x3\x80\x3\x80\x5\x80\xAA1\n\x80\x3\x81\x3\x81\x3\x81\x3\x81"+
		"\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x5\x81\xAAF\n"+
		"\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x3\x81\x5\x81\xAB8\n\x81"+
		"\x3\x81\x3\x81\x3\x81\x3\x81\a\x81\xABE\n\x81\f\x81\xE\x81\xAC1\v\x81"+
		"\x5\x81\xAC3\n\x81\x3\x82\x3\x82\x3\x82\x3\x83\x3\x83\x5\x83\xACA\n\x83"+
		"\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84\x5\x84\xAD3\n\x84\x3"+
		"\x85\x3\x85\x3\x85\x3\x85\x3\x86\x3\x86\x3\x86\x3\x86\x5\x86\xADD\n\x86"+
		"\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\xAE3\n\x87\x3\x88\x3\x88\x3\x89\x3"+
		"\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B\x5\x8B\xAEE\n\x8B\x3\x8C\x3\x8C"+
		"\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x90\x5\x90\xAF9\n\x90\x3"+
		"\x90\a\x90\xAFC\n\x90\f\x90\xE\x90\xAFF\v\x90\x3\x90\x3\x90\x3\x91\x3"+
		"\x91\x3\x91\x3\x91\x3\x91\a\x91\xB08\n\x91\f\x91\xE\x91\xB0B\v\x91\x3"+
		"\x91\x3\x91\x3\x91\x5\x91\xB10\n\x91\x3\x91\x3\x91\x3\x92\x3\x92\x3\x92"+
		"\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92"+
		"\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xB26\n\x92\x3\x93\x5\x93\xB29"+
		"\n\x93\x3\x93\x5\x93\xB2C\n\x93\x3\x93\x3\x93\x5\x93\xB30\n\x93\x3\x93"+
		"\x3\x93\x3\x93\x3\x93\x3\x93\a\x93\xB37\n\x93\f\x93\xE\x93\xB3A\v\x93"+
		"\x5\x93\xB3C\n\x93\x3\x93\x3\x93\x3\x93\x3\x93\a\x93\xB42\n\x93\f\x93"+
		"\xE\x93\xB45\v\x93\x5\x93\xB47\n\x93\x3\x93\x3\x93\a\x93\xB4B\n\x93\f"+
		"\x93\xE\x93\xB4E\v\x93\x3\x93\x3\x93\x5\x93\xB52\n\x93\x3\x93\x3\x93\x3"+
		"\x94\x6\x94\xB57\n\x94\r\x94\xE\x94\xB58\x3\x95\x3\x95\x3\x95\x3\x95\x3"+
		"\x95\x5\x95\xB60\n\x95\x3\x96\x3\x96\x3\x96\x3\x96\x3\x97\x3\x97\x3\x98"+
		"\x5\x98\xB69\n\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\a\x98\xB70\n\x98"+
		"\f\x98\xE\x98\xB73\v\x98\x5\x98\xB75\n\x98\x3\x98\x3\x98\x3\x99\x3\x99"+
		"\x3\x99\x3\x99\x5\x99\xB7D\n\x99\x3\x99\x3\x99\x5\x99\xB81\n\x99\x3\x9A"+
		"\x6\x9A\xB84\n\x9A\r\x9A\xE\x9A\xB85\x3\x9B\x5\x9B\xB89\n\x9B\x3\x9B\x3"+
		"\x9B\x3\x9B\x3\x9B\x3\x9B\a\x9B\xB90\n\x9B\f\x9B\xE\x9B\xB93\v\x9B\x3"+
		"\x9B\x3\x9B\x5\x9B\xB97\n\x9B\x5\x9B\xB99\n\x9B\x3\x9B\x5\x9B\xB9C\n\x9B"+
		"\x3\x9B\x5\x9B\xB9F\n\x9B\x3\x9B\x5\x9B\xBA2\n\x9B\x3\x9B\x5\x9B\xBA5"+
		"\n\x9B\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3\x9C\x3\x9D\x5\x9D\xBAD\n\x9D\x3"+
		"\x9D\x3\x9D\x5\x9D\xBB1\n\x9D\x3\x9D\x3\x9D\x5\x9D\xBB5\n\x9D\x5\x9D\xBB7"+
		"\n\x9D\x3\x9D\x5\x9D\xBBA\n\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xBC0"+
		"\n\x9D\x3\x9D\x3\x9D\x5\x9D\xBC4\n\x9D\x3\x9D\x3\x9D\x3\x9E\x5\x9E\xBC9"+
		"\n\x9E\x3\x9E\x5\x9E\xBCC\n\x9E\x3\x9E\x5\x9E\xBCF\n\x9E\x3\x9E\x3\x9E"+
		"\x3\x9E\x3\x9E\x5\x9E\xBD5\n\x9E\x3\x9E\x3\x9E\x5\x9E\xBD9\n\x9E\x3\x9E"+
		"\x3\x9E\x5\x9E\xBDD\n\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9F\x5\x9F\xBE3\n\x9F"+
		"\x3\x9F\x3\x9F\x5\x9F\xBE7\n\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xBEC\n\x9F"+
		"\x3\x9F\x3\x9F\x5\x9F\xBF0\n\x9F\x3\x9F\x3\x9F\x3\x9F\x3\xA0\x6\xA0\xBF6"+
		"\n\xA0\r\xA0\xE\xA0\xBF7\x3\xA1\x3\xA1\x3\xA1\x3\xA1\a\xA1\xBFE\n\xA1"+
		"\f\xA1\xE\xA1\xC01\v\xA1\x3\xA1\x3\xA1\x3\xA1\x2\x2\x6\xB2\xB6\xCC\xCE"+
		"\xA2\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32"+
		"\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2"+
		"L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2"+
		"j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86"+
		"\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A"+
		"\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE"+
		"\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2"+
		"\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6"+
		"\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA"+
		"\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE"+
		"\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110"+
		"\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122"+
		"\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134"+
		"\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x2\x45\x3\x2\"#\x3"+
		"\x2:;\x4\x2\x1D\x1D)+\n\x2\a\a\v\v\xF\xF\x1F\x1F\x38\x38\x45\x45GGNN\x4"+
		"\x2TUtt\a\x2\x6\x6--kk\x91\x91\xAB\xAB\a\x2\x1E\x1E==\x43\x43\x66\x66"+
		"\x96\x96\x5\x2\x4\x4\b\b\x33\x33\x4\x2\x6\x6--\x4\x2((\x10A\x10A\n\x2"+
		"\x1E\x1E%%\x39\x39<=\x66\x66iill\x96\x96\r\x2\x1E\x1E%%\x39\x39<=\x43"+
		"\x43SS\x66\x66iillpp\x96\x96\x4\x2..kk\x4\x2\xE\xErr\t\x2\x1E\x1E%%\x39"+
		"\x39<=\x66\x66ii\x96\x96\x4\x2\x6\x6((\b\x2\x1E\x1E%%\x39\x39<=\x66\x66"+
		"ii\r\x2\x1E\x1E%%\x39\x39<=\x43\x43SS\x66\x66iippww\x96\x96\x4\x2yy\x92"+
		"\x92\xE\x2\x1E\x1E%%,,\x39\x39<=\x43\x43XX\x64\x64\x66\x66\x85\x85\x96"+
		"\x96\x98\x98\x4\x2``qq\a\x2\x1E\x1E%%\x39\x39<=\x66\x66\x4\x2@@\x46\x46"+
		"\t\x2\x1E\x1E%%\x39\x39<=\x43\x43\x66\x66\x84\x84\t\x2\xD7\xDA\xDC\xDC"+
		"\xDE\xE5\xE7\xEA\xED\xEF\x10C\x10D\x116\x117\x4\x2^^\x62\x62\x5\x2==\x43"+
		"\x43\x84\x84\x10\x2\x1E\x1E%%\x39\x39<=\x43\x43SS\x66\x66iippww}}\x84"+
		"\x84\x90\x90\x96\x96\x4\x2||\x8C\x8C\x4\x2\x15\x15MM\x4\x2\xDB\xDB\xF4"+
		"\xF4\x5\x2\x16\x16HHKK\x3\x2\xEB\xEC\x4\x2\n\n\x1D\x1D\x4\x2\t\t\x15\x15"+
		"\x5\x2\x105\x105\x107\x107\x109\x109\x6\x2\x32\x32\x37\x37\x39\x39==\x5"+
		"\x2\xE0\xE3\xE9\xE9\x10E\x10E\x4\x2\xEF\xEF\x102\x102\x4\x2\xE4\xE5\xEA"+
		"\xEA\x3\x2\xE2\xE3\x3\x2\xD7\xDF\x4\x2\xED\xED\x100\x100\x4\x2\xEE\xEE"+
		"\x101\x101\x3\x2\xF4\xFF\x4\x2\x10A\x10A\x110\x110\x3\x2\xE0\xE1\x3\x2"+
		"\xF0\xF3\x4\x2kk\xAB\xAB\x3\x2&\'\x5\x2\x6\x6kk\xAB\xAB\x4\x2{{\x82\x82"+
		"\x3\x2\x136\x137\x4\x2\x11F\x11F\x136\x137\a\x2\x9D\x9D\x9F\xA0\xA2\xA2"+
		"\xA7\xA7\xAE\xAF\b\x2\x9E\x9E\xA1\xA1\xA3\xA6\xA8\xAA\xAC\xAD\xB0\xB7"+
		"\x4\x2\xCB\xD4\x116\x122\x1D\x2\x4\x4\x6\x6\b\n\f\xE\x13\x13\x15\x15\x17"+
		"\x1E!!##%\'--/\x31\x33\x33\x35\x36\x39\x39;@\x42\x42\x46\x46IIMMOPWW["+
		"[nnss\xA8\xA8\xF0\xF3\v\x2SUXY^\x64\x66ikloqstvw\xB2\xB2 \x2\x5\x5\v\v"+
		"\xF\x12\x14\x14\x16\x16\x1F\x1F\"\"$$((,,..\x32\x32\x34\x34\x37\x38::"+
		"\x41\x41\x44\x45GHJLNNZZ\\]\x65\x65jjmmrruux\x9A\xB2\xB2\xB5\xB7\x4\x2"+
		"\xBC\xBC\xBE\xC8\x4\x2\x86\x86\xC6\xC6\x4\x2\x43\x43\xC0\xC1\x5\x2%%<"+
		"<\xBF\xBF\b\x2\xE\xE\x90\x90\xBD\xBD\xC1\xC1\xC3\xC3\xC8\xC8\x4\x2\x4"+
		"\x4\b\b\x4\x2\xE\xE\x43\x43\xDD7\x2\x14A\x3\x2\x2\x2\x4\x158\x3\x2\x2"+
		"\x2\x6\x15C\x3\x2\x2\x2\b\x162\x3\x2\x2\x2\n\x17F\x3\x2\x2\x2\f\x182\x3"+
		"\x2\x2\x2\xE\x187\x3\x2\x2\x2\x10\x1AD\x3\x2\x2\x2\x12\x1D5\x3\x2\x2\x2"+
		"\x14\x1D8\x3\x2\x2\x2\x16\x208\x3\x2\x2\x2\x18\x20A\x3\x2\x2\x2\x1A\x228"+
		"\x3\x2\x2\x2\x1C\x22A\x3\x2\x2\x2\x1E\x231\x3\x2\x2\x2 \x235\x3\x2\x2"+
		"\x2\"\x239\x3\x2\x2\x2$\x25C\x3\x2\x2\x2&\x25F\x3\x2\x2\x2(\x28E\x3\x2"+
		"\x2\x2*\x291\x3\x2\x2\x2,\x29E\x3\x2\x2\x2.\x2C3\x3\x2\x2\x2\x30\x2C6"+
		"\x3\x2\x2\x2\x32\x2D4\x3\x2\x2\x2\x34\x2D8\x3\x2\x2\x2\x36\x2EA\x3\x2"+
		"\x2\x2\x38\x317\x3\x2\x2\x2:\x31C\x3\x2\x2\x2<\x34D\x3\x2\x2\x2>\x351"+
		"\x3\x2\x2\x2@\x360\x3\x2\x2\x2\x42\x367\x3\x2\x2\x2\x44\x377\x3\x2\x2"+
		"\x2\x46\x37A\x3\x2\x2\x2H\x3A7\x3\x2\x2\x2J\x3AC\x3\x2\x2\x2L\x3C9\x3"+
		"\x2\x2\x2N\x3CE\x3\x2\x2\x2P\x3EC\x3\x2\x2\x2R\x3F1\x3\x2\x2\x2T\x3FE"+
		"\x3\x2\x2\x2V\x426\x3\x2\x2\x2X\x42B\x3\x2\x2\x2Z\x43E\x3\x2\x2\x2\\\x456"+
		"\x3\x2\x2\x2^\x45F\x3\x2\x2\x2`\x463\x3\x2\x2\x2\x62\x470\x3\x2\x2\x2"+
		"\x64\x48D\x3\x2\x2\x2\x66\x490\x3\x2\x2\x2h\x4E1\x3\x2\x2\x2j\x4E4\x3"+
		"\x2\x2\x2l\x4EC\x3\x2\x2\x2n\x4FF\x3\x2\x2\x2p\x503\x3\x2\x2\x2r\x50C"+
		"\x3\x2\x2\x2t\x534\x3\x2\x2\x2v\x537\x3\x2\x2\x2x\x55E\x3\x2\x2\x2z\x562"+
		"\x3\x2\x2\x2|\x56F\x3\x2\x2\x2~\x584\x3\x2\x2\x2\x80\x588\x3\x2\x2\x2"+
		"\x82\x58A\x3\x2\x2\x2\x84\x58D\x3\x2\x2\x2\x86\x5A3\x3\x2\x2\x2\x88\x5A8"+
		"\x3\x2\x2\x2\x8A\x5AD\x3\x2\x2\x2\x8C\x5B1\x3\x2\x2\x2\x8E\x5C5\x3\x2"+
		"\x2\x2\x90\x5C7\x3\x2\x2\x2\x92\x5DB\x3\x2\x2\x2\x94\x5DD\x3\x2\x2\x2"+
		"\x96\x5EA\x3\x2\x2\x2\x98\x73E\x3\x2\x2\x2\x9A\x740\x3\x2\x2\x2\x9C\x756"+
		"\x3\x2\x2\x2\x9E\x75B\x3\x2\x2\x2\xA0\x761\x3\x2\x2\x2\xA2\x76C\x3\x2"+
		"\x2\x2\xA4\x78D\x3\x2\x2\x2\xA6\x78F\x3\x2\x2\x2\xA8\x7E5\x3\x2\x2\x2"+
		"\xAA\x7E8\x3\x2\x2\x2\xAC\x7FD\x3\x2\x2\x2\xAE\x803\x3\x2\x2\x2\xB0\x812"+
		"\x3\x2\x2\x2\xB2\x82C\x3\x2\x2\x2\xB4\x92F\x3\x2\x2\x2\xB6\x938\x3\x2"+
		"\x2\x2\xB8\x954\x3\x2\x2\x2\xBA\x956\x3\x2\x2\x2\xBC\x963\x3\x2\x2\x2"+
		"\xBE\x969\x3\x2\x2\x2\xC0\x96B\x3\x2\x2\x2\xC2\x976\x3\x2\x2\x2\xC4\x97F"+
		"\x3\x2\x2\x2\xC6\x981\x3\x2\x2\x2\xC8\x998\x3\x2\x2\x2\xCA\x99A\x3\x2"+
		"\x2\x2\xCC\x9A7\x3\x2\x2\x2\xCE\x9B4\x3\x2\x2\x2\xD0\x9C7\x3\x2\x2\x2"+
		"\xD2\x9C9\x3\x2\x2\x2\xD4\x9CD\x3\x2\x2\x2\xD6\x9D8\x3\x2\x2\x2\xD8\x9EA"+
		"\x3\x2\x2\x2\xDA\x9EC\x3\x2\x2\x2\xDC\x9F8\x3\x2\x2\x2\xDE\x9FC\x3\x2"+
		"\x2\x2\xE0\xA17\x3\x2\x2\x2\xE2\xA1A\x3\x2\x2\x2\xE4\xA1C\x3\x2\x2\x2"+
		"\xE6\xA2F\x3\x2\x2\x2\xE8\xA4E\x3\x2\x2\x2\xEA\xA57\x3\x2\x2\x2\xEC\xA5B"+
		"\x3\x2\x2\x2\xEE\xA5D\x3\x2\x2\x2\xF0\xA69\x3\x2\x2\x2\xF2\xA70\x3\x2"+
		"\x2\x2\xF4\xA7E\x3\x2\x2\x2\xF6\xA86\x3\x2\x2\x2\xF8\xA8A\x3\x2\x2\x2"+
		"\xFA\xA8C\x3\x2\x2\x2\xFC\xA8F\x3\x2\x2\x2\xFE\xA9B\x3\x2\x2\x2\x100\xAC2"+
		"\x3\x2\x2\x2\x102\xAC4\x3\x2\x2\x2\x104\xAC7\x3\x2\x2\x2\x106\xAD2\x3"+
		"\x2\x2\x2\x108\xAD4\x3\x2\x2\x2\x10A\xADC\x3\x2\x2\x2\x10C\xAE2\x3\x2"+
		"\x2\x2\x10E\xAE4\x3\x2\x2\x2\x110\xAE6\x3\x2\x2\x2\x112\xAE8\x3\x2\x2"+
		"\x2\x114\xAED\x3\x2\x2\x2\x116\xAEF\x3\x2\x2\x2\x118\xAF1\x3\x2\x2\x2"+
		"\x11A\xAF3\x3\x2\x2\x2\x11C\xAF5\x3\x2\x2\x2\x11E\xAF8\x3\x2\x2\x2\x120"+
		"\xB02\x3\x2\x2\x2\x122\xB25\x3\x2\x2\x2\x124\xB28\x3\x2\x2\x2\x126\xB56"+
		"\x3\x2\x2\x2\x128\xB5F\x3\x2\x2\x2\x12A\xB61\x3\x2\x2\x2\x12C\xB65\x3"+
		"\x2\x2\x2\x12E\xB68\x3\x2\x2\x2\x130\xB80\x3\x2\x2\x2\x132\xB83\x3\x2"+
		"\x2\x2\x134\xB88\x3\x2\x2\x2\x136\xBA8\x3\x2\x2\x2\x138\xBAC\x3\x2\x2"+
		"\x2\x13A\xBC8\x3\x2\x2\x2\x13C\xBE2\x3\x2\x2\x2\x13E\xBF5\x3\x2\x2\x2"+
		"\x140\xBF9\x3\x2\x2\x2\x142\x143\a\xBB\x2\x2\x143\x144\a\x11F\x2\x2\x144"+
		"\x149\a\x141\x2\x2\x145\x146\a\xBA\x2\x2\x146\x147\a\x11F\x2\x2\x147\x149"+
		"\a\x141\x2\x2\x148\x142\x3\x2\x2\x2\x148\x145\x3\x2\x2\x2\x149\x14C\x3"+
		"\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x150\x3\x2"+
		"\x2\x2\x14C\x14A\x3\x2\x2\x2\x14D\x14F\x5\x4\x3\x2\x14E\x14D\x3\x2\x2"+
		"\x2\x14F\x152\x3\x2\x2\x2\x150\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2"+
		"\x151\x153\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x153\x154\a\x2\x2\x3\x154"+
		"\x3\x3\x2\x2\x2\x155\x159\x5\x98M\x2\x156\x159\x5\n\x6\x2\x157\x159\x5"+
		"\xB2Z\x2\x158\x155\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2\x158\x157\x3\x2\x2"+
		"\x2\x159\x5\x3\x2\x2\x2\x15A\x15D\x5\xE8u\x2\x15B\x15D\x5\xEAv\x2\x15C"+
		"\x15A\x3\x2\x2\x2\x15C\x15B\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x15F"+
		"\a\x141\x2\x2\x15F\x160\a\x2\x2\x3\x160\a\x3\x2\x2\x2\x161\x163\x5\f\a"+
		"\x2\x162\x161\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163\x167\x3\x2\x2\x2"+
		"\x164\x166\x5\n\x6\x2\x165\x164\x3\x2\x2\x2\x166\x169\x3\x2\x2\x2\x167"+
		"\x165\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168\x16A\x3\x2\x2\x2\x169\x167"+
		"\x3\x2\x2\x2\x16A\x16B\a\x2\x2\x3\x16B\t\x3\x2\x2\x2\x16C\x180\x5\x34"+
		"\x1B\x2\x16D\x180\x5:\x1E\x2\x16E\x180\x5\x46$\x2\x16F\x180\x5\x36\x1C"+
		"\x2\x170\x180\x5J&\x2\x171\x180\x5T+\x2\x172\x180\x5N(\x2\x173\x180\x5"+
		"\xE\b\x2\x174\x180\x5\x10\t\x2\x175\x180\x5&\x14\x2\x176\x180\x5v<\x2"+
		"\x177\x180\x5|?\x2\x178\x180\x5\x94K\x2\x179\x180\x5\"\x12\x2\x17A\x180"+
		"\x5*\x16\x2\x17B\x180\x5$\x13\x2\x17C\x180\x5\x14\v\x2\x17D\x180\x5,\x17"+
		"\x2\x17E\x180\x5\x30\x19\x2\x17F\x16C\x3\x2\x2\x2\x17F\x16D\x3\x2\x2\x2"+
		"\x17F\x16E\x3\x2\x2\x2\x17F\x16F\x3\x2\x2\x2\x17F\x170\x3\x2\x2\x2\x17F"+
		"\x171\x3\x2\x2\x2\x17F\x172\x3\x2\x2\x2\x17F\x173\x3\x2\x2\x2\x17F\x174"+
		"\x3\x2\x2\x2\x17F\x175\x3\x2\x2\x2\x17F\x176\x3\x2\x2\x2\x17F\x177\x3"+
		"\x2\x2\x2\x17F\x178\x3\x2\x2\x2\x17F\x179\x3\x2\x2\x2\x17F\x17A\x3\x2"+
		"\x2\x2\x17F\x17B\x3\x2\x2\x2\x17F\x17C\x3\x2\x2\x2\x17F\x17D\x3\x2\x2"+
		"\x2\x17F\x17E\x3\x2\x2\x2\x180\v\x3\x2\x2\x2\x181\x183\a\x141\x2\x2\x182"+
		"\x181\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2\x184\x185"+
		"\x3\x2\x2\x2\x185\r\x3\x2\x2\x2\x186\x188\x5\x8A\x46\x2\x187\x186\x3\x2"+
		"\x2\x2\x187\x188\x3\x2\x2\x2\x188\x18A\x3\x2\x2\x2\x189\x18B\x5 \x11\x2"+
		"\x18A\x189\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18C"+
		"\x18D\t\x2\x2\x2\x18D\x18F\x5\x10A\x86\x2\x18E\x190\x5> \x2\x18F\x18E"+
		"\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2\x190\x192\x3\x2\x2\x2\x191\x193\x5"+
		"\x18\r\x2\x192\x191\x3\x2\x2\x2\x192\x193\x3\x2\x2\x2\x193\x196\x3\x2"+
		"\x2\x2\x194\x195\a\x6\x2\x2\x195\x197\x5\xD8m\x2\x196\x194\x3\x2\x2\x2"+
		"\x196\x197\x3\x2\x2\x2\x197\x19B\x3\x2\x2\x2\x198\x19A\x5\x42\"\x2\x199"+
		"\x198\x3\x2\x2\x2\x19A\x19D\x3\x2\x2\x2\x19B\x199\x3\x2\x2\x2\x19B\x19C"+
		"\x3\x2\x2\x2\x19C\x19F\x3\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19E\x1A0\x5"+
		"\x12\n\x2\x19F\x19E\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x1A3\x3\x2"+
		"\x2\x2\x1A1\x1A2\a\x1E\x2\x2\x1A2\x1A4\a/\x2\x2\x1A3\x1A1\x3\x2\x2\x2"+
		"\x1A3\x1A4\x3\x2\x2\x2\x1A4\x1A7\x3\x2\x2\x2\x1A5\x1A6\a\x14\x2\x2\x1A6"+
		"\x1A8\a\x11F\x2\x2\x1A7\x1A5\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1A9"+
		"\x3\x2\x2\x2\x1A9\x1AA\x5\f\a\x2\x1AA\x1AB\x5\x1E\x10\x2\x1AB\xF\x3\x2"+
		"\x2\x2\x1AC\x1AE\x5\x8A\x46\x2\x1AD\x1AC\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2"+
		"\x2\x1AE\x1B0\x3\x2\x2\x2\x1AF\x1B1\x5 \x11\x2\x1B0\x1AF\x3\x2\x2\x2\x1B0"+
		"\x1B1\x3\x2\x2\x2\x1B1\x1B2\x3\x2\x2\x2\x1B2\x1B3\t\x3\x2\x2\x1B3\x1B5"+
		"\x5\x10A\x86\x2\x1B4\x1B6\x5> \x2\x1B5\x1B4\x3\x2\x2\x2\x1B5\x1B6\x3\x2"+
		"\x2\x2\x1B6\x1B8\x3\x2\x2\x2\x1B7\x1B9\x5\x18\r\x2\x1B8\x1B7\x3\x2\x2"+
		"\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x1BC\x3\x2\x2\x2\x1BA\x1BB\a\x6\x2\x2\x1BB"+
		"\x1BD\a\xB0\x2\x2\x1BC\x1BA\x3\x2\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BD\x1C1"+
		"\x3\x2\x2\x2\x1BE\x1C0\x5\x42\"\x2\x1BF\x1BE\x3\x2\x2\x2\x1C0\x1C3\x3"+
		"\x2\x2\x2\x1C1\x1BF\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C5\x3\x2"+
		"\x2\x2\x1C3\x1C1\x3\x2\x2\x2\x1C4\x1C6\x5\x12\n\x2\x1C5\x1C4\x3\x2\x2"+
		"\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C8\x3\x2\x2\x2\x1C7\x1C9\t\x4\x2\x2\x1C8"+
		"\x1C7\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CC\x3\x2\x2\x2\x1CA\x1CB"+
		"\a\x1E\x2\x2\x1CB\x1CD\a/\x2\x2\x1CC\x1CA\x3\x2\x2\x2\x1CC\x1CD\x3\x2"+
		"\x2\x2\x1CD\x1D0\x3\x2\x2\x2\x1CE\x1CF\a\x14\x2\x2\x1CF\x1D1\a\x11F\x2"+
		"\x2\x1D0\x1CE\x3\x2\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2"+
		"\x1D2\x1D3\x5\f\a\x2\x1D3\x1D4\x5\x1E\x10\x2\x1D4\x11\x3\x2\x2\x2\x1D5"+
		"\x1D6\t\x5\x2\x2\x1D6\x13\x3\x2\x2\x2\x1D7\x1D9\x5\x8A\x46\x2\x1D8\x1D7"+
		"\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x1DB\x3\x2\x2\x2\x1DA\x1DC\x5"+
		" \x11\x2\x1DB\x1DA\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2"+
		"\x2\x1DD\x1E9\a\x13\x2\x2\x1DE\x1DF\t\x2\x2\x2\x1DF\x1E0\x5\x10A\x86\x2"+
		"\x1E0\x1E3\x5\x18\r\x2\x1E1\x1E2\a\x6\x2\x2\x1E2\x1E4\x5\xD8m\x2\x1E3"+
		"\x1E1\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1EA\x3\x2\x2\x2\x1E5\x1E6"+
		"\t\x3\x2\x2\x1E6\x1E7\x5\x10A\x86\x2\x1E7\x1E8\x5\x18\r\x2\x1E8\x1EA\x3"+
		"\x2\x2\x2\x1E9\x1DE\x3\x2\x2\x2\x1E9\x1E5\x3\x2\x2\x2\x1EA\x1EC\x3\x2"+
		"\x2\x2\x1EB\x1ED\x5\x16\f\x2\x1EC\x1EB\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2"+
		"\x2\x1ED\x1EE\x3\x2\x2\x2\x1EE\x1EF\a\x10A\x2\x2\x1EF\x1F2\x5\x10C\x87"+
		"\x2\x1F0\x1F1\a\x110\x2\x2\x1F1\x1F3\x5\x10C\x87\x2\x1F2\x1F0\x3\x2\x2"+
		"\x2\x1F2\x1F3\x3\x2\x2\x2\x1F3\x201\x3\x2\x2\x2\x1F4\x202\a\x11C\x2\x2"+
		"\x1F5\x1F6\a\x110\x2\x2\x1F6\x1F8\x5\x10C\x87\x2\x1F7\x1F9\a\x10E\x2\x2"+
		"\x1F8\x1F7\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1FB\x3\x2\x2\x2\x1FA"+
		"\x1FC\a\x11A\x2\x2\x1FB\x1FA\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FF"+
		"\x3\x2\x2\x2\x1FD\x1FE\a\xDF\x2\x2\x1FE\x200\a\x11A\x2\x2\x1FF\x1FD\x3"+
		"\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200\x202\x3\x2\x2\x2\x201\x1F4\x3\x2"+
		"\x2\x2\x201\x1F5\x3\x2\x2\x2\x202\x204\x3\x2\x2\x2\x203\x205\t\x6\x2\x2"+
		"\x204\x203\x3\x2\x2\x2\x204\x205\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2\x206"+
		"\x207\x5\f\a\x2\x207\x15\x3\x2\x2\x2\x208\x209\t\x5\x2\x2\x209\x17\x3"+
		"\x2\x2\x2\x20A\x213\a\x104\x2\x2\x20B\x210\x5\x1A\xE\x2\x20C\x20D\a\x10B"+
		"\x2\x2\x20D\x20F\x5\x1A\xE\x2\x20E\x20C\x3\x2\x2\x2\x20F\x212\x3\x2\x2"+
		"\x2\x210\x20E\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x214\x3\x2\x2\x2"+
		"\x212\x210\x3\x2\x2\x2\x213\x20B\x3\x2\x2\x2\x213\x214\x3\x2\x2\x2\x214"+
		"\x215\x3\x2\x2\x2\x215\x216\a\x105\x2\x2\x216\x19\x3\x2\x2\x2\x217\x219"+
		"\x5\x8A\x46\x2\x218\x217\x3\x2\x2\x2\x218\x219\x3\x2\x2\x2\x219\x21B\x3"+
		"\x2\x2\x2\x21A\x21C\a@\x2\x2\x21B\x21A\x3\x2\x2\x2\x21B\x21C\x3\x2\x2"+
		"\x2\x21C\x21D\x3\x2\x2\x2\x21D\x220\x5\x10A\x86\x2\x21E\x21F\a\xF4\x2"+
		"\x2\x21F\x221\x5\xB2Z\x2\x220\x21E\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2\x221"+
		"\x225\x3\x2\x2\x2\x222\x223\x5\x1C\xF\x2\x223\x224\x5\xD8m\x2\x224\x226"+
		"\x3\x2\x2\x2\x225\x222\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x229\x3"+
		"\x2\x2\x2\x227\x229\a\x113\x2\x2\x228\x218\x3\x2\x2\x2\x228\x227\x3\x2"+
		"\x2\x2\x229\x1B\x3\x2\x2\x2\x22A\x22C\t\a\x2\x2\x22B\x22D\aX\x2\x2\x22C"+
		"\x22B\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2\x22D\x1D\x3\x2\x2\x2\x22E\x230"+
		"\x5\x98M\x2\x22F\x22E\x3\x2\x2\x2\x230\x233\x3\x2\x2\x2\x231\x22F\x3\x2"+
		"\x2\x2\x231\x232\x3\x2\x2\x2\x232\x1F\x3\x2\x2\x2\x233\x231\x3\x2\x2\x2"+
		"\x234\x236\t\b\x2\x2\x235\x234\x3\x2\x2\x2\x236\x237\x3\x2\x2\x2\x237"+
		"\x235\x3\x2\x2\x2\x237\x238\x3\x2\x2\x2\x238!\x3\x2\x2\x2\x239\x23B\a"+
		"L\x2\x2\x23A\x23C\a\x43\x2\x2\x23B\x23A\x3\x2\x2\x2\x23B\x23C\x3\x2\x2"+
		"\x2\x23C\x240\x3\x2\x2\x2\x23D\x23E\x5\xD6l\x2\x23E\x23F\a\xF4\x2\x2\x23F"+
		"\x241\x3\x2\x2\x2\x240\x23D\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241\x242"+
		"\x3\x2\x2\x2\x242\x243\x5\xCEh\x2\x243\x244\x5\f\a\x2\x244#\x3\x2\x2\x2"+
		"\x245\x247\x5\x8A\x46\x2\x246\x245\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247"+
		"\x249\x3\x2\x2\x2\x248\x24A\x5 \x11\x2\x249\x248\x3\x2\x2\x2\x249\x24A"+
		"\x3\x2\x2\x2\x24A\x24B\x3\x2\x2\x2\x24B\x24D\a$\x2\x2\x24C\x24E\aX\x2"+
		"\x2\x24D\x24C\x3\x2\x2\x2\x24D\x24E\x3\x2\x2\x2\x24E\x24F\x3\x2\x2\x2"+
		"\x24F\x250\x5`\x31\x2\x250\x251\x5\f\a\x2\x251\x25D\x3\x2\x2\x2\x252\x254"+
		"\x5\x8A\x46\x2\x253\x252\x3\x2\x2\x2\x253\x254\x3\x2\x2\x2\x254\x255\x3"+
		"\x2\x2\x2\x255\x257\a\x43\x2\x2\x256\x258\aX\x2\x2\x257\x256\x3\x2\x2"+
		"\x2\x257\x258\x3\x2\x2\x2\x258\x259\x3\x2\x2\x2\x259\x25A\x5`\x31\x2\x25A"+
		"\x25B\x5\f\a\x2\x25B\x25D\x3\x2\x2\x2\x25C\x246\x3\x2\x2\x2\x25C\x253"+
		"\x3\x2\x2\x2\x25D%\x3\x2\x2\x2\x25E\x260\x5\x8A\x46\x2\x25F\x25E\x3\x2"+
		"\x2\x2\x25F\x260\x3\x2\x2\x2\x260\x262\x3\x2\x2\x2\x261\x263\x5\x88\x45"+
		"\x2\x262\x261\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2"+
		"\x264\x266\x5(\x15\x2\x265\x267\x5\xCCg\x2\x266\x265\x3\x2\x2\x2\x266"+
		"\x267\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2\x268\x26A\x5\x10A\x86\x2\x269"+
		"\x26B\x5> \x2\x26A\x269\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26D\x3"+
		"\x2\x2\x2\x26C\x26E\x5\x18\r\x2\x26D\x26C\x3\x2\x2\x2\x26D\x26E\x3\x2"+
		"\x2\x2\x26E\x271\x3\x2\x2\x2\x26F\x270\a\x6\x2\x2\x270\x272\x5\xD8m\x2"+
		"\x271\x26F\x3\x2\x2\x2\x271\x272\x3\x2\x2\x2\x272\x276\x3\x2\x2\x2\x273"+
		"\x275\x5\x42\"\x2\x274\x273\x3\x2\x2\x2\x275\x278\x3\x2\x2\x2\x276\x274"+
		"\x3\x2\x2\x2\x276\x277\x3\x2\x2\x2\x277\x27A\x3\x2\x2\x2\x278\x276\x3"+
		"\x2\x2\x2\x279\x27B\x5\x12\n\x2\x27A\x279\x3\x2\x2\x2\x27A\x27B\x3\x2"+
		"\x2\x2\x27B\x281\x3\x2\x2\x2\x27C\x27E\a\xE\x2\x2\x27D\x27F\x5\xCCg\x2"+
		"\x27E\x27D\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280"+
		"\x282\x5\x10A\x86\x2\x281\x27C\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2\x282"+
		"\x285\x3\x2\x2\x2\x283\x284\a\x1E\x2\x2\x284\x286\a/\x2\x2\x285\x283\x3"+
		"\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286\x289\x3\x2\x2\x2\x287\x288\a\x14"+
		"\x2\x2\x288\x28A\a\x11F\x2\x2\x289\x287\x3\x2\x2\x2\x289\x28A\x3\x2\x2"+
		"\x2\x28A\x28B\x3\x2\x2\x2\x28B\x28C\x5\f\a\x2\x28C\x28D\x5\x1E\x10\x2"+
		"\x28D\'\x3\x2\x2\x2\x28E\x28F\t\t\x2\x2\x28F)\x3\x2\x2\x2\x290\x292\x5"+
		" \x11\x2\x291\x290\x3\x2\x2\x2\x291\x292\x3\x2\x2\x2\x292\x293\x3\x2\x2"+
		"\x2\x293\x294\a\x11\x2\x2\x294\x295\x5\x10A\x86\x2\x295\x296\a\xF4\x2"+
		"\x2\x296\x299\x5\xB2Z\x2\x297\x298\a\x6\x2\x2\x298\x29A\x5\xDCo\x2\x299"+
		"\x297\x3\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x29A\x29B\x3\x2\x2\x2\x29B\x29C"+
		"\x5\f\a\x2\x29C+\x3\x2\x2\x2\x29D\x29F\x5\x32\x1A\x2\x29E\x29D\x3\x2\x2"+
		"\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A0\x3\x2\x2\x2\x2A0\x2A2\ax\x2\x2\x2A1"+
		"\x2A3\x5\xCCg\x2\x2A2\x2A1\x3\x2\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A4"+
		"\x3\x2\x2\x2\x2A4\x2A7\x5\x10A\x86\x2\x2A5\x2A6\a\x5\x2\x2\x2A6\x2A8\a"+
		"\x11A\x2\x2\x2A7\x2A5\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8\x2A9\x3\x2"+
		"\x2\x2\x2A9\x2AB\x5\f\a\x2\x2AA\x2AC\x5.\x18\x2\x2AB\x2AA\x3\x2\x2\x2"+
		"\x2AC\x2AD\x3\x2\x2\x2\x2AD\x2AB\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE"+
		"-\x3\x2\x2\x2\x2AF\x2B0\a\x31\x2\x2\x2B0\x2B1\a\x12\x2\x2\x2B1\x2B2\x5"+
		"\x10A\x86\x2\x2B2\x2B3\a\x108\x2\x2\x2B3\x2B4\x5\x64\x33\x2\x2B4\x2B7"+
		"\a\x109\x2\x2\x2B5\x2B6\t\n\x2\x2\x2B6\x2B8\x5\xD8m\x2\x2B7\x2B5\x3\x2"+
		"\x2\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8\x2B9\x3\x2\x2\x2\x2B9\x2BA\x5\f\a\x2"+
		"\x2BA\x2C4\x3\x2\x2\x2\x2BB\x2BC\a\x31\x2\x2\x2BC\x2BF\x5\x10A\x86\x2"+
		"\x2BD\x2BE\t\n\x2\x2\x2BE\x2C0\x5\xD8m\x2\x2BF\x2BD\x3\x2\x2\x2\x2BF\x2C0"+
		"\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C2\x5\f\a\x2\x2C2\x2C4\x3\x2"+
		"\x2\x2\x2C3\x2AF\x3\x2\x2\x2\x2C3\x2BB\x3\x2\x2\x2\x2C4/\x3\x2\x2\x2\x2C5"+
		"\x2C7\x5\x32\x1A\x2\x2C6\x2C5\x3\x2\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2C8"+
		"\x3\x2\x2\x2\x2C8\x2CA\aJ\x2\x2\x2C9\x2CB\x5\xCCg\x2\x2CA\x2C9\x3\x2\x2"+
		"\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2CD\x5\x10A\x86"+
		"\x2\x2CD\x2CF\x5\f\a\x2\x2CE\x2D0\x5.\x18\x2\x2CF\x2CE\x3\x2\x2\x2\x2D0"+
		"\x2D1\x3\x2\x2\x2\x2D1\x2CF\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2\x31"+
		"\x3\x2\x2\x2\x2D3\x2D5\t\b\x2\x2\x2D4\x2D3\x3\x2\x2\x2\x2D5\x2D6\x3\x2"+
		"\x2\x2\x2D6\x2D4\x3\x2\x2\x2\x2D6\x2D7\x3\x2\x2\x2\x2D7\x33\x3\x2\x2\x2"+
		"\x2D8\x2D9\a\t\x2\x2\x2D9\x2DA\ah\x2\x2\x2DA\x2DB\x5\xCEh\x2\x2DB\x2DF"+
		"\x5\f\a\x2\x2DC\x2DE\x5\n\x6\x2\x2DD\x2DC\x3\x2\x2\x2\x2DE\x2E1\x3\x2"+
		"\x2\x2\x2DF\x2DD\x3\x2\x2\x2\x2DF\x2E0\x3\x2\x2\x2\x2E0\x2E2\x3\x2\x2"+
		"\x2\x2E1\x2DF\x3\x2\x2\x2\x2E2\x2E3\a\x19\x2\x2\x2E3\x2E5\ah\x2\x2\x2E4"+
		"\x2E6\x5\xCEh\x2\x2E5\x2E4\x3\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E7"+
		"\x3\x2\x2\x2\x2E7\x2E8\x5\f\a\x2\x2E8\x35\x3\x2\x2\x2\x2E9\x2EB\x5\x8A"+
		"\x46\x2\x2EA\x2E9\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2ED\x3\x2\x2"+
		"\x2\x2EC\x2EE\x5\x38\x1D\x2\x2ED\x2EC\x3\x2\x2\x2\x2ED\x2EE\x3\x2\x2\x2"+
		"\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2F1\a\x65\x2\x2\x2F0\x2F2\x5\xCCg\x2\x2F1"+
		"\x2F0\x3\x2\x2\x2\x2F1\x2F2\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x2F5"+
		"\x5\x10A\x86\x2\x2F4\x2F6\x5> \x2\x2F5\x2F4\x3\x2\x2\x2\x2F5\x2F6\x3\x2"+
		"\x2\x2\x2F6\x2F9\x3\x2\x2\x2\x2F7\x2F8\t\v\x2\x2\x2F8\x2FA\x5\xD8m\x2"+
		"\x2F9\x2F7\x3\x2\x2\x2\x2F9\x2FA\x3\x2\x2\x2\x2FA\x2FF\x3\x2\x2\x2\x2FB"+
		"\x2FC\a\x10B\x2\x2\x2FC\x2FE\x5\xD8m\x2\x2FD\x2FB\x3\x2\x2\x2\x2FE\x301"+
		"\x3\x2\x2\x2\x2FF\x2FD\x3\x2\x2\x2\x2FF\x300\x3\x2\x2\x2\x300\x305\x3"+
		"\x2\x2\x2\x301\x2FF\x3\x2\x2\x2\x302\x304\x5\x42\"\x2\x303\x302\x3\x2"+
		"\x2\x2\x304\x307\x3\x2\x2\x2\x305\x303\x3\x2\x2\x2\x305\x306\x3\x2\x2"+
		"\x2\x306\x308\x3\x2\x2\x2\x307\x305\x3\x2\x2\x2\x308\x30C\x5\f\a\x2\x309"+
		"\x30B\x5t;\x2\x30A\x309\x3\x2\x2\x2\x30B\x30E\x3\x2\x2\x2\x30C\x30A\x3"+
		"\x2\x2\x2\x30C\x30D\x3\x2\x2\x2\x30D\x30F\x3\x2\x2\x2\x30E\x30C\x3\x2"+
		"\x2\x2\x30F\x310\a\x19\x2\x2\x310\x312\a\x65\x2\x2\x311\x313\x5\x10A\x86"+
		"\x2\x312\x311\x3\x2\x2\x2\x312\x313\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2"+
		"\x314\x315\x5\f\a\x2\x315\x37\x3\x2\x2\x2\x316\x318\t\f\x2\x2\x317\x316"+
		"\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2\x319\x317\x3\x2\x2\x2\x319\x31A\x3"+
		"\x2\x2\x2\x31A\x39\x3\x2\x2\x2\x31B\x31D\x5\x8A\x46\x2\x31C\x31B\x3\x2"+
		"\x2\x2\x31C\x31D\x3\x2\x2\x2\x31D\x31F\x3\x2\x2\x2\x31E\x320\x5<\x1F\x2"+
		"\x31F\x31E\x3\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321"+
		"\x323\a\xE\x2\x2\x322\x324\x5\xCCg\x2\x323\x322\x3\x2\x2\x2\x323\x324"+
		"\x3\x2\x2\x2\x324\x325\x3\x2\x2\x2\x325\x327\x5\x10A\x86\x2\x326\x328"+
		"\x5> \x2\x327\x326\x3\x2\x2\x2\x327\x328\x3\x2\x2\x2\x328\x32B\x3\x2\x2"+
		"\x2\x329\x32A\a(\x2\x2\x32A\x32C\x5\xD8m\x2\x32B\x329\x3\x2\x2\x2\x32B"+
		"\x32C\x3\x2\x2\x2\x32C\x336\x3\x2\x2\x2\x32D\x32E\a\x61\x2\x2\x32E\x333"+
		"\x5\xD8m\x2\x32F\x330\a\x10B\x2\x2\x330\x332\x5\xD8m\x2\x331\x32F\x3\x2"+
		"\x2\x2\x332\x335\x3\x2\x2\x2\x333\x331\x3\x2\x2\x2\x333\x334\x3\x2\x2"+
		"\x2\x334\x337\x3\x2\x2\x2\x335\x333\x3\x2\x2\x2\x336\x32D\x3\x2\x2\x2"+
		"\x336\x337\x3\x2\x2\x2\x337\x33B\x3\x2\x2\x2\x338\x33A\x5\x42\"\x2\x339"+
		"\x338\x3\x2\x2\x2\x33A\x33D\x3\x2\x2\x2\x33B\x339\x3\x2\x2\x2\x33B\x33C"+
		"\x3\x2\x2\x2\x33C\x33E\x3\x2\x2\x2\x33D\x33B\x3\x2\x2\x2\x33E\x342\x5"+
		"\f\a\x2\x33F\x341\x5t;\x2\x340\x33F\x3\x2\x2\x2\x341\x344\x3\x2\x2\x2"+
		"\x342\x340\x3\x2\x2\x2\x342\x343\x3\x2\x2\x2\x343\x345\x3\x2\x2\x2\x344"+
		"\x342\x3\x2\x2\x2\x345\x346\a\x19\x2\x2\x346\x348\a\xE\x2\x2\x347\x349"+
		"\x5\x10A\x86\x2\x348\x347\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2\x349\x34A"+
		"\x3\x2\x2\x2\x34A\x34B\x5\f\a\x2\x34B;\x3\x2\x2\x2\x34C\x34E\t\r\x2\x2"+
		"\x34D\x34C\x3\x2\x2\x2\x34E\x34F\x3\x2\x2\x2\x34F\x34D\x3\x2\x2\x2\x34F"+
		"\x350\x3\x2\x2\x2\x350=\x3\x2\x2\x2\x351\x352\a\xD7\x2\x2\x352\x35A\x5"+
		"@!\x2\x353\x355\a\x10B\x2\x2\x354\x356\x5\x8A\x46\x2\x355\x354\x3\x2\x2"+
		"\x2\x355\x356\x3\x2\x2\x2\x356\x357\x3\x2\x2\x2\x357\x359\x5@!\x2\x358"+
		"\x353\x3\x2\x2\x2\x359\x35C\x3\x2\x2\x2\x35A\x358\x3\x2\x2\x2\x35A\x35B"+
		"\x3\x2\x2\x2\x35B\x35D\x3\x2\x2\x2\x35C\x35A\x3\x2\x2\x2\x35D\x35E\a\xD9"+
		"\x2\x2\x35E?\x3\x2\x2\x2\x35F\x361\x5\x8A\x46\x2\x360\x35F\x3\x2\x2\x2"+
		"\x360\x361\x3\x2\x2\x2\x361\x363\x3\x2\x2\x2\x362\x364\t\xE\x2\x2\x363"+
		"\x362\x3\x2\x2\x2\x363\x364\x3\x2\x2\x2\x364\x365\x3\x2\x2\x2\x365\x366"+
		"\x5\x10A\x86\x2\x366\x41\x3\x2\x2\x2\x367\x368\a\x99\x2\x2\x368\x369\x5"+
		"\xD6l\x2\x369\x36A\a-\x2\x2\x36A\x36F\x5\x44#\x2\x36B\x36C\a\x10B\x2\x2"+
		"\x36C\x36E\x5\x44#\x2\x36D\x36B\x3\x2\x2\x2\x36E\x371\x3\x2\x2\x2\x36F"+
		"\x36D\x3\x2\x2\x2\x36F\x370\x3\x2\x2\x2\x370\x43\x3\x2\x2\x2\x371\x36F"+
		"\x3\x2\x2\x2\x372\x378\t\xF\x2\x2\x373\x378\x5\xDCo\x2\x374\x375\ai\x2"+
		"\x2\x375\x376\a\x104\x2\x2\x376\x378\a\x105\x2\x2\x377\x372\x3\x2\x2\x2"+
		"\x377\x373\x3\x2\x2\x2\x377\x374\x3\x2\x2\x2\x378\x45\x3\x2\x2\x2\x379"+
		"\x37B\x5\x8A\x46\x2\x37A\x379\x3\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37D"+
		"\x3\x2\x2\x2\x37C\x37E\x5H%\x2\x37D\x37C\x3\x2\x2\x2\x37D\x37E\x3\x2\x2"+
		"\x2\x37E\x37F\x3\x2\x2\x2\x37F\x381\ar\x2\x2\x380\x382\x5\xCCg\x2\x381"+
		"\x380\x3\x2\x2\x2\x381\x382\x3\x2\x2\x2\x382\x383\x3\x2\x2\x2\x383\x385"+
		"\x5\x10A\x86\x2\x384\x386\x5> \x2\x385\x384\x3\x2\x2\x2\x385\x386\x3\x2"+
		"\x2\x2\x386\x390\x3\x2\x2\x2\x387\x388\a\x61\x2\x2\x388\x38D\x5\xD8m\x2"+
		"\x389\x38A\a\x10B\x2\x2\x38A\x38C\x5\xD8m\x2\x38B\x389\x3\x2\x2\x2\x38C"+
		"\x38F\x3\x2\x2\x2\x38D\x38B\x3\x2\x2\x2\x38D\x38E\x3\x2\x2\x2\x38E\x391"+
		"\x3\x2\x2\x2\x38F\x38D\x3\x2\x2\x2\x390\x387\x3\x2\x2\x2\x390\x391\x3"+
		"\x2\x2\x2\x391\x395\x3\x2\x2\x2\x392\x394\x5\x42\"\x2\x393\x392\x3\x2"+
		"\x2\x2\x394\x397\x3\x2\x2\x2\x395\x393\x3\x2\x2\x2\x395\x396\x3\x2\x2"+
		"\x2\x396\x398\x3\x2\x2\x2\x397\x395\x3\x2\x2\x2\x398\x39C\x5\f\a\x2\x399"+
		"\x39B\x5t;\x2\x39A\x399\x3\x2\x2\x2\x39B\x39E\x3\x2\x2\x2\x39C\x39A\x3"+
		"\x2\x2\x2\x39C\x39D\x3\x2\x2\x2\x39D\x39F\x3\x2\x2\x2\x39E\x39C\x3\x2"+
		"\x2\x2\x39F\x3A0\a\x19\x2\x2\x3A0\x3A2\ar\x2\x2\x3A1\x3A3\x5\x10A\x86"+
		"\x2\x3A2\x3A1\x3\x2\x2\x2\x3A2\x3A3\x3\x2\x2\x2\x3A3\x3A4\x3\x2\x2\x2"+
		"\x3A4\x3A5\x5\f\a\x2\x3A5G\x3\x2\x2\x2\x3A6\x3A8\t\f\x2\x2\x3A7\x3A6\x3"+
		"\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9\x3A7\x3\x2\x2\x2\x3A9\x3AA\x3\x2"+
		"\x2\x2\x3AAI\x3\x2\x2\x2\x3AB\x3AD\x5\x8A\x46\x2\x3AC\x3AB\x3\x2\x2\x2"+
		"\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3AF\x3\x2\x2\x2\x3AE\x3B0\x5L\'\x2\x3AF\x3AE"+
		"\x3\x2\x2\x2\x3AF\x3B0\x3\x2\x2\x2\x3B0\x3B1\x3\x2\x2\x2\x3B1\x3B3\aZ"+
		"\x2\x2\x3B2\x3B4\x5\xCCg\x2\x3B3\x3B2\x3\x2\x2\x2\x3B3\x3B4\x3\x2\x2\x2"+
		"\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3B7\x5\x10A\x86\x2\x3B6\x3B8\x5> \x2\x3B7"+
		"\x3B6\x3\x2\x2\x2\x3B7\x3B8\x3\x2\x2\x2\x3B8\x3BA\x3\x2\x2\x2\x3B9\x3BB"+
		"\x5\x18\r\x2\x3BA\x3B9\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB\x3BE\x3"+
		"\x2\x2\x2\x3BC\x3BD\a\x6\x2\x2\x3BD\x3BF\x5\xD8m\x2\x3BE\x3BC\x3\x2\x2"+
		"\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C3\x3\x2\x2\x2\x3C0\x3C2\x5\x42\"\x2"+
		"\x3C1\x3C0\x3\x2\x2\x2\x3C2\x3C5\x3\x2\x2\x2\x3C3\x3C1\x3\x2\x2\x2\x3C3"+
		"\x3C4\x3\x2\x2\x2\x3C4\x3C6\x3\x2\x2\x2\x3C5\x3C3\x3\x2\x2\x2\x3C6\x3C7"+
		"\x5\f\a\x2\x3C7K\x3\x2\x2\x2\x3C8\x3CA\t\x10\x2\x2\x3C9\x3C8\x3\x2\x2"+
		"\x2\x3CA\x3CB\x3\x2\x2\x2\x3CB\x3C9\x3\x2\x2\x2\x3CB\x3CC\x3\x2\x2\x2"+
		"\x3CCM\x3\x2\x2\x2\x3CD\x3CF\x5\x8A\x46\x2\x3CE\x3CD\x3\x2\x2\x2\x3CE"+
		"\x3CF\x3\x2\x2\x2\x3CF\x3D1\x3\x2\x2\x2\x3D0\x3D2\x5P)\x2\x3D1\x3D0\x3"+
		"\x2\x2\x2\x3D1\x3D2\x3\x2\x2\x2\x3D2\x3D3\x3\x2\x2\x2\x3D3\x3D5\a\\\x2"+
		"\x2\x3D4\x3D6\x5\xCCg\x2\x3D5\x3D4\x3\x2\x2\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6"+
		"\x3D7\x3\x2\x2\x2\x3D7\x3DA\x5\x10A\x86\x2\x3D8\x3D9\t\x11\x2\x2\x3D9"+
		"\x3DB\x5\xD8m\x2\x3DA\x3D8\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2\x2\x3DB\x3DC"+
		"\x3\x2\x2\x2\x3DC\x3DE\x5\f\a\x2\x3DD\x3DF\x5R*\x2\x3DE\x3DD\x3\x2\x2"+
		"\x2\x3DF\x3E0\x3\x2\x2\x2\x3E0\x3DE\x3\x2\x2\x2\x3E0\x3E1\x3\x2\x2\x2"+
		"\x3E1\x3E2\x3\x2\x2\x2\x3E2\x3E4\a\x19\x2\x2\x3E3\x3E5\a\\\x2\x2\x3E4"+
		"\x3E3\x3\x2\x2\x2\x3E4\x3E5\x3\x2\x2\x2\x3E5\x3E7\x3\x2\x2\x2\x3E6\x3E8"+
		"\x5\x10A\x86\x2\x3E7\x3E6\x3\x2\x2\x2\x3E7\x3E8\x3\x2\x2\x2\x3E8\x3E9"+
		"\x3\x2\x2\x2\x3E9\x3EA\x5\f\a\x2\x3EAO\x3\x2\x2\x2\x3EB\x3ED\t\x12\x2"+
		"\x2\x3EC\x3EB\x3\x2\x2\x2\x3ED\x3EE\x3\x2\x2\x2\x3EE\x3EC\x3\x2\x2\x2"+
		"\x3EE\x3EF\x3\x2\x2\x2\x3EFQ\x3\x2\x2\x2\x3F0\x3F2\x5\x8A\x46\x2\x3F1"+
		"\x3F0\x3\x2\x2\x2\x3F1\x3F2\x3\x2\x2\x2\x3F2\x3F4\x3\x2\x2\x2\x3F3\x3F5"+
		"\a\x31\x2\x2\x3F4\x3F3\x3\x2\x2\x2\x3F4\x3F5\x3\x2\x2\x2\x3F5\x3F6\x3"+
		"\x2\x2\x2\x3F6\x3F9\x5\x10A\x86\x2\x3F7\x3F8\a\xF4\x2\x2\x3F8\x3FA\x5"+
		"\xB2Z\x2\x3F9\x3F7\x3\x2\x2\x2\x3F9\x3FA\x3\x2\x2\x2\x3FA\x3FB\x3\x2\x2"+
		"\x2\x3FB\x3FC\x5\f\a\x2\x3FCS\x3\x2\x2\x2\x3FD\x3FF\x5\x8A\x46\x2\x3FE"+
		"\x3FD\x3\x2\x2\x2\x3FE\x3FF\x3\x2\x2\x2\x3FF\x401\x3\x2\x2\x2\x400\x402"+
		"\x5V,\x2\x401\x400\x3\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x403\x3\x2\x2"+
		"\x2\x403\x405\a]\x2\x2\x404\x406\x5\xCCg\x2\x405\x404\x3\x2\x2\x2\x405"+
		"\x406\x3\x2\x2\x2\x406\x407\x3\x2\x2\x2\x407\x40A\x5\x10A\x86\x2\x408"+
		"\x409\a\x6\x2\x2\x409\x40B\x5\xD8m\x2\x40A\x408\x3\x2\x2\x2\x40A\x40B"+
		"\x3\x2\x2\x2\x40B\x423\x3\x2\x2\x2\x40C\x424\x5\f\a\x2\x40D\x40F\x5X-"+
		"\x2\x40E\x40D\x3\x2\x2\x2\x40F\x410\x3\x2\x2\x2\x410\x40E\x3\x2\x2\x2"+
		"\x410\x411\x3\x2\x2\x2\x411\x412\x3\x2\x2\x2\x412\x413\x5\f\a\x2\x413"+
		"\x424\x3\x2\x2\x2\x414\x416\x5\f\a\x2\x415\x417\x5Z.\x2\x416\x415\x3\x2"+
		"\x2\x2\x417\x418\x3\x2\x2\x2\x418\x416\x3\x2\x2\x2\x418\x419\x3\x2\x2"+
		"\x2\x419\x41A\x3\x2\x2\x2\x41A\x41C\a\x19\x2\x2\x41B\x41D\a]\x2\x2\x41C"+
		"\x41B\x3\x2\x2\x2\x41C\x41D\x3\x2\x2\x2\x41D\x41F\x3\x2\x2\x2\x41E\x420"+
		"\x5\x10A\x86\x2\x41F\x41E\x3\x2\x2\x2\x41F\x420\x3\x2\x2\x2\x420\x421"+
		"\x3\x2\x2\x2\x421\x422\x5\f\a\x2\x422\x424\x3\x2\x2\x2\x423\x40C\x3\x2"+
		"\x2\x2\x423\x40E\x3\x2\x2\x2\x423\x414\x3\x2\x2\x2\x424U\x3\x2\x2\x2\x425"+
		"\x427\t\x13\x2\x2\x426\x425\x3\x2\x2\x2\x427\x428\x3\x2\x2\x2\x428\x426"+
		"\x3\x2\x2\x2\x428\x429\x3\x2\x2\x2\x429W\x3\x2\x2\x2\x42A\x42C\x5\x8A"+
		"\x46\x2\x42B\x42A\x3\x2\x2\x2\x42B\x42C\x3\x2\x2\x2\x42C\x42E\x3\x2\x2"+
		"\x2\x42D\x42F\x5n\x38\x2\x42E\x42D\x3\x2\x2\x2\x42E\x42F\x3\x2\x2\x2\x42F"+
		"\x43B\x3\x2\x2\x2\x430\x431\x6-\x2\x2\x431\x433\ay\x2\x2\x432\x434\x5"+
		"p\x39\x2\x433\x432\x3\x2\x2\x2\x433\x434\x3\x2\x2\x2\x434\x43C\x3\x2\x2"+
		"\x2\x435\x436\x6-\x3\x2\x436\x438\a\x92\x2\x2\x437\x439\x5p\x39\x2\x438"+
		"\x437\x3\x2\x2\x2\x438\x439\x3\x2\x2\x2\x439\x43C\x3\x2\x2\x2\x43A\x43C"+
		"\t\x14\x2\x2\x43B\x430\x3\x2\x2\x2\x43B\x435\x3\x2\x2\x2\x43B\x43A\x3"+
		"\x2\x2\x2\x43CY\x3\x2\x2\x2\x43D\x43F\x5\x8A\x46\x2\x43E\x43D\x3\x2\x2"+
		"\x2\x43E\x43F\x3\x2\x2\x2\x43F\x441\x3\x2\x2\x2\x440\x442\x5n\x38\x2\x441"+
		"\x440\x3\x2\x2\x2\x441\x442\x3\x2\x2\x2\x442\x451\x3\x2\x2\x2\x443\x444"+
		"\ay\x2\x2\x444\x445\x5\f\a\x2\x445\x446\x5\x1E\x10\x2\x446\x448\a\x19"+
		"\x2\x2\x447\x449\ay\x2\x2\x448\x447\x3\x2\x2\x2\x448\x449\x3\x2\x2\x2"+
		"\x449\x452\x3\x2\x2\x2\x44A\x44B\a\x92\x2\x2\x44B\x44C\x5\f\a\x2\x44C"+
		"\x44D\x5\x1E\x10\x2\x44D\x44F\a\x19\x2\x2\x44E\x450\a\x92\x2\x2\x44F\x44E"+
		"\x3\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450\x452\x3\x2\x2\x2\x451\x443\x3"+
		"\x2\x2\x2\x451\x44A\x3\x2\x2\x2\x452\x453\x3\x2\x2\x2\x453\x454\x5\f\a"+
		"\x2\x454[\x3\x2\x2\x2\x455\x457\x5\x8A\x46\x2\x456\x455\x3\x2\x2\x2\x456"+
		"\x457\x3\x2\x2\x2\x457\x459\x3\x2\x2\x2\x458\x45A\x5^\x30\x2\x459\x458"+
		"\x3\x2\x2\x2\x459\x45A\x3\x2\x2\x2\x45A\x45B\x3\x2\x2\x2\x45B\x45C\x5"+
		"`\x31\x2\x45C\x45D\x5\f\a\x2\x45D]\x3\x2\x2\x2\x45E\x460\t\x15\x2\x2\x45F"+
		"\x45E\x3\x2\x2\x2\x460\x461\x3\x2\x2\x2\x461\x45F\x3\x2\x2\x2\x461\x462"+
		"\x3\x2\x2\x2\x462_\x3\x2\x2\x2\x463\x468\x5\x62\x32\x2\x464\x465\a\x10B"+
		"\x2\x2\x465\x467\x5\x62\x32\x2\x466\x464\x3\x2\x2\x2\x467\x46A\x3\x2\x2"+
		"\x2\x468\x466\x3\x2\x2\x2\x468\x469\x3\x2\x2\x2\x469\x46D\x3\x2\x2\x2"+
		"\x46A\x468\x3\x2\x2\x2\x46B\x46C\t\n\x2\x2\x46C\x46E\x5\xD8m\x2\x46D\x46B"+
		"\x3\x2\x2\x2\x46D\x46E\x3\x2\x2\x2\x46E\x61\x3\x2\x2\x2\x46F\x471\a\x12"+
		"\x2\x2\x470\x46F\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2\x471\x472\x3\x2\x2"+
		"\x2\x472\x477\x5\x10A\x86\x2\x473\x474\a\x108\x2\x2\x474\x475\x5\x64\x33"+
		"\x2\x475\x476\a\x109\x2\x2\x476\x478\x3\x2\x2\x2\x477\x473\x3\x2\x2\x2"+
		"\x477\x478\x3\x2\x2\x2\x478\x47B\x3\x2\x2\x2\x479\x47A\a\xF4\x2\x2\x47A"+
		"\x47C\x5\xB2Z\x2\x47B\x479\x3\x2\x2\x2\x47B\x47C\x3\x2\x2\x2\x47C\x63"+
		"\x3\x2\x2\x2\x47D\x481\x5\xB2Z\x2\x47E\x47F\a\x109\x2\x2\x47F\x480\a\x108"+
		"\x2\x2\x480\x482\x5\xB2Z\x2\x481\x47E\x3\x2\x2\x2\x482\x483\x3\x2\x2\x2"+
		"\x483\x481\x3\x2\x2\x2\x483\x484\x3\x2\x2\x2\x484\x48E\x3\x2\x2\x2\x485"+
		"\x488\x5\xB2Z\x2\x486\x487\a\x10B\x2\x2\x487\x489\x5\xB2Z\x2\x488\x486"+
		"\x3\x2\x2\x2\x489\x48A\x3\x2\x2\x2\x48A\x488\x3\x2\x2\x2\x48A\x48B\x3"+
		"\x2\x2\x2\x48B\x48E\x3\x2\x2\x2\x48C\x48E\x5\xB2Z\x2\x48D\x47D\x3\x2\x2"+
		"\x2\x48D\x485\x3\x2\x2\x2\x48D\x48C\x3\x2\x2\x2\x48E\x65\x3\x2\x2\x2\x48F"+
		"\x491\x5\x8A\x46\x2\x490\x48F\x3\x2\x2\x2\x490\x491\x3\x2\x2\x2\x491\x493"+
		"\x3\x2\x2\x2\x492\x494\x5\x88\x45\x2\x493\x492\x3\x2\x2\x2\x493\x494\x3"+
		"\x2\x2\x2\x494\x495\x3\x2\x2\x2\x495\x49C\am\x2\x2\x496\x497\a@\x2\x2"+
		"\x497\x49D\x5h\x35\x2\x498\x49A\x5\xCCg\x2\x499\x498\x3\x2\x2\x2\x499"+
		"\x49A\x3\x2\x2\x2\x49A\x49B\x3\x2\x2\x2\x49B\x49D\x5\x10A\x86\x2\x49C"+
		"\x496\x3\x2\x2\x2\x49C\x499\x3\x2\x2\x2\x49D\x49F\x3\x2\x2\x2\x49E\x4A0"+
		"\x5h\x35\x2\x49F\x49E\x3\x2\x2\x2\x49F\x4A0\x3\x2\x2\x2\x4A0\x4A3\x3\x2"+
		"\x2\x2\x4A1\x4A2\a\x6\x2\x2\x4A2\x4A4\x5\xD8m\x2\x4A3\x4A1\x3\x2\x2\x2"+
		"\x4A3\x4A4\x3\x2\x2\x2\x4A4\x4C7\x3\x2\x2\x2\x4A5\x4A9\aU\x2\x2\x4A6\x4A8"+
		"\x5j\x36\x2\x4A7\x4A6\x3\x2\x2\x2\x4A8\x4AB\x3\x2\x2\x2\x4A9\x4A7\x3\x2"+
		"\x2\x2\x4A9\x4AA\x3\x2\x2\x2\x4AA\x4AE\x3\x2\x2\x2\x4AB\x4A9\x3\x2\x2"+
		"\x2\x4AC\x4AD\a\xF4\x2\x2\x4AD\x4AF\x5\xB2Z\x2\x4AE\x4AC\x3\x2\x2\x2\x4AE"+
		"\x4AF\x3\x2\x2\x2\x4AF\x4B0\x3\x2\x2\x2\x4B0\x4C8\x5\f\a\x2\x4B1\x4B3"+
		"\x5l\x37\x2\x4B2\x4B1\x3\x2\x2\x2\x4B3\x4B4\x3\x2\x2\x2\x4B4\x4B2\x3\x2"+
		"\x2\x2\x4B4\x4B5\x3\x2\x2\x2\x4B5\x4B6\x3\x2\x2\x2\x4B6\x4B7\x5\f\a\x2"+
		"\x4B7\x4C8\x3\x2\x2\x2\x4B8\x4BA\x5\f\a\x2\x4B9\x4BB\x5r:\x2\x4BA\x4B9"+
		"\x3\x2\x2\x2\x4BB\x4BC\x3\x2\x2\x2\x4BC\x4BA\x3\x2\x2\x2\x4BC\x4BD\x3"+
		"\x2\x2\x2\x4BD\x4BE\x3\x2\x2\x2\x4BE\x4C0\a\x19\x2\x2\x4BF\x4C1\am\x2"+
		"\x2\x4C0\x4BF\x3\x2\x2\x2\x4C0\x4C1\x3\x2\x2\x2\x4C1\x4C3\x3\x2\x2\x2"+
		"\x4C2\x4C4\x5\x10A\x86\x2\x4C3\x4C2\x3\x2\x2\x2\x4C3\x4C4\x3\x2\x2\x2"+
		"\x4C4\x4C5\x3\x2\x2\x2\x4C5\x4C6\x5\f\a\x2\x4C6\x4C8\x3\x2\x2\x2\x4C7"+
		"\x4A5\x3\x2\x2\x2\x4C7\x4B2\x3\x2\x2\x2\x4C7\x4B8\x3\x2\x2\x2\x4C8g\x3"+
		"\x2\x2\x2\x4C9\x4D2\a\x108\x2\x2\x4CA\x4CF\x5\x1A\xE\x2\x4CB\x4CC\a\x10B"+
		"\x2\x2\x4CC\x4CE\x5\x1A\xE\x2\x4CD\x4CB\x3\x2\x2\x2\x4CE\x4D1\x3\x2\x2"+
		"\x2\x4CF\x4CD\x3\x2\x2\x2\x4CF\x4D0\x3\x2\x2\x2\x4D0\x4D3\x3\x2\x2\x2"+
		"\x4D1\x4CF\x3\x2\x2\x2\x4D2\x4CA\x3\x2\x2\x2\x4D2\x4D3\x3\x2\x2\x2\x4D3"+
		"\x4D4\x3\x2\x2\x2\x4D4\x4E2\a\x109\x2\x2\x4D5\x4DE\a\x104\x2\x2\x4D6\x4DB"+
		"\x5\x1A\xE\x2\x4D7\x4D8\a\x10B\x2\x2\x4D8\x4DA\x5\x1A\xE\x2\x4D9\x4D7"+
		"\x3\x2\x2\x2\x4DA\x4DD\x3\x2\x2\x2\x4DB\x4D9\x3\x2\x2\x2\x4DB\x4DC\x3"+
		"\x2\x2\x2\x4DC\x4DF\x3\x2\x2\x2\x4DD\x4DB\x3\x2\x2\x2\x4DE\x4D6\x3\x2"+
		"\x2\x2\x4DE\x4DF\x3\x2\x2\x2\x4DF\x4E0\x3\x2\x2\x2\x4E0\x4E2\a\x105\x2"+
		"\x2\x4E1\x4C9\x3\x2\x2\x2\x4E1\x4D5\x3\x2\x2\x2\x4E2i\x3\x2\x2\x2\x4E3"+
		"\x4E5\x5\x8A\x46\x2\x4E4\x4E3\x3\x2\x2\x2\x4E4\x4E5\x3\x2\x2\x2\x4E5\x4E7"+
		"\x3\x2\x2\x2\x4E6\x4E8\x5n\x38\x2\x4E7\x4E6\x3\x2\x2\x2\x4E7\x4E8\x3\x2"+
		"\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9\x4EA\t\x16\x2\x2\x4EAk\x3\x2\x2\x2\x4EB"+
		"\x4ED\x5\x8A\x46\x2\x4EC\x4EB\x3\x2\x2\x2\x4EC\x4ED\x3\x2\x2\x2\x4ED\x4EF"+
		"\x3\x2\x2\x2\x4EE\x4F0\x5n\x38\x2\x4EF\x4EE\x3\x2\x2\x2\x4EF\x4F0\x3\x2"+
		"\x2\x2\x4F0\x4FC\x3\x2\x2\x2\x4F1\x4F2\x6\x37\x4\x2\x4F2\x4F4\a`\x2\x2"+
		"\x4F3\x4F5\x5\xB2Z\x2\x4F4\x4F3\x3\x2\x2\x2\x4F4\x4F5\x3\x2\x2\x2\x4F5"+
		"\x4FD\x3\x2\x2\x2\x4F6\x4F7\x6\x37\x5\x2\x4F7\x4F9\aq\x2\x2\x4F8\x4FA"+
		"\x5p\x39\x2\x4F9\x4F8\x3\x2\x2\x2\x4F9\x4FA\x3\x2\x2\x2\x4FA\x4FD\x3\x2"+
		"\x2\x2\x4FB\x4FD\t\x16\x2\x2\x4FC\x4F1\x3\x2\x2\x2\x4FC\x4F6\x3\x2\x2"+
		"\x2\x4FC\x4FB\x3\x2\x2\x2\x4FDm\x3\x2\x2\x2\x4FE\x500\t\x17\x2\x2\x4FF"+
		"\x4FE\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501\x4FF\x3\x2\x2\x2\x501\x502"+
		"\x3\x2\x2\x2\x502o\x3\x2\x2\x2\x503\x508\x5\xB2Z\x2\x504\x505\a\x10B\x2"+
		"\x2\x505\x507\x5\xB2Z\x2\x506\x504\x3\x2\x2\x2\x507\x50A\x3\x2\x2\x2\x508"+
		"\x506\x3\x2\x2\x2\x508\x509\x3\x2\x2\x2\x509q\x3\x2\x2\x2\x50A\x508\x3"+
		"\x2\x2\x2\x50B\x50D\x5\x8A\x46\x2\x50C\x50B\x3\x2\x2\x2\x50C\x50D\x3\x2"+
		"\x2\x2\x50D\x50F\x3\x2\x2\x2\x50E\x510\x5n\x38\x2\x50F\x50E\x3\x2\x2\x2"+
		"\x50F\x510\x3\x2\x2\x2\x510\x51F\x3\x2\x2\x2\x511\x512\a`\x2\x2\x512\x513"+
		"\x5\f\a\x2\x513\x514\x5\x1E\x10\x2\x514\x516\a\x19\x2\x2\x515\x517\a`"+
		"\x2\x2\x516\x515\x3\x2\x2\x2\x516\x517\x3\x2\x2\x2\x517\x520\x3\x2\x2"+
		"\x2\x518\x519\aq\x2\x2\x519\x51A\x5\f\a\x2\x51A\x51B\x5\x1E\x10\x2\x51B"+
		"\x51D\a\x19\x2\x2\x51C\x51E\aq\x2\x2\x51D\x51C\x3\x2\x2\x2\x51D\x51E\x3"+
		"\x2\x2\x2\x51E\x520\x3\x2\x2\x2\x51F\x511\x3\x2\x2\x2\x51F\x518\x3\x2"+
		"\x2\x2\x520\x521\x3\x2\x2\x2\x521\x522\x5\f\a\x2\x522s\x3\x2\x2\x2\x523"+
		"\x535\x5&\x14\x2\x524\x535\x5z>\x2\x525\x535\x5v<\x2\x526\x535\x5|?\x2"+
		"\x527\x535\x5\\/\x2\x528\x535\x5\x66\x34\x2\x529\x535\x5\x84\x43\x2\x52A"+
		"\x535\x5\x46$\x2\x52B\x535\x5:\x1E\x2\x52C\x535\x5J&\x2\x52D\x535\x5N"+
		"(\x2\x52E\x535\x5T+\x2\x52F\x535\x5\x36\x1C\x2\x530\x531\x6;\x6\x2\x531"+
		"\x535\x5\xE\b\x2\x532\x533\x6;\a\x2\x533\x535\x5\x10\t\x2\x534\x523\x3"+
		"\x2\x2\x2\x534\x524\x3\x2\x2\x2\x534\x525\x3\x2\x2\x2\x534\x526\x3\x2"+
		"\x2\x2\x534\x527\x3\x2\x2\x2\x534\x528\x3\x2\x2\x2\x534\x529\x3\x2\x2"+
		"\x2\x534\x52A\x3\x2\x2\x2\x534\x52B\x3\x2\x2\x2\x534\x52C\x3\x2\x2\x2"+
		"\x534\x52D\x3\x2\x2\x2\x534\x52E\x3\x2\x2\x2\x534\x52F\x3\x2\x2\x2\x534"+
		"\x530\x3\x2\x2\x2\x534\x532\x3\x2\x2\x2\x535u\x3\x2\x2\x2\x536\x538\x5"+
		"\x8A\x46\x2\x537\x536\x3\x2\x2\x2\x537\x538\x3\x2\x2\x2\x538\x53A\x3\x2"+
		"\x2\x2\x539\x53B\x5x=\x2\x53A\x539\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B"+
		"\x53C\x3\x2\x2\x2\x53C\x53E\aW\x2\x2\x53D\x53F\x5\x18\r\x2\x53E\x53D\x3"+
		"\x2\x2\x2\x53E\x53F\x3\x2\x2\x2\x53F\x542\x3\x2\x2\x2\x540\x541\a\x6\x2"+
		"\x2\x541\x543\a\xB0\x2\x2\x542\x540\x3\x2\x2\x2\x542\x543\x3\x2\x2\x2"+
		"\x543\x545\x3\x2\x2\x2\x544\x546\x5\x12\n\x2\x545\x544\x3\x2\x2\x2\x545"+
		"\x546\x3\x2\x2\x2\x546\x54C\x3\x2\x2\x2\x547\x549\a\xE\x2\x2\x548\x54A"+
		"\x5\xCCg\x2\x549\x548\x3\x2\x2\x2\x549\x54A\x3\x2\x2\x2\x54A\x54B\x3\x2"+
		"\x2\x2\x54B\x54D\x5\x10A\x86\x2\x54C\x547\x3\x2\x2\x2\x54C\x54D\x3\x2"+
		"\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x559\x5\f\a\x2\x54F\x556\t\x18\x2\x2"+
		"\x550\x551\a\x104\x2\x2\x551\x557\a\x105\x2\x2\x552\x553\a\x104\x2\x2"+
		"\x553\x554\x5\xC6\x64\x2\x554\x555\a\x105\x2\x2\x555\x557\x3\x2\x2\x2"+
		"\x556\x550\x3\x2\x2\x2\x556\x552\x3\x2\x2\x2\x557\x558\x3\x2\x2\x2\x558"+
		"\x55A\x5\f\a\x2\x559\x54F\x3\x2\x2\x2\x559\x55A\x3\x2\x2\x2\x55A\x55B"+
		"\x3\x2\x2\x2\x55B\x55C\x5\x1E\x10\x2\x55Cw\x3\x2\x2\x2\x55D\x55F\t\x19"+
		"\x2\x2\x55E\x55D\x3\x2\x2\x2\x55F\x560\x3\x2\x2\x2\x560\x55E\x3\x2\x2"+
		"\x2\x560\x561\x3\x2\x2\x2\x561y\x3\x2\x2\x2\x562\x563\a\x10\x2\x2\x563"+
		"\x564\t\t\x2\x2\x564\x569\x5\x10A\x86\x2\x565\x566\a\x10B\x2\x2\x566\x568"+
		"\x5\x10A\x86\x2\x567\x565\x3\x2\x2\x2\x568\x56B\x3\x2\x2\x2\x569\x567"+
		"\x3\x2\x2\x2\x569\x56A\x3\x2\x2\x2\x56A\x56C\x3\x2\x2\x2\x56B\x569\x3"+
		"\x2\x2\x2\x56C\x56D\x5\f\a\x2\x56D{\x3\x2\x2\x2\x56E\x570\x5\x8A\x46\x2"+
		"\x56F\x56E\x3\x2\x2\x2\x56F\x570\x3\x2\x2\x2\x570\x572\x3\x2\x2\x2\x571"+
		"\x573\x5~@\x2\x572\x571\x3\x2\x2\x2\x572\x573\x3\x2\x2\x2\x573\x574\x3"+
		"\x2\x2\x2\x574\x577\a[\x2\x2\x575\x576\a\x104\x2\x2\x576\x578\a\x105\x2"+
		"\x2\x577\x575\x3\x2\x2\x2\x577\x578\x3\x2\x2\x2\x578\x57E\x3\x2\x2\x2"+
		"\x579\x57B\a\xE\x2\x2\x57A\x57C\x5\xCCg\x2\x57B\x57A\x3\x2\x2\x2\x57B"+
		"\x57C\x3\x2\x2\x2\x57C\x57D\x3\x2\x2\x2\x57D\x57F\x5\x10A\x86\x2\x57E"+
		"\x579\x3\x2\x2\x2\x57E\x57F\x3\x2\x2\x2\x57F\x580\x3\x2\x2\x2\x580\x581"+
		"\x5\f\a\x2\x581\x582\x5\x1E\x10\x2\x582}\x3\x2\x2\x2\x583\x585\a\x84\x2"+
		"\x2\x584\x583\x3\x2\x2\x2\x585\x586\x3\x2\x2\x2\x586\x584\x3\x2\x2\x2"+
		"\x586\x587\x3\x2\x2\x2\x587\x7F\x3\x2\x2\x2\x588\x589\t\x1A\x2\x2\x589"+
		"\x81\x3\x2\x2\x2\x58A\x58B\t\x1B\x2\x2\x58B\x83\x3\x2\x2\x2\x58C\x58E"+
		"\x5\x8A\x46\x2\x58D\x58C\x3\x2\x2\x2\x58D\x58E\x3\x2\x2\x2\x58E\x590\x3"+
		"\x2\x2\x2\x58F\x591\x5\x86\x44\x2\x590\x58F\x3\x2\x2\x2\x590\x591\x3\x2"+
		"\x2\x2\x591\x592\x3\x2\x2\x2\x592\x595\aj\x2\x2\x593\x596\x5\x80\x41\x2"+
		"\x594\x596\x5\x82\x42\x2\x595\x593\x3\x2\x2\x2\x595\x594\x3\x2\x2\x2\x596"+
		"\x598\x3\x2\x2\x2\x597\x599\a\xD9\x2\x2\x598\x597\x3\x2\x2\x2\x598\x599"+
		"\x3\x2\x2\x2\x599\x59A\x3\x2\x2\x2\x59A\x59D\x5\x18\r\x2\x59B\x59C\a\x6"+
		"\x2\x2\x59C\x59E\x5\xD8m\x2\x59D\x59B\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2"+
		"\x59E\x59F\x3\x2\x2\x2\x59F\x5A0\x5\f\a\x2\x5A0\x5A1\x5\x1E\x10\x2\x5A1"+
		"\x85\x3\x2\x2\x2\x5A2\x5A4\t\x1C\x2\x2\x5A3\x5A2\x3\x2\x2\x2\x5A4\x5A5"+
		"\x3\x2\x2\x2\x5A5\x5A3\x3\x2\x2\x2\x5A5\x5A6\x3\x2\x2\x2\x5A6\x87\x3\x2"+
		"\x2\x2\x5A7\x5A9\t\x1D\x2\x2\x5A8\x5A7\x3\x2\x2\x2\x5A9\x5AA\x3\x2\x2"+
		"\x2\x5AA\x5A8\x3\x2\x2\x2\x5AA\x5AB\x3\x2\x2\x2\x5AB\x89\x3\x2\x2\x2\x5AC"+
		"\x5AE\x5\x8CG\x2\x5AD\x5AC\x3\x2\x2\x2\x5AE\x5AF\x3\x2\x2\x2\x5AF\x5AD"+
		"\x3\x2\x2\x2\x5AF\x5B0\x3\x2\x2\x2\x5B0\x8B\x3\x2\x2\x2\x5B1\x5B3\a\x108"+
		"\x2\x2\x5B2\x5B4\x5\x8EH\x2\x5B3\x5B2\x3\x2\x2\x2\x5B3\x5B4\x3\x2\x2\x2"+
		"\x5B4\x5B5\x3\x2\x2\x2\x5B5\x5BA\x5\x90I\x2\x5B6\x5B7\a\x10B\x2\x2\x5B7"+
		"\x5B9\x5\x90I\x2\x5B8\x5B6\x3\x2\x2\x2\x5B9\x5BC\x3\x2\x2\x2\x5BA\x5B8"+
		"\x3\x2\x2\x2\x5BA\x5BB\x3\x2\x2\x2\x5BB\x5BD\x3\x2\x2\x2\x5BC\x5BA\x3"+
		"\x2\x2\x2\x5BD\x5BE\a\x109\x2\x2\x5BE\x8D\x3\x2\x2\x2\x5BF\x5C0\x5\x10A"+
		"\x86\x2\x5C0\x5C1\a\x10A\x2\x2\x5C1\x5C6\x3\x2\x2\x2\x5C2\x5C3\x5\x114"+
		"\x8B\x2\x5C3\x5C4\a\x10A\x2\x2\x5C4\x5C6\x3\x2\x2\x2\x5C5\x5BF\x3\x2\x2"+
		"\x2\x5C5\x5C2\x3\x2\x2\x2\x5C6\x8F\x3\x2\x2\x2\x5C7\x5D4\x5\xCEh\x2\x5C8"+
		"\x5D1\a\x104\x2\x2\x5C9\x5CE\x5\x92J\x2\x5CA\x5CB\a\x10B\x2\x2\x5CB\x5CD"+
		"\x5\x92J\x2\x5CC\x5CA\x3\x2\x2\x2\x5CD\x5D0\x3\x2\x2\x2\x5CE\x5CC\x3\x2"+
		"\x2\x2\x5CE\x5CF\x3\x2\x2\x2\x5CF\x5D2\x3\x2\x2\x2\x5D0\x5CE\x3\x2\x2"+
		"\x2\x5D1\x5C9\x3\x2\x2\x2\x5D1\x5D2\x3\x2\x2\x2\x5D2\x5D3\x3\x2\x2\x2"+
		"\x5D3\x5D5\a\x105\x2\x2\x5D4\x5C8\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2\x2\x5D5"+
		"\x91\x3\x2\x2\x2\x5D6\x5D7\x5\xD6l\x2\x5D7\x5D8\a\xF4\x2\x2\x5D8\x5D9"+
		"\x5\xB2Z\x2\x5D9\x5DC\x3\x2\x2\x2\x5DA\x5DC\x5\xB2Z\x2\x5DB\x5D6\x3\x2"+
		"\x2\x2\x5DB\x5DA\x3\x2\x2\x2\x5DC\x93\x3\x2\x2\x2\x5DD\x5DE\a\x108\x2"+
		"\x2\x5DE\x5DF\x5\x96L\x2\x5DF\x5E4\x5\x90I\x2\x5E0\x5E1\a\x10B\x2\x2\x5E1"+
		"\x5E3\x5\x90I\x2\x5E2\x5E0\x3\x2\x2\x2\x5E3\x5E6\x3\x2\x2\x2\x5E4\x5E2"+
		"\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5\x5E7\x3\x2\x2\x2\x5E6\x5E4\x3"+
		"\x2\x2\x2\x5E7\x5E8\a\x109\x2\x2\x5E8\x5E9\x5\f\a\x2\x5E9\x95\x3\x2\x2"+
		"\x2\x5EA\x5EB\t\x1E\x2\x2\x5EB\x5EC\a\x10A\x2\x2\x5EC\x97\x3\x2\x2\x2"+
		"\x5ED\x73F\x5\xA8U\x2\x5EE\x5EF\x6M\b\x2\x5EF\x73F\x5\xB0Y\x2\x5F0\x73F"+
		"\x5\xAEX\x2\x5F1\x5F3\a\x15\x2\x2\x5F2\x5F1\x3\x2\x2\x2\x5F2\x5F3\x3\x2"+
		"\x2\x2\x5F3\x5F4\x3\x2\x2\x2\x5F4\x5F5\aM\x2\x2\x5F5\x5F6\x5\xB2Z\x2\x5F6"+
		"\x5F7\x5\f\a\x2\x5F7\x603\x5\x1E\x10\x2\x5F8\x5FA\a\x19\x2\x2\x5F9\x5FB"+
		"\t\x1F\x2\x2\x5FA\x5F9\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2\x5FB\x5FE\x3"+
		"\x2\x2\x2\x5FC\x5FE\a\x1B\x2\x2\x5FD\x5F8\x3\x2\x2\x2\x5FD\x5FC\x3\x2"+
		"\x2\x2\x5FE\x600\x3\x2\x2\x2\x5FF\x601\x5\xB2Z\x2\x600\x5FF\x3\x2\x2\x2"+
		"\x600\x601\x3\x2\x2\x2\x601\x602\x3\x2\x2\x2\x602\x604\x5\f\a\x2\x603"+
		"\x5FD\x3\x2\x2\x2\x603\x604\x3\x2\x2\x2\x604\x73F\x3\x2\x2\x2\x605\x608"+
		"\a\x8B\x2\x2\x606\x607\a\x104\x2\x2\x607\x609\a\x105\x2\x2\x608\x606\x3"+
		"\x2\x2\x2\x608\x609\x3\x2\x2\x2\x609\x60A\x3\x2\x2\x2\x60A\x73F\x5\f\a"+
		"\x2\x60B\x620\a!\x2\x2\x60C\x621\x5\xB2Z\x2\x60D\x60F\a/\x2\x2\x60E\x60D"+
		"\x3\x2\x2\x2\x60E\x60F\x3\x2\x2\x2\x60F\x610\x3\x2\x2\x2\x610\x613\a\x63"+
		"\x2\x2\x611\x613\a\x97\x2\x2\x612\x60E\x3\x2\x2\x2\x612\x611\x3\x2\x2"+
		"\x2\x613\x614\x3\x2\x2\x2\x614\x615\x5\x10A\x86\x2\x615\x616\t \x2\x2"+
		"\x616\x617\x5\xB2Z\x2\x617\x621\x3\x2\x2\x2\x618\x619\a/\x2\x2\x619\x61A"+
		"\x5\x10A\x86\x2\x61A\x61B\t \x2\x2\x61B\x61E\x5\xB2Z\x2\x61C\x61D\a\x6"+
		"\x2\x2\x61D\x61F\x5\xD8m\x2\x61E\x61C\x3\x2\x2\x2\x61E\x61F\x3\x2\x2\x2"+
		"\x61F\x621\x3\x2\x2\x2\x620\x60C\x3\x2\x2\x2\x620\x612\x3\x2\x2\x2\x620"+
		"\x618\x3\x2\x2\x2\x621\x622\x3\x2\x2\x2\x622\x623\t!\x2\x2\x623\x626\x5"+
		"\xB2Z\x2\x624\x625\a\x44\x2\x2\x625\x627\x5\xB2Z\x2\x626\x624\x3\x2\x2"+
		"\x2\x626\x627\x3\x2\x2\x2\x627\x628\x3\x2\x2\x2\x628\x629\x5\f\a\x2\x629"+
		"\x62F\x5\x1E\x10\x2\x62A\x62C\a\x35\x2\x2\x62B\x62D\x5\x10A\x86\x2\x62C"+
		"\x62B\x3\x2\x2\x2\x62C\x62D\x3\x2\x2\x2\x62D\x62E\x3\x2\x2\x2\x62E\x630"+
		"\x5\f\a\x2\x62F\x62A\x3\x2\x2\x2\x62F\x630\x3\x2\x2\x2\x630\x73F\x3\x2"+
		"\x2\x2\x631\x632\a&\x2\x2\x632\x63E\x5\x9AN\x2\x633\x635\a\x19\x2\x2\x634"+
		"\x636\a&\x2\x2\x635\x634\x3\x2\x2\x2\x635\x636\x3\x2\x2\x2\x636\x639\x3"+
		"\x2\x2\x2\x637\x639\a\x1C\x2\x2\x638\x633\x3\x2\x2\x2\x638\x637\x3\x2"+
		"\x2\x2\x639\x63B\x3\x2\x2\x2\x63A\x63C\x5\xB2Z\x2\x63B\x63A\x3\x2\x2\x2"+
		"\x63B\x63C\x3\x2\x2\x2\x63C\x63D\x3\x2\x2\x2\x63D\x63F\x5\f\a\x2\x63E"+
		"\x638\x3\x2\x2\x2\x63E\x63F\x3\x2\x2\x2\x63F\x73F\x3\x2\x2\x2\x640\x641"+
		"\a\x15\x2\x2\x641\x642\a\f\x2\x2\x642\x644\x5\f\a\x2\x643\x645\x5\x9C"+
		"O\x2\x644\x643\x3\x2\x2\x2\x644\x645\x3\x2\x2\x2\x645\x64E\x3\x2\x2\x2"+
		"\x646\x648\a\x19\x2\x2\x647\x649\a\f\x2\x2\x648\x647\x3\x2\x2\x2\x648"+
		"\x649\x3\x2\x2\x2\x649\x64C\x3\x2\x2\x2\x64A\x64C\a\x1A\x2\x2\x64B\x646"+
		"\x3\x2\x2\x2\x64B\x64A\x3\x2\x2\x2\x64C\x64D\x3\x2\x2\x2\x64D\x64F\x5"+
		"\f\a\x2\x64E\x64B\x3\x2\x2\x2\x64E\x64F\x3\x2\x2\x2\x64F\x73F\x3\x2\x2"+
		"\x2\x650\x651\a\x1D\x2\x2\x651\x73F\x5\f\a\x2\x652\x653\a\x30\x2\x2\x653"+
		"\x73F\x5\f\a\x2\x654\x656\a\n\x2\x2\x655\x657\x5\xB2Z\x2\x656\x655\x3"+
		"\x2\x2\x2\x656\x657\x3\x2\x2\x2\x657\x658\x3\x2\x2\x2\x658\x73F\x5\f\a"+
		"\x2\x659\x65C\a?\x2\x2\x65A\x65D\a\xB0\x2\x2\x65B\x65D\x5\xB2Z\x2\x65C"+
		"\x65A\x3\x2\x2\x2\x65C\x65B\x3\x2\x2\x2\x65C\x65D\x3\x2\x2\x2\x65D\x65E"+
		"\x3\x2\x2\x2\x65E\x73F\x5\f\a\x2\x65F\x668\t\"\x2\x2\x660\x665\x5\xB2"+
		"Z\x2\x661\x662\a\x10B\x2\x2\x662\x664\x5\xB2Z\x2\x663\x661\x3\x2\x2\x2"+
		"\x664\x667\x3\x2\x2\x2\x665\x663\x3\x2\x2\x2\x665\x666\x3\x2\x2\x2\x666"+
		"\x669\x3\x2\x2\x2\x667\x665\x3\x2\x2\x2\x668\x660\x3\x2\x2\x2\x668\x669"+
		"\x3\x2\x2\x2\x669\x66A\x3\x2\x2\x2\x66A\x73F\x5\f\a\x2\x66B\x66C\a\t\x2"+
		"\x2\x66C\x66D\a\x41\x2\x2\x66D\x66E\x5\f\a\x2\x66E\x671\x5\x1E\x10\x2"+
		"\x66F\x670\a>\x2\x2\x670\x672\x5\xA2R\x2\x671\x66F\x3\x2\x2\x2\x671\x672"+
		"\x3\x2\x2\x2\x672\x677\x3\x2\x2\x2\x673\x674\aP\x2\x2\x674\x675\x5\f\a"+
		"\x2\x675\x676\x5\x1E\x10\x2\x676\x678\x3\x2\x2\x2\x677\x673\x3\x2\x2\x2"+
		"\x677\x678\x3\x2\x2\x2\x678\x67E\x3\x2\x2\x2\x679\x67B\a\x19\x2\x2\x67A"+
		"\x67C\a\x41\x2\x2\x67B\x67A\x3\x2\x2\x2\x67B\x67C\x3\x2\x2\x2\x67C\x67D"+
		"\x3\x2\x2\x2\x67D\x67F\x5\f\a\x2\x67E\x679\x3\x2\x2\x2\x67E\x67F\x3\x2"+
		"\x2\x2\x67F\x73F\x3\x2\x2\x2\x680\x681\an\x2\x2\x681\x682\x5\f\a\x2\x682"+
		"\x683\x5\x1E\x10\x2\x683\x684\au\x2\x2\x684\x685\x5\xB2Z\x2\x685\x686"+
		"\x5\f\a\x2\x686\x73F\x3\x2\x2\x2\x687\x690\a_\x2\x2\x688\x689\a\x63\x2"+
		"\x2\x689\x691\x5\x10A\x86\x2\x68A\x68B\x5\x10A\x86\x2\x68B\x68C\a\x6\x2"+
		"\x2\x68C\x68D\x5\xD8m\x2\x68D\x691\x3\x2\x2\x2\x68E\x68F\a\x97\x2\x2\x68F"+
		"\x691\x5\x10A\x86\x2\x690\x688\x3\x2\x2\x2\x690\x68A\x3\x2\x2\x2\x690"+
		"\x68E\x3\x2\x2\x2\x691\x692\x3\x2\x2\x2\x692\x693\a.\x2\x2\x693\x694\x5"+
		"\xB2Z\x2\x694\x695\x5\f\a\x2\x695\x69B\x5\x1E\x10\x2\x696\x698\a\x35\x2"+
		"\x2\x697\x699\x5\x10A\x86\x2\x698\x697\x3\x2\x2\x2\x698\x699\x3\x2\x2"+
		"\x2\x699\x69A\x3\x2\x2\x2\x69A\x69C\x5\f\a\x2\x69B\x696\x3\x2\x2\x2\x69B"+
		"\x69C\x3\x2\x2\x2\x69C\x73F\x3\x2\x2\x2\x69D\x69F\aQ\x2\x2\x69E\x6A0\x5"+
		"\xB2Z\x2\x69F\x69E\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x6A1\x3\x2\x2"+
		"\x2\x6A1\x73F\x5\f\a\x2\x6A2\x6A3\as\x2\x2\x6A3\x6A4\x5\f\a\x2\x6A4\x6AB"+
		"\x5\x1E\x10\x2\x6A5\x6A7\aO\x2\x2\x6A6\x6A8\x5\xA0Q\x2\x6A7\x6A6\x3\x2"+
		"\x2\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x6AA\x3\x2\x2\x2\x6A9\x6A5\x3\x2\x2"+
		"\x2\x6AA\x6AD\x3\x2\x2\x2\x6AB\x6A9\x3\x2\x2\x2\x6AB\x6AC\x3\x2\x2\x2"+
		"\x6AC\x6B2\x3\x2\x2\x2\x6AD\x6AB\x3\x2\x2\x2\x6AE\x6AF\aP\x2\x2\x6AF\x6B0"+
		"\x5\f\a\x2\x6B0\x6B1\x5\x1E\x10\x2\x6B1\x6B3\x3\x2\x2\x2\x6B2\x6AE\x3"+
		"\x2\x2\x2\x6B2\x6B3\x3\x2\x2\x2\x6B3\x6B9\x3\x2\x2\x2\x6B4\x6B6\a\x19"+
		"\x2\x2\x6B5\x6B7\as\x2\x2\x6B6\x6B5\x3\x2\x2\x2\x6B6\x6B7\x3\x2\x2\x2"+
		"\x6B7\x6B8\x3\x2\x2\x2\x6B8\x6BA\x5\f\a\x2\x6B9\x6B4\x3\x2\x2\x2\x6B9"+
		"\x6BA\x3\x2\x2\x2\x6BA\x73F\x3\x2\x2\x2\x6BB\x6BC\a\t\x2\x2\x6BC\x6BD"+
		"\ag\x2\x2\x6BD\x6BE\x5\xB2Z\x2\x6BE\x6BF\x5\f\a\x2\x6BF\x6C5\x5\x1E\x10"+
		"\x2\x6C0\x6C2\a\x19\x2\x2\x6C1\x6C3\ag\x2\x2\x6C2\x6C1\x3\x2\x2\x2\x6C2"+
		"\x6C3\x3\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2\x6C4\x6C6\x5\f\a\x2\x6C5\x6C0"+
		"\x3\x2\x2\x2\x6C5\x6C6\x3\x2\x2\x2\x6C6\x73F\x3\x2\x2\x2\x6C7\x6C8\a\t"+
		"\x2\x2\x6C8\x6C9\ao\x2\x2\x6C9\x6CA\x5\f\a\x2\x6CA\x6D0\x5\x1E\x10\x2"+
		"\x6CB\x6CD\a\x19\x2\x2\x6CC\x6CE\ao\x2\x2\x6CD\x6CC\x3\x2\x2\x2\x6CD\x6CE"+
		"\x3\x2\x2\x2\x6CE\x6CF\x3\x2\x2\x2\x6CF\x6D1\x5\f\a\x2\x6D0\x6CB\x3\x2"+
		"\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x73F\x3\x2\x2\x2\x6D2\x6D3\a\x9A\x2"+
		"\x2\x6D3\x6D6\a?\x2\x2\x6D4\x6D7\a\xB0\x2\x2\x6D5\x6D7\x5\xB2Z\x2\x6D6"+
		"\x6D4\x3\x2\x2\x2\x6D6\x6D5\x3\x2\x2\x2\x6D6\x6D7\x3\x2\x2\x2\x6D7\x6D8"+
		"\x3\x2\x2\x2\x6D8\x73F\x5\f\a\x2\x6D9\x6DA\a\x9A\x2\x2\x6DA\x6DB\t#\x2"+
		"\x2\x6DB\x73F\x5\f\a\x2\x6DC\x6DE\t$\x2\x2\x6DD\x6DC\x3\x2\x2\x2\x6DD"+
		"\x6DE\x3\x2\x2\x2\x6DE\x6DF\x3\x2\x2\x2\x6DF\x6E0\a\x94\x2\x2\x6E0\x6E1"+
		"\x5\xB2Z\x2\x6E1\x6E3\x5\f\a\x2\x6E2\x6E4\x5\x9EP\x2\x6E3\x6E2\x3\x2\x2"+
		"\x2\x6E4\x6E5\x3\x2\x2\x2\x6E5\x6E3\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2\x2"+
		"\x6E6\x6EC\x3\x2\x2\x2\x6E7\x6E9\a\x19\x2\x2\x6E8\x6EA\a\x94\x2\x2\x6E9"+
		"\x6E8\x3\x2\x2\x2\x6E9\x6EA\x3\x2\x2\x2\x6EA\x6EB\x3\x2\x2\x2\x6EB\x6ED"+
		"\x5\f\a\x2\x6EC\x6E7\x3\x2\x2\x2\x6EC\x6ED\x3\x2\x2\x2\x6ED\x73F\x3\x2"+
		"\x2\x2\x6EE\x6EF\a\t\x2\x2\x6EF\x6F2\aL\x2\x2\x6F0\x6F3\x5\xB2Z\x2\x6F1"+
		"\x6F3\x5\xA4S\x2\x6F2\x6F0\x3\x2\x2\x2\x6F2\x6F1\x3\x2\x2\x2\x6F3\x6F4"+
		"\x3\x2\x2\x2\x6F4\x6F5\x5\f\a\x2\x6F5\x6FB\x5\x1E\x10\x2\x6F6\x6F8\a\x19"+
		"\x2\x2\x6F7\x6F9\aL\x2\x2\x6F8\x6F7\x3\x2\x2\x2\x6F8\x6F9\x3\x2\x2\x2"+
		"\x6F9\x6FA\x3\x2\x2\x2\x6FA\x6FC\x5\f\a\x2\x6FB\x6F6\x3\x2\x2\x2\x6FB"+
		"\x6FC\x3\x2\x2\x2\x6FC\x73F\x3\x2\x2\x2\x6FD\x6FE\a\t\x2\x2\x6FE\x6FF"+
		"\a\x96\x2\x2\x6FF\x700\x5\f\a\x2\x700\x706\x5\x1E\x10\x2\x701\x703\a\x19"+
		"\x2\x2\x702\x704\a\x96\x2\x2\x703\x702\x3\x2\x2\x2\x703\x704\x3\x2\x2"+
		"\x2\x704\x705\x3\x2\x2\x2\x705\x707\x5\f\a\x2\x706\x701\x3\x2\x2\x2\x706"+
		"\x707\x3\x2\x2\x2\x707\x73F\x3\x2\x2\x2\x708\x709\a\t\x2\x2\x709\x70A"+
		"\a\x81\x2\x2\x70A\x70B\x5\f\a\x2\x70B\x711\x5\x1E\x10\x2\x70C\x70E\a\x19"+
		"\x2\x2\x70D\x70F\a\x81\x2\x2\x70E\x70D\x3\x2\x2\x2\x70E\x70F\x3\x2\x2"+
		"\x2\x70F\x710\x3\x2\x2\x2\x710\x712\x5\f\a\x2\x711\x70C\x3\x2\x2\x2\x711"+
		"\x712\x3\x2\x2\x2\x712\x73F\x3\x2\x2\x2\x713\x714\a\t\x2\x2\x714\x715"+
		"\a\x95\x2\x2\x715\x716\x5\f\a\x2\x716\x71C\x5\x1E\x10\x2\x717\x719\a\x19"+
		"\x2\x2\x718\x71A\a\x95\x2\x2\x719\x718\x3\x2\x2\x2\x719\x71A\x3\x2\x2"+
		"\x2\x71A\x71B\x3\x2\x2\x2\x71B\x71D\x5\f\a\x2\x71C\x717\x3\x2\x2\x2\x71C"+
		"\x71D\x3\x2\x2\x2\x71D\x73F\x3\x2\x2\x2\x71E\x71F\a\t\x2\x2\x71F\x720"+
		"\a\x85\x2\x2\x720\x721\x5\xA4S\x2\x721\x722\x5\f\a\x2\x722\x728\x5\x1E"+
		"\x10\x2\x723\x725\a\x19\x2\x2\x724\x726\a\x85\x2\x2\x725\x724\x3\x2\x2"+
		"\x2\x725\x726\x3\x2\x2\x2\x726\x727\x3\x2\x2\x2\x727\x729\x5\f\a\x2\x728"+
		"\x723\x3\x2\x2\x2\x728\x729\x3\x2\x2\x2\x729\x73F\x3\x2\x2\x2\x72A\x72B"+
		"\x6M\t\x2\x72B\x72C\x5\xB2Z\x2\x72C\x72D\x5\f\a\x2\x72D\x73F\x3\x2\x2"+
		"\x2\x72E\x72F\x6M\n\x2\x72F\x730\x5\xB2Z\x2\x730\x731\t%\x2\x2\x731\x732"+
		"\x5\f\a\x2\x732\x733\bM\x1\x2\x733\x73F\x3\x2\x2\x2\x734\x735\x6M\v\x2"+
		"\x735\x738\x5\xB2Z\x2\x736\x737\a\x10B\x2\x2\x737\x739\x5\xB2Z\x2\x738"+
		"\x736\x3\x2\x2\x2\x739\x73A\x3\x2\x2\x2\x73A\x738\x3\x2\x2\x2\x73A\x73B"+
		"\x3\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C\x73D\x5\f\a\x2\x73D\x73F\x3\x2"+
		"\x2\x2\x73E\x5ED\x3\x2\x2\x2\x73E\x5EE\x3\x2\x2\x2\x73E\x5F0\x3\x2\x2"+
		"\x2\x73E\x5F2\x3\x2\x2\x2\x73E\x605\x3\x2\x2\x2\x73E\x60B\x3\x2\x2\x2"+
		"\x73E\x631\x3\x2\x2\x2\x73E\x640\x3\x2\x2\x2\x73E\x650\x3\x2\x2\x2\x73E"+
		"\x652\x3\x2\x2\x2\x73E\x654\x3\x2\x2\x2\x73E\x659\x3\x2\x2\x2\x73E\x65F"+
		"\x3\x2\x2\x2\x73E\x66B\x3\x2\x2\x2\x73E\x680\x3\x2\x2\x2\x73E\x687\x3"+
		"\x2\x2\x2\x73E\x69D\x3\x2\x2\x2\x73E\x6A2\x3\x2\x2\x2\x73E\x6BB\x3\x2"+
		"\x2\x2\x73E\x6C7\x3\x2\x2\x2\x73E\x6D2\x3\x2\x2\x2\x73E\x6D9\x3\x2\x2"+
		"\x2\x73E\x6DD\x3\x2\x2\x2\x73E\x6EE\x3\x2\x2\x2\x73E\x6FD\x3\x2\x2\x2"+
		"\x73E\x708\x3\x2\x2\x2\x73E\x713\x3\x2\x2\x2\x73E\x71E\x3\x2\x2\x2\x73E"+
		"\x72A\x3\x2\x2\x2\x73E\x72E\x3\x2\x2\x2\x73E\x734\x3\x2\x2\x2\x73F\x99"+
		"\x3\x2\x2\x2\x740\x741\x5\xB2Z\x2\x741\x742\x5\f\a\x2\x742\x749\x5\x1E"+
		"\x10\x2\x743\x744\a\x18\x2\x2\x744\x74A\x5\x9AN\x2\x745\x746\a\x17\x2"+
		"\x2\x746\x747\x5\f\a\x2\x747\x748\x5\x1E\x10\x2\x748\x74A\x3\x2\x2\x2"+
		"\x749\x743\x3\x2\x2\x2\x749\x745\x3\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A"+
		"\x9B\x3\x2\x2\x2\x74B\x74C\a\f\x2\x2\x74C\x74D\x5\xB2Z\x2\x74D\x74E\x5"+
		"\f\a\x2\x74E\x750\x5\x1E\x10\x2\x74F\x751\x5\x9CO\x2\x750\x74F\x3\x2\x2"+
		"\x2\x750\x751\x3\x2\x2\x2\x751\x757\x3\x2\x2\x2\x752\x753\a\x36\x2\x2"+
		"\x753\x754\x5\f\a\x2\x754\x755\x5\x1E\x10\x2\x755\x757\x3\x2\x2\x2\x756"+
		"\x74B\x3\x2\x2\x2\x756\x752\x3\x2\x2\x2\x757\x9D\x3\x2\x2\x2\x758\x759"+
		"\a\f\x2\x2\x759\x75C\x5\xB2Z\x2\x75A\x75C\a\x36\x2\x2\x75B\x758\x3\x2"+
		"\x2\x2\x75B\x75A\x3\x2\x2\x2\x75C\x75D\x3\x2\x2\x2\x75D\x75E\x5\f\a\x2"+
		"\x75E\x75F\x5\x1E\x10\x2\x75F\x9F\x3\x2\x2\x2\x760\x762\x5\x10A\x86\x2"+
		"\x761\x760\x3\x2\x2\x2\x761\x762\x3\x2\x2\x2\x762\x765\x3\x2\x2\x2\x763"+
		"\x764\a\x6\x2\x2\x764\x766\x5\xD8m\x2\x765\x763\x3\x2\x2\x2\x765\x766"+
		"\x3\x2\x2\x2\x766\x767\x3\x2\x2\x2\x767\x768\x5\f\a\x2\x768\x769\x5\x1E"+
		"\x10\x2\x769\xA1\x3\x2\x2\x2\x76A\x76B\aL\x2\x2\x76B\x76D\x5\x10A\x86"+
		"\x2\x76C\x76A\x3\x2\x2\x2\x76C\x76D\x3\x2\x2\x2\x76D\x76E\x3\x2\x2\x2"+
		"\x76E\x76F\x5\f\a\x2\x76F\x770\x5\x1E\x10\x2\x770\xA3\x3\x2\x2\x2\x771"+
		"\x773\a/\x2\x2\x772\x771\x3\x2\x2\x2\x772\x773\x3\x2\x2\x2\x773\x774\x3"+
		"\x2\x2\x2\x774\x777\a\x63\x2\x2\x775\x777\a\x97\x2\x2\x776\x772\x3\x2"+
		"\x2\x2\x776\x775\x3\x2\x2\x2\x777\x778\x3\x2\x2\x2\x778\x77D\x5\xA6T\x2"+
		"\x779\x77A\a\x10B\x2\x2\x77A\x77C\x5\xA6T\x2\x77B\x779\x3\x2\x2\x2\x77C"+
		"\x77F\x3\x2\x2\x2\x77D\x77B\x3\x2\x2\x2\x77D\x77E\x3\x2\x2\x2\x77E\x78E"+
		"\x3\x2\x2\x2\x77F\x77D\x3\x2\x2\x2\x780\x781\a/\x2\x2\x781\x786\x5\xA6"+
		"T\x2\x782\x783\a\x10B\x2\x2\x783\x785\x5\xA6T\x2\x784\x782\x3\x2\x2\x2"+
		"\x785\x788\x3\x2\x2\x2\x786\x784\x3\x2\x2\x2\x786\x787\x3\x2\x2\x2\x787"+
		"\x78B\x3\x2\x2\x2\x788\x786\x3\x2\x2\x2\x789\x78A\a\x6\x2\x2\x78A\x78C"+
		"\x5\xD8m\x2\x78B\x789\x3\x2\x2\x2\x78B\x78C\x3\x2\x2\x2\x78C\x78E\x3\x2"+
		"\x2\x2\x78D\x776\x3\x2\x2\x2\x78D\x780\x3\x2\x2\x2\x78E\xA5\x3\x2\x2\x2"+
		"\x78F\x790\x5\x10A\x86\x2\x790\x791\t \x2\x2\x791\x792\x5\xB2Z\x2\x792"+
		"\xA7\x3\x2\x2\x2\x793\x795\a/\x2\x2\x794\x796\a\x43\x2\x2\x795\x794\x3"+
		"\x2\x2\x2\x795\x796\x3\x2\x2\x2\x796\x797\x3\x2\x2\x2\x797\x79C\x5\xAA"+
		"V\x2\x798\x799\a\x10B\x2\x2\x799\x79B\x5\xAAV\x2\x79A\x798\x3\x2\x2\x2"+
		"\x79B\x79E\x3\x2\x2\x2\x79C\x79A\x3\x2\x2\x2\x79C\x79D\x3\x2\x2\x2\x79D"+
		"\x79F\x3\x2\x2\x2\x79E\x79C\x3\x2\x2\x2\x79F\x7A0\x5\f\a\x2\x7A0\x7E6"+
		"\x3\x2\x2\x2\x7A1\x7A2\a\x43\x2\x2\x7A2\x7A3\a/\x2\x2\x7A3\x7A8\x5\xAA"+
		"V\x2\x7A4\x7A5\a\x10B\x2\x2\x7A5\x7A7\x5\xAAV\x2\x7A6\x7A4\x3\x2\x2\x2"+
		"\x7A7\x7AA\x3\x2\x2\x2\x7A8\x7A6\x3\x2\x2\x2\x7A8\x7A9\x3\x2\x2\x2\x7A9"+
		"\x7AB\x3\x2\x2\x2\x7AA\x7A8\x3\x2\x2\x2\x7AB\x7AC\x5\f\a\x2\x7AC\x7E6"+
		"\x3\x2\x2\x2\x7AD\x7AE\x6U\f\x2\x7AE\x7AF\a\x43\x2\x2\x7AF\x7B4\x5\xAA"+
		"V\x2\x7B0\x7B1\a\x10B\x2\x2\x7B1\x7B3\x5\xAAV\x2\x7B2\x7B0\x3\x2\x2\x2"+
		"\x7B3\x7B6\x3\x2\x2\x2\x7B4\x7B2\x3\x2\x2\x2\x7B4\x7B5\x3\x2\x2\x2\x7B5"+
		"\x7B7\x3\x2\x2\x2\x7B6\x7B4\x3\x2\x2\x2\x7B7\x7B8\x5\f\a\x2\x7B8\x7E6"+
		"\x3\x2\x2\x2\x7B9\x7BB\a\x43\x2\x2\x7BA\x7B9\x3\x2\x2\x2\x7BA\x7BB\x3"+
		"\x2\x2\x2\x7BB\x7BC\x3\x2\x2\x2\x7BC\x7BD\a\x97\x2\x2\x7BD\x7C2\x5\xAC"+
		"W\x2\x7BE\x7BF\a\x10B\x2\x2\x7BF\x7C1\x5\xACW\x2\x7C0\x7BE\x3\x2\x2\x2"+
		"\x7C1\x7C4\x3\x2\x2\x2\x7C2\x7C0\x3\x2\x2\x2\x7C2\x7C3\x3\x2\x2\x2\x7C3"+
		"\x7C5\x3\x2\x2\x2\x7C4\x7C2\x3\x2\x2\x2\x7C5\x7C6\x5\f\a\x2\x7C6\x7E6"+
		"\x3\x2\x2\x2\x7C7\x7C9\a\x43\x2\x2\x7C8\x7CA\a/\x2\x2\x7C9\x7C8\x3\x2"+
		"\x2\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7CB\x3\x2\x2\x2\x7CB\x7CC\a\x63\x2"+
		"\x2\x7CC\x7D1\x5\xACW\x2\x7CD\x7CE\a\x10B\x2\x2\x7CE\x7D0\x5\xACW\x2\x7CF"+
		"\x7CD\x3\x2\x2\x2\x7D0\x7D3\x3\x2\x2\x2\x7D1\x7CF\x3\x2\x2\x2\x7D1\x7D2"+
		"\x3\x2\x2\x2\x7D2\x7D4\x3\x2\x2\x2\x7D3\x7D1\x3\x2\x2\x2\x7D4\x7D5\x5"+
		"\f\a\x2\x7D5\x7E6\x3\x2\x2\x2\x7D6\x7D8\a/\x2\x2\x7D7\x7D9\a\x43\x2\x2"+
		"\x7D8\x7D7\x3\x2\x2\x2\x7D8\x7D9\x3\x2\x2\x2\x7D9\x7DA\x3\x2\x2\x2\x7DA"+
		"\x7DB\a\x63\x2\x2\x7DB\x7E0\x5\xACW\x2\x7DC\x7DD\a\x10B\x2\x2\x7DD\x7DF"+
		"\x5\xACW\x2\x7DE\x7DC\x3\x2\x2\x2\x7DF\x7E2\x3\x2\x2\x2\x7E0\x7DE\x3\x2"+
		"\x2\x2\x7E0\x7E1\x3\x2\x2\x2\x7E1\x7E3\x3\x2\x2\x2\x7E2\x7E0\x3\x2\x2"+
		"\x2\x7E3\x7E4\x5\f\a\x2\x7E4\x7E6\x3\x2\x2\x2\x7E5\x793\x3\x2\x2\x2\x7E5"+
		"\x7A1\x3\x2\x2\x2\x7E5\x7AD\x3\x2\x2\x2\x7E5\x7BA\x3\x2\x2\x2\x7E5\x7C7"+
		"\x3\x2\x2\x2\x7E5\x7D6\x3\x2\x2\x2\x7E6\xA9\x3\x2\x2\x2\x7E7\x7E9\aX\x2"+
		"\x2\x7E8\x7E7\x3\x2\x2\x2\x7E8\x7E9\x3\x2\x2\x2\x7E9\x7EB\x3\x2\x2\x2"+
		"\x7EA\x7EC\a\x12\x2\x2\x7EB\x7EA\x3\x2\x2\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC"+
		"\x7ED\x3\x2\x2\x2\x7ED\x7F2\x5\x10A\x86\x2\x7EE\x7EF\a\x108\x2\x2\x7EF"+
		"\x7F0\x5\x64\x33\x2\x7F0\x7F1\a\x109\x2\x2\x7F1\x7F3\x3\x2\x2\x2\x7F2"+
		"\x7EE\x3\x2\x2\x2\x7F2\x7F3\x3\x2\x2\x2\x7F3\x7F6\x3\x2\x2\x2\x7F4\x7F5"+
		"\a\xF4\x2\x2\x7F5\x7F7\x5\xB2Z\x2\x7F6\x7F4\x3\x2\x2\x2\x7F6\x7F7\x3\x2"+
		"\x2\x2\x7F7\x7FA\x3\x2\x2\x2\x7F8\x7F9\t\n\x2\x2\x7F9\x7FB\x5\xD8m\x2"+
		"\x7FA\x7F8\x3\x2\x2\x2\x7FA\x7FB\x3\x2\x2\x2\x7FB\xAB\x3\x2\x2\x2\x7FC"+
		"\x7FE\aX\x2\x2\x7FD\x7FC\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2\x2\x7FE\x7FF\x3"+
		"\x2\x2\x2\x7FF\x800\x5\x10A\x86\x2\x800\x801\t \x2\x2\x801\x802\x5\xB2"+
		"Z\x2\x802\xAD\x3\x2\x2\x2\x803\x804\a \x2\x2\x804\x809\x5\xD6l\x2\x805"+
		"\x806\a\x10B\x2\x2\x806\x808\x5\xD6l\x2\x807\x805\x3\x2\x2\x2\x808\x80B"+
		"\x3\x2\x2\x2\x809\x807\x3\x2\x2\x2\x809\x80A\x3\x2\x2\x2\x80A\x80E\x3"+
		"\x2\x2\x2\x80B\x809\x3\x2\x2\x2\x80C\x80D\a.\x2\x2\x80D\x80F\x5\xD6l\x2"+
		"\x80E\x80C\x3\x2\x2\x2\x80E\x80F\x3\x2\x2\x2\x80F\x810\x3\x2\x2\x2\x810"+
		"\x811\x5\f\a\x2\x811\xAF\x3\x2\x2\x2\x812\x813\t&\x2\x2\x813\x818\x5\xD6"+
		"l\x2\x814\x815\a\x10B\x2\x2\x815\x817\x5\xD6l\x2\x816\x814\x3\x2\x2\x2"+
		"\x817\x81A\x3\x2\x2\x2\x818\x816\x3\x2\x2\x2\x818\x819\x3\x2\x2\x2\x819"+
		"\x81B\x3\x2\x2\x2\x81A\x818\x3\x2\x2\x2\x81B\x81C\x5\f\a\x2\x81C\xB1\x3"+
		"\x2\x2\x2\x81D\x81E\bZ\x1\x2\x81E\x81F\a\x111\x2\x2\x81F\x82D\x5\xD2j"+
		"\x2\x820\x821\a\x104\x2\x2\x821\x822\x5\xD8m\x2\x822\x823\a\x105\x2\x2"+
		"\x823\x824\x5\xB2Z\x18\x824\x82D\x3\x2\x2\x2\x825\x826\a\x7F\x2\x2\x826"+
		"\x82D\x5\xB2Z\x16\x827\x828\t\'\x2\x2\x828\x82D\x5\xB2Z\x15\x829\x82A"+
		"\t(\x2\x2\x82A\x82D\x5\xB2Z\t\x82B\x82D\x5\xB4[\x2\x82C\x81D\x3\x2\x2"+
		"\x2\x82C\x820\x3\x2\x2\x2\x82C\x825\x3\x2\x2\x2\x82C\x827\x3\x2\x2\x2"+
		"\x82C\x829\x3\x2\x2\x2\x82C\x82B\x3\x2\x2\x2\x82D\x881\x3\x2\x2\x2\x82E"+
		"\x82F\f\x12\x2\x2\x82F\x830\a\xE6\x2\x2\x830\x880\x5\xB2Z\x13\x831\x832"+
		"\f\x11\x2\x2\x832\x833\t)\x2\x2\x833\x880\x5\xB2Z\x12\x834\x835\f\x10"+
		"\x2\x2\x835\x836\t*\x2\x2\x836\x880\x5\xB2Z\x11\x837\x838\f\xF\x2\x2\x838"+
		"\x839\a\xE7\x2\x2\x839\x880\x5\xB2Z\x10\x83A\x83B\f\xE\x2\x2\x83B\x83C"+
		"\a\xD9\x2\x2\x83C\x83D\a\xD9\x2\x2\x83D\x880\x5\xB2Z\xF\x83E\x83F\f\r"+
		"\x2\x2\x83F\x840\t+\x2\x2\x840\x880\x5\xB2Z\xE\x841\x842\f\f\x2\x2\x842"+
		"\x843\a\x10D\x2\x2\x843\x880\x5\xB2Z\r\x844\x845\f\v\x2\x2\x845\x846\a"+
		"\xE9\x2\x2\x846\x880\x5\xB2Z\f\x847\x848\f\n\x2\x2\x848\x849\a\x10C\x2"+
		"\x2\x849\x880\x5\xB2Z\v\x84A\x84B\f\b\x2\x2\x84B\x84C\t,\x2\x2\x84C\x880"+
		"\x5\xB2Z\t\x84D\x84E\f\a\x2\x2\x84E\x84F\a\x103\x2\x2\x84F\x880\x5\xB2"+
		"Z\b\x850\x851\f\x6\x2\x2\x851\x852\t-\x2\x2\x852\x880\x5\xB2Z\a\x853\x854"+
		"\f\x5\x2\x2\x854\x855\aY\x2\x2\x855\x880\x5\xB2Z\x6\x856\x857\f\x4\x2"+
		"\x2\x857\x858\t.\x2\x2\x858\x880\x5\xB2Z\x4\x859\x85A\f \x2\x2\x85A\x85B"+
		"\t/\x2\x2\x85B\x880\x5\xD2j\x2\x85C\x85D\f\x1E\x2\x2\x85D\x85E\t/\x2\x2"+
		"\x85E\x85F\a\x10D\x2\x2\x85F\x860\a\x104\x2\x2\x860\x861\x5\xB2Z\x2\x861"+
		"\x862\a\x105\x2\x2\x862\x880\x3\x2\x2\x2\x863\x864\f\x1D\x2\x2\x864\x865"+
		"\t/\x2\x2\x865\x866\a\x10D\x2\x2\x866\x880\x5\xD6l\x2\x867\x868\f\x1C"+
		"\x2\x2\x868\x869\a\x104\x2\x2\x869\x880\a\x105\x2\x2\x86A\x86B\f\x1B\x2"+
		"\x2\x86B\x86C\a\x104\x2\x2\x86C\x86D\x5\xC6\x64\x2\x86D\x86E\a\x105\x2"+
		"\x2\x86E\x880\x3\x2\x2\x2\x86F\x870\f\x1A\x2\x2\x870\x871\a\x108\x2\x2"+
		"\x871\x872\x5\xC2\x62\x2\x872\x873\a\x109\x2\x2\x873\x880\x3\x2\x2\x2"+
		"\x874\x875\f\x19\x2\x2\x875\x876\a\xEC\x2\x2\x876\x880\x5\xB6\\\x2\x877"+
		"\x878\f\x17\x2\x2\x878\x880\t\x30\x2\x2\x879\x87A\f\x14\x2\x2\x87A\x87B"+
		"\a-\x2\x2\x87B\x880\x5\xD8m\x2\x87C\x87D\f\x13\x2\x2\x87D\x87E\a~\x2\x2"+
		"\x87E\x880\x5\xD8m\x2\x87F\x82E\x3\x2\x2\x2\x87F\x831\x3\x2\x2\x2\x87F"+
		"\x834\x3\x2\x2\x2\x87F\x837\x3\x2\x2\x2\x87F\x83A\x3\x2\x2\x2\x87F\x83E"+
		"\x3\x2\x2\x2\x87F\x841\x3\x2\x2\x2\x87F\x844\x3\x2\x2\x2\x87F\x847\x3"+
		"\x2\x2\x2\x87F\x84A\x3\x2\x2\x2\x87F\x84D\x3\x2\x2\x2\x87F\x850\x3\x2"+
		"\x2\x2\x87F\x853\x3\x2\x2\x2\x87F\x856\x3\x2\x2\x2\x87F\x859\x3\x2\x2"+
		"\x2\x87F\x85C\x3\x2\x2\x2\x87F\x863\x3\x2\x2\x2\x87F\x867\x3\x2\x2\x2"+
		"\x87F\x86A\x3\x2\x2\x2\x87F\x86F\x3\x2\x2\x2\x87F\x874\x3\x2\x2\x2\x87F"+
		"\x877\x3\x2\x2\x2\x87F\x879\x3\x2\x2\x2\x87F\x87C\x3\x2\x2\x2\x880\x883"+
		"\x3\x2\x2\x2\x881\x87F\x3\x2\x2\x2\x881\x882\x3\x2\x2\x2\x882\xB3\x3\x2"+
		"\x2\x2\x883\x881\x3\x2\x2\x2\x884\x930\a@\x2\x2\x885\x930\a\x46\x2\x2"+
		"\x886\x930\x5\x112\x8A\x2\x887\x930\x5\xE0q\x2\x888\x930\x5\xE4s\x2\x889"+
		"\x930\x5\xE8u\x2\x88A\x930\x5\xF2z\x2\x88B\x930\x5\xFA~\x2\x88C\x88D\x5"+
		"\xD8m\x2\x88D\x88E\a\x106\x2\x2\x88E\x88F\x5\xB2Z\x2\x88F\x890\a\x10B"+
		"\x2\x2\x890\x891\a\x10E\x2\x2\x891\x892\x5\xCEh\x2\x892\x893\a\x104\x2"+
		"\x2\x893\x894\a\x105\x2\x2\x894\x895\a\x107\x2\x2\x895\x930\x3\x2\x2\x2"+
		"\x896\x897\x5\xD8m\x2\x897\x898\a\x106\x2\x2\x898\x89A\a\x107\x2\x2\x899"+
		"\x89B\x5\xB8]\x2\x89A\x899\x3\x2\x2\x2\x89A\x89B\x3\x2\x2\x2\x89B\x930"+
		"\x3\x2\x2\x2\x89C\x89D\x5\xD8m\x2\x89D\x89E\a\x106\x2\x2\x89E\x89F\x5"+
		"\xC6\x64\x2\x89F\x8A1\a\x107\x2\x2\x8A0\x8A2\x5\xB8]\x2\x8A1\x8A0\x3\x2"+
		"\x2\x2\x8A1\x8A2\x3\x2\x2\x2\x8A2\x930\x3\x2\x2\x2\x8A3\x8A4\a\x81\x2"+
		"\x2\x8A4\x8A5\a\x104\x2\x2\x8A5\x8A6\x5\xB2Z\x2\x8A6\x8A7\a\x105\x2\x2"+
		"\x8A7\x930\x3\x2\x2\x2\x8A8\x8A9\a\x95\x2\x2\x8A9\x8AA\a\x104\x2\x2\x8AA"+
		"\x8AB\x5\xB2Z\x2\x8AB\x8AC\a\x105\x2\x2\x8AC\x930\x3\x2\x2\x2\x8AD\x8AE"+
		"\aI\x2\x2\x8AE\x8AF\a\x104\x2\x2\x8AF\x8B0\x5\xD8m\x2\x8B0\x8B1\a\x105"+
		"\x2\x2\x8B1\x930\x3\x2\x2\x2\x8B2\x8B3\a\x42\x2\x2\x8B3\x8B4\a\x104\x2"+
		"\x2\x8B4\x8B5\x5\xD8m\x2\x8B5\x8B6\a\x105\x2\x2\x8B6\x930\x3\x2\x2\x2"+
		"\x8B7\x8B8\aY\x2\x2\x8B8\x8B9\a\x104\x2\x2\x8B9\x8BA\x5\xD8m\x2\x8BA\x8BB"+
		"\a\x105\x2\x2\x8BB\x930\x3\x2\x2\x2\x8BC\x930\x5\xD2j\x2\x8BD\x8BE\x5"+
		"\x110\x89\x2\x8BE\x8BF\a\x104\x2\x2\x8BF\x8C0\x5\xB2Z\x2\x8C0\x8C1\a\x105"+
		"\x2\x2\x8C1\x930\x3\x2\x2\x2\x8C2\x8C3\x5\x10E\x88\x2\x8C3\x8C4\a\x104"+
		"\x2\x2\x8C4\x8C5\x5\xB2Z\x2\x8C5\x8C6\a\x105\x2\x2\x8C6\x930\x3\x2\x2"+
		"\x2\x8C7\x8C8\x5\x110\x89\x2\x8C8\x8C9\a\x104\x2\x2\x8C9\x8CA\a\r\x2\x2"+
		"\x8CA\x8CB\a\x10B\x2\x2\x8CB\x8CC\x5\xB2Z\x2\x8CC\x8CD\a\x105\x2\x2\x8CD"+
		"\x930\x3\x2\x2\x2\x8CE\x8CF\x5\x10E\x88\x2\x8CF\x8D0\a\x104\x2\x2\x8D0"+
		"\x8D1\a\r\x2\x2\x8D1\x8D2\a\x10B\x2\x2\x8D2\x8D3\x5\xB2Z\x2\x8D3\x8D4"+
		"\a\x105\x2\x2\x8D4\x930\x3\x2\x2\x2\x8D5\x8D6\aV\x2\x2\x8D6\x8D7\a\x104"+
		"\x2\x2\x8D7\x8D8\x5\x110\x89\x2\x8D8\x8D9\a\x10B\x2\x2\x8D9\x8DA\x5\xB2"+
		"Z\x2\x8DA\x8DB\a\x105\x2\x2\x8DB\x930\x3\x2\x2\x2\x8DC\x8DD\aV\x2\x2\x8DD"+
		"\x8DE\a\x104\x2\x2\x8DE\x8DF\x5\x10E\x88\x2\x8DF\x8E0\a\x10B\x2\x2\x8E0"+
		"\x8E1\x5\xB2Z\x2\x8E1\x8E2\a\x105\x2\x2\x8E2\x930\x3\x2\x2\x2\x8E3\x8E4"+
		"\a\xA8\x2\x2\x8E4\x8E5\a\x104\x2\x2\x8E5\x8E6\x5\xD8m\x2\x8E6\x8E7\a\x10B"+
		"\x2\x2\x8E7\x8E8\x5\xB2Z\x2\x8E8\x8E9\a\x105\x2\x2\x8E9\x930\x3\x2\x2"+
		"\x2\x8EA\x930\x5\xDEp\x2\x8EB\x930\x5\xDCo\x2\x8EC\x930\x5\xCA\x66\x2"+
		"\x8ED\x8EE\t\x31\x2\x2\x8EE\x8EF\a\x104\x2\x2\x8EF\x8F4\x5\xB2Z\x2\x8F0"+
		"\x8F1\a\x10B\x2\x2\x8F1\x8F3\x5\xB2Z\x2\x8F2\x8F0\x3\x2\x2\x2\x8F3\x8F6"+
		"\x3\x2\x2\x2\x8F4\x8F2\x3\x2\x2\x2\x8F4\x8F5\x3\x2\x2\x2\x8F5\x8F7\x3"+
		"\x2\x2\x2\x8F6\x8F4\x3\x2\x2\x2\x8F7\x8F8\a\x105\x2\x2\x8F8\x930\x3\x2"+
		"\x2\x2\x8F9\x8FA\a \x2\x2\x8FA\x8FE\a\x10F\x2\x2\x8FB\x8FC\x5\x10A\x86"+
		"\x2\x8FC\x8FD\a\x10F\x2\x2\x8FD\x8FF\x3\x2\x2\x2\x8FE\x8FB\x3\x2\x2\x2"+
		"\x8FE\x8FF\x3\x2\x2\x2\x8FF\x900\x3\x2\x2\x2\x900\x930\x5\x10A\x86\x2"+
		"\x901\x902\a \x2\x2\x902\x906\a\x10F\x2\x2\x903\x904\x5\x10A\x86\x2\x904"+
		"\x905\a\x10F\x2\x2\x905\x907\x3\x2\x2\x2\x906\x903\x3\x2\x2\x2\x906\x907"+
		"\x3\x2\x2\x2\x907\x908\x3\x2\x2\x2\x908\x909\a\x10D\x2\x2\x909\x930\x5"+
		"\xB2Z\x2\x90A\x90B\a\x32\x2\x2\x90B\x90C\a\x10F\x2\x2\x90C\x930\x5\x10A"+
		"\x86\x2\x90D\x90E\x6[%\x2\x90E\x90F\x5\x10A\x86\x2\x90F\x910\a\x10F\x2"+
		"\x2\x910\x911\x5\x10A\x86\x2\x911\x930\x3\x2\x2\x2\x912\x913\x5\x10A\x86"+
		"\x2\x913\x914\a\x10F\x2\x2\x914\x915\x5\xB2Z\x2\x915\x930\x3\x2\x2\x2"+
		"\x916\x917\a\x104\x2\x2\x917\x918\x5\xB2Z\x2\x918\x919\a\x105\x2\x2\x919"+
		"\x91A\a\x10F\x2\x2\x91A\x91B\x5\xB2Z\x2\x91B\x930\x3\x2\x2\x2\x91C\x91D"+
		"\a\x10D\x2\x2\x91D\x91E\a\x104\x2\x2\x91E\x91F\x5\xB2Z\x2\x91F\x920\a"+
		"\x105\x2\x2\x920\x930\x3\x2\x2\x2\x921\x922\a\x10D\x2\x2\x922\x930\x5"+
		"\xD6l\x2\x923\x924\a\x104\x2\x2\x924\x929\x5\xB2Z\x2\x925\x926\a\x10B"+
		"\x2\x2\x926\x928\x5\xB2Z\x2\x927\x925\x3\x2\x2\x2\x928\x92B\x3\x2\x2\x2"+
		"\x929\x927\x3\x2\x2\x2\x929\x92A\x3\x2\x2\x2\x92A\x92C\x3\x2\x2\x2\x92B"+
		"\x929\x3\x2\x2\x2\x92C\x92D\a\x105\x2\x2\x92D\x930\x3\x2\x2\x2\x92E\x930"+
		"\az\x2\x2\x92F\x884\x3\x2\x2\x2\x92F\x885\x3\x2\x2\x2\x92F\x886\x3\x2"+
		"\x2\x2\x92F\x887\x3\x2\x2\x2\x92F\x888\x3\x2\x2\x2\x92F\x889\x3\x2\x2"+
		"\x2\x92F\x88A\x3\x2\x2\x2\x92F\x88B\x3\x2\x2\x2\x92F\x88C\x3\x2\x2\x2"+
		"\x92F\x896\x3\x2\x2\x2\x92F\x89C\x3\x2\x2\x2\x92F\x8A3\x3\x2\x2\x2\x92F"+
		"\x8A8\x3\x2\x2\x2\x92F\x8AD\x3\x2\x2\x2\x92F\x8B2\x3\x2\x2\x2\x92F\x8B7"+
		"\x3\x2\x2\x2\x92F\x8BC\x3\x2\x2\x2\x92F\x8BD\x3\x2\x2\x2\x92F\x8C2\x3"+
		"\x2\x2\x2\x92F\x8C7\x3\x2\x2\x2\x92F\x8CE\x3\x2\x2\x2\x92F\x8D5\x3\x2"+
		"\x2\x2\x92F\x8DC\x3\x2\x2\x2\x92F\x8E3\x3\x2\x2\x2\x92F\x8EA\x3\x2\x2"+
		"\x2\x92F\x8EB\x3\x2\x2\x2\x92F\x8EC\x3\x2\x2\x2\x92F\x8ED\x3\x2\x2\x2"+
		"\x92F\x8F9\x3\x2\x2\x2\x92F\x901\x3\x2\x2\x2\x92F\x90A\x3\x2\x2\x2\x92F"+
		"\x90D\x3\x2\x2\x2\x92F\x912\x3\x2\x2\x2\x92F\x916\x3\x2\x2\x2\x92F\x91C"+
		"\x3\x2\x2\x2\x92F\x921\x3\x2\x2\x2\x92F\x923\x3\x2\x2\x2\x92F\x92E\x3"+
		"\x2\x2\x2\x930\xB5\x3\x2\x2\x2\x931\x932\b\\\x1\x2\x932\x933\t/\x2\x2"+
		"\x933\x939\x5\xD2j\x2\x934\x935\a\x108\x2\x2\x935\x936\x5\xC2\x62\x2\x936"+
		"\x937\a\x109\x2\x2\x937\x939\x3\x2\x2\x2\x938\x931\x3\x2\x2\x2\x938\x934"+
		"\x3\x2\x2\x2\x939\x94F\x3\x2\x2\x2\x93A\x93B\f\x5\x2\x2\x93B\x93C\a\xEC"+
		"\x2\x2\x93C\x94E\x5\xB6\\\x5\x93D\x93E\f\t\x2\x2\x93E\x93F\t/\x2\x2\x93F"+
		"\x94E\x5\xD2j\x2\x940\x941\f\b\x2\x2\x941\x942\a\x104\x2\x2\x942\x94E"+
		"\a\x105\x2\x2\x943\x944\f\a\x2\x2\x944\x945\a\x104\x2\x2\x945\x946\x5"+
		"\xC6\x64\x2\x946\x947\a\x105\x2\x2\x947\x94E\x3\x2\x2\x2\x948\x949\f\x6"+
		"\x2\x2\x949\x94A\a\x108\x2\x2\x94A\x94B\x5\xC2\x62\x2\x94B\x94C\a\x109"+
		"\x2\x2\x94C\x94E\x3\x2\x2\x2\x94D\x93A\x3\x2\x2\x2\x94D\x93D\x3\x2\x2"+
		"\x2\x94D\x940\x3\x2\x2\x2\x94D\x943\x3\x2\x2\x2\x94D\x948\x3\x2\x2\x2"+
		"\x94E\x951\x3\x2\x2\x2\x94F\x94D\x3\x2\x2\x2\x94F\x950\x3\x2\x2\x2\x950"+
		"\xB7\x3\x2\x2\x2\x951\x94F\x3\x2\x2\x2\x952\x955\x5\xBA^\x2\x953\x955"+
		"\x5\xC0\x61\x2\x954\x952\x3\x2\x2\x2\x954\x953\x3\x2\x2\x2\x955\xB9\x3"+
		"\x2\x2\x2\x956\x95F\a\x106\x2\x2\x957\x95C\x5\xBC_\x2\x958\x959\a\x10B"+
		"\x2\x2\x959\x95B\x5\xBC_\x2\x95A\x958\x3\x2\x2\x2\x95B\x95E\x3\x2\x2\x2"+
		"\x95C\x95A\x3\x2\x2\x2\x95C\x95D\x3\x2\x2\x2\x95D\x960\x3\x2\x2\x2\x95E"+
		"\x95C\x3\x2\x2\x2\x95F\x957\x3\x2\x2\x2\x95F\x960\x3\x2\x2\x2\x960\x961"+
		"\x3\x2\x2\x2\x961\x962\a\x107\x2\x2\x962\xBB\x3\x2\x2\x2\x963\x964\x5"+
		"\xD6l\x2\x964\x965\a\xF4\x2\x2\x965\x966\x5\xBE`\x2\x966\xBD\x3\x2\x2"+
		"\x2\x967\x96A\x5\xB8]\x2\x968\x96A\x5\xB2Z\x2\x969\x967\x3\x2\x2\x2\x969"+
		"\x968\x3\x2\x2\x2\x96A\xBF\x3\x2\x2\x2\x96B\x96C\a\x106\x2\x2\x96C\x971"+
		"\x5\xB2Z\x2\x96D\x96E\a\x10B\x2\x2\x96E\x970\x5\xB2Z\x2\x96F\x96D\x3\x2"+
		"\x2\x2\x970\x973\x3\x2\x2\x2\x971\x96F\x3\x2\x2\x2\x971\x972\x3\x2\x2"+
		"\x2\x972\x974\x3\x2\x2\x2\x973\x971\x3\x2\x2\x2\x974\x975\a\x107\x2\x2"+
		"\x975\xC1\x3\x2\x2\x2\x976\x97B\x5\xC4\x63\x2\x977\x978\a\x10B\x2\x2\x978"+
		"\x97A\x5\xC4\x63\x2\x979\x977\x3\x2\x2\x2\x97A\x97D\x3\x2\x2\x2\x97B\x979"+
		"\x3\x2\x2\x2\x97B\x97C\x3\x2\x2\x2\x97C\xC3\x3\x2\x2\x2\x97D\x97B\x3\x2"+
		"\x2\x2\x97E\x980\x5\xB2Z\x2\x97F\x97E\x3\x2\x2\x2\x97F\x980\x3\x2\x2\x2"+
		"\x980\xC5\x3\x2\x2\x2\x981\x986\x5\xC8\x65\x2\x982\x983\a\x10B\x2\x2\x983"+
		"\x985\x5\xC8\x65\x2\x984\x982\x3\x2\x2\x2\x985\x988\x3\x2\x2\x2\x986\x984"+
		"\x3\x2\x2\x2\x986\x987\x3\x2\x2\x2\x987\xC7\x3\x2\x2\x2\x988\x986\x3\x2"+
		"\x2\x2\x989\x98A\x6\x65+\x2\x98A\x98B\x5\xD6l\x2\x98B\x98D\a\xF4\x2\x2"+
		"\x98C\x98E\t\x32\x2\x2\x98D\x98C\x3\x2\x2\x2\x98D\x98E\x3\x2\x2\x2\x98E"+
		"\x990\x3\x2\x2\x2\x98F\x991\x5\xB2Z\x2\x990\x98F\x3\x2\x2\x2\x990\x991"+
		"\x3\x2\x2\x2\x991\x999\x3\x2\x2\x2\x992\x994\t\x32\x2\x2\x993\x992\x3"+
		"\x2\x2\x2\x993\x994\x3\x2\x2\x2\x994\x996\x3\x2\x2\x2\x995\x997\x5\xB2"+
		"Z\x2\x996\x995\x3\x2\x2\x2\x996\x997\x3\x2\x2\x2\x997\x999\x3\x2\x2\x2"+
		"\x998\x989\x3\x2\x2\x2\x998\x993\x3\x2\x2\x2\x999\xC9\x3\x2\x2\x2\x99A"+
		"\x99B\t\x33\x2\x2\x99B\x99C\a\x104\x2\x2\x99C\x99D\x5\xB2Z\x2\x99D\x99F"+
		"\a\x10B\x2\x2\x99E\x9A0\x5\xB2Z\x2\x99F\x99E\x3\x2\x2\x2\x99F\x9A0\x3"+
		"\x2\x2\x2\x9A0\x9A1\x3\x2\x2\x2\x9A1\x9A3\a\x10B\x2\x2\x9A2\x9A4\x5\xB2"+
		"Z\x2\x9A3\x9A2\x3\x2\x2\x2\x9A3\x9A4\x3\x2\x2\x2\x9A4\x9A5\x3\x2\x2\x2"+
		"\x9A5\x9A6\a\x105\x2\x2\x9A6\xCB\x3\x2\x2\x2\x9A7\x9A8\bg\x1\x2\x9A8\x9A9"+
		"\x5\xD0i\x2\x9A9\x9AA\a\x110\x2\x2\x9AA\x9B1\x3\x2\x2\x2\x9AB\x9AC\f\x4"+
		"\x2\x2\x9AC\x9AD\x5\xD2j\x2\x9AD\x9AE\a\x110\x2\x2\x9AE\x9B0\x3\x2\x2"+
		"\x2\x9AF\x9AB\x3\x2\x2\x2\x9B0\x9B3\x3\x2\x2\x2\x9B1\x9AF\x3\x2\x2\x2"+
		"\x9B1\x9B2\x3\x2\x2\x2\x9B2\xCD\x3\x2\x2\x2\x9B3\x9B1\x3\x2\x2\x2\x9B4"+
		"\x9B5\bh\x1\x2\x9B5\x9B6\x5\xD0i\x2\x9B6\x9BC\x3\x2\x2\x2\x9B7\x9B8\f"+
		"\x4\x2\x2\x9B8\x9B9\a\x110\x2\x2\x9B9\x9BB\x5\xD2j\x2\x9BA\x9B7\x3\x2"+
		"\x2\x2\x9BB\x9BE\x3\x2\x2\x2\x9BC\x9BA\x3\x2\x2\x2\x9BC\x9BD\x3\x2\x2"+
		"\x2\x9BD\xCF\x3\x2\x2\x2\x9BE\x9BC\x3\x2\x2\x2\x9BF\x9C0\a$\x2\x2\x9C0"+
		"\x9C1\a\x111\x2\x2\x9C1\x9C8\x5\xD2j\x2\x9C2\x9C3\x5\xD6l\x2\x9C3\x9C4"+
		"\a\x111\x2\x2\x9C4\x9C5\x5\xD2j\x2\x9C5\x9C8\x3\x2\x2\x2\x9C6\x9C8\x5"+
		"\xD2j\x2\x9C7\x9BF\x3\x2\x2\x2\x9C7\x9C2\x3\x2\x2\x2\x9C7\x9C6\x3\x2\x2"+
		"\x2\x9C8\xD1\x3\x2\x2\x2\x9C9\x9CB\x5\x10A\x86\x2\x9CA\x9CC\x5\xD4k\x2"+
		"\x9CB\x9CA\x3\x2\x2\x2\x9CB\x9CC\x3\x2\x2\x2\x9CC\xD3\x3\x2\x2\x2\x9CD"+
		"\x9CE\a\xD7\x2\x2\x9CE\x9D3\x5\xD8m\x2\x9CF\x9D0\a\x10B\x2\x2\x9D0\x9D2"+
		"\x5\xD8m\x2\x9D1\x9CF\x3\x2\x2\x2\x9D2\x9D5\x3\x2\x2\x2\x9D3\x9D1\x3\x2"+
		"\x2\x2\x9D3\x9D4\x3\x2\x2\x2\x9D4\x9D6\x3\x2\x2\x2\x9D5\x9D3\x3\x2\x2"+
		"\x2\x9D6\x9D7\a\xD9\x2\x2\x9D7\xD5\x3\x2\x2\x2\x9D8\x9D9\x5\x10A\x86\x2"+
		"\x9D9\xD7\x3\x2\x2\x2\x9DA\x9DB\a\x9D\x2\x2\x9DB\x9DC\a\x8D\x2\x2\x9DC"+
		"\x9EB\x5\xDCo\x2\x9DD\x9DE\x5\xDCo\x2\x9DE\x9DF\a\xA8\x2\x2\x9DF\x9EB"+
		"\x3\x2\x2\x2\x9E0\x9E2\x5\xDCo\x2\x9E1\x9E3\x5\xDAn\x2\x9E2\x9E1\x3\x2"+
		"\x2\x2\x9E3\x9E4\x3\x2\x2\x2\x9E4\x9E2\x3\x2\x2\x2\x9E4\x9E5\x3\x2\x2"+
		"\x2\x9E5\x9EB\x3\x2\x2\x2\x9E6\x9EB\x5\xDCo\x2\x9E7\x9E8\x5\xDCo\x2\x9E8"+
		"\x9E9\a\xEC\x2\x2\x9E9\x9EB\x3\x2\x2\x2\x9EA\x9DA\x3\x2\x2\x2\x9EA\x9DD"+
		"\x3\x2\x2\x2\x9EA\x9E0\x3\x2\x2\x2\x9EA\x9E6\x3\x2\x2\x2\x9EA\x9E7\x3"+
		"\x2\x2\x2\x9EB\xD9\x3\x2\x2\x2\x9EC\x9F0\a\x108\x2\x2\x9ED\x9EF\a\x10B"+
		"\x2\x2\x9EE\x9ED\x3\x2\x2\x2\x9EF\x9F2\x3\x2\x2\x2\x9F0\x9EE\x3\x2\x2"+
		"\x2\x9F0\x9F1\x3\x2\x2\x2\x9F1\x9F3\x3\x2\x2\x2\x9F2\x9F0\x3\x2\x2\x2"+
		"\x9F3\x9F4\a\x109\x2\x2\x9F4\xDB\x3\x2\x2\x2\x9F5\x9F9\x5\x110\x89\x2"+
		"\x9F6\x9F9\x5\x10E\x88\x2\x9F7\x9F9\x5\xCEh\x2\x9F8\x9F5\x3\x2\x2\x2\x9F8"+
		"\x9F6\x3\x2\x2\x2\x9F8\x9F7\x3\x2\x2\x2\x9F9\xDD\x3\x2\x2\x2\x9FA\x9FD"+
		"\x5\x110\x89\x2\x9FB\x9FD\x5\x10E\x88\x2\x9FC\x9FA\x3\x2\x2\x2\x9FC\x9FB"+
		"\x3\x2\x2\x2\x9FD\xDF\x3\x2\x2\x2\x9FE\x9FF\a\xD7\x2\x2\x9FF\xA00\x5\xD8"+
		"m\x2\xA00\xA01\a\xD9\x2\x2\xA01\xA03\x3\x2\x2\x2\xA02\x9FE\x3\x2\x2\x2"+
		"\xA02\xA03\x3\x2\x2\x2\xA03\xA04\x3\x2\x2\x2\xA04\xA05\a\x106\x2\x2\xA05"+
		"\xA18\a\x107\x2\x2\xA06\xA07\a\xD7\x2\x2\xA07\xA08\x5\xD8m\x2\xA08\xA09"+
		"\a\xD9\x2\x2\xA09\xA0B\x3\x2\x2\x2\xA0A\xA06\x3\x2\x2\x2\xA0A\xA0B\x3"+
		"\x2\x2\x2\xA0B\xA0C\x3\x2\x2\x2\xA0C\xA0D\a\x106\x2\x2\xA0D\xA12\x5\xE2"+
		"r\x2\xA0E\xA0F\a\x10B\x2\x2\xA0F\xA11\x5\xE2r\x2\xA10\xA0E\x3\x2\x2\x2"+
		"\xA11\xA14\x3\x2\x2\x2\xA12\xA10\x3\x2\x2\x2\xA12\xA13\x3\x2\x2\x2\xA13"+
		"\xA15\x3\x2\x2\x2\xA14\xA12\x3\x2\x2\x2\xA15\xA16\a\x107\x2\x2\xA16\xA18"+
		"\x3\x2\x2\x2\xA17\xA02\x3\x2\x2\x2\xA17\xA0A\x3\x2\x2\x2\xA18\xE1\x3\x2"+
		"\x2\x2\xA19\xA1B\x5\xB2Z\x2\xA1A\xA19\x3\x2\x2\x2\xA1A\xA1B\x3\x2\x2\x2"+
		"\xA1B\xE3\x3\x2\x2\x2\xA1C\xA1D\a\xE\x2\x2\xA1D\xA26\a\x106\x2\x2\xA1E"+
		"\xA23\x5\xE6t\x2\xA1F\xA20\a\x10B\x2\x2\xA20\xA22\x5\xE6t\x2\xA21\xA1F"+
		"\x3\x2\x2\x2\xA22\xA25\x3\x2\x2\x2\xA23\xA21\x3\x2\x2\x2\xA23\xA24\x3"+
		"\x2\x2\x2\xA24\xA27\x3\x2\x2\x2\xA25\xA23\x3\x2\x2\x2\xA26\xA1E\x3\x2"+
		"\x2\x2\xA26\xA27\x3\x2\x2\x2\xA27\xA28\x3\x2\x2\x2\xA28\xA29\a\x107\x2"+
		"\x2\xA29\xE5\x3\x2\x2\x2\xA2A\xA2B\x5\xD6l\x2\xA2B\xA2C\a\xF4\x2\x2\xA2C"+
		"\xA2D\x5\xB2Z\x2\xA2D\xA30\x3\x2\x2\x2\xA2E\xA30\x5\xB2Z\x2\xA2F\xA2A"+
		"\x3\x2\x2\x2\xA2F\xA2E\x3\x2\x2\x2\xA30\xE7\x3\x2\x2\x2\xA31\xA38\a\x106"+
		"\x2\x2\xA32\xA39\a\xEE\x2\x2\xA33\xA35\a\x10C\x2\x2\xA34\xA36\x5\xECw"+
		"\x2\xA35\xA34\x3\x2\x2\x2\xA35\xA36\x3\x2\x2\x2\xA36\xA37\x3\x2\x2\x2"+
		"\xA37\xA39\a\x10C\x2\x2\xA38\xA32\x3\x2\x2\x2\xA38\xA33\x3\x2\x2\x2\xA39"+
		"\xA3A\x3\x2\x2\x2\xA3A\xA3B\x5\xEAv\x2\xA3B\xA3C\a\x107\x2\x2\xA3C\xA4F"+
		"\x3\x2\x2\x2\xA3D\xA48\a\x106\x2\x2\xA3E\xA49\a\xEE\x2\x2\xA3F\xA41\a"+
		"\x10C\x2\x2\xA40\xA3F\x3\x2\x2\x2\xA40\xA41\x3\x2\x2\x2\xA41\xA43\x3\x2"+
		"\x2\x2\xA42\xA44\x5\xECw\x2\xA43\xA42\x3\x2\x2\x2\xA43\xA44\x3\x2\x2\x2"+
		"\xA44\xA46\x3\x2\x2\x2\xA45\xA47\a\x10C\x2\x2\xA46\xA45\x3\x2\x2\x2\xA46"+
		"\xA47\x3\x2\x2\x2\xA47\xA49\x3\x2\x2\x2\xA48\xA3E\x3\x2\x2\x2\xA48\xA40"+
		"\x3\x2\x2\x2\xA49\xA4A\x3\x2\x2\x2\xA4A\xA4B\a\x135\x2\x2\xA4B\xA4C\x5"+
		"\xEAv\x2\xA4C\xA4D\a\x107\x2\x2\xA4D\xA4F\x3\x2\x2\x2\xA4E\xA31\x3\x2"+
		"\x2\x2\xA4E\xA3D\x3\x2\x2\x2\xA4F\xE9\x3\x2\x2\x2\xA50\xA52\x5\xB2Z\x2"+
		"\xA51\xA50\x3\x2\x2\x2\xA51\xA52\x3\x2\x2\x2\xA52\xA58\x3\x2\x2\x2\xA53"+
		"\xA54\x5\f\a\x2\xA54\xA55\x5\x1E\x10\x2\xA55\xA58\x3\x2\x2\x2\xA56\xA58"+
		"\x5\xF0y\x2\xA57\xA51\x3\x2\x2\x2\xA57\xA53\x3\x2\x2\x2\xA57\xA56\x3\x2"+
		"\x2\x2\xA58\xEB\x3\x2\x2\x2\xA59\xA5C\x5\xEEx\x2\xA5A\xA5C\x5\xF4{\x2"+
		"\xA5B\xA59\x3\x2\x2\x2\xA5B\xA5A\x3\x2\x2\x2\xA5C\xED\x3\x2\x2\x2\xA5D"+
		"\xA62\x5\x10A\x86\x2\xA5E\xA5F\a\x10B\x2\x2\xA5F\xA61\x5\x10A\x86\x2\xA60"+
		"\xA5E\x3\x2\x2\x2\xA61\xA64\x3\x2\x2\x2\xA62\xA60\x3\x2\x2\x2\xA62\xA63"+
		"\x3\x2\x2\x2\xA63\xEF\x3\x2\x2\x2\xA64\xA62\x3\x2\x2\x2\xA65\xA67\x5\xB2"+
		"Z\x2\xA66\xA65\x3\x2\x2\x2\xA66\xA67\x3\x2\x2\x2\xA67\xA68\x3\x2\x2\x2"+
		"\xA68\xA6A\a\x10B\x2\x2\xA69\xA66\x3\x2\x2\x2\xA6A\xA6B\x3\x2\x2\x2\xA6B"+
		"\xA69\x3\x2\x2\x2\xA6B\xA6C\x3\x2\x2\x2\xA6C\xA6D\x3\x2\x2\x2\xA6D\xA6E"+
		"\x5\xB2Z\x2\xA6E\xF1\x3\x2\x2\x2\xA6F\xA71\a}\x2\x2\xA70\xA6F\x3\x2\x2"+
		"\x2\xA70\xA71\x3\x2\x2\x2\xA71\xA72\x3\x2\x2\x2\xA72\xA78\aZ\x2\x2\xA73"+
		"\xA75\a\x104\x2\x2\xA74\xA76\x5\xF4{\x2\xA75\xA74\x3\x2\x2\x2\xA75\xA76"+
		"\x3\x2\x2\x2\xA76\xA77\x3\x2\x2\x2\xA77\xA79\a\x105\x2\x2\xA78\xA73\x3"+
		"\x2\x2\x2\xA78\xA79\x3\x2\x2\x2\xA79\xA7A\x3\x2\x2\x2\xA7A\xA7B\a\x106"+
		"\x2\x2\xA7B\xA7C\x5\xEAv\x2\xA7C\xA7D\a\x107\x2\x2\xA7D\xF3\x3\x2\x2\x2"+
		"\xA7E\xA83\x5\xF6|\x2\xA7F\xA80\a\x10B\x2\x2\xA80\xA82\x5\xF6|\x2\xA81"+
		"\xA7F\x3\x2\x2\x2\xA82\xA85\x3\x2\x2\x2\xA83\xA81\x3\x2\x2\x2\xA83\xA84"+
		"\x3\x2\x2\x2\xA84\xF5\x3\x2\x2\x2\xA85\xA83\x3\x2\x2\x2\xA86\xA87\x5\x10A"+
		"\x86\x2\xA87\xA88\x5\xF8}\x2\xA88\xA89\x5\xD8m\x2\xA89\xF7\x3\x2\x2\x2"+
		"\xA8A\xA8B\t\x34\x2\x2\xA8B\xF9\x3\x2\x2\x2\xA8C\xA8D\x5\xFC\x7F\x2\xA8D"+
		"\xA8E\x5\xFE\x80\x2\xA8E\xFB\x3\x2\x2\x2\xA8F\xA90\a\x86\x2\x2\xA90\xA93"+
		"\x5\x10A\x86\x2\xA91\xA92\a\x6\x2\x2\xA92\xA94\x5\xDCo\x2\xA93\xA91\x3"+
		"\x2\x2\x2\xA93\xA94\x3\x2\x2\x2\xA94\xA95\x3\x2\x2\x2\xA95\xA96\a.\x2"+
		"\x2\xA96\xA97\x5\xB2Z\x2\xA97\xFD\x3\x2\x2\x2\xA98\xA9A\x5\x100\x81\x2"+
		"\xA99\xA98\x3\x2\x2\x2\xA9A\xA9D\x3\x2\x2\x2\xA9B\xA99\x3\x2\x2\x2\xA9B"+
		"\xA9C\x3\x2\x2\x2\xA9C\xA9E\x3\x2\x2\x2\xA9D\xA9B\x3\x2\x2\x2\xA9E\xAA0"+
		"\x5\x106\x84\x2\xA9F\xAA1\x5\x108\x85\x2\xAA0\xA9F\x3\x2\x2\x2\xAA0\xAA1"+
		"\x3\x2\x2\x2\xAA1\xFF\x3\x2\x2\x2\xAA2\xAC3\x5\xFC\x7F\x2\xAA3\xAA4\a"+
		"\x8A\x2\x2\xAA4\xAA5\x5\x10A\x86\x2\xAA5\xAA6\a\xF4\x2\x2\xAA6\xAA7\x5"+
		"\xB2Z\x2\xAA7\xAC3\x3\x2\x2\x2\xAA8\xAA9\a\x99\x2\x2\xAA9\xAC3\x5\xB2"+
		"Z\x2\xAAA\xAAB\a\x89\x2\x2\xAAB\xAAE\x5\x10A\x86\x2\xAAC\xAAD\a\x6\x2"+
		"\x2\xAAD\xAAF\x5\xDCo\x2\xAAE\xAAC\x3\x2\x2\x2\xAAE\xAAF\x3\x2\x2\x2\xAAF"+
		"\xAB0\x3\x2\x2\x2\xAB0\xAB1\a.\x2\x2\xAB1\xAB2\x5\xB2Z\x2\xAB2\xAB3\a"+
		"\x8E\x2\x2\xAB3\xAB4\x5\xB2Z\x2\xAB4\xAB5\a\x83\x2\x2\xAB5\xAB7\x5\xB2"+
		"Z\x2\xAB6\xAB8\x5\x102\x82\x2\xAB7\xAB6\x3\x2\x2\x2\xAB7\xAB8\x3\x2\x2"+
		"\x2\xAB8\xAC3\x3\x2\x2\x2\xAB9\xABA\a\x8F\x2\x2\xABA\xABF\x5\x104\x83"+
		"\x2\xABB\xABC\a\x10B\x2\x2\xABC\xABE\x5\x104\x83\x2\xABD\xABB\x3\x2\x2"+
		"\x2\xABE\xAC1\x3\x2\x2\x2\xABF\xABD\x3\x2\x2\x2\xABF\xAC0\x3\x2\x2\x2"+
		"\xAC0\xAC3\x3\x2\x2\x2\xAC1\xABF\x3\x2\x2\x2\xAC2\xAA2\x3\x2\x2\x2\xAC2"+
		"\xAA3\x3\x2\x2\x2\xAC2\xAA8\x3\x2\x2\x2\xAC2\xAAA\x3\x2\x2\x2\xAC2\xAB9"+
		"\x3\x2\x2\x2\xAC3\x101\x3\x2\x2\x2\xAC4\xAC5\a\x88\x2\x2\xAC5\xAC6\x5"+
		"\x10A\x86\x2\xAC6\x103\x3\x2\x2\x2\xAC7\xAC9\x5\xB2Z\x2\xAC8\xACA\t\x35"+
		"\x2\x2\xAC9\xAC8\x3\x2\x2\x2\xAC9\xACA\x3\x2\x2\x2\xACA\x105\x3\x2\x2"+
		"\x2\xACB\xACC\a\x93\x2\x2\xACC\xAD3\x5\xB2Z\x2\xACD\xACE\a\x87\x2\x2\xACE"+
		"\xACF\x5\xB2Z\x2\xACF\xAD0\a\x80\x2\x2\xAD0\xAD1\x5\xB2Z\x2\xAD1\xAD3"+
		"\x3\x2\x2\x2\xAD2\xACB\x3\x2\x2\x2\xAD2\xACD\x3\x2\x2\x2\xAD3\x107\x3"+
		"\x2\x2\x2\xAD4\xAD5\a\x88\x2\x2\xAD5\xAD6\x5\x10A\x86\x2\xAD6\xAD7\x5"+
		"\xFE\x80\x2\xAD7\x109\x3\x2\x2\x2\xAD8\xADD\t\x36\x2\x2\xAD9\xADD\x5\x118"+
		"\x8D\x2\xADA\xADD\x5\x11A\x8E\x2\xADB\xADD\x5\x11C\x8F\x2\xADC\xAD8\x3"+
		"\x2\x2\x2\xADC\xAD9\x3\x2\x2\x2\xADC\xADA\x3\x2\x2\x2\xADC\xADB\x3\x2"+
		"\x2\x2\xADD\x10B\x3\x2\x2\x2\xADE\xAE3\t\x37\x2\x2\xADF\xAE3\x5\x118\x8D"+
		"\x2\xAE0\xAE3\x5\x11A\x8E\x2\xAE1\xAE3\x5\x11C\x8F\x2\xAE2\xADE\x3\x2"+
		"\x2\x2\xAE2\xADF\x3\x2\x2\x2\xAE2\xAE0\x3\x2\x2\x2\xAE2\xAE1\x3\x2\x2"+
		"\x2\xAE3\x10D\x3\x2\x2\x2\xAE4\xAE5\t\x38\x2\x2\xAE5\x10F\x3\x2\x2\x2"+
		"\xAE6\xAE7\t\x39\x2\x2\xAE7\x111\x3\x2\x2\x2\xAE8\xAE9\t:\x2\x2\xAE9\x113"+
		"\x3\x2\x2\x2\xAEA\xAEE\x5\x116\x8C\x2\xAEB\xAEE\x5\x118\x8D\x2\xAEC\xAEE"+
		"\x5\x11A\x8E\x2\xAED\xAEA\x3\x2\x2\x2\xAED\xAEB\x3\x2\x2\x2\xAED\xAEC"+
		"\x3\x2\x2\x2\xAEE\x115\x3\x2\x2\x2\xAEF\xAF0\t;\x2\x2\xAF0\x117\x3\x2"+
		"\x2\x2\xAF1\xAF2\t<\x2\x2\xAF2\x119\x3\x2\x2\x2\xAF3\xAF4\t=\x2\x2\xAF4"+
		"\x11B\x3\x2\x2\x2\xAF5\xAF6\t>\x2\x2\xAF6\x11D\x3\x2\x2\x2\xAF7\xAF9\x5"+
		"\f\a\x2\xAF8\xAF7\x3\x2\x2\x2\xAF8\xAF9\x3\x2\x2\x2\xAF9\xAFD\x3\x2\x2"+
		"\x2\xAFA\xAFC\x5\x122\x92\x2\xAFB\xAFA\x3\x2\x2\x2\xAFC\xAFF\x3\x2\x2"+
		"\x2\xAFD\xAFB\x3\x2\x2\x2\xAFD\xAFE\x3\x2\x2\x2\xAFE\xB00\x3\x2\x2\x2"+
		"\xAFF\xAFD\x3\x2\x2\x2\xB00\xB01\a\x2\x2\x3\xB01\x11F\x3\x2\x2\x2\xB02"+
		"\xB03\a\t\x2\x2\xB03\xB04\ah\x2\x2\xB04\xB05\x5\xCEh\x2\xB05\xB09\x5\f"+
		"\a\x2\xB06\xB08\x5\x122\x92\x2\xB07\xB06\x3\x2\x2\x2\xB08\xB0B\x3\x2\x2"+
		"\x2\xB09\xB07\x3\x2\x2\x2\xB09\xB0A\x3\x2\x2\x2\xB0A\xB0C\x3\x2\x2\x2"+
		"\xB0B\xB09\x3\x2\x2\x2\xB0C\xB0D\a\x19\x2\x2\xB0D\xB0F\ah\x2\x2\xB0E\xB10"+
		"\x5\xCEh\x2\xB0F\xB0E\x3\x2\x2\x2\xB0F\xB10\x3\x2\x2\x2\xB10\xB11\x3\x2"+
		"\x2\x2\xB11\xB12\x5\f\a\x2\xB12\x121\x3\x2\x2\x2\xB13\xB26\x5\x120\x91"+
		"\x2\xB14\xB26\x5\x124\x93\x2\xB15\xB26\x5\x46$\x2\xB16\xB26\x5\x36\x1C"+
		"\x2\xB17\xB26\x5J&\x2\xB18\xB26\x5T+\x2\xB19\xB26\x5N(\x2\xB1A\xB26\x5"+
		"\xE\b\x2\xB1B\xB26\x5\x10\t\x2\xB1C\xB26\x5\x13A\x9E\x2\xB1D\xB26\x5\x94"+
		"K\x2\xB1E\xB26\x5\"\x12\x2\xB1F\xB26\x5*\x16\x2\xB20\xB26\x5$\x13\x2\xB21"+
		"\xB26\x5\x14\v\x2\xB22\xB26\x5,\x17\x2\xB23\xB26\x5\x30\x19\x2\xB24\xB26"+
		"\x5\x140\xA1\x2\xB25\xB13\x3\x2\x2\x2\xB25\xB14\x3\x2\x2\x2\xB25\xB15"+
		"\x3\x2\x2\x2\xB25\xB16\x3\x2\x2\x2\xB25\xB17\x3\x2\x2\x2\xB25\xB18\x3"+
		"\x2\x2\x2\xB25\xB19\x3\x2\x2\x2\xB25\xB1A\x3\x2\x2\x2\xB25\xB1B\x3\x2"+
		"\x2\x2\xB25\xB1C\x3\x2\x2\x2\xB25\xB1D\x3\x2\x2\x2\xB25\xB1E\x3\x2\x2"+
		"\x2\xB25\xB1F\x3\x2\x2\x2\xB25\xB20\x3\x2\x2\x2\xB25\xB21\x3\x2\x2\x2"+
		"\xB25\xB22\x3\x2\x2\x2\xB25\xB23\x3\x2\x2\x2\xB25\xB24\x3\x2\x2\x2\xB26"+
		"\x123\x3\x2\x2\x2\xB27\xB29\x5\x8A\x46\x2\xB28\xB27\x3\x2\x2\x2\xB28\xB29"+
		"\x3\x2\x2\x2\xB29\xB2B\x3\x2\x2\x2\xB2A\xB2C\x5\x126\x94\x2\xB2B\xB2A"+
		"\x3\x2\x2\x2\xB2B\xB2C\x3\x2\x2\x2\xB2C\xB2D\x3\x2\x2\x2\xB2D\xB2F\a\xE"+
		"\x2\x2\xB2E\xB30\x5\xCCg\x2\xB2F\xB2E\x3\x2\x2\x2\xB2F\xB30\x3\x2\x2\x2"+
		"\xB30\xB31\x3\x2\x2\x2\xB31\xB3B\x5\x10A\x86\x2\xB32\xB33\t?\x2\x2\xB33"+
		"\xB38\x5\xD8m\x2\xB34\xB35\a\x10B\x2\x2\xB35\xB37\x5\xD8m\x2\xB36\xB34"+
		"\x3\x2\x2\x2\xB37\xB3A\x3\x2\x2\x2\xB38\xB36\x3\x2\x2\x2\xB38\xB39\x3"+
		"\x2\x2\x2\xB39\xB3C\x3\x2\x2\x2\xB3A\xB38\x3\x2\x2\x2\xB3B\xB32\x3\x2"+
		"\x2\x2\xB3B\xB3C\x3\x2\x2\x2\xB3C\xB46\x3\x2\x2\x2\xB3D\xB3E\a\x61\x2"+
		"\x2\xB3E\xB43\x5\xD8m\x2\xB3F\xB40\a\x10B\x2\x2\xB40\xB42\x5\xD8m\x2\xB41"+
		"\xB3F\x3\x2\x2\x2\xB42\xB45\x3\x2\x2\x2\xB43\xB41\x3\x2\x2\x2\xB43\xB44"+
		"\x3\x2\x2\x2\xB44\xB47\x3\x2\x2\x2\xB45\xB43\x3\x2\x2\x2\xB46\xB3D\x3"+
		"\x2\x2\x2\xB46\xB47\x3\x2\x2\x2\xB47\xB48\x3\x2\x2\x2\xB48\xB4C\x5\f\a"+
		"\x2\xB49\xB4B\x5\x128\x95\x2\xB4A\xB49\x3\x2\x2\x2\xB4B\xB4E\x3\x2\x2"+
		"\x2\xB4C\xB4A\x3\x2\x2\x2\xB4C\xB4D\x3\x2\x2\x2\xB4D\xB4F\x3\x2\x2\x2"+
		"\xB4E\xB4C\x3\x2\x2\x2\xB4F\xB51\a\xBE\x2\x2\xB50\xB52\x5\x10A\x86\x2"+
		"\xB51\xB50\x3\x2\x2\x2\xB51\xB52\x3\x2\x2\x2\xB52\xB53\x3\x2\x2\x2\xB53"+
		"\xB54\x5\f\a\x2\xB54\x125\x3\x2\x2\x2\xB55\xB57\t@\x2\x2\xB56\xB55\x3"+
		"\x2\x2\x2\xB57\xB58\x3\x2\x2\x2\xB58\xB56\x3\x2\x2\x2\xB58\xB59\x3\x2"+
		"\x2\x2\xB59\x127\x3\x2\x2\x2\xB5A\xB60\x5\x12A\x96\x2\xB5B\xB60\x5\x134"+
		"\x9B\x2\xB5C\xB60\x5\x13C\x9F\x2\xB5D\xB60\x5\x12E\x98\x2\xB5E\xB60\x5"+
		"\x138\x9D\x2\xB5F\xB5A\x3\x2\x2\x2\xB5F\xB5B\x3\x2\x2\x2\xB5F\xB5C\x3"+
		"\x2\x2\x2\xB5F\xB5D\x3\x2\x2\x2\xB5F\xB5E\x3\x2\x2\x2\xB60\x129\x3\x2"+
		"\x2\x2\xB61\xB62\x5\x12C\x97\x2\xB62\xB63\a\x10A\x2\x2\xB63\xB64\x5\f"+
		"\a\x2\xB64\x12B\x3\x2\x2\x2\xB65\xB66\t\x41\x2\x2\xB66\x12D\x3\x2\x2\x2"+
		"\xB67\xB69\x5\x132\x9A\x2\xB68\xB67\x3\x2\x2\x2\xB68\xB69\x3\x2\x2\x2"+
		"\xB69\xB6A\x3\x2\x2\x2\xB6A\xB6B\a\x33\x2\x2\xB6B\xB74\x5\x10A\x86\x2"+
		"\xB6C\xB75\x5\x130\x99\x2\xB6D\xB6E\a\x10B\x2\x2\xB6E\xB70\x5\x10A\x86"+
		"\x2\xB6F\xB6D\x3\x2\x2\x2\xB70\xB73\x3\x2\x2\x2\xB71\xB6F\x3\x2\x2\x2"+
		"\xB71\xB72\x3\x2\x2\x2\xB72\xB75\x3\x2\x2\x2\xB73\xB71\x3\x2\x2\x2\xB74"+
		"\xB6C\x3\x2\x2\x2\xB74\xB71\x3\x2\x2\x2\xB75\xB76\x3\x2\x2\x2\xB76\xB77"+
		"\x5\f\a\x2\xB77\x12F\x3\x2\x2\x2\xB78\xB79\a-\x2\x2\xB79\xB7C\x5\x10A"+
		"\x86\x2\xB7A\xB7B\a.\x2\x2\xB7B\xB7D\x5\x10A\x86\x2\xB7C\xB7A\x3\x2\x2"+
		"\x2\xB7C\xB7D\x3\x2\x2\x2\xB7D\xB81\x3\x2\x2\x2\xB7E\xB7F\a.\x2\x2\xB7F"+
		"\xB81\x5\x10A\x86\x2\xB80\xB78\x3\x2\x2\x2\xB80\xB7E\x3\x2\x2\x2\xB81"+
		"\x131\x3\x2\x2\x2\xB82\xB84\t\x42\x2\x2\xB83\xB82\x3\x2\x2\x2\xB84\xB85"+
		"\x3\x2\x2\x2\xB85\xB83\x3\x2\x2\x2\xB85\xB86\x3\x2\x2\x2\xB86\x133\x3"+
		"\x2\x2\x2\xB87\xB89\x5\x13E\xA0\x2\xB88\xB87\x3\x2\x2\x2\xB88\xB89\x3"+
		"\x2\x2\x2\xB89\xB8A\x3\x2\x2\x2\xB8A\xB8B\a\x97\x2\x2\xB8B\xB98\x5\x10A"+
		"\x86\x2\xB8C\xB99\x5\x130\x99\x2\xB8D\xB8E\a\x10B\x2\x2\xB8E\xB90\x5\x10A"+
		"\x86\x2\xB8F\xB8D\x3\x2\x2\x2\xB90\xB93\x3\x2\x2\x2\xB91\xB8F\x3\x2\x2"+
		"\x2\xB91\xB92\x3\x2\x2\x2\xB92\xB96\x3\x2\x2\x2\xB93\xB91\x3\x2\x2\x2"+
		"\xB94\xB95\a\x6\x2\x2\xB95\xB97\x5\xD8m\x2\xB96\xB94\x3\x2\x2\x2\xB96"+
		"\xB97\x3\x2\x2\x2\xB97\xB99\x3\x2\x2\x2\xB98\xB8C\x3\x2\x2\x2\xB98\xB91"+
		"\x3\x2\x2\x2\xB99\xB9B\x3\x2\x2\x2\xB9A\xB9C\a\xC7\x2\x2\xB9B\xB9A\x3"+
		"\x2\x2\x2\xB9B\xB9C\x3\x2\x2\x2\xB9C\xB9E\x3\x2\x2\x2\xB9D\xB9F\a\xC5"+
		"\x2\x2\xB9E\xB9D\x3\x2\x2\x2\xB9E\xB9F\x3\x2\x2\x2\xB9F\xBA1\x3\x2\x2"+
		"\x2\xBA0\xBA2\x5\x136\x9C\x2\xBA1\xBA0\x3\x2\x2\x2\xBA1\xBA2\x3\x2\x2"+
		"\x2\xBA2\xBA4\x3\x2\x2\x2\xBA3\xBA5\a\xC4\x2\x2\xBA4\xBA3\x3\x2\x2\x2"+
		"\xBA4\xBA5\x3\x2\x2\x2\xBA5\xBA6\x3\x2\x2\x2\xBA6\xBA7\x5\f\a\x2\xBA7"+
		"\x135\x3\x2\x2\x2\xBA8\xBA9\a\xBC\x2\x2\xBA9\xBAA\x5\x12C\x97\x2\xBAA"+
		"\x137\x3\x2\x2\x2\xBAB\xBAD\x5\x8A\x46\x2\xBAC\xBAB\x3\x2\x2\x2\xBAC\xBAD"+
		"\x3\x2\x2\x2\xBAD\xBB6\x3\x2\x2\x2\xBAE\xBB0\a\x4\x2\x2\xBAF\xBB1\a\b"+
		"\x2\x2\xBB0\xBAF\x3\x2\x2\x2\xBB0\xBB1\x3\x2\x2\x2\xBB1\xBB7\x3\x2\x2"+
		"\x2\xBB2\xBB4\a\b\x2\x2\xBB3\xBB5\a\x4\x2\x2\xBB4\xBB3\x3\x2\x2\x2\xBB4"+
		"\xBB5\x3\x2\x2\x2\xBB5\xBB7\x3\x2\x2\x2\xBB6\xBAE\x3\x2\x2\x2\xBB6\xBB2"+
		"\x3\x2\x2\x2\xBB7\xBB9\x3\x2\x2\x2\xBB8\xBBA\x5\x13E\xA0\x2\xBB9\xBB8"+
		"\x3\x2\x2\x2\xBB9\xBBA\x3\x2\x2\x2\xBBA\xBBB\x3\x2\x2\x2\xBBB\xBBC\a\x33"+
		"\x2\x2\xBBC\xBBF\x5\x10A\x86\x2\xBBD\xBBE\a\x97\x2\x2\xBBE\xBC0\x5\x10A"+
		"\x86\x2\xBBF\xBBD\x3\x2\x2\x2\xBBF\xBC0\x3\x2\x2\x2\xBC0\xBC3\x3\x2\x2"+
		"\x2\xBC1\xBC2\a\x6\x2\x2\xBC2\xBC4\x5\xD8m\x2\xBC3\xBC1\x3\x2\x2\x2\xBC3"+
		"\xBC4\x3\x2\x2\x2\xBC4\xBC5\x3\x2\x2\x2\xBC5\xBC6\x5\f\a\x2\xBC6\x139"+
		"\x3\x2\x2\x2\xBC7\xBC9\x5\x8A\x46\x2\xBC8\xBC7\x3\x2\x2\x2\xBC8\xBC9\x3"+
		"\x2\x2\x2\xBC9\xBCB\x3\x2\x2\x2\xBCA\xBCC\t\x43\x2\x2\xBCB\xBCA\x3\x2"+
		"\x2\x2\xBCB\xBCC\x3\x2\x2\x2\xBCC\xBCE\x3\x2\x2\x2\xBCD\xBCF\x5\x13E\xA0"+
		"\x2\xBCE\xBCD\x3\x2\x2\x2\xBCE\xBCF\x3\x2\x2\x2\xBCF\xBD0\x3\x2\x2\x2"+
		"\xBD0\xBD4\a\x33\x2\x2\xBD1\xBD2\x5\x10A\x86\x2\xBD2\xBD3\a\x10A\x2\x2"+
		"\xBD3\xBD5\x3\x2\x2\x2\xBD4\xBD1\x3\x2\x2\x2\xBD4\xBD5\x3\x2\x2\x2\xBD5"+
		"\xBD6\x3\x2\x2\x2\xBD6\xBD8\x5\x10A\x86\x2\xBD7\xBD9\x5\x18\r\x2\xBD8"+
		"\xBD7\x3\x2\x2\x2\xBD8\xBD9\x3\x2\x2\x2\xBD9\xBDC\x3\x2\x2\x2\xBDA\xBDB"+
		"\a\x6\x2\x2\xBDB\xBDD\x5\xD8m\x2\xBDC\xBDA\x3\x2\x2\x2\xBDC\xBDD\x3\x2"+
		"\x2\x2\xBDD\xBDE\x3\x2\x2\x2\xBDE\xBDF\x5\f\a\x2\xBDF\xBE0\x5\x1E\x10"+
		"\x2\xBE0\x13B\x3\x2\x2\x2\xBE1\xBE3\x5\x8A\x46\x2\xBE2\xBE1\x3\x2\x2\x2"+
		"\xBE2\xBE3\x3\x2\x2\x2\xBE3\xBE4\x3\x2\x2\x2\xBE4\xBE6\a\xC2\x2\x2\xBE5"+
		"\xBE7\x5\x13E\xA0\x2\xBE6\xBE5\x3\x2\x2\x2\xBE6\xBE7\x3\x2\x2\x2\xBE7"+
		"\xBE8\x3\x2\x2\x2\xBE8\xBE9\a\x33\x2\x2\xBE9\xBEB\x5\x10A\x86\x2\xBEA"+
		"\xBEC\x5\x18\r\x2\xBEB\xBEA\x3\x2\x2\x2\xBEB\xBEC\x3\x2\x2\x2\xBEC\xBEF"+
		"\x3\x2\x2\x2\xBED\xBEE\a\x6\x2\x2\xBEE\xBF0\x5\xD8m\x2\xBEF\xBED\x3\x2"+
		"\x2\x2\xBEF\xBF0\x3\x2\x2\x2\xBF0\xBF1\x3\x2\x2\x2\xBF1\xBF2\x5\f\a\x2"+
		"\xBF2\xBF3\x5\x1E\x10\x2\xBF3\x13D\x3\x2\x2\x2\xBF4\xBF6\t\x44\x2\x2\xBF5"+
		"\xBF4\x3\x2\x2\x2\xBF6\xBF7\x3\x2\x2\x2\xBF7\xBF5\x3\x2\x2\x2\xBF7\xBF8"+
		"\x3\x2\x2\x2\xBF8\x13F\x3\x2\x2\x2\xBF9\xBFA\a\x32\x2\x2\xBFA\xBFF\x5"+
		"\xD6l\x2\xBFB\xBFC\a\x10B\x2\x2\xBFC\xBFE\x5\xD6l\x2\xBFD\xBFB\x3\x2\x2"+
		"\x2\xBFE\xC01\x3\x2\x2\x2\xBFF\xBFD\x3\x2\x2\x2\xBFF\xC00\x3\x2\x2\x2"+
		"\xC00\xC02\x3\x2\x2\x2\xC01\xBFF\x3\x2\x2\x2\xC02\xC03\x5\f\a\x2\xC03"+
		"\x141\x3\x2\x2\x2\x1C8\x148\x14A\x150\x158\x15C\x162\x167\x17F\x184\x187"+
		"\x18A\x18F\x192\x196\x19B\x19F\x1A3\x1A7\x1AD\x1B0\x1B5\x1B8\x1BC\x1C1"+
		"\x1C5\x1C8\x1CC\x1D0\x1D8\x1DB\x1E3\x1E9\x1EC\x1F2\x1F8\x1FB\x1FF\x201"+
		"\x204\x210\x213\x218\x21B\x220\x225\x228\x22C\x231\x237\x23B\x240\x246"+
		"\x249\x24D\x253\x257\x25C\x25F\x262\x266\x26A\x26D\x271\x276\x27A\x27E"+
		"\x281\x285\x289\x291\x299\x29E\x2A2\x2A7\x2AD\x2B7\x2BF\x2C3\x2C6\x2CA"+
		"\x2D1\x2D6\x2DF\x2E5\x2EA\x2ED\x2F1\x2F5\x2F9\x2FF\x305\x30C\x312\x319"+
		"\x31C\x31F\x323\x327\x32B\x333\x336\x33B\x342\x348\x34F\x355\x35A\x360"+
		"\x363\x36F\x377\x37A\x37D\x381\x385\x38D\x390\x395\x39C\x3A2\x3A9\x3AC"+
		"\x3AF\x3B3\x3B7\x3BA\x3BE\x3C3\x3CB\x3CE\x3D1\x3D5\x3DA\x3E0\x3E4\x3E7"+
		"\x3EE\x3F1\x3F4\x3F9\x3FE\x401\x405\x40A\x410\x418\x41C\x41F\x423\x428"+
		"\x42B\x42E\x433\x438\x43B\x43E\x441\x448\x44F\x451\x456\x459\x461\x468"+
		"\x46D\x470\x477\x47B\x483\x48A\x48D\x490\x493\x499\x49C\x49F\x4A3\x4A9"+
		"\x4AE\x4B4\x4BC\x4C0\x4C3\x4C7\x4CF\x4D2\x4DB\x4DE\x4E1\x4E4\x4E7\x4EC"+
		"\x4EF\x4F4\x4F9\x4FC\x501\x508\x50C\x50F\x516\x51D\x51F\x534\x537\x53A"+
		"\x53E\x542\x545\x549\x54C\x556\x559\x560\x569\x56F\x572\x577\x57B\x57E"+
		"\x586\x58D\x590\x595\x598\x59D\x5A5\x5AA\x5AF\x5B3\x5BA\x5C5\x5CE\x5D1"+
		"\x5D4\x5DB\x5E4\x5F2\x5FA\x5FD\x600\x603\x608\x60E\x612\x61E\x620\x626"+
		"\x62C\x62F\x635\x638\x63B\x63E\x644\x648\x64B\x64E\x656\x65C\x665\x668"+
		"\x671\x677\x67B\x67E\x690\x698\x69B\x69F\x6A7\x6AB\x6B2\x6B6\x6B9\x6C2"+
		"\x6C5\x6CD\x6D0\x6D6\x6DD\x6E5\x6E9\x6EC\x6F2\x6F8\x6FB\x703\x706\x70E"+
		"\x711\x719\x71C\x725\x728\x73A\x73E\x749\x750\x756\x75B\x761\x765\x76C"+
		"\x772\x776\x77D\x786\x78B\x78D\x795\x79C\x7A8\x7B4\x7BA\x7C2\x7C9\x7D1"+
		"\x7D8\x7E0\x7E5\x7E8\x7EB\x7F2\x7F6\x7FA\x7FD\x809\x80E\x818\x82C\x87F"+
		"\x881\x89A\x8A1\x8F4\x8FE\x906\x929\x92F\x938\x94D\x94F\x954\x95C\x95F"+
		"\x969\x971\x97B\x97F\x986\x98D\x990\x993\x996\x998\x99F\x9A3\x9B1\x9BC"+
		"\x9C7\x9CB\x9D3\x9E4\x9EA\x9F0\x9F8\x9FC\xA02\xA0A\xA12\xA17\xA1A\xA23"+
		"\xA26\xA2F\xA35\xA38\xA40\xA43\xA46\xA48\xA4E\xA51\xA57\xA5B\xA62\xA66"+
		"\xA6B\xA70\xA75\xA78\xA83\xA93\xA9B\xAA0\xAAE\xAB7\xABF\xAC2\xAC9\xAD2"+
		"\xADC\xAE2\xAED\xAF8\xAFD\xB09\xB0F\xB25\xB28\xB2B\xB2F\xB38\xB3B\xB43"+
		"\xB46\xB4C\xB51\xB58\xB5F\xB68\xB71\xB74\xB7C\xB80\xB85\xB88\xB91\xB96"+
		"\xB98\xB9B\xB9E\xBA1\xBA4\xBAC\xBB0\xBB4\xBB6\xBB9\xBBF\xBC3\xBC8\xBCB"+
		"\xBCE\xBD4\xBD8\xBDC\xBE2\xBE6\xBEB\xBEF\xBF7\xBFF";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser
