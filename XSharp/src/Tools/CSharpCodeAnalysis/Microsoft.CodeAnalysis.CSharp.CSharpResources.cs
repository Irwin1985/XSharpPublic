// <auto-generated>
using System.Reflection;


namespace Microsoft.CodeAnalysis.CSharp
{
    internal static partial class CSharpResources
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(CSharpResources)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }
#if !NET20
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
#endif
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);
        /// <summary>&lt;null&gt;</summary>
        internal static string @IDS_NULL => GetResourceString("IDS_NULL");
        /// <summary>&lt;throw expression&gt;</summary>
        internal static string @IDS_ThrowExpression => GetResourceString("IDS_ThrowExpression");
        /// <summary>&lt;switch expression&gt;</summary>
        internal static string @IDS_FeatureSwitchExpression => GetResourceString("IDS_FeatureSwitchExpression");
        /// <summary>local function attributes</summary>
        internal static string @IDS_FeatureLocalFunctionAttributes => GetResourceString("IDS_FeatureLocalFunctionAttributes");
        /// <summary>extern local functions</summary>
        internal static string @IDS_FeatureExternLocalFunctions => GetResourceString("IDS_FeatureExternLocalFunctions");
        /// <summary>(Location of symbol related to previous error)</summary>
        internal static string @IDS_RELATEDERROR => GetResourceString("IDS_RELATEDERROR");
        /// <summary>(Location of symbol related to previous warning)</summary>
        internal static string @IDS_RELATEDWARNING => GetResourceString("IDS_RELATEDWARNING");
        /// <summary>&lt;!-- Badly formed XML comment ignored for member "{0}" --&gt;</summary>
        internal static string @IDS_XMLIGNORED => GetResourceString("IDS_XMLIGNORED");
        /// <summary>Badly formed XML file "{0}" cannot be included</summary>
        internal static string @IDS_XMLIGNORED2 => GetResourceString("IDS_XMLIGNORED2");
        /// <summary>Failed to insert some or all of included XML</summary>
        internal static string @IDS_XMLFAILEDINCLUDE => GetResourceString("IDS_XMLFAILEDINCLUDE");
        /// <summary>Include tag is invalid</summary>
        internal static string @IDS_XMLBADINCLUDE => GetResourceString("IDS_XMLBADINCLUDE");
        /// <summary>No matching elements were found for the following include tag</summary>
        internal static string @IDS_XMLNOINCLUDE => GetResourceString("IDS_XMLNOINCLUDE");
        /// <summary>Missing file attribute</summary>
        internal static string @IDS_XMLMISSINGINCLUDEFILE => GetResourceString("IDS_XMLMISSINGINCLUDEFILE");
        /// <summary>Missing path attribute</summary>
        internal static string @IDS_XMLMISSINGINCLUDEPATH => GetResourceString("IDS_XMLMISSINGINCLUDEPATH");
        /// <summary>&lt;global namespace&gt;</summary>
        internal static string @IDS_GlobalNamespace => GetResourceString("IDS_GlobalNamespace");
        /// <summary>generics</summary>
        internal static string @IDS_FeatureGenerics => GetResourceString("IDS_FeatureGenerics");
        /// <summary>anonymous methods</summary>
        internal static string @IDS_FeatureAnonDelegates => GetResourceString("IDS_FeatureAnonDelegates");
        /// <summary>module as an attribute target specifier</summary>
        internal static string @IDS_FeatureModuleAttrLoc => GetResourceString("IDS_FeatureModuleAttrLoc");
        /// <summary>namespace alias qualifier</summary>
        internal static string @IDS_FeatureGlobalNamespace => GetResourceString("IDS_FeatureGlobalNamespace");
        /// <summary>fixed size buffers</summary>
        internal static string @IDS_FeatureFixedBuffer => GetResourceString("IDS_FeatureFixedBuffer");
        /// <summary>#pragma</summary>
        internal static string @IDS_FeaturePragma => GetResourceString("IDS_FeaturePragma");
        /// <summary>static classes</summary>
        internal static string @IDS_FeatureStaticClasses => GetResourceString("IDS_FeatureStaticClasses");
        /// <summary>readonly structs</summary>
        internal static string @IDS_FeatureReadOnlyStructs => GetResourceString("IDS_FeatureReadOnlyStructs");
        /// <summary>partial types</summary>
        internal static string @IDS_FeaturePartialTypes => GetResourceString("IDS_FeaturePartialTypes");
        /// <summary>async function</summary>
        internal static string @IDS_FeatureAsync => GetResourceString("IDS_FeatureAsync");
        /// <summary>switch on boolean type</summary>
        internal static string @IDS_FeatureSwitchOnBool => GetResourceString("IDS_FeatureSwitchOnBool");
        /// <summary>method group</summary>
        internal static string @IDS_MethodGroup => GetResourceString("IDS_MethodGroup");
        /// <summary>anonymous method</summary>
        internal static string @IDS_AnonMethod => GetResourceString("IDS_AnonMethod");
        /// <summary>lambda expression</summary>
        internal static string @IDS_Lambda => GetResourceString("IDS_Lambda");
        /// <summary>collection</summary>
        internal static string @IDS_Collection => GetResourceString("IDS_Collection");
        /// <summary>disposable</summary>
        internal static string @IDS_Disposable => GetResourceString("IDS_Disposable");
        /// <summary>access modifiers on properties</summary>
        internal static string @IDS_FeaturePropertyAccessorMods => GetResourceString("IDS_FeaturePropertyAccessorMods");
        /// <summary>extern alias</summary>
        internal static string @IDS_FeatureExternAlias => GetResourceString("IDS_FeatureExternAlias");
        /// <summary>iterators</summary>
        internal static string @IDS_FeatureIterators => GetResourceString("IDS_FeatureIterators");
        /// <summary>default operator</summary>
        internal static string @IDS_FeatureDefault => GetResourceString("IDS_FeatureDefault");
        /// <summary>async streams</summary>
        internal static string @IDS_FeatureAsyncStreams => GetResourceString("IDS_FeatureAsyncStreams");
        /// <summary>unmanaged constructed types</summary>
        internal static string @IDS_FeatureUnmanagedConstructedTypes => GetResourceString("IDS_FeatureUnmanagedConstructedTypes");
        /// <summary>readonly members</summary>
        internal static string @IDS_FeatureReadOnlyMembers => GetResourceString("IDS_FeatureReadOnlyMembers");
        /// <summary>default literal</summary>
        internal static string @IDS_FeatureDefaultLiteral => GetResourceString("IDS_FeatureDefaultLiteral");
        /// <summary>private protected</summary>
        internal static string @IDS_FeaturePrivateProtected => GetResourceString("IDS_FeaturePrivateProtected");
        /// <summary>tuple equality</summary>
        internal static string @IDS_FeatureTupleEquality => GetResourceString("IDS_FeatureTupleEquality");
        /// <summary>nullable types</summary>
        internal static string @IDS_FeatureNullable => GetResourceString("IDS_FeatureNullable");
        /// <summary>pattern matching</summary>
        internal static string @IDS_FeaturePatternMatching => GetResourceString("IDS_FeaturePatternMatching");
        /// <summary>expression body property accessor</summary>
        internal static string @IDS_FeatureExpressionBodiedAccessor => GetResourceString("IDS_FeatureExpressionBodiedAccessor");
        /// <summary>expression body constructor and destructor</summary>
        internal static string @IDS_FeatureExpressionBodiedDeOrConstructor => GetResourceString("IDS_FeatureExpressionBodiedDeOrConstructor");
        /// <summary>throw expression</summary>
        internal static string @IDS_FeatureThrowExpression => GetResourceString("IDS_FeatureThrowExpression");
        /// <summary>implicitly typed array</summary>
        internal static string @IDS_FeatureImplicitArray => GetResourceString("IDS_FeatureImplicitArray");
        /// <summary>implicitly typed local variable</summary>
        internal static string @IDS_FeatureImplicitLocal => GetResourceString("IDS_FeatureImplicitLocal");
        /// <summary>anonymous types</summary>
        internal static string @IDS_FeatureAnonymousTypes => GetResourceString("IDS_FeatureAnonymousTypes");
        /// <summary>automatically implemented properties</summary>
        internal static string @IDS_FeatureAutoImplementedProperties => GetResourceString("IDS_FeatureAutoImplementedProperties");
        /// <summary>readonly automatically implemented properties</summary>
        internal static string @IDS_FeatureReadonlyAutoImplementedProperties => GetResourceString("IDS_FeatureReadonlyAutoImplementedProperties");
        /// <summary>object initializer</summary>
        internal static string @IDS_FeatureObjectInitializer => GetResourceString("IDS_FeatureObjectInitializer");
        /// <summary>collection initializer</summary>
        internal static string @IDS_FeatureCollectionInitializer => GetResourceString("IDS_FeatureCollectionInitializer");
        /// <summary>query expression</summary>
        internal static string @IDS_FeatureQueryExpression => GetResourceString("IDS_FeatureQueryExpression");
        /// <summary>extension method</summary>
        internal static string @IDS_FeatureExtensionMethod => GetResourceString("IDS_FeatureExtensionMethod");
        /// <summary>partial method</summary>
        internal static string @IDS_FeaturePartialMethod => GetResourceString("IDS_FeaturePartialMethod");
        /// <summary>method</summary>
        internal static string @IDS_SK_METHOD => GetResourceString("IDS_SK_METHOD");
        /// <summary>type</summary>
        internal static string @IDS_SK_TYPE => GetResourceString("IDS_SK_TYPE");
        /// <summary>namespace</summary>
        internal static string @IDS_SK_NAMESPACE => GetResourceString("IDS_SK_NAMESPACE");
        /// <summary>field</summary>
        internal static string @IDS_SK_FIELD => GetResourceString("IDS_SK_FIELD");
        /// <summary>property</summary>
        internal static string @IDS_SK_PROPERTY => GetResourceString("IDS_SK_PROPERTY");
        /// <summary>element</summary>
        internal static string @IDS_SK_UNKNOWN => GetResourceString("IDS_SK_UNKNOWN");
        /// <summary>variable</summary>
        internal static string @IDS_SK_VARIABLE => GetResourceString("IDS_SK_VARIABLE");
        /// <summary>label</summary>
        internal static string @IDS_SK_LABEL => GetResourceString("IDS_SK_LABEL");
        /// <summary>event</summary>
        internal static string @IDS_SK_EVENT => GetResourceString("IDS_SK_EVENT");
        /// <summary>type parameter</summary>
        internal static string @IDS_SK_TYVAR => GetResourceString("IDS_SK_TYVAR");
        /// <summary>using alias</summary>
        internal static string @IDS_SK_ALIAS => GetResourceString("IDS_SK_ALIAS");
        /// <summary>extern alias</summary>
        internal static string @IDS_SK_EXTERNALIAS => GetResourceString("IDS_SK_EXTERNALIAS");
        /// <summary>constructor</summary>
        internal static string @IDS_SK_CONSTRUCTOR => GetResourceString("IDS_SK_CONSTRUCTOR");
        /// <summary>foreach iteration variable</summary>
        internal static string @IDS_FOREACHLOCAL => GetResourceString("IDS_FOREACHLOCAL");
        /// <summary>fixed variable</summary>
        internal static string @IDS_FIXEDLOCAL => GetResourceString("IDS_FIXEDLOCAL");
        /// <summary>using variable</summary>
        internal static string @IDS_USINGLOCAL => GetResourceString("IDS_USINGLOCAL");
        /// <summary>contravariant</summary>
        internal static string @IDS_Contravariant => GetResourceString("IDS_Contravariant");
        /// <summary>contravariantly</summary>
        internal static string @IDS_Contravariantly => GetResourceString("IDS_Contravariantly");
        /// <summary>covariant</summary>
        internal static string @IDS_Covariant => GetResourceString("IDS_Covariant");
        /// <summary>covariantly</summary>
        internal static string @IDS_Covariantly => GetResourceString("IDS_Covariantly");
        /// <summary>invariantly</summary>
        internal static string @IDS_Invariantly => GetResourceString("IDS_Invariantly");
        /// <summary>dynamic</summary>
        internal static string @IDS_FeatureDynamic => GetResourceString("IDS_FeatureDynamic");
        /// <summary>named argument</summary>
        internal static string @IDS_FeatureNamedArgument => GetResourceString("IDS_FeatureNamedArgument");
        /// <summary>optional parameter</summary>
        internal static string @IDS_FeatureOptionalParameter => GetResourceString("IDS_FeatureOptionalParameter");
        /// <summary>exception filter</summary>
        internal static string @IDS_FeatureExceptionFilter => GetResourceString("IDS_FeatureExceptionFilter");
        /// <summary>type variance</summary>
        internal static string @IDS_FeatureTypeVariance => GetResourceString("IDS_FeatureTypeVariance");
        /// <summary>parameter</summary>
        internal static string @IDS_Parameter => GetResourceString("IDS_Parameter");
        /// <summary>return</summary>
        internal static string @IDS_Return => GetResourceString("IDS_Return");
        /// <summary>The character(s) '{0}' cannot be used at this location.</summary>
        internal static string @XML_InvalidToken => GetResourceString("XML_InvalidToken");
        /// <summary>Incorrect syntax was used in a comment.</summary>
        internal static string @XML_IncorrectComment => GetResourceString("XML_IncorrectComment");
        /// <summary>An invalid character was found inside an entity reference.</summary>
        internal static string @XML_InvalidCharEntity => GetResourceString("XML_InvalidCharEntity");
        /// <summary>Expected '&gt;' or '/&gt;' to close tag '{0}'.</summary>
        internal static string @XML_ExpectedEndOfTag => GetResourceString("XML_ExpectedEndOfTag");
        /// <summary>An identifier was expected.</summary>
        internal static string @XML_ExpectedIdentifier => GetResourceString("XML_ExpectedIdentifier");
        /// <summary>Invalid unicode character.</summary>
        internal static string @XML_InvalidUnicodeChar => GetResourceString("XML_InvalidUnicodeChar");
        /// <summary>Whitespace is not allowed at this location.</summary>
        internal static string @XML_InvalidWhitespace => GetResourceString("XML_InvalidWhitespace");
        /// <summary>The character '&lt;' cannot be used in an attribute value.</summary>
        internal static string @XML_LessThanInAttributeValue => GetResourceString("XML_LessThanInAttributeValue");
        /// <summary>Missing equals sign between attribute and attribute value.</summary>
        internal static string @XML_MissingEqualsAttribute => GetResourceString("XML_MissingEqualsAttribute");
        /// <summary>Reference to undefined entity '{0}'.</summary>
        internal static string @XML_RefUndefinedEntity_1 => GetResourceString("XML_RefUndefinedEntity_1");
        /// <summary>A string literal was expected, but no opening quotation mark was found.</summary>
        internal static string @XML_StringLiteralNoStartQuote => GetResourceString("XML_StringLiteralNoStartQuote");
        /// <summary>Missing closing quotation mark for string literal.</summary>
        internal static string @XML_StringLiteralNoEndQuote => GetResourceString("XML_StringLiteralNoEndQuote");
        /// <summary>Non-ASCII quotations marks may not be used around string literals.</summary>
        internal static string @XML_StringLiteralNonAsciiQuote => GetResourceString("XML_StringLiteralNonAsciiQuote");
        /// <summary>End tag was not expected at this location.</summary>
        internal static string @XML_EndTagNotExpected => GetResourceString("XML_EndTagNotExpected");
        /// <summary>End tag '{0}' does not match the start tag '{1}'.</summary>
        internal static string @XML_ElementTypeMatch => GetResourceString("XML_ElementTypeMatch");
        /// <summary>Expected an end tag for element '{0}'.</summary>
        internal static string @XML_EndTagExpected => GetResourceString("XML_EndTagExpected");
        /// <summary>Required white space was missing.</summary>
        internal static string @XML_WhitespaceMissing => GetResourceString("XML_WhitespaceMissing");
        /// <summary>Unexpected character at this location.</summary>
        internal static string @XML_ExpectedEndOfXml => GetResourceString("XML_ExpectedEndOfXml");
        /// <summary>The literal string ']]&gt;' is not allowed in element content.</summary>
        internal static string @XML_CDataEndTagNotAllowed => GetResourceString("XML_CDataEndTagNotAllowed");
        /// <summary>Duplicate '{0}' attribute</summary>
        internal static string @XML_DuplicateAttribute => GetResourceString("XML_DuplicateAttribute");
        /// <summary>Metadata file '{0}' could not be found</summary>
        internal static string @ERR_NoMetadataFile => GetResourceString("ERR_NoMetadataFile");
        /// <summary>Metadata references are not supported.</summary>
        internal static string @ERR_MetadataReferencesNotSupported => GetResourceString("ERR_MetadataReferencesNotSupported");
        /// <summary>Metadata file '{0}' could not be opened -- {1}</summary>
        internal static string @FTL_MetadataCantOpenFile => GetResourceString("FTL_MetadataCantOpenFile");
        /// <summary>The type '{0}' is defined in an assembly that is not referenced. You must add a reference to assembly '{1}'.</summary>
        internal static string @ERR_NoTypeDef => GetResourceString("ERR_NoTypeDef");
        /// <summary>The type '{0}' is defined in a module that has not been added. You must add the module '{1}'.</summary>
        internal static string @ERR_NoTypeDefFromModule => GetResourceString("ERR_NoTypeDefFromModule");
        /// <summary>Could not write to output file '{0}' -- '{1}'</summary>
        internal static string @ERR_OutputWriteFailed => GetResourceString("ERR_OutputWriteFailed");
        /// <summary>Program has more than one entry point defined. Compile with /main to specify the type that contains the entry point.</summary>
        internal static string @ERR_MultipleEntryPoints => GetResourceString("ERR_MultipleEntryPoints");
        /// <summary>Operator '{0}' cannot be applied to operands of type '{1}' and '{2}'</summary>
        internal static string @ERR_BadBinaryOps => GetResourceString("ERR_BadBinaryOps");
        /// <summary>Operator '{0}' cannot be applied to 'default' and operand of type '{1}' because it is a type parameter that is not known to be a reference type</summary>
        internal static string @ERR_AmbigBinaryOpsOnUnconstrainedDefault => GetResourceString("ERR_AmbigBinaryOpsOnUnconstrainedDefault");
        /// <summary>Division by constant zero</summary>
        internal static string @ERR_IntDivByZero => GetResourceString("ERR_IntDivByZero");
        /// <summary>Cannot apply indexing with [] to an expression of type '{0}'</summary>
        internal static string @ERR_BadIndexLHS => GetResourceString("ERR_BadIndexLHS");
        /// <summary>Wrong number of indices inside []; expected {0}</summary>
        internal static string @ERR_BadIndexCount => GetResourceString("ERR_BadIndexCount");
        /// <summary>Operator '{0}' cannot be applied to operand of type '{1}'</summary>
        internal static string @ERR_BadUnaryOp => GetResourceString("ERR_BadUnaryOp");
        /// <summary>Operator '{0}' cannot be applied to operand '{1}'</summary>
        internal static string @ERR_BadOpOnNullOrDefaultOrNew => GetResourceString("ERR_BadOpOnNullOrDefaultOrNew");
        /// <summary>Keyword 'this' is not valid in a static property, static method, or static field initializer</summary>
        internal static string @ERR_ThisInStaticMeth => GetResourceString("ERR_ThisInStaticMeth");
        /// <summary>Keyword 'this' is not available in the current context</summary>
        internal static string @ERR_ThisInBadContext => GetResourceString("ERR_ThisInBadContext");
        /// <summary>Omitting the type argument is not allowed in the current context</summary>
        internal static string @ERR_OmittedTypeArgument => GetResourceString("ERR_OmittedTypeArgument");
        /// <summary>'{0}' has the wrong signature to be an entry point</summary>
        internal static string @WRN_InvalidMainSig => GetResourceString("WRN_InvalidMainSig");
        /// <summary>Method has the wrong signature to be an entry point</summary>
        internal static string @WRN_InvalidMainSig_Title => GetResourceString("WRN_InvalidMainSig_Title");
        /// <summary>Cannot implicitly convert type '{0}' to '{1}'</summary>
        internal static string @ERR_NoImplicitConv => GetResourceString("ERR_NoImplicitConv");
        /// <summary>Cannot convert type '{0}' to '{1}'</summary>
        internal static string @ERR_NoExplicitConv => GetResourceString("ERR_NoExplicitConv");
        /// <summary>Constant value '{0}' cannot be converted to a '{1}'</summary>
        internal static string @ERR_ConstOutOfRange => GetResourceString("ERR_ConstOutOfRange");
        /// <summary>Operator '{0}' is ambiguous on operands of type '{1}' and '{2}'</summary>
        internal static string @ERR_AmbigBinaryOps => GetResourceString("ERR_AmbigBinaryOps");
        /// <summary>Operator '{0}' is ambiguous on operands '{1}' and '{2}'</summary>
        internal static string @ERR_AmbigBinaryOpsOnDefault => GetResourceString("ERR_AmbigBinaryOpsOnDefault");
        /// <summary>Operator '{0}' is ambiguous on an operand of type '{1}'</summary>
        internal static string @ERR_AmbigUnaryOp => GetResourceString("ERR_AmbigUnaryOp");
        /// <summary>An out parameter cannot have the In attribute</summary>
        internal static string @ERR_InAttrOnOutParam => GetResourceString("ERR_InAttrOnOutParam");
        /// <summary>Cannot convert null to '{0}' because it is a non-nullable value type</summary>
        internal static string @ERR_ValueCantBeNull => GetResourceString("ERR_ValueCantBeNull");
        /// <summary>Cannot convert type '{0}' to '{1}' via a reference conversion, boxing conversion, unboxing conversion, wrapping conversion, or null type conversion</summary>
        internal static string @ERR_NoExplicitBuiltinConv => GetResourceString("ERR_NoExplicitBuiltinConv");
        /// <summary>Unexpected error writing debug information -- '{0}'</summary>
        internal static string @FTL_DebugEmitFailure => GetResourceString("FTL_DebugEmitFailure");
        /// <summary>Inconsistent accessibility: return type '{1}' is less accessible than method '{0}'</summary>
        internal static string @ERR_BadVisReturnType => GetResourceString("ERR_BadVisReturnType");
        /// <summary>Inconsistent accessibility: parameter type '{1}' is less accessible than method '{0}'</summary>
        internal static string @ERR_BadVisParamType => GetResourceString("ERR_BadVisParamType");
        /// <summary>Inconsistent accessibility: field type '{1}' is less accessible than field '{0}'</summary>
        internal static string @ERR_BadVisFieldType => GetResourceString("ERR_BadVisFieldType");
        /// <summary>Inconsistent accessibility: property type '{1}' is less accessible than property '{0}'</summary>
        internal static string @ERR_BadVisPropertyType => GetResourceString("ERR_BadVisPropertyType");
        /// <summary>Inconsistent accessibility: indexer return type '{1}' is less accessible than indexer '{0}'</summary>
        internal static string @ERR_BadVisIndexerReturn => GetResourceString("ERR_BadVisIndexerReturn");
        /// <summary>Inconsistent accessibility: parameter type '{1}' is less accessible than indexer '{0}'</summary>
        internal static string @ERR_BadVisIndexerParam => GetResourceString("ERR_BadVisIndexerParam");
        /// <summary>Inconsistent accessibility: return type '{1}' is less accessible than operator '{0}'</summary>
        internal static string @ERR_BadVisOpReturn => GetResourceString("ERR_BadVisOpReturn");
        /// <summary>Inconsistent accessibility: parameter type '{1}' is less accessible than operator '{0}'</summary>
        internal static string @ERR_BadVisOpParam => GetResourceString("ERR_BadVisOpParam");
        /// <summary>Inconsistent accessibility: return type '{1}' is less accessible than delegate '{0}'</summary>
        internal static string @ERR_BadVisDelegateReturn => GetResourceString("ERR_BadVisDelegateReturn");
        /// <summary>Inconsistent accessibility: parameter type '{1}' is less accessible than delegate '{0}'</summary>
        internal static string @ERR_BadVisDelegateParam => GetResourceString("ERR_BadVisDelegateParam");
        /// <summary>Inconsistent accessibility: base class '{1}' is less accessible than class '{0}'</summary>
        internal static string @ERR_BadVisBaseClass => GetResourceString("ERR_BadVisBaseClass");
        /// <summary>Inconsistent accessibility: base interface '{1}' is less accessible than interface '{0}'</summary>
        internal static string @ERR_BadVisBaseInterface => GetResourceString("ERR_BadVisBaseInterface");
        /// <summary>'{0}': event property must have both add and remove accessors</summary>
        internal static string @ERR_EventNeedsBothAccessors => GetResourceString("ERR_EventNeedsBothAccessors");
        /// <summary>'{0}': abstract event cannot use event accessor syntax</summary>
        internal static string @ERR_AbstractEventHasAccessors => GetResourceString("ERR_AbstractEventHasAccessors");
        /// <summary>'{0}': event must be of a delegate type</summary>
        internal static string @ERR_EventNotDelegate => GetResourceString("ERR_EventNotDelegate");
        /// <summary>The event '{0}' is never used</summary>
        internal static string @WRN_UnreferencedEvent => GetResourceString("WRN_UnreferencedEvent");
        /// <summary>Event is never used</summary>
        internal static string @WRN_UnreferencedEvent_Title => GetResourceString("WRN_UnreferencedEvent_Title");
        /// <summary>'{0}': instance event in interface cannot have initializer</summary>
        internal static string @ERR_InterfaceEventInitializer => GetResourceString("ERR_InterfaceEventInitializer");
        /// <summary>The event '{0}' can only appear on the left hand side of += or -= (except when used from within the type '{1}')</summary>
        internal static string @ERR_BadEventUsage => GetResourceString("ERR_BadEventUsage");
        /// <summary>An explicit interface implementation of an event must use event accessor syntax</summary>
        internal static string @ERR_ExplicitEventFieldImpl => GetResourceString("ERR_ExplicitEventFieldImpl");
        /// <summary>'{0}': cannot override; '{1}' is not an event</summary>
        internal static string @ERR_CantOverrideNonEvent => GetResourceString("ERR_CantOverrideNonEvent");
        /// <summary>An add or remove accessor must have a body</summary>
        internal static string @ERR_AddRemoveMustHaveBody => GetResourceString("ERR_AddRemoveMustHaveBody");
        /// <summary>'{0}': abstract event cannot have initializer</summary>
        internal static string @ERR_AbstractEventInitializer => GetResourceString("ERR_AbstractEventInitializer");
        /// <summary>The assembly name '{0}' is reserved and cannot be used as a reference in an interactive session</summary>
        internal static string @ERR_ReservedAssemblyName => GetResourceString("ERR_ReservedAssemblyName");
        /// <summary>The enumerator name '{0}' is reserved and cannot be used</summary>
        internal static string @ERR_ReservedEnumerator => GetResourceString("ERR_ReservedEnumerator");
        /// <summary>The as operator must be used with a reference type or nullable type ('{0}' is a non-nullable value type)</summary>
        internal static string @ERR_AsMustHaveReferenceType => GetResourceString("ERR_AsMustHaveReferenceType");
        /// <summary>The 'l' suffix is easily confused with the digit '1' -- use 'L' for clarity</summary>
        internal static string @WRN_LowercaseEllSuffix => GetResourceString("WRN_LowercaseEllSuffix");
        /// <summary>The 'l' suffix is easily confused with the digit '1'</summary>
        internal static string @WRN_LowercaseEllSuffix_Title => GetResourceString("WRN_LowercaseEllSuffix_Title");
        /// <summary>The event '{0}' can only appear on the left hand side of += or -=</summary>
        internal static string @ERR_BadEventUsageNoField => GetResourceString("ERR_BadEventUsageNoField");
        /// <summary>Constraints are not allowed on non-generic declarations</summary>
        internal static string @ERR_ConstraintOnlyAllowedOnGenericDecl => GetResourceString("ERR_ConstraintOnlyAllowedOnGenericDecl");
        /// <summary>Type parameter declaration must be an identifier not a type</summary>
        internal static string @ERR_TypeParamMustBeIdentifier => GetResourceString("ERR_TypeParamMustBeIdentifier");
        /// <summary>Type '{1}' already reserves a member called '{0}' with the same parameter types</summary>
        internal static string @ERR_MemberReserved => GetResourceString("ERR_MemberReserved");
        /// <summary>The parameter name '{0}' is a duplicate</summary>
        internal static string @ERR_DuplicateParamName => GetResourceString("ERR_DuplicateParamName");
        /// <summary>The namespace '{1}' already contains a definition for '{0}'</summary>
        internal static string @ERR_DuplicateNameInNS => GetResourceString("ERR_DuplicateNameInNS");
        /// <summary>The type '{0}' already contains a definition for '{1}'</summary>
        internal static string @ERR_DuplicateNameInClass => GetResourceString("ERR_DuplicateNameInClass");
        /// <summary>The name '{0}' does not exist in the current context</summary>
        internal static string @ERR_NameNotInContext => GetResourceString("ERR_NameNotInContext");
        /// <summary>The name '{0}' does not exist in the current context (are you missing a reference to assembly '{1}'?)</summary>
        internal static string @ERR_NameNotInContextPossibleMissingReference => GetResourceString("ERR_NameNotInContextPossibleMissingReference");
        /// <summary>'{0}' is an ambiguous reference between '{1}' and '{2}'</summary>
        internal static string @ERR_AmbigContext => GetResourceString("ERR_AmbigContext");
        /// <summary>The using directive for '{0}' appeared previously in this namespace</summary>
        internal static string @WRN_DuplicateUsing => GetResourceString("WRN_DuplicateUsing");
        /// <summary>Using directive appeared previously in this namespace</summary>
        internal static string @WRN_DuplicateUsing_Title => GetResourceString("WRN_DuplicateUsing_Title");
        /// <summary>The modifier '{0}' is not valid for this item</summary>
        internal static string @ERR_BadMemberFlag => GetResourceString("ERR_BadMemberFlag");
        /// <summary>The 'init' accessor is not valid on static members</summary>
        internal static string @ERR_BadInitAccessor => GetResourceString("ERR_BadInitAccessor");
        /// <summary>More than one protection modifier</summary>
        internal static string @ERR_BadMemberProtection => GetResourceString("ERR_BadMemberProtection");
        /// <summary>'{0}' hides inherited member '{1}'. Use the new keyword if hiding was intended.</summary>
        internal static string @WRN_NewRequired => GetResourceString("WRN_NewRequired");
        /// <summary>Member hides inherited member; missing new keyword</summary>
        internal static string @WRN_NewRequired_Title => GetResourceString("WRN_NewRequired_Title");
        /// <summary>A variable was declared with the same name as a variable in a base type. However, the new keyword was not used. This warning informs you that you should use new; the variable is declared as if new had been used in the declaration.</summary>
        internal static string @WRN_NewRequired_Description => GetResourceString("WRN_NewRequired_Description");
        /// <summary>The member '{0}' does not hide an accessible member. The new keyword is not required.</summary>
        internal static string @WRN_NewNotRequired => GetResourceString("WRN_NewNotRequired");
        /// <summary>Member does not hide an inherited member; new keyword is not required</summary>
        internal static string @WRN_NewNotRequired_Title => GetResourceString("WRN_NewNotRequired_Title");
        /// <summary>The evaluation of the constant value for '{0}' involves a circular definition</summary>
        internal static string @ERR_CircConstValue => GetResourceString("ERR_CircConstValue");
        /// <summary>Type '{1}' already defines a member called '{0}' with the same parameter types</summary>
        internal static string @ERR_MemberAlreadyExists => GetResourceString("ERR_MemberAlreadyExists");
        /// <summary>A static member '{0}' cannot be marked as override, virtual, or abstract</summary>
        internal static string @ERR_StaticNotVirtual => GetResourceString("ERR_StaticNotVirtual");
        /// <summary>A member '{0}' marked as override cannot be marked as new or virtual</summary>
        internal static string @ERR_OverrideNotNew => GetResourceString("ERR_OverrideNotNew");
        /// <summary>'{0}' hides inherited member '{1}'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword.</summary>
        internal static string @WRN_NewOrOverrideExpected => GetResourceString("WRN_NewOrOverrideExpected");
        /// <summary>Member hides inherited member; missing override keyword</summary>
        internal static string @WRN_NewOrOverrideExpected_Title => GetResourceString("WRN_NewOrOverrideExpected_Title");
        /// <summary>'{0}': no suitable method found to override</summary>
        internal static string @ERR_OverrideNotExpected => GetResourceString("ERR_OverrideNotExpected");
        /// <summary>A namespace cannot directly contain members such as fields or methods</summary>
        internal static string @ERR_NamespaceUnexpected => GetResourceString("ERR_NamespaceUnexpected");
        /// <summary>'{0}' does not contain a definition for '{1}'</summary>
        internal static string @ERR_NoSuchMember => GetResourceString("ERR_NoSuchMember");
        /// <summary>'{0}' is a {1} but is used like a {2}</summary>
        internal static string @ERR_BadSKknown => GetResourceString("ERR_BadSKknown");
        /// <summary>'{0}' is a {1}, which is not valid in the given context</summary>
        internal static string @ERR_BadSKunknown => GetResourceString("ERR_BadSKunknown");
        /// <summary>An object reference is required for the non-static field, method, or property '{0}'</summary>
        internal static string @ERR_ObjectRequired => GetResourceString("ERR_ObjectRequired");
        /// <summary>The call is ambiguous between the following methods or properties: '{0}' and '{1}'</summary>
        internal static string @ERR_AmbigCall => GetResourceString("ERR_AmbigCall");
        /// <summary>'{0}' is inaccessible due to its protection level</summary>
        internal static string @ERR_BadAccess => GetResourceString("ERR_BadAccess");
        /// <summary>No overload for '{0}' matches delegate '{1}'</summary>
        internal static string @ERR_MethDelegateMismatch => GetResourceString("ERR_MethDelegateMismatch");
        /// <summary>An object of a type convertible to '{0}' is required</summary>
        internal static string @ERR_RetObjectRequired => GetResourceString("ERR_RetObjectRequired");
        /// <summary>Since '{0}' returns void, a return keyword must not be followed by an object expression</summary>
        internal static string @ERR_RetNoObjectRequired => GetResourceString("ERR_RetNoObjectRequired");
        /// <summary>A local variable or function named '{0}' is already defined in this scope</summary>
        internal static string @ERR_LocalDuplicate => GetResourceString("ERR_LocalDuplicate");
        /// <summary>The left-hand side of an assignment must be a variable, property or indexer</summary>
        internal static string @ERR_AssgLvalueExpected => GetResourceString("ERR_AssgLvalueExpected");
        /// <summary>'{0}': a static constructor must be parameterless</summary>
        internal static string @ERR_StaticConstParam => GetResourceString("ERR_StaticConstParam");
        /// <summary>The expression being assigned to '{0}' must be constant</summary>
        internal static string @ERR_NotConstantExpression => GetResourceString("ERR_NotConstantExpression");
        /// <summary>'{0}' is of type '{1}'. A const field of a reference type other than string can only be initialized with null.</summary>
        internal static string @ERR_NotNullConstRefField => GetResourceString("ERR_NotNullConstRefField");
        /// <summary>A local or parameter named '{0}' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter</summary>
        internal static string @ERR_LocalIllegallyOverrides => GetResourceString("ERR_LocalIllegallyOverrides");
        /// <summary>A 'using namespace' directive can only be applied to namespaces; '{0}' is a type not a namespace. Consider a 'using static' directive instead</summary>
        internal static string @ERR_BadUsingNamespace => GetResourceString("ERR_BadUsingNamespace");
        /// <summary>A 'using static' directive can only be applied to types; '{0}' is a namespace not a type. Consider a 'using namespace' directive instead</summary>
        internal static string @ERR_BadUsingType => GetResourceString("ERR_BadUsingType");
        /// <summary>A 'using static' directive cannot be used to declare an alias</summary>
        internal static string @ERR_NoAliasHere => GetResourceString("ERR_NoAliasHere");
        /// <summary>No enclosing loop out of which to break or continue</summary>
        internal static string @ERR_NoBreakOrCont => GetResourceString("ERR_NoBreakOrCont");
        /// <summary>The label '{0}' is a duplicate</summary>
        internal static string @ERR_DuplicateLabel => GetResourceString("ERR_DuplicateLabel");
        /// <summary>The type '{0}' has no constructors defined</summary>
        internal static string @ERR_NoConstructors => GetResourceString("ERR_NoConstructors");
        /// <summary>Cannot create an instance of the abstract type or interface '{0}'</summary>
        internal static string @ERR_NoNewAbstract => GetResourceString("ERR_NoNewAbstract");
        /// <summary>A const field requires a value to be provided</summary>
        internal static string @ERR_ConstValueRequired => GetResourceString("ERR_ConstValueRequired");
        /// <summary>Circular base type dependency involving '{0}' and '{1}'</summary>
        internal static string @ERR_CircularBase => GetResourceString("ERR_CircularBase");
        /// <summary>The delegate '{0}' does not have a valid constructor</summary>
        internal static string @ERR_BadDelegateConstructor => GetResourceString("ERR_BadDelegateConstructor");
        /// <summary>Method name expected</summary>
        internal static string @ERR_MethodNameExpected => GetResourceString("ERR_MethodNameExpected");
        /// <summary>A constant value is expected</summary>
        internal static string @ERR_ConstantExpected => GetResourceString("ERR_ConstantExpected");
        /// <summary>A switch expression or case label must be a bool, char, string, integral, enum, or corresponding nullable type in C# 6 and earlier.</summary>
        internal static string @ERR_V6SwitchGoverningTypeValueExpected => GetResourceString("ERR_V6SwitchGoverningTypeValueExpected");
        /// <summary>A value of an integral type expected</summary>
        internal static string @ERR_IntegralTypeValueExpected => GetResourceString("ERR_IntegralTypeValueExpected");
        /// <summary>The switch statement contains multiple cases with the label value '{0}'</summary>
        internal static string @ERR_DuplicateCaseLabel => GetResourceString("ERR_DuplicateCaseLabel");
        /// <summary>A goto case is only valid inside a switch statement</summary>
        internal static string @ERR_InvalidGotoCase => GetResourceString("ERR_InvalidGotoCase");
        /// <summary>The property or indexer '{0}' cannot be used in this context because it lacks the get accessor</summary>
        internal static string @ERR_PropertyLacksGet => GetResourceString("ERR_PropertyLacksGet");
        /// <summary>The type caught or thrown must be derived from System.Exception</summary>
        internal static string @ERR_BadExceptionType => GetResourceString("ERR_BadExceptionType");
        /// <summary>A throw statement with no arguments is not allowed outside of a catch clause</summary>
        internal static string @ERR_BadEmptyThrow => GetResourceString("ERR_BadEmptyThrow");
        /// <summary>Control cannot leave the body of a finally clause</summary>
        internal static string @ERR_BadFinallyLeave => GetResourceString("ERR_BadFinallyLeave");
        /// <summary>The label '{0}' shadows another label by the same name in a contained scope</summary>
        internal static string @ERR_LabelShadow => GetResourceString("ERR_LabelShadow");
        /// <summary>No such label '{0}' within the scope of the goto statement</summary>
        internal static string @ERR_LabelNotFound => GetResourceString("ERR_LabelNotFound");
        /// <summary>A previous catch clause already catches all exceptions of this or of a super type ('{0}')</summary>
        internal static string @ERR_UnreachableCatch => GetResourceString("ERR_UnreachableCatch");
        /// <summary>Filter expression is a constant 'true', consider removing the filter</summary>
        internal static string @WRN_FilterIsConstantTrue => GetResourceString("WRN_FilterIsConstantTrue");
        /// <summary>Filter expression is a constant 'true'</summary>
        internal static string @WRN_FilterIsConstantTrue_Title => GetResourceString("WRN_FilterIsConstantTrue_Title");
        /// <summary>'{0}': not all code paths return a value</summary>
        internal static string @ERR_ReturnExpected => GetResourceString("ERR_ReturnExpected");
        /// <summary>Unreachable code detected</summary>
        internal static string @WRN_UnreachableCode => GetResourceString("WRN_UnreachableCode");
        /// <summary>Unreachable code detected</summary>
        internal static string @WRN_UnreachableCode_Title => GetResourceString("WRN_UnreachableCode_Title");
        /// <summary>Control cannot fall through from one case label ('{0}') to another</summary>
        internal static string @ERR_SwitchFallThrough => GetResourceString("ERR_SwitchFallThrough");
        /// <summary>This label has not been referenced</summary>
        internal static string @WRN_UnreferencedLabel => GetResourceString("WRN_UnreferencedLabel");
        /// <summary>This label has not been referenced</summary>
        internal static string @WRN_UnreferencedLabel_Title => GetResourceString("WRN_UnreferencedLabel_Title");
        /// <summary>Use of unassigned local variable '{0}'</summary>
        internal static string @ERR_UseDefViolation => GetResourceString("ERR_UseDefViolation");
        /// <summary>Use of unassigned local variable '{0}'</summary>
        internal static string @WRN_UseDefViolation => GetResourceString("WRN_UseDefViolation");
        /// <summary>Use of unassigned local variable</summary>
        internal static string @WRN_UseDefViolation_Title => GetResourceString("WRN_UseDefViolation_Title");
        /// <summary>The variable '{0}' is declared but never used</summary>
        internal static string @WRN_UnreferencedVar => GetResourceString("WRN_UnreferencedVar");
        /// <summary>Variable is declared but never used</summary>
        internal static string @WRN_UnreferencedVar_Title => GetResourceString("WRN_UnreferencedVar_Title");
        /// <summary>The field '{0}' is never used</summary>
        internal static string @WRN_UnreferencedField => GetResourceString("WRN_UnreferencedField");
        /// <summary>Field is never used</summary>
        internal static string @WRN_UnreferencedField_Title => GetResourceString("WRN_UnreferencedField_Title");
        /// <summary>Use of possibly unassigned field '{0}'</summary>
        internal static string @ERR_UseDefViolationField => GetResourceString("ERR_UseDefViolationField");
        /// <summary>Use of possibly unassigned field '{0}'</summary>
        internal static string @WRN_UseDefViolationField => GetResourceString("WRN_UseDefViolationField");
        /// <summary>Use of possibly unassigned field</summary>
        internal static string @WRN_UseDefViolationField_Title => GetResourceString("WRN_UseDefViolationField_Title");
        /// <summary>Use of possibly unassigned auto-implemented property '{0}'</summary>
        internal static string @ERR_UseDefViolationProperty => GetResourceString("ERR_UseDefViolationProperty");
        /// <summary>Use of possibly unassigned auto-implemented property '{0}'</summary>
        internal static string @WRN_UseDefViolationProperty => GetResourceString("WRN_UseDefViolationProperty");
        /// <summary>Use of possibly unassigned auto-implemented property</summary>
        internal static string @WRN_UseDefViolationProperty_Title => GetResourceString("WRN_UseDefViolationProperty_Title");
        /// <summary>Field '{0}' must be fully assigned before control is returned to the caller</summary>
        internal static string @ERR_UnassignedThis => GetResourceString("ERR_UnassignedThis");
        /// <summary>Field '{0}' must be fully assigned before control is returned to the caller</summary>
        internal static string @WRN_UnassignedThis => GetResourceString("WRN_UnassignedThis");
        /// <summary>Fields of a struct must be fully assigned in a constructor before control is returned to the caller</summary>
        internal static string @WRN_UnassignedThis_Title => GetResourceString("WRN_UnassignedThis_Title");
        /// <summary>Type of conditional expression cannot be determined because '{0}' and '{1}' implicitly convert to one another</summary>
        internal static string @ERR_AmbigQM => GetResourceString("ERR_AmbigQM");
        /// <summary>Type of conditional expression cannot be determined because there is no implicit conversion between '{0}' and '{1}'</summary>
        internal static string @ERR_InvalidQM => GetResourceString("ERR_InvalidQM");
        /// <summary>A base class is required for a 'base' reference</summary>
        internal static string @ERR_NoBaseClass => GetResourceString("ERR_NoBaseClass");
        /// <summary>Use of keyword 'base' is not valid in this context</summary>
        internal static string @ERR_BaseIllegal => GetResourceString("ERR_BaseIllegal");
        /// <summary>Member '{0}' cannot be accessed with an instance reference; qualify it with a type name instead</summary>
        internal static string @ERR_ObjectProhibited => GetResourceString("ERR_ObjectProhibited");
        /// <summary>The out parameter '{0}' must be assigned to before control leaves the current method</summary>
        internal static string @ERR_ParamUnassigned => GetResourceString("ERR_ParamUnassigned");
        /// <summary>The out parameter '{0}' must be assigned to before control leaves the current method</summary>
        internal static string @WRN_ParamUnassigned => GetResourceString("WRN_ParamUnassigned");
        /// <summary>An out parameter must be assigned to before control leaves the method</summary>
        internal static string @WRN_ParamUnassigned_Title => GetResourceString("WRN_ParamUnassigned_Title");
        /// <summary>Invalid rank specifier: expected ',' or ']'</summary>
        internal static string @ERR_InvalidArray => GetResourceString("ERR_InvalidArray");
        /// <summary>'{0}' cannot be extern and declare a body</summary>
        internal static string @ERR_ExternHasBody => GetResourceString("ERR_ExternHasBody");
        /// <summary>'{0}' cannot be extern and have a constructor initializer</summary>
        internal static string @ERR_ExternHasConstructorInitializer => GetResourceString("ERR_ExternHasConstructorInitializer");
        /// <summary>'{0}' cannot be both extern and abstract</summary>
        internal static string @ERR_AbstractAndExtern => GetResourceString("ERR_AbstractAndExtern");
        /// <summary>Attribute constructor parameter '{0}' has type '{1}', which is not a valid attribute parameter type</summary>
        internal static string @ERR_BadAttributeParamType => GetResourceString("ERR_BadAttributeParamType");
        /// <summary>An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type</summary>
        internal static string @ERR_BadAttributeArgument => GetResourceString("ERR_BadAttributeArgument");
        /// <summary>Attribute constructor parameter '{0}' is optional, but no default parameter value was specified.</summary>
        internal static string @ERR_BadAttributeParamDefaultArgument => GetResourceString("ERR_BadAttributeParamDefaultArgument");
        /// <summary>The given expression is always of the provided ('{0}') type</summary>
        internal static string @WRN_IsAlwaysTrue => GetResourceString("WRN_IsAlwaysTrue");
        /// <summary>'is' expression's given expression is always of the provided type</summary>
        internal static string @WRN_IsAlwaysTrue_Title => GetResourceString("WRN_IsAlwaysTrue_Title");
        /// <summary>The given expression is never of the provided ('{0}') type</summary>
        internal static string @WRN_IsAlwaysFalse => GetResourceString("WRN_IsAlwaysFalse");
        /// <summary>'is' expression's given expression is never of the provided type</summary>
        internal static string @WRN_IsAlwaysFalse_Title => GetResourceString("WRN_IsAlwaysFalse_Title");
        /// <summary>'{0}' is not a reference type as required by the lock statement</summary>
        internal static string @ERR_LockNeedsReference => GetResourceString("ERR_LockNeedsReference");
        /// <summary>Use of null is not valid in this context</summary>
        internal static string @ERR_NullNotValid => GetResourceString("ERR_NullNotValid");
        /// <summary>Use of default literal is not valid in this context</summary>
        internal static string @ERR_DefaultLiteralNotValid => GetResourceString("ERR_DefaultLiteralNotValid");
        /// <summary>The 'this' object cannot be used before all of its fields have been assigned</summary>
        internal static string @ERR_UseDefViolationThis => GetResourceString("ERR_UseDefViolationThis");
        /// <summary>The 'this' object cannot be used before all of its fields have been assigned</summary>
        internal static string @WRN_UseDefViolationThis => GetResourceString("WRN_UseDefViolationThis");
        /// <summary>The 'this' object cannot be used in a constructor before all of its fields have been assigned</summary>
        internal static string @WRN_UseDefViolationThis_Title => GetResourceString("WRN_UseDefViolationThis_Title");
        /// <summary>The __arglist construct is valid only within a variable argument method</summary>
        internal static string @ERR_ArgsInvalid => GetResourceString("ERR_ArgsInvalid");
        /// <summary>The * or -&gt; operator must be applied to a pointer</summary>
        internal static string @ERR_PtrExpected => GetResourceString("ERR_PtrExpected");
        /// <summary>A pointer must be indexed by only one value</summary>
        internal static string @ERR_PtrIndexSingle => GetResourceString("ERR_PtrIndexSingle");
        /// <summary>Using '{0}' as a ref or out value or taking its address may cause a runtime exception because it is a field of a marshal-by-reference class</summary>
        internal static string @WRN_ByRefNonAgileField => GetResourceString("WRN_ByRefNonAgileField");
        /// <summary>Using a field of a marshal-by-reference class as a ref or out value or taking its address may cause a runtime exception</summary>
        internal static string @WRN_ByRefNonAgileField_Title => GetResourceString("WRN_ByRefNonAgileField_Title");
        /// <summary>A static readonly field cannot be assigned to (except in a static constructor or a variable initializer)</summary>
        internal static string @ERR_AssgReadonlyStatic => GetResourceString("ERR_AssgReadonlyStatic");
        /// <summary>A static readonly field cannot be used as a ref or out value (except in a static constructor)</summary>
        internal static string @ERR_RefReadonlyStatic => GetResourceString("ERR_RefReadonlyStatic");
        /// <summary>Property or indexer '{0}' cannot be assigned to -- it is read only</summary>
        internal static string @ERR_AssgReadonlyProp => GetResourceString("ERR_AssgReadonlyProp");
        /// <summary>Only assignment, call, increment, decrement, await, and new object expressions can be used as a statement</summary>
        internal static string @ERR_IllegalStatement => GetResourceString("ERR_IllegalStatement");
        /// <summary>foreach requires that the return type '{0}' of '{1}' must have a suitable public 'MoveNext' method and public 'Current' property</summary>
        internal static string @ERR_BadGetEnumerator => GetResourceString("ERR_BadGetEnumerator");
        /// <summary>Asynchronous foreach requires that the return type '{0}' of '{1}' must have a suitable public 'MoveNextAsync' method and public 'Current' property</summary>
        internal static string @ERR_BadGetAsyncEnumerator => GetResourceString("ERR_BadGetAsyncEnumerator");
        /// <summary>Only 65534 locals, including those generated by the compiler, are allowed</summary>
        internal static string @ERR_TooManyLocals => GetResourceString("ERR_TooManyLocals");
        /// <summary>Cannot call an abstract base member: '{0}'</summary>
        internal static string @ERR_AbstractBaseCall => GetResourceString("ERR_AbstractBaseCall");
        /// <summary>A property or indexer may not be passed as an out or ref parameter</summary>
        internal static string @ERR_RefProperty => GetResourceString("ERR_RefProperty");
        /// <summary>Cannot take the address of, get the size of, or declare a pointer to a managed type ('{0}')</summary>
        internal static string @ERR_ManagedAddr => GetResourceString("ERR_ManagedAddr");
        /// <summary>The type of a local declared in a fixed statement must be a pointer type</summary>
        internal static string @ERR_BadFixedInitType => GetResourceString("ERR_BadFixedInitType");
        /// <summary>You must provide an initializer in a fixed or using statement declaration</summary>
        internal static string @ERR_FixedMustInit => GetResourceString("ERR_FixedMustInit");
        /// <summary>Cannot take the address of the given expression</summary>
        internal static string @ERR_InvalidAddrOp => GetResourceString("ERR_InvalidAddrOp");
        /// <summary>You can only take the address of an unfixed expression inside of a fixed statement initializer</summary>
        internal static string @ERR_FixedNeeded => GetResourceString("ERR_FixedNeeded");
        /// <summary>You cannot use the fixed statement to take the address of an already fixed expression</summary>
        internal static string @ERR_FixedNotNeeded => GetResourceString("ERR_FixedNotNeeded");
        /// <summary>The given expression cannot be used in a fixed statement</summary>
        internal static string @ERR_ExprCannotBeFixed => GetResourceString("ERR_ExprCannotBeFixed");
        /// <summary>Pointers and fixed size buffers may only be used in an unsafe context</summary>
        internal static string @ERR_UnsafeNeeded => GetResourceString("ERR_UnsafeNeeded");
        /// <summary>The return type of operator True or False must be bool</summary>
        internal static string @ERR_OpTFRetType => GetResourceString("ERR_OpTFRetType");
        /// <summary>The operator '{0}' requires a matching operator '{1}' to also be defined</summary>
        internal static string @ERR_OperatorNeedsMatch => GetResourceString("ERR_OperatorNeedsMatch");
        /// <summary>In order to be applicable as a short circuit operator a user-defined logical operator ('{0}') must have the same return type and parameter types</summary>
        internal static string @ERR_BadBoolOp => GetResourceString("ERR_BadBoolOp");
        /// <summary>In order for '{0}' to be applicable as a short circuit operator, its declaring type '{1}' must define operator true and operator false</summary>
        internal static string @ERR_MustHaveOpTF => GetResourceString("ERR_MustHaveOpTF");
        /// <summary>The variable '{0}' is assigned but its value is never used</summary>
        internal static string @WRN_UnreferencedVarAssg => GetResourceString("WRN_UnreferencedVarAssg");
        /// <summary>Variable is assigned but its value is never used</summary>
        internal static string @WRN_UnreferencedVarAssg_Title => GetResourceString("WRN_UnreferencedVarAssg_Title");
        /// <summary>The operation overflows at compile time in checked mode</summary>
        internal static string @ERR_CheckedOverflow => GetResourceString("ERR_CheckedOverflow");
        /// <summary>Constant value '{0}' cannot be converted to a '{1}' (use 'unchecked' syntax to override)</summary>
        internal static string @ERR_ConstOutOfRangeChecked => GetResourceString("ERR_ConstOutOfRangeChecked");
        /// <summary>A method with vararg cannot be generic, be in a generic type, or have a params parameter</summary>
        internal static string @ERR_BadVarargs => GetResourceString("ERR_BadVarargs");
        /// <summary>The params parameter must be a single dimensional array</summary>
        internal static string @ERR_ParamsMustBeArray => GetResourceString("ERR_ParamsMustBeArray");
        /// <summary>An __arglist expression may only appear inside of a call or new expression</summary>
        internal static string @ERR_IllegalArglist => GetResourceString("ERR_IllegalArglist");
        /// <summary>Unsafe code may only appear if compiling with /unsafe</summary>
        internal static string @ERR_IllegalUnsafe => GetResourceString("ERR_IllegalUnsafe");
        /// <summary>Ambiguity between '{0}' and '{1}'</summary>
        internal static string @ERR_AmbigMember => GetResourceString("ERR_AmbigMember");
        /// <summary>Type and identifier are both required in a foreach statement</summary>
        internal static string @ERR_BadForeachDecl => GetResourceString("ERR_BadForeachDecl");
        /// <summary>A params parameter must be the last parameter in a formal parameter list</summary>
        internal static string @ERR_ParamsLast => GetResourceString("ERR_ParamsLast");
        /// <summary>'{0}' does not have a predefined size, therefore sizeof can only be used in an unsafe context</summary>
        internal static string @ERR_SizeofUnsafe => GetResourceString("ERR_SizeofUnsafe");
        /// <summary>The type or namespace name '{0}' does not exist in the namespace '{1}' (are you missing an assembly reference?)</summary>
        internal static string @ERR_DottedTypeNameNotFoundInNS => GetResourceString("ERR_DottedTypeNameNotFoundInNS");
        /// <summary>A field initializer cannot reference the non-static field, method, or property '{0}'</summary>
        internal static string @ERR_FieldInitRefNonstatic => GetResourceString("ERR_FieldInitRefNonstatic");
        /// <summary>'{0}' cannot be sealed because it is not an override</summary>
        internal static string @ERR_SealedNonOverride => GetResourceString("ERR_SealedNonOverride");
        /// <summary>'{0}': cannot override inherited member '{1}' because it is sealed</summary>
        internal static string @ERR_CantOverrideSealed => GetResourceString("ERR_CantOverrideSealed");
        /// <summary>The operation in question is undefined on void pointers</summary>
        internal static string @ERR_VoidError => GetResourceString("ERR_VoidError");
        /// <summary>The Conditional attribute is not valid on '{0}' because it is an override method</summary>
        internal static string @ERR_ConditionalOnOverride => GetResourceString("ERR_ConditionalOnOverride");
        /// <summary>Local function '{0}' must be 'static' in order to use the Conditional attribute</summary>
        internal static string @ERR_ConditionalOnLocalFunction => GetResourceString("ERR_ConditionalOnLocalFunction");
        /// <summary>Neither 'is' nor 'as' is valid on pointer types</summary>
        internal static string @ERR_PointerInAsOrIs => GetResourceString("ERR_PointerInAsOrIs");
        /// <summary>Destructors and object.Finalize cannot be called directly. Consider calling IDisposable.Dispose if available.</summary>
        internal static string @ERR_CallingFinalizeDeprecated => GetResourceString("ERR_CallingFinalizeDeprecated");
        /// <summary>The type or namespace name '{0}' could not be found (are you missing a using directive or an assembly reference?)</summary>
        internal static string @ERR_SingleTypeNameNotFound => GetResourceString("ERR_SingleTypeNameNotFound");
        /// <summary>Cannot use a negative size with stackalloc</summary>
        internal static string @ERR_NegativeStackAllocSize => GetResourceString("ERR_NegativeStackAllocSize");
        /// <summary>Cannot create an array with a negative size</summary>
        internal static string @ERR_NegativeArraySize => GetResourceString("ERR_NegativeArraySize");
        /// <summary>Do not override object.Finalize. Instead, provide a destructor.</summary>
        internal static string @ERR_OverrideFinalizeDeprecated => GetResourceString("ERR_OverrideFinalizeDeprecated");
        /// <summary>Do not directly call your base type Finalize method. It is called automatically from your destructor.</summary>
        internal static string @ERR_CallingBaseFinalizeDeprecated => GetResourceString("ERR_CallingBaseFinalizeDeprecated");
        /// <summary>Indexing an array with a negative index (array indices always start at zero)</summary>
        internal static string @WRN_NegativeArrayIndex => GetResourceString("WRN_NegativeArrayIndex");
        /// <summary>Indexing an array with a negative index</summary>
        internal static string @WRN_NegativeArrayIndex_Title => GetResourceString("WRN_NegativeArrayIndex_Title");
        /// <summary>Possible unintended reference comparison; to get a value comparison, cast the left hand side to type '{0}'</summary>
        internal static string @WRN_BadRefCompareLeft => GetResourceString("WRN_BadRefCompareLeft");
        /// <summary>Possible unintended reference comparison; left hand side needs cast</summary>
        internal static string @WRN_BadRefCompareLeft_Title => GetResourceString("WRN_BadRefCompareLeft_Title");
        /// <summary>Possible unintended reference comparison; to get a value comparison, cast the right hand side to type '{0}'</summary>
        internal static string @WRN_BadRefCompareRight => GetResourceString("WRN_BadRefCompareRight");
        /// <summary>Possible unintended reference comparison; right hand side needs cast</summary>
        internal static string @WRN_BadRefCompareRight_Title => GetResourceString("WRN_BadRefCompareRight_Title");
        /// <summary>The right hand side of a fixed statement assignment may not be a cast expression</summary>
        internal static string @ERR_BadCastInFixed => GetResourceString("ERR_BadCastInFixed");
        /// <summary>stackalloc may not be used in a catch or finally block</summary>
        internal static string @ERR_StackallocInCatchFinally => GetResourceString("ERR_StackallocInCatchFinally");
        /// <summary>An __arglist parameter must be the last parameter in a formal parameter list</summary>
        internal static string @ERR_VarargsLast => GetResourceString("ERR_VarargsLast");
        /// <summary>Missing partial modifier on declaration of type '{0}'; another partial declaration of this type exists</summary>
        internal static string @ERR_MissingPartial => GetResourceString("ERR_MissingPartial");
        /// <summary>Partial declarations of '{0}' must be all classes, all records, all structs, or all interfaces</summary>
        internal static string @ERR_PartialTypeKindConflict => GetResourceString("ERR_PartialTypeKindConflict");
        /// <summary>Partial declarations of '{0}' have conflicting accessibility modifiers</summary>
        internal static string @ERR_PartialModifierConflict => GetResourceString("ERR_PartialModifierConflict");
        /// <summary>Partial declarations of '{0}' must not specify different base classes</summary>
        internal static string @ERR_PartialMultipleBases => GetResourceString("ERR_PartialMultipleBases");
        /// <summary>Partial declarations of '{0}' must have the same type parameter names in the same order</summary>
        internal static string @ERR_PartialWrongTypeParams => GetResourceString("ERR_PartialWrongTypeParams");
        /// <summary>Partial declarations of '{0}' have inconsistent constraints for type parameter '{1}'</summary>
        internal static string @ERR_PartialWrongConstraints => GetResourceString("ERR_PartialWrongConstraints");
        /// <summary>Cannot implicitly convert type '{0}' to '{1}'. An explicit conversion exists (are you missing a cast?)</summary>
        internal static string @ERR_NoImplicitConvCast => GetResourceString("ERR_NoImplicitConvCast");
        /// <summary>The 'partial' modifier can only appear immediately before 'class', 'record', 'struct', 'interface', or 'void'</summary>
        internal static string @ERR_PartialMisplaced => GetResourceString("ERR_PartialMisplaced");
        /// <summary>Imported type '{0}' is invalid. It contains a circular base type dependency.</summary>
        internal static string @ERR_ImportedCircularBase => GetResourceString("ERR_ImportedCircularBase");
        /// <summary>Use of unassigned out parameter '{0}'</summary>
        internal static string @ERR_UseDefViolationOut => GetResourceString("ERR_UseDefViolationOut");
        /// <summary>Use of unassigned out parameter '{0}'</summary>
        internal static string @WRN_UseDefViolationOut => GetResourceString("WRN_UseDefViolationOut");
        /// <summary>Use of unassigned out parameter</summary>
        internal static string @WRN_UseDefViolationOut_Title => GetResourceString("WRN_UseDefViolationOut_Title");
        /// <summary>Array size cannot be specified in a variable declaration (try initializing with a 'new' expression)</summary>
        internal static string @ERR_ArraySizeInDeclaration => GetResourceString("ERR_ArraySizeInDeclaration");
        /// <summary>The property or indexer '{0}' cannot be used in this context because the get accessor is inaccessible</summary>
        internal static string @ERR_InaccessibleGetter => GetResourceString("ERR_InaccessibleGetter");
        /// <summary>The property or indexer '{0}' cannot be used in this context because the set accessor is inaccessible</summary>
        internal static string @ERR_InaccessibleSetter => GetResourceString("ERR_InaccessibleSetter");
        /// <summary>The accessibility modifier of the '{0}' accessor must be more restrictive than the property or indexer '{1}'</summary>
        internal static string @ERR_InvalidPropertyAccessMod => GetResourceString("ERR_InvalidPropertyAccessMod");
        /// <summary>Cannot specify accessibility modifiers for both accessors of the property or indexer '{0}'</summary>
        internal static string @ERR_DuplicatePropertyAccessMods => GetResourceString("ERR_DuplicatePropertyAccessMods");
        /// <summary>'{0}': accessibility modifiers on accessors may only be used if the property or indexer has both a get and a set accessor</summary>
        internal static string @ERR_AccessModMissingAccessor => GetResourceString("ERR_AccessModMissingAccessor");
        /// <summary>'{0}' does not implement interface member '{1}'. '{2}' is not public.</summary>
        internal static string @ERR_UnimplementedInterfaceAccessor => GetResourceString("ERR_UnimplementedInterfaceAccessor");
        /// <summary>'{0}' does not implement the '{1}' pattern. '{2}' is ambiguous with '{3}'.</summary>
        internal static string @WRN_PatternIsAmbiguous => GetResourceString("WRN_PatternIsAmbiguous");
        /// <summary>Type does not implement the collection pattern; members are ambiguous</summary>
        internal static string @WRN_PatternIsAmbiguous_Title => GetResourceString("WRN_PatternIsAmbiguous_Title");
        /// <summary>'{0}' does not implement the '{1}' pattern. '{2}' is not a public instance or extension method.</summary>
        internal static string @WRN_PatternNotPublicOrNotInstance => GetResourceString("WRN_PatternNotPublicOrNotInstance");
        /// <summary>Type does not implement the collection pattern; member is is not a public instance or extension method.</summary>
        internal static string @WRN_PatternNotPublicOrNotInstance_Title => GetResourceString("WRN_PatternNotPublicOrNotInstance_Title");
        /// <summary>'{0}' does not implement the '{1}' pattern. '{2}' has the wrong signature.</summary>
        internal static string @WRN_PatternBadSignature => GetResourceString("WRN_PatternBadSignature");
        /// <summary>Type does not implement the collection pattern; member has the wrong signature</summary>
        internal static string @WRN_PatternBadSignature_Title => GetResourceString("WRN_PatternBadSignature_Title");
        /// <summary>Friend access was granted by '{0}', but the public key of the output assembly ('{1}') does not match that specified by the InternalsVisibleTo attribute in the granting assembly.</summary>
        internal static string @ERR_FriendRefNotEqualToThis => GetResourceString("ERR_FriendRefNotEqualToThis");
        /// <summary>Friend access was granted by '{0}', but the strong name signing state of the output assembly does not match that of the granting assembly.</summary>
        internal static string @ERR_FriendRefSigningMismatch => GetResourceString("ERR_FriendRefSigningMismatch");
        /// <summary>There is no defined ordering between fields in multiple declarations of partial struct '{0}'. To specify an ordering, all instance fields must be in the same declaration.</summary>
        internal static string @WRN_SequentialOnPartialClass => GetResourceString("WRN_SequentialOnPartialClass");
        /// <summary>There is no defined ordering between fields in multiple declarations of partial struct</summary>
        internal static string @WRN_SequentialOnPartialClass_Title => GetResourceString("WRN_SequentialOnPartialClass_Title");
        /// <summary>The type '{0}' cannot be declared const</summary>
        internal static string @ERR_BadConstType => GetResourceString("ERR_BadConstType");
        /// <summary>Cannot create an instance of the variable type '{0}' because it does not have the new() constraint</summary>
        internal static string @ERR_NoNewTyvar => GetResourceString("ERR_NoNewTyvar");
        /// <summary>Using the generic {1} '{0}' requires {2} type arguments</summary>
        internal static string @ERR_BadArity => GetResourceString("ERR_BadArity");
        /// <summary>The type '{0}' may not be used as a type argument</summary>
        internal static string @ERR_BadTypeArgument => GetResourceString("ERR_BadTypeArgument");
        /// <summary>The {1} '{0}' cannot be used with type arguments</summary>
        internal static string @ERR_TypeArgsNotAllowed => GetResourceString("ERR_TypeArgsNotAllowed");
        /// <summary>The non-generic {1} '{0}' cannot be used with type arguments</summary>
        internal static string @ERR_HasNoTypeVars => GetResourceString("ERR_HasNoTypeVars");
        /// <summary>'{2}' must be a non-abstract type with a public parameterless constructor in order to use it as parameter '{1}' in the generic type or method '{0}'</summary>
        internal static string @ERR_NewConstraintNotSatisfied => GetResourceString("ERR_NewConstraintNotSatisfied");
        /// <summary>The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. There is no implicit reference conversion from '{3}' to '{1}'.</summary>
        internal static string @ERR_GenericConstraintNotSatisfiedRefType => GetResourceString("ERR_GenericConstraintNotSatisfiedRefType");
        /// <summary>The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. The nullable type '{3}' does not satisfy the constraint of '{1}'.</summary>
        internal static string @ERR_GenericConstraintNotSatisfiedNullableEnum => GetResourceString("ERR_GenericConstraintNotSatisfiedNullableEnum");
        /// <summary>The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. The nullable type '{3}' does not satisfy the constraint of '{1}'. Nullable types can not satisfy any interface constraints.</summary>
        internal static string @ERR_GenericConstraintNotSatisfiedNullableInterface => GetResourceString("ERR_GenericConstraintNotSatisfiedNullableInterface");
        /// <summary>The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. There is no boxing conversion or type parameter conversion from '{3}' to '{1}'.</summary>
        internal static string @ERR_GenericConstraintNotSatisfiedTyVar => GetResourceString("ERR_GenericConstraintNotSatisfiedTyVar");
        /// <summary>The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. There is no boxing conversion from '{3}' to '{1}'.</summary>
        internal static string @ERR_GenericConstraintNotSatisfiedValType => GetResourceString("ERR_GenericConstraintNotSatisfiedValType");
        /// <summary>The parameter name '{0}' conflicts with an automatically-generated parameter name</summary>
        internal static string @ERR_DuplicateGeneratedName => GetResourceString("ERR_DuplicateGeneratedName");
        /// <summary>The type or namespace name '{0}' could not be found in the global namespace (are you missing an assembly reference?)</summary>
        internal static string @ERR_GlobalSingleTypeNameNotFound => GetResourceString("ERR_GlobalSingleTypeNameNotFound");
        /// <summary>The new() constraint must be the last constraint specified</summary>
        internal static string @ERR_NewBoundMustBeLast => GetResourceString("ERR_NewBoundMustBeLast");
        /// <summary>'{0}': an entry point cannot be generic or in a generic type</summary>
        internal static string @WRN_MainCantBeGeneric => GetResourceString("WRN_MainCantBeGeneric");
        /// <summary>An entry point cannot be generic or in a generic type</summary>
        internal static string @WRN_MainCantBeGeneric_Title => GetResourceString("WRN_MainCantBeGeneric_Title");
        /// <summary>Cannot convert null to type parameter '{0}' because it could be a non-nullable value type. Consider using 'default({0})' instead.</summary>
        internal static string @ERR_TypeVarCantBeNull => GetResourceString("ERR_TypeVarCantBeNull");
        /// <summary>Cannot apply attribute class '{0}' because it is generic</summary>
        internal static string @ERR_AttributeCantBeGeneric => GetResourceString("ERR_AttributeCantBeGeneric");
        /// <summary>Duplicate constraint '{0}' for type parameter '{1}'</summary>
        internal static string @ERR_DuplicateBound => GetResourceString("ERR_DuplicateBound");
        /// <summary>The class type constraint '{0}' must come before any other constraints</summary>
        internal static string @ERR_ClassBoundNotFirst => GetResourceString("ERR_ClassBoundNotFirst");
        /// <summary>'{1} {0}' has the wrong return type</summary>
        internal static string @ERR_BadRetType => GetResourceString("ERR_BadRetType");
        /// <summary>Ref mismatch between '{0}' and delegate '{1}'</summary>
        internal static string @ERR_DelegateRefMismatch => GetResourceString("ERR_DelegateRefMismatch");
        /// <summary>A constraint clause has already been specified for type parameter '{0}'. All of the constraints for a type parameter must be specified in a single where clause.</summary>
        internal static string @ERR_DuplicateConstraintClause => GetResourceString("ERR_DuplicateConstraintClause");
        /// <summary>The type arguments for method '{0}' cannot be inferred from the usage. Try specifying the type arguments explicitly.</summary>
        internal static string @ERR_CantInferMethTypeArgs => GetResourceString("ERR_CantInferMethTypeArgs");
        /// <summary>'{0}': a parameter, local variable, or local function cannot have the same name as a method type parameter</summary>
        internal static string @ERR_LocalSameNameAsTypeParam => GetResourceString("ERR_LocalSameNameAsTypeParam");
        /// <summary>The type parameter '{0}' cannot be used with the 'as' operator because it does not have a class type constraint nor a 'class' constraint</summary>
        internal static string @ERR_AsWithTypeVar => GetResourceString("ERR_AsWithTypeVar");
        /// <summary>The field '{0}' is assigned but its value is never used</summary>
        internal static string @WRN_UnreferencedFieldAssg => GetResourceString("WRN_UnreferencedFieldAssg");
        /// <summary>Field is assigned but its value is never used</summary>
        internal static string @WRN_UnreferencedFieldAssg_Title => GetResourceString("WRN_UnreferencedFieldAssg_Title");
        /// <summary>The '{0}' attribute is valid only on an indexer that is not an explicit interface member declaration</summary>
        internal static string @ERR_BadIndexerNameAttr => GetResourceString("ERR_BadIndexerNameAttr");
        /// <summary>'{0}': an attribute argument cannot use type parameters</summary>
        internal static string @ERR_AttrArgWithTypeVars => GetResourceString("ERR_AttrArgWithTypeVars");
        /// <summary>'{0}': cannot provide arguments when creating an instance of a variable type</summary>
        internal static string @ERR_NewTyvarWithArgs => GetResourceString("ERR_NewTyvarWithArgs");
        /// <summary>'{0}': an abstract type cannot be sealed or static</summary>
        internal static string @ERR_AbstractSealedStatic => GetResourceString("ERR_AbstractSealedStatic");
        /// <summary>Ambiguous reference in cref attribute: '{0}'. Assuming '{1}', but could have also matched other overloads including '{2}'.</summary>
        internal static string @WRN_AmbiguousXMLReference => GetResourceString("WRN_AmbiguousXMLReference");
        /// <summary>Ambiguous reference in cref attribute</summary>
        internal static string @WRN_AmbiguousXMLReference_Title => GetResourceString("WRN_AmbiguousXMLReference_Title");
        /// <summary>'{0}': a reference to a volatile field will not be treated as volatile</summary>
        internal static string @WRN_VolatileByRef => GetResourceString("WRN_VolatileByRef");
        /// <summary>A reference to a volatile field will not be treated as volatile</summary>
        internal static string @WRN_VolatileByRef_Title => GetResourceString("WRN_VolatileByRef_Title");
        /// <summary>A volatile field should not normally be used as a ref or out value, since it will not be treated as volatile. There are exceptions to this, such as when calling an interlocked API.</summary>
        internal static string @WRN_VolatileByRef_Description => GetResourceString("WRN_VolatileByRef_Description");
        /// <summary>Since '{1}' has the ComImport attribute, '{0}' must be extern or abstract</summary>
        internal static string @ERR_ComImportWithImpl => GetResourceString("ERR_ComImportWithImpl");
        /// <summary>'{0}': a class with the ComImport attribute cannot specify a base class</summary>
        internal static string @ERR_ComImportWithBase => GetResourceString("ERR_ComImportWithBase");
        /// <summary>The constraints for type parameter '{0}' of method '{1}' must match the constraints for type parameter '{2}' of interface method '{3}'. Consider using an explicit interface implementation instead.</summary>
        internal static string @ERR_ImplBadConstraints => GetResourceString("ERR_ImplBadConstraints");
        /// <summary>The tuple element names in the signature of method '{0}' must match the tuple element names of interface method '{1}' (including on the return type).</summary>
        internal static string @ERR_ImplBadTupleNames => GetResourceString("ERR_ImplBadTupleNames");
        /// <summary>The type name '{0}' does not exist in the type '{1}'</summary>
        internal static string @ERR_DottedTypeNameNotFoundInAgg => GetResourceString("ERR_DottedTypeNameNotFoundInAgg");
        /// <summary>Cannot convert method group '{0}' to non-delegate type '{1}'. Did you intend to invoke the method?</summary>
        internal static string @ERR_MethGrpToNonDel => GetResourceString("ERR_MethGrpToNonDel");
        /// <summary>The extern alias '{0}' was not specified in a /reference option</summary>
        internal static string @ERR_BadExternAlias => GetResourceString("ERR_BadExternAlias");
        /// <summary>Cannot use alias '{0}' with '::' since the alias references a type. Use '.' instead.</summary>
        internal static string @ERR_ColColWithTypeAlias => GetResourceString("ERR_ColColWithTypeAlias");
        /// <summary>Alias '{0}' not found</summary>
        internal static string @ERR_AliasNotFound => GetResourceString("ERR_AliasNotFound");
        /// <summary>The type '{1}' exists in both '{0}' and '{2}'</summary>
        internal static string @ERR_SameFullNameAggAgg => GetResourceString("ERR_SameFullNameAggAgg");
        /// <summary>The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'</summary>
        internal static string @ERR_SameFullNameNsAgg => GetResourceString("ERR_SameFullNameNsAgg");
        /// <summary>The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.</summary>
        internal static string @WRN_SameFullNameThisNsAgg => GetResourceString("WRN_SameFullNameThisNsAgg");
        /// <summary>Namespace conflicts with imported type</summary>
        internal static string @WRN_SameFullNameThisNsAgg_Title => GetResourceString("WRN_SameFullNameThisNsAgg_Title");
        /// <summary>The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.</summary>
        internal static string @WRN_SameFullNameThisAggAgg => GetResourceString("WRN_SameFullNameThisAggAgg");
        /// <summary>Type conflicts with imported type</summary>
        internal static string @WRN_SameFullNameThisAggAgg_Title => GetResourceString("WRN_SameFullNameThisAggAgg_Title");
        /// <summary>The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.</summary>
        internal static string @WRN_SameFullNameThisAggNs => GetResourceString("WRN_SameFullNameThisAggNs");
        /// <summary>Type conflicts with imported namespace</summary>
        internal static string @WRN_SameFullNameThisAggNs_Title => GetResourceString("WRN_SameFullNameThisAggNs_Title");
        /// <summary>The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'</summary>
        internal static string @ERR_SameFullNameThisAggThisNs => GetResourceString("ERR_SameFullNameThisAggThisNs");
        /// <summary>An extern alias declaration must precede all other elements defined in the namespace</summary>
        internal static string @ERR_ExternAfterElements => GetResourceString("ERR_ExternAfterElements");
        /// <summary>Defining an alias named 'global' is ill-advised since 'global::' always references the global namespace and not an alias</summary>
        internal static string @WRN_GlobalAliasDefn => GetResourceString("WRN_GlobalAliasDefn");
        /// <summary>Defining an alias named 'global' is ill-advised</summary>
        internal static string @WRN_GlobalAliasDefn_Title => GetResourceString("WRN_GlobalAliasDefn_Title");
        /// <summary>'{0}': a type cannot be both static and sealed</summary>
        internal static string @ERR_SealedStaticClass => GetResourceString("ERR_SealedStaticClass");
        /// <summary>'{0}': abstract properties cannot have private accessors</summary>
        internal static string @ERR_PrivateAbstractAccessor => GetResourceString("ERR_PrivateAbstractAccessor");
        /// <summary>Syntax error; value expected</summary>
        internal static string @ERR_ValueExpected => GetResourceString("ERR_ValueExpected");
        /// <summary>Cannot modify the result of an unboxing conversion</summary>
        internal static string @ERR_UnboxNotLValue => GetResourceString("ERR_UnboxNotLValue");
        /// <summary>Foreach cannot operate on a '{0}'. Did you intend to invoke the '{0}'?</summary>
        internal static string @ERR_AnonMethGrpInForEach => GetResourceString("ERR_AnonMethGrpInForEach");
        /// <summary>The return type for ++ or -- operator must match the parameter type or be derived from the parameter type</summary>
        internal static string @ERR_BadIncDecRetType => GetResourceString("ERR_BadIncDecRetType");
        /// <summary>The 'class', 'struct', 'unmanaged', 'notnull', and 'default' constraints cannot be combined or duplicated, and must be specified first in the constraints list.</summary>
        internal static string @ERR_TypeConstraintsMustBeUniqueAndFirst => GetResourceString("ERR_TypeConstraintsMustBeUniqueAndFirst");
        /// <summary>'{0}': cannot specify both a constraint class and the 'class' or 'struct' constraint</summary>
        internal static string @ERR_RefValBoundWithClass => GetResourceString("ERR_RefValBoundWithClass");
        /// <summary>'{0}': cannot specify both a constraint class and the 'unmanaged' constraint</summary>
        internal static string @ERR_UnmanagedBoundWithClass => GetResourceString("ERR_UnmanagedBoundWithClass");
        /// <summary>The 'new()' constraint cannot be used with the 'struct' constraint</summary>
        internal static string @ERR_NewBoundWithVal => GetResourceString("ERR_NewBoundWithVal");
        /// <summary>The type '{2}' must be a reference type in order to use it as parameter '{1}' in the generic type or method '{0}'</summary>
        internal static string @ERR_RefConstraintNotSatisfied => GetResourceString("ERR_RefConstraintNotSatisfied");
        /// <summary>The type '{2}' must be a non-nullable value type in order to use it as parameter '{1}' in the generic type or method '{0}'</summary>
        internal static string @ERR_ValConstraintNotSatisfied => GetResourceString("ERR_ValConstraintNotSatisfied");
        /// <summary>Circular constraint dependency involving '{0}' and '{1}'</summary>
        internal static string @ERR_CircularConstraint => GetResourceString("ERR_CircularConstraint");
        /// <summary>Type parameter '{0}' inherits conflicting constraints '{1}' and '{2}'</summary>
        internal static string @ERR_BaseConstraintConflict => GetResourceString("ERR_BaseConstraintConflict");
        /// <summary>Type parameter '{1}' has the 'struct' constraint so '{1}' cannot be used as a constraint for '{0}'</summary>
        internal static string @ERR_ConWithValCon => GetResourceString("ERR_ConWithValCon");
        /// <summary>Ambiguous user defined conversions '{0}' and '{1}' when converting from '{2}' to '{3}'</summary>
        internal static string @ERR_AmbigUDConv => GetResourceString("ERR_AmbigUDConv");
        /// <summary>The result of the expression is always 'null' of type '{0}'</summary>
        internal static string @WRN_AlwaysNull => GetResourceString("WRN_AlwaysNull");
        /// <summary>The result of the expression is always 'null'</summary>
        internal static string @WRN_AlwaysNull_Title => GetResourceString("WRN_AlwaysNull_Title");
        /// <summary>Cannot return 'this' by reference.</summary>
        internal static string @ERR_RefReturnThis => GetResourceString("ERR_RefReturnThis");
        /// <summary>Cannot use attribute constructor '{0}' because it has 'in' parameters.</summary>
        internal static string @ERR_AttributeCtorInParameter => GetResourceString("ERR_AttributeCtorInParameter");
        /// <summary>Constraints for override and explicit interface implementation methods are inherited from the base method, so they cannot be specified directly, except for either a 'class', or a 'struct' constraint.</summary>
        internal static string @ERR_OverrideWithConstraints => GetResourceString("ERR_OverrideWithConstraints");
        /// <summary>The inherited members '{0}' and '{1}' have the same signature in type '{2}', so they cannot be overridden</summary>
        internal static string @ERR_AmbigOverride => GetResourceString("ERR_AmbigOverride");
        /// <summary>Evaluation of the decimal constant expression failed</summary>
        internal static string @ERR_DecConstError => GetResourceString("ERR_DecConstError");
        /// <summary>Comparing with null of type '{0}' always produces 'false'</summary>
        internal static string @WRN_CmpAlwaysFalse => GetResourceString("WRN_CmpAlwaysFalse");
        /// <summary>Comparing with null of struct type always produces 'false'</summary>
        internal static string @WRN_CmpAlwaysFalse_Title => GetResourceString("WRN_CmpAlwaysFalse_Title");
        /// <summary>Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?</summary>
        internal static string @WRN_FinalizeMethod => GetResourceString("WRN_FinalizeMethod");
        /// <summary>Introducing a 'Finalize' method can interfere with destructor invocation</summary>
        internal static string @WRN_FinalizeMethod_Title => GetResourceString("WRN_FinalizeMethod_Title");
        /// <summary>This warning occurs when you create a class with a method whose signature is public virtual void Finalize.
        /// 
        /// If such a class is used as a base class and if the deriving class defines a destructor, the destructor will override the base class Finalize method, ...</summary>
        internal static string @WRN_FinalizeMethod_Description => GetResourceString("WRN_FinalizeMethod_Description");
        /// <summary>'{0}' should not have a params parameter since '{1}' does not</summary>
        internal static string @ERR_ExplicitImplParams => GetResourceString("ERR_ExplicitImplParams");
        /// <summary>The 'goto case' value is not implicitly convertible to type '{0}'</summary>
        internal static string @WRN_GotoCaseShouldConvert => GetResourceString("WRN_GotoCaseShouldConvert");
        /// <summary>The 'goto case' value is not implicitly convertible to the switch type</summary>
        internal static string @WRN_GotoCaseShouldConvert_Title => GetResourceString("WRN_GotoCaseShouldConvert_Title");
        /// <summary>Method '{0}' cannot implement interface accessor '{1}' for type '{2}'. Use an explicit interface implementation.</summary>
        internal static string @ERR_MethodImplementingAccessor => GetResourceString("ERR_MethodImplementingAccessor");
        /// <summary>The result of the expression is always '{0}' since a value of type '{1}' is never equal to 'null' of type '{2}'</summary>
        internal static string @WRN_NubExprIsConstBool => GetResourceString("WRN_NubExprIsConstBool");
        /// <summary>The result of the expression is always the same since a value of this type is never equal to 'null'</summary>
        internal static string @WRN_NubExprIsConstBool_Title => GetResourceString("WRN_NubExprIsConstBool_Title");
        /// <summary>The result of the expression is always '{0}' since a value of type '{1}' is never equal to 'null' of type '{2}'</summary>
        internal static string @WRN_NubExprIsConstBool2 => GetResourceString("WRN_NubExprIsConstBool2");
        /// <summary>The result of the expression is always the same since a value of this type is never equal to 'null'</summary>
        internal static string @WRN_NubExprIsConstBool2_Title => GetResourceString("WRN_NubExprIsConstBool2_Title");
        /// <summary>Explicit interface implementation '{0}' matches more than one interface member. Which interface member is actually chosen is implementation-dependent. Consider using a non-explicit implementation instead.</summary>
        internal static string @WRN_ExplicitImplCollision => GetResourceString("WRN_ExplicitImplCollision");
        /// <summary>Explicit interface implementation matches more than one interface member</summary>
        internal static string @WRN_ExplicitImplCollision_Title => GetResourceString("WRN_ExplicitImplCollision_Title");
        /// <summary>'{0}' cannot declare a body because it is marked abstract</summary>
        internal static string @ERR_AbstractHasBody => GetResourceString("ERR_AbstractHasBody");
        /// <summary>'{0}' must declare a body because it is not marked abstract, extern, or partial</summary>
        internal static string @ERR_ConcreteMissingBody => GetResourceString("ERR_ConcreteMissingBody");
        /// <summary>'{0}' cannot be both abstract and sealed</summary>
        internal static string @ERR_AbstractAndSealed => GetResourceString("ERR_AbstractAndSealed");
        /// <summary>The abstract {0} '{1}' cannot be marked virtual</summary>
        internal static string @ERR_AbstractNotVirtual => GetResourceString("ERR_AbstractNotVirtual");
        /// <summary>The constant '{0}' cannot be marked static</summary>
        internal static string @ERR_StaticConstant => GetResourceString("ERR_StaticConstant");
        /// <summary>'{0}': cannot override because '{1}' is not a function</summary>
        internal static string @ERR_CantOverrideNonFunction => GetResourceString("ERR_CantOverrideNonFunction");
        /// <summary>'{0}': cannot override inherited member '{1}' because it is not marked virtual, abstract, or override</summary>
        internal static string @ERR_CantOverrideNonVirtual => GetResourceString("ERR_CantOverrideNonVirtual");
        /// <summary>'{0}': cannot change access modifiers when overriding '{1}' inherited member '{2}'</summary>
        internal static string @ERR_CantChangeAccessOnOverride => GetResourceString("ERR_CantChangeAccessOnOverride");
        /// <summary>'{0}': cannot change tuple element names when overriding inherited member '{1}'</summary>
        internal static string @ERR_CantChangeTupleNamesOnOverride => GetResourceString("ERR_CantChangeTupleNamesOnOverride");
        /// <summary>'{0}': return type must be '{2}' to match overridden member '{1}'</summary>
        internal static string @ERR_CantChangeReturnTypeOnOverride => GetResourceString("ERR_CantChangeReturnTypeOnOverride");
        /// <summary>'{0}': cannot derive from sealed type '{1}'</summary>
        internal static string @ERR_CantDeriveFromSealedType => GetResourceString("ERR_CantDeriveFromSealedType");
        /// <summary>'{0}' is abstract but it is contained in non-abstract type '{1}'</summary>
        internal static string @ERR_AbstractInConcreteClass => GetResourceString("ERR_AbstractInConcreteClass");
        /// <summary>'{0}': static constructor cannot have an explicit 'this' or 'base' constructor call</summary>
        internal static string @ERR_StaticConstructorWithExplicitConstructorCall => GetResourceString("ERR_StaticConstructorWithExplicitConstructorCall");
        /// <summary>'{0}': access modifiers are not allowed on static constructors</summary>
        internal static string @ERR_StaticConstructorWithAccessModifiers => GetResourceString("ERR_StaticConstructorWithAccessModifiers");
        /// <summary>Constructor '{0}' cannot call itself</summary>
        internal static string @ERR_RecursiveConstructorCall => GetResourceString("ERR_RecursiveConstructorCall");
        /// <summary>Constructor '{0}' cannot call itself through another constructor</summary>
        internal static string @ERR_IndirectRecursiveConstructorCall => GetResourceString("ERR_IndirectRecursiveConstructorCall");
        /// <summary>'{0}' has no base class and cannot call a base constructor</summary>
        internal static string @ERR_ObjectCallingBaseConstructor => GetResourceString("ERR_ObjectCallingBaseConstructor");
        /// <summary>Predefined type '{0}' is not defined or imported</summary>
        internal static string @ERR_PredefinedTypeNotFound => GetResourceString("ERR_PredefinedTypeNotFound");
        /// <summary>Predefined type '{0}' is not defined or imported</summary>
        internal static string @ERR_PredefinedValueTupleTypeNotFound => GetResourceString("ERR_PredefinedValueTupleTypeNotFound");
        /// <summary>Predefined type '{0}' is declared in multiple referenced assemblies: '{1}' and '{2}'</summary>
        internal static string @ERR_PredefinedValueTupleTypeAmbiguous3 => GetResourceString("ERR_PredefinedValueTupleTypeAmbiguous3");
        /// <summary>'{0}': structs cannot call base class constructors</summary>
        internal static string @ERR_StructWithBaseConstructorCall => GetResourceString("ERR_StructWithBaseConstructorCall");
        /// <summary>Struct member '{0}' of type '{1}' causes a cycle in the struct layout</summary>
        internal static string @ERR_StructLayoutCycle => GetResourceString("ERR_StructLayoutCycle");
        /// <summary>Interfaces cannot contain instance fields</summary>
        internal static string @ERR_InterfacesCantContainFields => GetResourceString("ERR_InterfacesCantContainFields");
        /// <summary>Interfaces cannot contain instance constructors</summary>
        internal static string @ERR_InterfacesCantContainConstructors => GetResourceString("ERR_InterfacesCantContainConstructors");
        /// <summary>Type '{0}' in interface list is not an interface</summary>
        internal static string @ERR_NonInterfaceInInterfaceList => GetResourceString("ERR_NonInterfaceInInterfaceList");
        /// <summary>'{0}' is already listed in interface list</summary>
        internal static string @ERR_DuplicateInterfaceInBaseList => GetResourceString("ERR_DuplicateInterfaceInBaseList");
        /// <summary>'{0}' is already listed in the interface list on type '{2}' with different tuple element names, as '{1}'.</summary>
        internal static string @ERR_DuplicateInterfaceWithTupleNamesInBaseList => GetResourceString("ERR_DuplicateInterfaceWithTupleNamesInBaseList");
        /// <summary>Inherited interface '{1}' causes a cycle in the interface hierarchy of '{0}'</summary>
        internal static string @ERR_CycleInInterfaceInheritance => GetResourceString("ERR_CycleInInterfaceInheritance");
        /// <summary>'{0}' hides inherited abstract member '{1}'</summary>
        internal static string @ERR_HidingAbstractMethod => GetResourceString("ERR_HidingAbstractMethod");
        /// <summary>'{0}' does not implement inherited abstract member '{1}'</summary>
        internal static string @ERR_UnimplementedAbstractMethod => GetResourceString("ERR_UnimplementedAbstractMethod");
        /// <summary>'{0}' does not implement interface member '{1}'</summary>
        internal static string @ERR_UnimplementedInterfaceMember => GetResourceString("ERR_UnimplementedInterfaceMember");
        /// <summary>The class System.Object cannot have a base class or implement an interface</summary>
        internal static string @ERR_ObjectCantHaveBases => GetResourceString("ERR_ObjectCantHaveBases");
        /// <summary>'{0}' in explicit interface declaration is not an interface</summary>
        internal static string @ERR_ExplicitInterfaceImplementationNotInterface => GetResourceString("ERR_ExplicitInterfaceImplementationNotInterface");
        /// <summary>'{0}' in explicit interface declaration is not found among members of the interface that can be implemented</summary>
        internal static string @ERR_InterfaceMemberNotFound => GetResourceString("ERR_InterfaceMemberNotFound");
        /// <summary>'{0}': containing type does not implement interface '{1}'</summary>
        internal static string @ERR_ClassDoesntImplementInterface => GetResourceString("ERR_ClassDoesntImplementInterface");
        /// <summary>'{0}': explicit interface declaration can only be declared in a class, record, struct or interface</summary>
        internal static string @ERR_ExplicitInterfaceImplementationInNonClassOrStruct => GetResourceString("ERR_ExplicitInterfaceImplementationInNonClassOrStruct");
        /// <summary>'{0}': member names cannot be the same as their enclosing type</summary>
        internal static string @ERR_MemberNameSameAsType => GetResourceString("ERR_MemberNameSameAsType");
        /// <summary>'{0}': the enumerator value is too large to fit in its type</summary>
        internal static string @ERR_EnumeratorOverflow => GetResourceString("ERR_EnumeratorOverflow");
        /// <summary>'{0}': cannot override because '{1}' is not a property</summary>
        internal static string @ERR_CantOverrideNonProperty => GetResourceString("ERR_CantOverrideNonProperty");
        /// <summary>'{0}': cannot override because '{1}' does not have an overridable get accessor</summary>
        internal static string @ERR_NoGetToOverride => GetResourceString("ERR_NoGetToOverride");
        /// <summary>'{0}': cannot override because '{1}' does not have an overridable set accessor</summary>
        internal static string @ERR_NoSetToOverride => GetResourceString("ERR_NoSetToOverride");
        /// <summary>'{0}': property or indexer cannot have void type</summary>
        internal static string @ERR_PropertyCantHaveVoidType => GetResourceString("ERR_PropertyCantHaveVoidType");
        /// <summary>'{0}': property or indexer must have at least one accessor</summary>
        internal static string @ERR_PropertyWithNoAccessors => GetResourceString("ERR_PropertyWithNoAccessors");
        /// <summary>__arglist cannot have an argument of void type</summary>
        internal static string @ERR_CantUseVoidInArglist => GetResourceString("ERR_CantUseVoidInArglist");
        /// <summary>'{0}' is a new virtual member in sealed type '{1}'</summary>
        internal static string @ERR_NewVirtualInSealed => GetResourceString("ERR_NewVirtualInSealed");
        /// <summary>'{0}' adds an accessor not found in interface member '{1}'</summary>
        internal static string @ERR_ExplicitPropertyAddingAccessor => GetResourceString("ERR_ExplicitPropertyAddingAccessor");
        /// <summary>Accessors '{0}' and '{1}' should both be init-only or neither</summary>
        internal static string @ERR_ExplicitPropertyMismatchInitOnly => GetResourceString("ERR_ExplicitPropertyMismatchInitOnly");
        /// <summary>Explicit interface implementation '{0}' is missing accessor '{1}'</summary>
        internal static string @ERR_ExplicitPropertyMissingAccessor => GetResourceString("ERR_ExplicitPropertyMissingAccessor");
        /// <summary>'{0}': user-defined conversions to or from an interface are not allowed</summary>
        internal static string @ERR_ConversionWithInterface => GetResourceString("ERR_ConversionWithInterface");
        /// <summary>'{0}': user-defined conversions to or from a base type are not allowed</summary>
        internal static string @ERR_ConversionWithBase => GetResourceString("ERR_ConversionWithBase");
        /// <summary>'{0}': user-defined conversions to or from a derived type are not allowed</summary>
        internal static string @ERR_ConversionWithDerived => GetResourceString("ERR_ConversionWithDerived");
        /// <summary>User-defined operator cannot take an object of the enclosing type and convert to an object of the enclosing type</summary>
        internal static string @ERR_IdentityConversion => GetResourceString("ERR_IdentityConversion");
        /// <summary>User-defined conversion must convert to or from the enclosing type</summary>
        internal static string @ERR_ConversionNotInvolvingContainedType => GetResourceString("ERR_ConversionNotInvolvingContainedType");
        /// <summary>Duplicate user-defined conversion in type '{0}'</summary>
        internal static string @ERR_DuplicateConversionInClass => GetResourceString("ERR_DuplicateConversionInClass");
        /// <summary>User-defined operator '{0}' must be declared static and public</summary>
        internal static string @ERR_OperatorsMustBeStatic => GetResourceString("ERR_OperatorsMustBeStatic");
        /// <summary>The parameter type for ++ or -- operator must be the containing type</summary>
        internal static string @ERR_BadIncDecSignature => GetResourceString("ERR_BadIncDecSignature");
        /// <summary>The parameter of a unary operator must be the containing type</summary>
        internal static string @ERR_BadUnaryOperatorSignature => GetResourceString("ERR_BadUnaryOperatorSignature");
        /// <summary>One of the parameters of a binary operator must be the containing type</summary>
        internal static string @ERR_BadBinaryOperatorSignature => GetResourceString("ERR_BadBinaryOperatorSignature");
        /// <summary>The first operand of an overloaded shift operator must have the same type as the containing type, and the type of the second operand must be int</summary>
        internal static string @ERR_BadShiftOperatorSignature => GetResourceString("ERR_BadShiftOperatorSignature");
        /// <summary>Interfaces cannot contain conversion, equality, or inequality operators</summary>
        internal static string @ERR_InterfacesCantContainConversionOrEqualityOperators => GetResourceString("ERR_InterfacesCantContainConversionOrEqualityOperators");
        /// <summary>Structs cannot contain explicit parameterless constructors</summary>
        internal static string @ERR_StructsCantContainDefaultConstructor => GetResourceString("ERR_StructsCantContainDefaultConstructor");
        /// <summary>Enums cannot contain explicit parameterless constructors</summary>
        internal static string @ERR_EnumsCantContainDefaultConstructor => GetResourceString("ERR_EnumsCantContainDefaultConstructor");
        /// <summary>'{0}': cannot override '{1}' because it is not supported by the language</summary>
        internal static string @ERR_CantOverrideBogusMethod => GetResourceString("ERR_CantOverrideBogusMethod");
        /// <summary>'{0}' is not supported by the language</summary>
        internal static string @ERR_BindToBogus => GetResourceString("ERR_BindToBogus");
        /// <summary>'{0}': cannot explicitly call operator or accessor</summary>
        internal static string @ERR_CantCallSpecialMethod => GetResourceString("ERR_CantCallSpecialMethod");
        /// <summary>'{0}': cannot reference a type through an expression; try '{1}' instead</summary>
        internal static string @ERR_BadTypeReference => GetResourceString("ERR_BadTypeReference");
        /// <summary>'{0}': cannot have instance property or field initializers in structs</summary>
        internal static string @ERR_FieldInitializerInStruct => GetResourceString("ERR_FieldInitializerInStruct");
        /// <summary>Name of destructor must match name of type</summary>
        internal static string @ERR_BadDestructorName => GetResourceString("ERR_BadDestructorName");
        /// <summary>Only class types can contain destructors</summary>
        internal static string @ERR_OnlyClassesCanContainDestructors => GetResourceString("ERR_OnlyClassesCanContainDestructors");
        /// <summary>Namespace '{1}' contains a definition conflicting with alias '{0}'</summary>
        internal static string @ERR_ConflictAliasAndMember => GetResourceString("ERR_ConflictAliasAndMember");
        /// <summary>Alias '{0}' conflicts with {1} definition</summary>
        internal static string @ERR_ConflictingAliasAndDefinition => GetResourceString("ERR_ConflictingAliasAndDefinition");
        /// <summary>The Conditional attribute is not valid on '{0}' because it is a constructor, destructor, operator, or explicit interface implementation</summary>
        internal static string @ERR_ConditionalOnSpecialMethod => GetResourceString("ERR_ConditionalOnSpecialMethod");
        /// <summary>The Conditional attribute is not valid on '{0}' because its return type is not void</summary>
        internal static string @ERR_ConditionalMustReturnVoid => GetResourceString("ERR_ConditionalMustReturnVoid");
        /// <summary>Duplicate '{0}' attribute</summary>
        internal static string @ERR_DuplicateAttribute => GetResourceString("ERR_DuplicateAttribute");
        /// <summary>Duplicate '{0}' attribute in '{1}'</summary>
        internal static string @ERR_DuplicateAttributeInNetModule => GetResourceString("ERR_DuplicateAttributeInNetModule");
        /// <summary>The Conditional attribute is not valid on interface members</summary>
        internal static string @ERR_ConditionalOnInterfaceMethod => GetResourceString("ERR_ConditionalOnInterfaceMethod");
        /// <summary>User-defined operators cannot return void</summary>
        internal static string @ERR_OperatorCantReturnVoid => GetResourceString("ERR_OperatorCantReturnVoid");
        /// <summary>'{0}': user-defined conversions to or from the dynamic type are not allowed</summary>
        internal static string @ERR_BadDynamicConversion => GetResourceString("ERR_BadDynamicConversion");
        /// <summary>Invalid value for argument to '{0}' attribute</summary>
        internal static string @ERR_InvalidAttributeArgument => GetResourceString("ERR_InvalidAttributeArgument");
        /// <summary>Parameter not valid for the specified unmanaged type.</summary>
        internal static string @ERR_ParameterNotValidForType => GetResourceString("ERR_ParameterNotValidForType");
        /// <summary>Attribute parameter '{0}' must be specified.</summary>
        internal static string @ERR_AttributeParameterRequired1 => GetResourceString("ERR_AttributeParameterRequired1");
        /// <summary>Attribute parameter '{0}' or '{1}' must be specified.</summary>
        internal static string @ERR_AttributeParameterRequired2 => GetResourceString("ERR_AttributeParameterRequired2");
        /// <summary>Unmanaged type '{0}' not valid for fields.</summary>
        internal static string @ERR_MarshalUnmanagedTypeNotValidForFields => GetResourceString("ERR_MarshalUnmanagedTypeNotValidForFields");
        /// <summary>Unmanaged type '{0}' is only valid for fields.</summary>
        internal static string @ERR_MarshalUnmanagedTypeOnlyValidForFields => GetResourceString("ERR_MarshalUnmanagedTypeOnlyValidForFields");
        /// <summary>Attribute '{0}' is not valid on this declaration type. It is only valid on '{1}' declarations.</summary>
        internal static string @ERR_AttributeOnBadSymbolType => GetResourceString("ERR_AttributeOnBadSymbolType");
        /// <summary>Floating-point constant is outside the range of type '{0}'</summary>
        internal static string @ERR_FloatOverflow => GetResourceString("ERR_FloatOverflow");
        /// <summary>The Guid attribute must be specified with the ComImport attribute</summary>
        internal static string @ERR_ComImportWithoutUuidAttribute => GetResourceString("ERR_ComImportWithoutUuidAttribute");
        /// <summary>Invalid value for named attribute argument '{0}'</summary>
        internal static string @ERR_InvalidNamedArgument => GetResourceString("ERR_InvalidNamedArgument");
        /// <summary>The DllImport attribute must be specified on a method marked 'static' and 'extern'</summary>
        internal static string @ERR_DllImportOnInvalidMethod => GetResourceString("ERR_DllImportOnInvalidMethod");
        /// <summary>Cannot update '{0}'; attribute '{1}' is missing.</summary>
        internal static string @ERR_EncUpdateFailedMissingAttribute => GetResourceString("ERR_EncUpdateFailedMissingAttribute");
        /// <summary>The DllImport attribute cannot be applied to a method that is generic or contained in a generic method or type.</summary>
        internal static string @ERR_DllImportOnGenericMethod => GetResourceString("ERR_DllImportOnGenericMethod");
        /// <summary>Field or property cannot be of type '{0}'</summary>
        internal static string @ERR_FieldCantBeRefAny => GetResourceString("ERR_FieldCantBeRefAny");
        /// <summary>Field or auto-implemented property cannot be of type '{0}' unless it is an instance member of a ref struct.</summary>
        internal static string @ERR_FieldAutoPropCantBeByRefLike => GetResourceString("ERR_FieldAutoPropCantBeByRefLike");
        /// <summary>Array elements cannot be of type '{0}'</summary>
        internal static string @ERR_ArrayElementCantBeRefAny => GetResourceString("ERR_ArrayElementCantBeRefAny");
        /// <summary>'{0}' is obsolete</summary>
        internal static string @WRN_DeprecatedSymbol => GetResourceString("WRN_DeprecatedSymbol");
        /// <summary>Type or member is obsolete</summary>
        internal static string @WRN_DeprecatedSymbol_Title => GetResourceString("WRN_DeprecatedSymbol_Title");
        /// <summary>'{0}' is not an attribute class</summary>
        internal static string @ERR_NotAnAttributeClass => GetResourceString("ERR_NotAnAttributeClass");
        /// <summary>'{0}' is not a valid named attribute argument. Named attribute arguments must be fields which are not readonly, static, or const, or read-write properties which are public and not static.</summary>
        internal static string @ERR_BadNamedAttributeArgument => GetResourceString("ERR_BadNamedAttributeArgument");
        /// <summary>'{0}' is obsolete: '{1}'</summary>
        internal static string @WRN_DeprecatedSymbolStr => GetResourceString("WRN_DeprecatedSymbolStr");
        /// <summary>Type or member is obsolete</summary>
        internal static string @WRN_DeprecatedSymbolStr_Title => GetResourceString("WRN_DeprecatedSymbolStr_Title");
        /// <summary>'{0}' is obsolete: '{1}'</summary>
        internal static string @ERR_DeprecatedSymbolStr => GetResourceString("ERR_DeprecatedSymbolStr");
        /// <summary>Indexers cannot have void type</summary>
        internal static string @ERR_IndexerCantHaveVoidType => GetResourceString("ERR_IndexerCantHaveVoidType");
        /// <summary>'{0}': virtual or abstract members cannot be private</summary>
        internal static string @ERR_VirtualPrivate => GetResourceString("ERR_VirtualPrivate");
        /// <summary>Can only use array initializer expressions to assign to array types. Try using a new expression instead.</summary>
        internal static string @ERR_ArrayInitToNonArrayType => GetResourceString("ERR_ArrayInitToNonArrayType");
        /// <summary>Array initializers can only be used in a variable or field initializer. Try using a new expression instead.</summary>
        internal static string @ERR_ArrayInitInBadPlace => GetResourceString("ERR_ArrayInitInBadPlace");
        /// <summary>'{0}': instance field in types marked with StructLayout(LayoutKind.Explicit) must have a FieldOffset attribute</summary>
        internal static string @ERR_MissingStructOffset => GetResourceString("ERR_MissingStructOffset");
        /// <summary>Method, operator, or accessor '{0}' is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation.</summary>
        internal static string @WRN_ExternMethodNoImplementation => GetResourceString("WRN_ExternMethodNoImplementation");
        /// <summary>Method, operator, or accessor is marked external and has no attributes on it</summary>
        internal static string @WRN_ExternMethodNoImplementation_Title => GetResourceString("WRN_ExternMethodNoImplementation_Title");
        /// <summary>'{0}': new protected member declared in sealed type</summary>
        internal static string @WRN_ProtectedInSealed => GetResourceString("WRN_ProtectedInSealed");
        /// <summary>New protected member declared in sealed type</summary>
        internal static string @WRN_ProtectedInSealed_Title => GetResourceString("WRN_ProtectedInSealed_Title");
        /// <summary>Conditional member '{0}' cannot implement interface member '{1}' in type '{2}'</summary>
        internal static string @ERR_InterfaceImplementedByConditional => GetResourceString("ERR_InterfaceImplementedByConditional");
        /// <summary>'{0}' cannot implement interface member '{1}' in type '{2}' because it has an __arglist parameter</summary>
        internal static string @ERR_InterfaceImplementedImplicitlyByVariadic => GetResourceString("ERR_InterfaceImplementedImplicitlyByVariadic");
        /// <summary>ref and out are not valid in this context</summary>
        internal static string @ERR_IllegalRefParam => GetResourceString("ERR_IllegalRefParam");
        /// <summary>The argument to the '{0}' attribute must be a valid identifier</summary>
        internal static string @ERR_BadArgumentToAttribute => GetResourceString("ERR_BadArgumentToAttribute");
        /// <summary>The FieldOffset attribute can only be placed on members of types marked with the StructLayout(LayoutKind.Explicit)</summary>
        internal static string @ERR_StructOffsetOnBadStruct => GetResourceString("ERR_StructOffsetOnBadStruct");
        /// <summary>The FieldOffset attribute is not allowed on static or const fields</summary>
        internal static string @ERR_StructOffsetOnBadField => GetResourceString("ERR_StructOffsetOnBadField");
        /// <summary>Attribute '{0}' is only valid on classes derived from System.Attribute</summary>
        internal static string @ERR_AttributeUsageOnNonAttributeClass => GetResourceString("ERR_AttributeUsageOnNonAttributeClass");
        /// <summary>Possible mistaken empty statement</summary>
        internal static string @WRN_PossibleMistakenNullStatement => GetResourceString("WRN_PossibleMistakenNullStatement");
        /// <summary>Possible mistaken empty statement</summary>
        internal static string @WRN_PossibleMistakenNullStatement_Title => GetResourceString("WRN_PossibleMistakenNullStatement_Title");
        /// <summary>'{0}' duplicate named attribute argument</summary>
        internal static string @ERR_DuplicateNamedAttributeArgument => GetResourceString("ERR_DuplicateNamedAttributeArgument");
        /// <summary>'{0}' cannot derive from special class '{1}'</summary>
        internal static string @ERR_DeriveFromEnumOrValueType => GetResourceString("ERR_DeriveFromEnumOrValueType");
        /// <summary>Cannot specify the DefaultMember attribute on a type containing an indexer</summary>
        internal static string @ERR_DefaultMemberOnIndexedType => GetResourceString("ERR_DefaultMemberOnIndexedType");
        /// <summary>'{0}' is a type not supported by the language</summary>
        internal static string @ERR_BogusType => GetResourceString("ERR_BogusType");
        /// <summary>Field '{0}' is never assigned to, and will always have its default value {1}</summary>
        internal static string @WRN_UnassignedInternalField => GetResourceString("WRN_UnassignedInternalField");
        /// <summary>Field is never assigned to, and will always have its default value</summary>
        internal static string @WRN_UnassignedInternalField_Title => GetResourceString("WRN_UnassignedInternalField_Title");
        /// <summary>Bad array declarator: To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type.</summary>
        internal static string @ERR_CStyleArray => GetResourceString("ERR_CStyleArray");
        /// <summary>Comparison to integral constant is useless; the constant is outside the range of type '{0}'</summary>
        internal static string @WRN_VacuousIntegralComp => GetResourceString("WRN_VacuousIntegralComp");
        /// <summary>Comparison to integral constant is useless; the constant is outside the range of the type</summary>
        internal static string @WRN_VacuousIntegralComp_Title => GetResourceString("WRN_VacuousIntegralComp_Title");
        /// <summary>Cannot apply attribute class '{0}' because it is abstract</summary>
        internal static string @ERR_AbstractAttributeClass => GetResourceString("ERR_AbstractAttributeClass");
        /// <summary>'{0}' is not a valid named attribute argument because it is not a valid attribute parameter type</summary>
        internal static string @ERR_BadNamedAttributeArgumentType => GetResourceString("ERR_BadNamedAttributeArgumentType");
        /// <summary>Missing compiler required member '{0}.{1}'</summary>
        internal static string @ERR_MissingPredefinedMember => GetResourceString("ERR_MissingPredefinedMember");
        /// <summary>'{0}' is not a valid attribute location for this declaration. Valid attribute locations for this declaration are '{1}'. All attributes in this block will be ignored.</summary>
        internal static string @WRN_AttributeLocationOnBadDeclaration => GetResourceString("WRN_AttributeLocationOnBadDeclaration");
        /// <summary>Not a valid attribute location for this declaration</summary>
        internal static string @WRN_AttributeLocationOnBadDeclaration_Title => GetResourceString("WRN_AttributeLocationOnBadDeclaration_Title");
        /// <summary>'{0}' is not a recognized attribute location. Valid attribute locations for this declaration are '{1}'. All attributes in this block will be ignored.</summary>
        internal static string @WRN_InvalidAttributeLocation => GetResourceString("WRN_InvalidAttributeLocation");
        /// <summary>Not a recognized attribute location</summary>
        internal static string @WRN_InvalidAttributeLocation_Title => GetResourceString("WRN_InvalidAttributeLocation_Title");
        /// <summary>'{0}' overrides Object.Equals(object o) but does not override Object.GetHashCode()</summary>
        internal static string @WRN_EqualsWithoutGetHashCode => GetResourceString("WRN_EqualsWithoutGetHashCode");
        /// <summary>Type overrides Object.Equals(object o) but does not override Object.GetHashCode()</summary>
        internal static string @WRN_EqualsWithoutGetHashCode_Title => GetResourceString("WRN_EqualsWithoutGetHashCode_Title");
        /// <summary>'{0}' defines operator == or operator != but does not override Object.Equals(object o)</summary>
        internal static string @WRN_EqualityOpWithoutEquals => GetResourceString("WRN_EqualityOpWithoutEquals");
        /// <summary>Type defines operator == or operator != but does not override Object.Equals(object o)</summary>
        internal static string @WRN_EqualityOpWithoutEquals_Title => GetResourceString("WRN_EqualityOpWithoutEquals_Title");
        /// <summary>'{0}' defines operator == or operator != but does not override Object.GetHashCode()</summary>
        internal static string @WRN_EqualityOpWithoutGetHashCode => GetResourceString("WRN_EqualityOpWithoutGetHashCode");
        /// <summary>Type defines operator == or operator != but does not override Object.GetHashCode()</summary>
        internal static string @WRN_EqualityOpWithoutGetHashCode_Title => GetResourceString("WRN_EqualityOpWithoutGetHashCode_Title");
        /// <summary>Cannot specify the Out attribute on a ref parameter without also specifying the In attribute.</summary>
        internal static string @ERR_OutAttrOnRefParam => GetResourceString("ERR_OutAttrOnRefParam");
        /// <summary>'{0}' cannot define an overloaded {1} that differs only on parameter modifiers '{2}' and '{3}'</summary>
        internal static string @ERR_OverloadRefKind => GetResourceString("ERR_OverloadRefKind");
        /// <summary>Literal of type double cannot be implicitly converted to type '{1}'; use an '{0}' suffix to create a literal of this type</summary>
        internal static string @ERR_LiteralDoubleCast => GetResourceString("ERR_LiteralDoubleCast");
        /// <summary>Assignment in conditional expression is always constant; did you mean to use == instead of = ?</summary>
        internal static string @WRN_IncorrectBooleanAssg => GetResourceString("WRN_IncorrectBooleanAssg");
        /// <summary>Assignment in conditional expression is always constant</summary>
        internal static string @WRN_IncorrectBooleanAssg_Title => GetResourceString("WRN_IncorrectBooleanAssg_Title");
        /// <summary>'{0}': new protected member declared in struct</summary>
        internal static string @ERR_ProtectedInStruct => GetResourceString("ERR_ProtectedInStruct");
        /// <summary>Two indexers have different names; the IndexerName attribute must be used with the same name on every indexer within a type</summary>
        internal static string @ERR_InconsistentIndexerNames => GetResourceString("ERR_InconsistentIndexerNames");
        /// <summary>A class with the ComImport attribute cannot have a user-defined constructor</summary>
        internal static string @ERR_ComImportWithUserCtor => GetResourceString("ERR_ComImportWithUserCtor");
        /// <summary>Field cannot have void type</summary>
        internal static string @ERR_FieldCantHaveVoidType => GetResourceString("ERR_FieldCantHaveVoidType");
        /// <summary>Member '{0}' overrides obsolete member '{1}'. Add the Obsolete attribute to '{0}'.</summary>
        internal static string @WRN_NonObsoleteOverridingObsolete => GetResourceString("WRN_NonObsoleteOverridingObsolete");
        /// <summary>Member overrides obsolete member</summary>
        internal static string @WRN_NonObsoleteOverridingObsolete_Title => GetResourceString("WRN_NonObsoleteOverridingObsolete_Title");
        /// <summary>System.Void cannot be used from C# -- use typeof(void) to get the void type object</summary>
        internal static string @ERR_SystemVoid => GetResourceString("ERR_SystemVoid");
        /// <summary>Do not use 'System.ParamArrayAttribute'. Use the 'params' keyword instead.</summary>
        internal static string @ERR_ExplicitParamArray => GetResourceString("ERR_ExplicitParamArray");
        /// <summary>Bitwise-or operator used on a sign-extended operand; consider casting to a smaller unsigned type first</summary>
        internal static string @WRN_BitwiseOrSignExtend => GetResourceString("WRN_BitwiseOrSignExtend");
        /// <summary>Bitwise-or operator used on a sign-extended operand</summary>
        internal static string @WRN_BitwiseOrSignExtend_Title => GetResourceString("WRN_BitwiseOrSignExtend_Title");
        /// <summary>The compiler implicitly widened and sign-extended a variable, and then used the resulting value in a bitwise OR operation. This can result in unexpected behavior.</summary>
        internal static string @WRN_BitwiseOrSignExtend_Description => GetResourceString("WRN_BitwiseOrSignExtend_Description");
        /// <summary>'{0}': a volatile field cannot be of the type '{1}'</summary>
        internal static string @ERR_VolatileStruct => GetResourceString("ERR_VolatileStruct");
        /// <summary>'{0}': a field cannot be both volatile and readonly</summary>
        internal static string @ERR_VolatileAndReadonly => GetResourceString("ERR_VolatileAndReadonly");
        /// <summary>The modifier 'abstract' is not valid on fields. Try using a property instead.</summary>
        internal static string @ERR_AbstractField => GetResourceString("ERR_AbstractField");
        /// <summary>'{0}' cannot implement '{1}' because it is not supported by the language</summary>
        internal static string @ERR_BogusExplicitImpl => GetResourceString("ERR_BogusExplicitImpl");
        /// <summary>'{0}' explicit method implementation cannot implement '{1}' because it is an accessor</summary>
        internal static string @ERR_ExplicitMethodImplAccessor => GetResourceString("ERR_ExplicitMethodImplAccessor");
        /// <summary>'{0}' interface marked with 'CoClassAttribute' not marked with 'ComImportAttribute'</summary>
        internal static string @WRN_CoClassWithoutComImport => GetResourceString("WRN_CoClassWithoutComImport");
        /// <summary>Interface marked with 'CoClassAttribute' not marked with 'ComImportAttribute'</summary>
        internal static string @WRN_CoClassWithoutComImport_Title => GetResourceString("WRN_CoClassWithoutComImport_Title");
        /// <summary>Conditional member '{0}' cannot have an out parameter</summary>
        internal static string @ERR_ConditionalWithOutParam => GetResourceString("ERR_ConditionalWithOutParam");
        /// <summary>Accessor '{0}' cannot implement interface member '{1}' for type '{2}'. Use an explicit interface implementation.</summary>
        internal static string @ERR_AccessorImplementingMethod => GetResourceString("ERR_AccessorImplementingMethod");
        /// <summary>The namespace alias qualifier '::' always resolves to a type or namespace so is illegal here. Consider using '.' instead.</summary>
        internal static string @ERR_AliasQualAsExpression => GetResourceString("ERR_AliasQualAsExpression");
        /// <summary>Cannot derive from '{0}' because it is a type parameter</summary>
        internal static string @ERR_DerivingFromATyVar => GetResourceString("ERR_DerivingFromATyVar");
        /// <summary>Duplicate type parameter '{0}'</summary>
        internal static string @ERR_DuplicateTypeParameter => GetResourceString("ERR_DuplicateTypeParameter");
        /// <summary>Type parameter '{0}' has the same name as the type parameter from outer type '{1}'</summary>
        internal static string @WRN_TypeParameterSameAsOuterTypeParameter => GetResourceString("WRN_TypeParameterSameAsOuterTypeParameter");
        /// <summary>Type parameter has the same name as the type parameter from outer type</summary>
        internal static string @WRN_TypeParameterSameAsOuterTypeParameter_Title => GetResourceString("WRN_TypeParameterSameAsOuterTypeParameter_Title");
        /// <summary>Type parameter '{0}' has the same name as the type parameter from outer method '{1}'</summary>
        internal static string @WRN_TypeParameterSameAsOuterMethodTypeParameter => GetResourceString("WRN_TypeParameterSameAsOuterMethodTypeParameter");
        /// <summary>Type parameter has the same type as the type parameter from outer method.</summary>
        internal static string @WRN_TypeParameterSameAsOuterMethodTypeParameter_Title => GetResourceString("WRN_TypeParameterSameAsOuterMethodTypeParameter_Title");
        /// <summary>Type parameter '{0}' has the same name as the containing type, or method</summary>
        internal static string @ERR_TypeVariableSameAsParent => GetResourceString("ERR_TypeVariableSameAsParent");
        /// <summary>'{0}' cannot implement both '{1}' and '{2}' because they may unify for some type parameter substitutions</summary>
        internal static string @ERR_UnifyingInterfaceInstantiations => GetResourceString("ERR_UnifyingInterfaceInstantiations");
        /// <summary>A generic type cannot derive from '{0}' because it is an attribute class</summary>
        internal static string @ERR_GenericDerivingFromAttribute => GetResourceString("ERR_GenericDerivingFromAttribute");
        /// <summary>'{1}' does not define type parameter '{0}'</summary>
        internal static string @ERR_TyVarNotFoundInConstraint => GetResourceString("ERR_TyVarNotFoundInConstraint");
        /// <summary>'{0}' is not a valid constraint. A type used as a constraint must be an interface, a non-sealed class or a type parameter.</summary>
        internal static string @ERR_BadBoundType => GetResourceString("ERR_BadBoundType");
        /// <summary>Constraint cannot be special class '{0}'</summary>
        internal static string @ERR_SpecialTypeAsBound => GetResourceString("ERR_SpecialTypeAsBound");
        /// <summary>Inconsistent accessibility: constraint type '{1}' is less accessible than '{0}'</summary>
        internal static string @ERR_BadVisBound => GetResourceString("ERR_BadVisBound");
        /// <summary>Cannot do member lookup in '{0}' because it is a type parameter</summary>
        internal static string @ERR_LookupInTypeVariable => GetResourceString("ERR_LookupInTypeVariable");
        /// <summary>Invalid constraint type. A type used as a constraint must be an interface, a non-sealed class or a type parameter.</summary>
        internal static string @ERR_BadConstraintType => GetResourceString("ERR_BadConstraintType");
        /// <summary>'{0}': cannot declare instance members in a static class</summary>
        internal static string @ERR_InstanceMemberInStaticClass => GetResourceString("ERR_InstanceMemberInStaticClass");
        /// <summary>'{1}': cannot derive from static class '{0}'</summary>
        internal static string @ERR_StaticBaseClass => GetResourceString("ERR_StaticBaseClass");
        /// <summary>Static classes cannot have instance constructors</summary>
        internal static string @ERR_ConstructorInStaticClass => GetResourceString("ERR_ConstructorInStaticClass");
        /// <summary>Static classes cannot contain destructors</summary>
        internal static string @ERR_DestructorInStaticClass => GetResourceString("ERR_DestructorInStaticClass");
        /// <summary>Cannot create an instance of the static class '{0}'</summary>
        internal static string @ERR_InstantiatingStaticClass => GetResourceString("ERR_InstantiatingStaticClass");
        /// <summary>Static class '{0}' cannot derive from type '{1}'. Static classes must derive from object.</summary>
        internal static string @ERR_StaticDerivedFromNonObject => GetResourceString("ERR_StaticDerivedFromNonObject");
        /// <summary>'{0}': static classes cannot implement interfaces</summary>
        internal static string @ERR_StaticClassInterfaceImpl => GetResourceString("ERR_StaticClassInterfaceImpl");
        /// <summary>'{0}': ref structs cannot implement interfaces</summary>
        internal static string @ERR_RefStructInterfaceImpl => GetResourceString("ERR_RefStructInterfaceImpl");
        /// <summary>'{0}': static classes cannot contain user-defined operators</summary>
        internal static string @ERR_OperatorInStaticClass => GetResourceString("ERR_OperatorInStaticClass");
        /// <summary>Cannot convert to static type '{0}'</summary>
        internal static string @ERR_ConvertToStaticClass => GetResourceString("ERR_ConvertToStaticClass");
        /// <summary>'{0}': static classes cannot be used as constraints</summary>
        internal static string @ERR_ConstraintIsStaticClass => GetResourceString("ERR_ConstraintIsStaticClass");
        /// <summary>'{0}': static types cannot be used as type arguments</summary>
        internal static string @ERR_GenericArgIsStaticClass => GetResourceString("ERR_GenericArgIsStaticClass");
        /// <summary>'{0}': array elements cannot be of static type</summary>
        internal static string @ERR_ArrayOfStaticClass => GetResourceString("ERR_ArrayOfStaticClass");
        /// <summary>'{0}': cannot declare indexers in a static class</summary>
        internal static string @ERR_IndexerInStaticClass => GetResourceString("ERR_IndexerInStaticClass");
        /// <summary>'{0}': static types cannot be used as parameters</summary>
        internal static string @ERR_ParameterIsStaticClass => GetResourceString("ERR_ParameterIsStaticClass");
        /// <summary>'{0}': static types cannot be used as parameters</summary>
        internal static string @WRN_ParameterIsStaticClass => GetResourceString("WRN_ParameterIsStaticClass");
        /// <summary>Static types cannot be used as parameters</summary>
        internal static string @WRN_ParameterIsStaticClass_Title => GetResourceString("WRN_ParameterIsStaticClass_Title");
        /// <summary>'{0}': static types cannot be used as return types</summary>
        internal static string @ERR_ReturnTypeIsStaticClass => GetResourceString("ERR_ReturnTypeIsStaticClass");
        /// <summary>'{0}': static types cannot be used as return types</summary>
        internal static string @WRN_ReturnTypeIsStaticClass => GetResourceString("WRN_ReturnTypeIsStaticClass");
        /// <summary>Static types cannot be used as return types</summary>
        internal static string @WRN_ReturnTypeIsStaticClass_Title => GetResourceString("WRN_ReturnTypeIsStaticClass_Title");
        /// <summary>Cannot declare a variable of static type '{0}'</summary>
        internal static string @ERR_VarDeclIsStaticClass => GetResourceString("ERR_VarDeclIsStaticClass");
        /// <summary>A throw statement with no arguments is not allowed in a finally clause that is nested inside the nearest enclosing catch clause</summary>
        internal static string @ERR_BadEmptyThrowInFinally => GetResourceString("ERR_BadEmptyThrowInFinally");
        /// <summary>'{0}' is not a valid format specifier</summary>
        internal static string @ERR_InvalidSpecifier => GetResourceString("ERR_InvalidSpecifier");
        /// <summary>Possibly incorrect assignment to local '{0}' which is the argument to a using or lock statement. The Dispose call or unlocking will happen on the original value of the local.</summary>
        internal static string @WRN_AssignmentToLockOrDispose => GetResourceString("WRN_AssignmentToLockOrDispose");
        /// <summary>Possibly incorrect assignment to local which is the argument to a using or lock statement</summary>
        internal static string @WRN_AssignmentToLockOrDispose_Title => GetResourceString("WRN_AssignmentToLockOrDispose_Title");
        /// <summary>Type '{0}' is defined in this assembly, but a type forwarder is specified for it</summary>
        internal static string @ERR_ForwardedTypeInThisAssembly => GetResourceString("ERR_ForwardedTypeInThisAssembly");
        /// <summary>Cannot forward type '{0}' because it is a nested type of '{1}'</summary>
        internal static string @ERR_ForwardedTypeIsNested => GetResourceString("ERR_ForwardedTypeIsNested");
        /// <summary>The type forwarder for type '{0}' in assembly '{1}' causes a cycle</summary>
        internal static string @ERR_CycleInTypeForwarder => GetResourceString("ERR_CycleInTypeForwarder");
        /// <summary>The /moduleassemblyname option may only be specified when building a target type of 'module'</summary>
        internal static string @ERR_AssemblyNameOnNonModule => GetResourceString("ERR_AssemblyNameOnNonModule");
        /// <summary>Assembly reference '{0}' is invalid and cannot be resolved</summary>
        internal static string @ERR_InvalidAssemblyName => GetResourceString("ERR_InvalidAssemblyName");
        /// <summary>Invalid type specified as an argument for TypeForwardedTo attribute</summary>
        internal static string @ERR_InvalidFwdType => GetResourceString("ERR_InvalidFwdType");
        /// <summary>'{0}' does not implement interface member '{1}'. '{2}' cannot implement an interface member because it is static.</summary>
        internal static string @ERR_CloseUnimplementedInterfaceMemberStatic => GetResourceString("ERR_CloseUnimplementedInterfaceMemberStatic");
        /// <summary>'{0}' does not implement interface member '{1}'. '{2}' cannot implement an interface member because it is not public.</summary>
        internal static string @ERR_CloseUnimplementedInterfaceMemberNotPublic => GetResourceString("ERR_CloseUnimplementedInterfaceMemberNotPublic");
        /// <summary>'{0}' does not implement interface member '{1}'. '{2}' cannot implement '{1}' because it does not have the matching return type of '{3}'.</summary>
        internal static string @ERR_CloseUnimplementedInterfaceMemberWrongReturnType => GetResourceString("ERR_CloseUnimplementedInterfaceMemberWrongReturnType");
        /// <summary>'{0}' duplicate TypeForwardedToAttribute</summary>
        internal static string @ERR_DuplicateTypeForwarder => GetResourceString("ERR_DuplicateTypeForwarder");
        /// <summary>A query body must end with a select clause or a group clause</summary>
        internal static string @ERR_ExpectedSelectOrGroup => GetResourceString("ERR_ExpectedSelectOrGroup");
        /// <summary>Expected contextual keyword 'on'</summary>
        internal static string @ERR_ExpectedContextualKeywordOn => GetResourceString("ERR_ExpectedContextualKeywordOn");
        /// <summary>Expected contextual keyword 'equals'</summary>
        internal static string @ERR_ExpectedContextualKeywordEquals => GetResourceString("ERR_ExpectedContextualKeywordEquals");
        /// <summary>Expected contextual keyword 'by'</summary>
        internal static string @ERR_ExpectedContextualKeywordBy => GetResourceString("ERR_ExpectedContextualKeywordBy");
        /// <summary>Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access.</summary>
        internal static string @ERR_InvalidAnonymousTypeMemberDeclarator => GetResourceString("ERR_InvalidAnonymousTypeMemberDeclarator");
        /// <summary>Invalid initializer member declarator</summary>
        internal static string @ERR_InvalidInitializerElementInitializer => GetResourceString("ERR_InvalidInitializerElementInitializer");
        /// <summary>Inconsistent lambda parameter usage; parameter types must be all explicit or all implicit</summary>
        internal static string @ERR_InconsistentLambdaParameterUsage => GetResourceString("ERR_InconsistentLambdaParameterUsage");
        /// <summary>A partial method cannot have the 'abstract' modifier</summary>
        internal static string @ERR_PartialMethodInvalidModifier => GetResourceString("ERR_PartialMethodInvalidModifier");
        /// <summary>A partial method must be declared within a partial type</summary>
        internal static string @ERR_PartialMethodOnlyInPartialClass => GetResourceString("ERR_PartialMethodOnlyInPartialClass");
        /// <summary>A partial method may not explicitly implement an interface method</summary>
        internal static string @ERR_PartialMethodNotExplicit => GetResourceString("ERR_PartialMethodNotExplicit");
        /// <summary>Both partial method declarations must be extension methods or neither may be an extension method</summary>
        internal static string @ERR_PartialMethodExtensionDifference => GetResourceString("ERR_PartialMethodExtensionDifference");
        /// <summary>A partial method may not have multiple defining declarations</summary>
        internal static string @ERR_PartialMethodOnlyOneLatent => GetResourceString("ERR_PartialMethodOnlyOneLatent");
        /// <summary>A partial method may not have multiple implementing declarations</summary>
        internal static string @ERR_PartialMethodOnlyOneActual => GetResourceString("ERR_PartialMethodOnlyOneActual");
        /// <summary>Both partial method declarations must use a params parameter or neither may use a params parameter</summary>
        internal static string @ERR_PartialMethodParamsDifference => GetResourceString("ERR_PartialMethodParamsDifference");
        /// <summary>No defining declaration found for implementing declaration of partial method '{0}'</summary>
        internal static string @ERR_PartialMethodMustHaveLatent => GetResourceString("ERR_PartialMethodMustHaveLatent");
        /// <summary>Both partial method declarations, '{0}' and '{1}', must use the same tuple element names.</summary>
        internal static string @ERR_PartialMethodInconsistentTupleNames => GetResourceString("ERR_PartialMethodInconsistentTupleNames");
        /// <summary>Partial method declarations of '{0}' have inconsistent constraints for type parameter '{1}'</summary>
        internal static string @ERR_PartialMethodInconsistentConstraints => GetResourceString("ERR_PartialMethodInconsistentConstraints");
        /// <summary>Cannot create delegate from method '{0}' because it is a partial method without an implementing declaration</summary>
        internal static string @ERR_PartialMethodToDelegate => GetResourceString("ERR_PartialMethodToDelegate");
        /// <summary>Both partial method declarations must be static or neither may be static</summary>
        internal static string @ERR_PartialMethodStaticDifference => GetResourceString("ERR_PartialMethodStaticDifference");
        /// <summary>Both partial method declarations must be unsafe or neither may be unsafe</summary>
        internal static string @ERR_PartialMethodUnsafeDifference => GetResourceString("ERR_PartialMethodUnsafeDifference");
        /// <summary>Partial methods with only a defining declaration or removed conditional methods cannot be used in expression trees</summary>
        internal static string @ERR_PartialMethodInExpressionTree => GetResourceString("ERR_PartialMethodInExpressionTree");
        /// <summary>Obsolete member '{0}' overrides non-obsolete member '{1}'</summary>
        internal static string @WRN_ObsoleteOverridingNonObsolete => GetResourceString("WRN_ObsoleteOverridingNonObsolete");
        /// <summary>Obsolete member overrides non-obsolete member</summary>
        internal static string @WRN_ObsoleteOverridingNonObsolete_Title => GetResourceString("WRN_ObsoleteOverridingNonObsolete_Title");
        /// <summary>The fully qualified name for '{0}' is too long for debug information. Compile without '/debug' option.</summary>
        internal static string @WRN_DebugFullNameTooLong => GetResourceString("WRN_DebugFullNameTooLong");
        /// <summary>Fully qualified name is too long for debug information</summary>
        internal static string @WRN_DebugFullNameTooLong_Title => GetResourceString("WRN_DebugFullNameTooLong_Title");
        /// <summary>Cannot assign {0} to an implicitly-typed variable</summary>
        internal static string @ERR_ImplicitlyTypedVariableAssignedBadValue => GetResourceString("ERR_ImplicitlyTypedVariableAssignedBadValue");
        /// <summary>Implicitly-typed variables must be initialized</summary>
        internal static string @ERR_ImplicitlyTypedVariableWithNoInitializer => GetResourceString("ERR_ImplicitlyTypedVariableWithNoInitializer");
        /// <summary>Implicitly-typed variables cannot have multiple declarators</summary>
        internal static string @ERR_ImplicitlyTypedVariableMultipleDeclarator => GetResourceString("ERR_ImplicitlyTypedVariableMultipleDeclarator");
        /// <summary>Cannot initialize an implicitly-typed variable with an array initializer</summary>
        internal static string @ERR_ImplicitlyTypedVariableAssignedArrayInitializer => GetResourceString("ERR_ImplicitlyTypedVariableAssignedArrayInitializer");
        /// <summary>Implicitly-typed local variables cannot be fixed</summary>
        internal static string @ERR_ImplicitlyTypedLocalCannotBeFixed => GetResourceString("ERR_ImplicitlyTypedLocalCannotBeFixed");
        /// <summary>Implicitly-typed variables cannot be constant</summary>
        internal static string @ERR_ImplicitlyTypedVariableCannotBeConst => GetResourceString("ERR_ImplicitlyTypedVariableCannotBeConst");
        /// <summary>Constructor '{0}' is marked external</summary>
        internal static string @WRN_ExternCtorNoImplementation => GetResourceString("WRN_ExternCtorNoImplementation");
        /// <summary>Constructor is marked external</summary>
        internal static string @WRN_ExternCtorNoImplementation_Title => GetResourceString("WRN_ExternCtorNoImplementation_Title");
        /// <summary>The contextual keyword 'var' may only appear within a local variable declaration or in script code</summary>
        internal static string @ERR_TypeVarNotFound => GetResourceString("ERR_TypeVarNotFound");
        /// <summary>No best type found for implicitly-typed array</summary>
        internal static string @ERR_ImplicitlyTypedArrayNoBestType => GetResourceString("ERR_ImplicitlyTypedArrayNoBestType");
        /// <summary>Cannot assign '{0}' to anonymous type property</summary>
        internal static string @ERR_AnonymousTypePropertyAssignedBadValue => GetResourceString("ERR_AnonymousTypePropertyAssignedBadValue");
        /// <summary>An expression tree may not contain a base access</summary>
        internal static string @ERR_ExpressionTreeContainsBaseAccess => GetResourceString("ERR_ExpressionTreeContainsBaseAccess");
        /// <summary>An expression tree may not contain a tuple == or != operator</summary>
        internal static string @ERR_ExpressionTreeContainsTupleBinOp => GetResourceString("ERR_ExpressionTreeContainsTupleBinOp");
        /// <summary>An expression tree may not contain an assignment operator</summary>
        internal static string @ERR_ExpressionTreeContainsAssignment => GetResourceString("ERR_ExpressionTreeContainsAssignment");
        /// <summary>An anonymous type cannot have multiple properties with the same name</summary>
        internal static string @ERR_AnonymousTypeDuplicatePropertyName => GetResourceString("ERR_AnonymousTypeDuplicatePropertyName");
        /// <summary>A lambda expression with a statement body cannot be converted to an expression tree</summary>
        internal static string @ERR_StatementLambdaToExpressionTree => GetResourceString("ERR_StatementLambdaToExpressionTree");
        /// <summary>Cannot convert lambda to an expression tree whose type argument '{0}' is not a delegate type</summary>
        internal static string @ERR_ExpressionTreeMustHaveDelegate => GetResourceString("ERR_ExpressionTreeMustHaveDelegate");
        /// <summary>Cannot use anonymous type in a constant expression</summary>
        internal static string @ERR_AnonymousTypeNotAvailable => GetResourceString("ERR_AnonymousTypeNotAvailable");
        /// <summary>The first operand of an 'is' or 'as' operator may not be a lambda expression, anonymous method, or method group.</summary>
        internal static string @ERR_LambdaInIsAs => GetResourceString("ERR_LambdaInIsAs");
        /// <summary>The first operand of an 'as' operator may not be a tuple literal without a natural type.</summary>
        internal static string @ERR_TypelessTupleInAs => GetResourceString("ERR_TypelessTupleInAs");
        /// <summary>An expression tree may not contain a multidimensional array initializer</summary>
        internal static string @ERR_ExpressionTreeContainsMultiDimensionalArrayInitializer => GetResourceString("ERR_ExpressionTreeContainsMultiDimensionalArrayInitializer");
        /// <summary>Argument missing</summary>
        internal static string @ERR_MissingArgument => GetResourceString("ERR_MissingArgument");
        /// <summary>Cannot use local variable '{0}' before it is declared</summary>
        internal static string @ERR_VariableUsedBeforeDeclaration => GetResourceString("ERR_VariableUsedBeforeDeclaration");
        /// <summary>Type of '{0}' cannot be inferred since its initializer directly or indirectly refers to the definition.</summary>
        internal static string @ERR_RecursivelyTypedVariable => GetResourceString("ERR_RecursivelyTypedVariable");
        /// <summary>Auto-implemented property '{0}' must be fully assigned before control is returned to the caller.</summary>
        internal static string @ERR_UnassignedThisAutoProperty => GetResourceString("ERR_UnassignedThisAutoProperty");
        /// <summary>Auto-implemented property '{0}' must be fully assigned before control is returned to the caller.</summary>
        internal static string @WRN_UnassignedThisAutoProperty => GetResourceString("WRN_UnassignedThisAutoProperty");
        /// <summary>An auto-implemented property must be fully assigned before control is returned to the caller.</summary>
        internal static string @WRN_UnassignedThisAutoProperty_Title => GetResourceString("WRN_UnassignedThisAutoProperty_Title");
        /// <summary>Cannot use local variable '{0}' before it is declared. The declaration of the local variable hides the field '{1}'.</summary>
        internal static string @ERR_VariableUsedBeforeDeclarationAndHidesField => GetResourceString("ERR_VariableUsedBeforeDeclarationAndHidesField");
        /// <summary>An expression tree lambda may not contain a coalescing operator with a null or default literal left-hand side</summary>
        internal static string @ERR_ExpressionTreeContainsBadCoalesce => GetResourceString("ERR_ExpressionTreeContainsBadCoalesce");
        /// <summary>Identifier expected</summary>
        internal static string @ERR_IdentifierExpected => GetResourceString("ERR_IdentifierExpected");
        /// <summary>; expected</summary>
        internal static string @ERR_SemicolonExpected => GetResourceString("ERR_SemicolonExpected");
        /// <summary>Syntax error, '{0}' expected</summary>
        internal static string @ERR_SyntaxError => GetResourceString("ERR_SyntaxError");
        /// <summary>Duplicate '{0}' modifier</summary>
        internal static string @ERR_DuplicateModifier => GetResourceString("ERR_DuplicateModifier");
        /// <summary>Property accessor already defined</summary>
        internal static string @ERR_DuplicateAccessor => GetResourceString("ERR_DuplicateAccessor");
        /// <summary>Type byte, sbyte, short, ushort, int, uint, long, or ulong expected</summary>
        internal static string @ERR_IntegralTypeExpected => GetResourceString("ERR_IntegralTypeExpected");
        /// <summary>Unrecognized escape sequence</summary>
        internal static string @ERR_IllegalEscape => GetResourceString("ERR_IllegalEscape");
        /// <summary>Newline in constant</summary>
        internal static string @ERR_NewlineInConst => GetResourceString("ERR_NewlineInConst");
        /// <summary>Empty character literal</summary>
        internal static string @ERR_EmptyCharConst => GetResourceString("ERR_EmptyCharConst");
        /// <summary>Too many characters in character literal</summary>
        internal static string @ERR_TooManyCharsInConst => GetResourceString("ERR_TooManyCharsInConst");
        /// <summary>Invalid number</summary>
        internal static string @ERR_InvalidNumber => GetResourceString("ERR_InvalidNumber");
        /// <summary>A get or set accessor expected</summary>
        internal static string @ERR_GetOrSetExpected => GetResourceString("ERR_GetOrSetExpected");
        /// <summary>An object, string, or class type expected</summary>
        internal static string @ERR_ClassTypeExpected => GetResourceString("ERR_ClassTypeExpected");
        /// <summary>Named attribute argument expected</summary>
        internal static string @ERR_NamedArgumentExpected => GetResourceString("ERR_NamedArgumentExpected");
        /// <summary>Catch clauses cannot follow the general catch clause of a try statement</summary>
        internal static string @ERR_TooManyCatches => GetResourceString("ERR_TooManyCatches");
        /// <summary>Keyword 'this' or 'base' expected</summary>
        internal static string @ERR_ThisOrBaseExpected => GetResourceString("ERR_ThisOrBaseExpected");
        /// <summary>Overloadable unary operator expected</summary>
        internal static string @ERR_OvlUnaryOperatorExpected => GetResourceString("ERR_OvlUnaryOperatorExpected");
        /// <summary>Overloadable binary operator expected</summary>
        internal static string @ERR_OvlBinaryOperatorExpected => GetResourceString("ERR_OvlBinaryOperatorExpected");
        /// <summary>Integral constant is too large</summary>
        internal static string @ERR_IntOverflow => GetResourceString("ERR_IntOverflow");
        /// <summary>Type or namespace definition, or end-of-file expected</summary>
        internal static string @ERR_EOFExpected => GetResourceString("ERR_EOFExpected");
        /// <summary>Member definition, statement, or end-of-file expected</summary>
        internal static string @ERR_GlobalDefinitionOrStatementExpected => GetResourceString("ERR_GlobalDefinitionOrStatementExpected");
        /// <summary>Embedded statement cannot be a declaration or labeled statement</summary>
        internal static string @ERR_BadEmbeddedStmt => GetResourceString("ERR_BadEmbeddedStmt");
        /// <summary>Preprocessor directive expected</summary>
        internal static string @ERR_PPDirectiveExpected => GetResourceString("ERR_PPDirectiveExpected");
        /// <summary>Single-line comment or end-of-line expected</summary>
        internal static string @ERR_EndOfPPLineExpected => GetResourceString("ERR_EndOfPPLineExpected");
        /// <summary>) expected</summary>
        internal static string @ERR_CloseParenExpected => GetResourceString("ERR_CloseParenExpected");
        /// <summary>#endif directive expected</summary>
        internal static string @ERR_EndifDirectiveExpected => GetResourceString("ERR_EndifDirectiveExpected");
        /// <summary>Unexpected preprocessor directive</summary>
        internal static string @ERR_UnexpectedDirective => GetResourceString("ERR_UnexpectedDirective");
        /// <summary>#error: '{0}'</summary>
        internal static string @ERR_ErrorDirective => GetResourceString("ERR_ErrorDirective");
        /// <summary>#warning: '{0}'</summary>
        internal static string @WRN_WarningDirective => GetResourceString("WRN_WarningDirective");
        /// <summary>#warning directive</summary>
        internal static string @WRN_WarningDirective_Title => GetResourceString("WRN_WarningDirective_Title");
        /// <summary>Type expected</summary>
        internal static string @ERR_TypeExpected => GetResourceString("ERR_TypeExpected");
        /// <summary>Cannot define/undefine preprocessor symbols after first token in file</summary>
        internal static string @ERR_PPDefFollowsToken => GetResourceString("ERR_PPDefFollowsToken");
        /// <summary>Cannot use #r after first token in file</summary>
        internal static string @ERR_PPReferenceFollowsToken => GetResourceString("ERR_PPReferenceFollowsToken");
        /// <summary>End-of-file found, '*/' expected</summary>
        internal static string @ERR_OpenEndedComment => GetResourceString("ERR_OpenEndedComment");
        /// <summary>Merge conflict marker encountered</summary>
        internal static string @ERR_Merge_conflict_marker_encountered => GetResourceString("ERR_Merge_conflict_marker_encountered");
        /// <summary>Do not use refout when using refonly.</summary>
        internal static string @ERR_NoRefOutWhenRefOnly => GetResourceString("ERR_NoRefOutWhenRefOnly");
        /// <summary>Cannot compile net modules when using /refout or /refonly.</summary>
        internal static string @ERR_NoNetModuleOutputWhenRefOutOrRefOnly => GetResourceString("ERR_NoNetModuleOutputWhenRefOutOrRefOnly");
        /// <summary>Overloadable operator expected</summary>
        internal static string @ERR_OvlOperatorExpected => GetResourceString("ERR_OvlOperatorExpected");
        /// <summary>#endregion directive expected</summary>
        internal static string @ERR_EndRegionDirectiveExpected => GetResourceString("ERR_EndRegionDirectiveExpected");
        /// <summary>Unterminated string literal</summary>
        internal static string @ERR_UnterminatedStringLit => GetResourceString("ERR_UnterminatedStringLit");
        /// <summary>Preprocessor directives must appear as the first non-whitespace character on a line</summary>
        internal static string @ERR_BadDirectivePlacement => GetResourceString("ERR_BadDirectivePlacement");
        /// <summary>Identifier expected; '{1}' is a keyword</summary>
        internal static string @ERR_IdentifierExpectedKW => GetResourceString("ERR_IdentifierExpectedKW");
        /// <summary>{ or ; expected</summary>
        internal static string @ERR_SemiOrLBraceExpected => GetResourceString("ERR_SemiOrLBraceExpected");
        /// <summary>Cannot use more than one type in a for, using, fixed, or declaration statement</summary>
        internal static string @ERR_MultiTypeInDeclaration => GetResourceString("ERR_MultiTypeInDeclaration");
        /// <summary>An add or remove accessor expected</summary>
        internal static string @ERR_AddOrRemoveExpected => GetResourceString("ERR_AddOrRemoveExpected");
        /// <summary>Unexpected character '{0}'</summary>
        internal static string @ERR_UnexpectedCharacter => GetResourceString("ERR_UnexpectedCharacter");
        /// <summary>Unexpected token '{0}'</summary>
        internal static string @ERR_UnexpectedToken => GetResourceString("ERR_UnexpectedToken");
        /// <summary>'{0}': static classes cannot contain protected members</summary>
        internal static string @ERR_ProtectedInStatic => GetResourceString("ERR_ProtectedInStatic");
        /// <summary>A previous catch clause already catches all exceptions. All non-exceptions thrown will be wrapped in a System.Runtime.CompilerServices.RuntimeWrappedException.</summary>
        internal static string @WRN_UnreachableGeneralCatch => GetResourceString("WRN_UnreachableGeneralCatch");
        /// <summary>A previous catch clause already catches all exceptions</summary>
        internal static string @WRN_UnreachableGeneralCatch_Title => GetResourceString("WRN_UnreachableGeneralCatch_Title");
        /// <summary>This warning is caused when a catch() block has no specified exception type after a catch (System.Exception e) block. The warning advises that the catch() block will not catch any exceptions.
        /// 
        /// A catch() block after a catch (System.Exception e) block can ca ...</summary>
        internal static string @WRN_UnreachableGeneralCatch_Description => GetResourceString("WRN_UnreachableGeneralCatch_Description");
        /// <summary>The operand of an increment or decrement operator must be a variable, property or indexer</summary>
        internal static string @ERR_IncrementLvalueExpected => GetResourceString("ERR_IncrementLvalueExpected");
        /// <summary>'{0}' does not contain a definition for '{1}' and no accessible extension method '{1}' accepting a first argument of type '{0}' could be found (are you missing a using directive or an assembly reference?)</summary>
        internal static string @ERR_NoSuchMemberOrExtension => GetResourceString("ERR_NoSuchMemberOrExtension");
        /// <summary>'{0}' does not contain a definition for '{1}' and no extension method '{1}' accepting a first argument of type '{0}' could be found (are you missing a using directive for '{2}'?)</summary>
        internal static string @ERR_NoSuchMemberOrExtensionNeedUsing => GetResourceString("ERR_NoSuchMemberOrExtensionNeedUsing");
        /// <summary>Method '{0}' has a parameter modifier 'this' which is not on the first parameter</summary>
        internal static string @ERR_BadThisParam => GetResourceString("ERR_BadThisParam");
        /// <summary>The parameter modifier '{0}' cannot be used with '{1}'</summary>
        internal static string @ERR_BadParameterModifiers => GetResourceString("ERR_BadParameterModifiers");
        /// <summary>The first parameter of an extension method cannot be of type '{0}'</summary>
        internal static string @ERR_BadTypeforThis => GetResourceString("ERR_BadTypeforThis");
        /// <summary>A parameter array cannot be used with 'this' modifier on an extension method</summary>
        internal static string @ERR_BadParamModThis => GetResourceString("ERR_BadParamModThis");
        /// <summary>Extension method must be static</summary>
        internal static string @ERR_BadExtensionMeth => GetResourceString("ERR_BadExtensionMeth");
        /// <summary>Extension method must be defined in a non-generic static class</summary>
        internal static string @ERR_BadExtensionAgg => GetResourceString("ERR_BadExtensionAgg");
        /// <summary>A parameter can only have one '{0}' modifier</summary>
        internal static string @ERR_DupParamMod => GetResourceString("ERR_DupParamMod");
        /// <summary>Extension methods must be defined in a top level static class; {0} is a nested class</summary>
        internal static string @ERR_ExtensionMethodsDecl => GetResourceString("ERR_ExtensionMethodsDecl");
        /// <summary>Cannot define a new extension method because the compiler required type '{0}' cannot be found. Are you missing a reference to System.Core.dll?</summary>
        internal static string @ERR_ExtensionAttrNotFound => GetResourceString("ERR_ExtensionAttrNotFound");
        /// <summary>Do not use 'System.Runtime.CompilerServices.ExtensionAttribute'. Use the 'this' keyword instead.</summary>
        internal static string @ERR_ExplicitExtension => GetResourceString("ERR_ExplicitExtension");
        /// <summary>Do not use 'System.Runtime.CompilerServices.DynamicAttribute'. Use the 'dynamic' keyword instead.</summary>
        internal static string @ERR_ExplicitDynamicAttr => GetResourceString("ERR_ExplicitDynamicAttr");
        /// <summary>The constructor call needs to be dynamically dispatched, but cannot be because it is part of a constructor initializer. Consider casting the dynamic arguments.</summary>
        internal static string @ERR_NoDynamicPhantomOnBaseCtor => GetResourceString("ERR_NoDynamicPhantomOnBaseCtor");
        /// <summary>Extension method '{0}' defined on value type '{1}' cannot be used to create delegates</summary>
        internal static string @ERR_ValueTypeExtDelegate => GetResourceString("ERR_ValueTypeExtDelegate");
        /// <summary>No overload for method '{0}' takes {1} arguments</summary>
        internal static string @ERR_BadArgCount => GetResourceString("ERR_BadArgCount");
        /// <summary>Argument {0}: cannot convert from '{1}' to '{2}'</summary>
        internal static string @ERR_BadArgType => GetResourceString("ERR_BadArgType");
        /// <summary>Source file '{0}' could not be opened -- {1}</summary>
        internal static string @ERR_NoSourceFile => GetResourceString("ERR_NoSourceFile");
        /// <summary>Cannot link resource files when building a module</summary>
        internal static string @ERR_CantRefResource => GetResourceString("ERR_CantRefResource");
        /// <summary>Resource identifier '{0}' has already been used in this assembly</summary>
        internal static string @ERR_ResourceNotUnique => GetResourceString("ERR_ResourceNotUnique");
        /// <summary>Each linked resource and module must have a unique filename. Filename '{0}' is specified more than once in this assembly</summary>
        internal static string @ERR_ResourceFileNameNotUnique => GetResourceString("ERR_ResourceFileNameNotUnique");
        /// <summary>The referenced file '{0}' is not an assembly</summary>
        internal static string @ERR_ImportNonAssembly => GetResourceString("ERR_ImportNonAssembly");
        /// <summary>A ref or out value must be an assignable variable</summary>
        internal static string @ERR_RefLvalueExpected => GetResourceString("ERR_RefLvalueExpected");
        /// <summary>Keyword 'base' is not available in a static method</summary>
        internal static string @ERR_BaseInStaticMeth => GetResourceString("ERR_BaseInStaticMeth");
        /// <summary>Keyword 'base' is not available in the current context</summary>
        internal static string @ERR_BaseInBadContext => GetResourceString("ERR_BaseInBadContext");
        /// <summary>} expected</summary>
        internal static string @ERR_RbraceExpected => GetResourceString("ERR_RbraceExpected");
        /// <summary>{ expected</summary>
        internal static string @ERR_LbraceExpected => GetResourceString("ERR_LbraceExpected");
        /// <summary>'in' expected</summary>
        internal static string @ERR_InExpected => GetResourceString("ERR_InExpected");
        /// <summary>Invalid preprocessor expression</summary>
        internal static string @ERR_InvalidPreprocExpr => GetResourceString("ERR_InvalidPreprocExpr");
        /// <summary>Invalid token '{0}' in class, record, struct, or interface member declaration</summary>
        internal static string @ERR_InvalidMemberDecl => GetResourceString("ERR_InvalidMemberDecl");
        /// <summary>Method must have a return type</summary>
        internal static string @ERR_MemberNeedsType => GetResourceString("ERR_MemberNeedsType");
        /// <summary>Invalid base type</summary>
        internal static string @ERR_BadBaseType => GetResourceString("ERR_BadBaseType");
        /// <summary>Empty switch block</summary>
        internal static string @WRN_EmptySwitch => GetResourceString("WRN_EmptySwitch");
        /// <summary>Empty switch block</summary>
        internal static string @WRN_EmptySwitch_Title => GetResourceString("WRN_EmptySwitch_Title");
        /// <summary>Expected catch or finally</summary>
        internal static string @ERR_ExpectedEndTry => GetResourceString("ERR_ExpectedEndTry");
        /// <summary>Invalid expression term '{0}'</summary>
        internal static string @ERR_InvalidExprTerm => GetResourceString("ERR_InvalidExprTerm");
        /// <summary>A new expression requires an argument list or (), [], or {} after type</summary>
        internal static string @ERR_BadNewExpr => GetResourceString("ERR_BadNewExpr");
        /// <summary>Elements defined in a namespace cannot be explicitly declared as private, protected, protected internal, or private protected</summary>
        internal static string @ERR_NoNamespacePrivate => GetResourceString("ERR_NoNamespacePrivate");
        /// <summary>Expected ; or = (cannot specify constructor arguments in declaration)</summary>
        internal static string @ERR_BadVarDecl => GetResourceString("ERR_BadVarDecl");
        /// <summary>A using clause must precede all other elements defined in the namespace except extern alias declarations</summary>
        internal static string @ERR_UsingAfterElements => GetResourceString("ERR_UsingAfterElements");
        /// <summary>Overloaded binary operator '{0}' takes two parameters</summary>
        internal static string @ERR_BadBinOpArgs => GetResourceString("ERR_BadBinOpArgs");
        /// <summary>Overloaded unary operator '{0}' takes one parameter</summary>
        internal static string @ERR_BadUnOpArgs => GetResourceString("ERR_BadUnOpArgs");
        /// <summary>Invalid parameter type 'void'</summary>
        internal static string @ERR_NoVoidParameter => GetResourceString("ERR_NoVoidParameter");
        /// <summary>The using alias '{0}' appeared previously in this namespace</summary>
        internal static string @ERR_DuplicateAlias => GetResourceString("ERR_DuplicateAlias");
        /// <summary>Cannot access protected member '{0}' via a qualifier of type '{1}'; the qualifier must be of type '{2}' (or derived from it)</summary>
        internal static string @ERR_BadProtectedAccess => GetResourceString("ERR_BadProtectedAccess");
        /// <summary>'{0}' cannot be added to this assembly because it already is an assembly</summary>
        internal static string @ERR_AddModuleAssembly => GetResourceString("ERR_AddModuleAssembly");
        /// <summary>Property, indexer, or event '{0}' is not supported by the language; try directly calling accessor methods '{1}' or '{2}'</summary>
        internal static string @ERR_BindToBogusProp2 => GetResourceString("ERR_BindToBogusProp2");
        /// <summary>Property, indexer, or event '{0}' is not supported by the language; try directly calling accessor method '{1}'</summary>
        internal static string @ERR_BindToBogusProp1 => GetResourceString("ERR_BindToBogusProp1");
        /// <summary>Keyword 'void' cannot be used in this context</summary>
        internal static string @ERR_NoVoidHere => GetResourceString("ERR_NoVoidHere");
        /// <summary>Indexers must have at least one parameter</summary>
        internal static string @ERR_IndexerNeedsParam => GetResourceString("ERR_IndexerNeedsParam");
        /// <summary>Array type specifier, [], must appear before parameter name</summary>
        internal static string @ERR_BadArraySyntax => GetResourceString("ERR_BadArraySyntax");
        /// <summary>Declaration is not valid; use '{0} operator &lt;dest-type&gt; (...' instead</summary>
        internal static string @ERR_BadOperatorSyntax => GetResourceString("ERR_BadOperatorSyntax");
        /// <summary>Could not find '{0}' specified for Main method</summary>
        internal static string @ERR_MainClassNotFound => GetResourceString("ERR_MainClassNotFound");
        /// <summary>'{0}' specified for Main method must be a non-generic class, record, struct, or interface</summary>
        internal static string @ERR_MainClassNotClass => GetResourceString("ERR_MainClassNotClass");
        /// <summary>'{0}' does not have a suitable static 'Main' method</summary>
        internal static string @ERR_NoMainInClass => GetResourceString("ERR_NoMainInClass");
        /// <summary>Cannot use '{0}' for Main method because it is imported</summary>
        internal static string @ERR_MainClassIsImport => GetResourceString("ERR_MainClassIsImport");
        /// <summary>Outputs without source must have the /out option specified</summary>
        internal static string @ERR_OutputNeedsName => GetResourceString("ERR_OutputNeedsName");
        /// <summary>Output directory could not be determined</summary>
        internal static string @ERR_NoOutputDirectory => GetResourceString("ERR_NoOutputDirectory");
        /// <summary>Conflicting options specified: Win32 resource file; Win32 manifest</summary>
        internal static string @ERR_CantHaveWin32ResAndManifest => GetResourceString("ERR_CantHaveWin32ResAndManifest");
        /// <summary>Conflicting options specified: Win32 resource file; Win32 icon</summary>
        internal static string @ERR_CantHaveWin32ResAndIcon => GetResourceString("ERR_CantHaveWin32ResAndIcon");
        /// <summary>Error reading resource '{0}' -- '{1}'</summary>
        internal static string @ERR_CantReadResource => GetResourceString("ERR_CantReadResource");
        /// <summary>Error writing to XML documentation file: {0}</summary>
        internal static string @ERR_DocFileGen => GetResourceString("ERR_DocFileGen");
        /// <summary>XML comment has badly formed XML -- '{0}'</summary>
        internal static string @WRN_XMLParseError => GetResourceString("WRN_XMLParseError");
        /// <summary>XML comment has badly formed XML</summary>
        internal static string @WRN_XMLParseError_Title => GetResourceString("WRN_XMLParseError_Title");
        /// <summary>XML comment has a duplicate param tag for '{0}'</summary>
        internal static string @WRN_DuplicateParamTag => GetResourceString("WRN_DuplicateParamTag");
        /// <summary>XML comment has a duplicate param tag</summary>
        internal static string @WRN_DuplicateParamTag_Title => GetResourceString("WRN_DuplicateParamTag_Title");
        /// <summary>XML comment has a param tag for '{0}', but there is no parameter by that name</summary>
        internal static string @WRN_UnmatchedParamTag => GetResourceString("WRN_UnmatchedParamTag");
        /// <summary>XML comment has a param tag, but there is no parameter by that name</summary>
        internal static string @WRN_UnmatchedParamTag_Title => GetResourceString("WRN_UnmatchedParamTag_Title");
        /// <summary>XML comment on '{1}' has a paramref tag for '{0}', but there is no parameter by that name</summary>
        internal static string @WRN_UnmatchedParamRefTag => GetResourceString("WRN_UnmatchedParamRefTag");
        /// <summary>XML comment has a paramref tag, but there is no parameter by that name</summary>
        internal static string @WRN_UnmatchedParamRefTag_Title => GetResourceString("WRN_UnmatchedParamRefTag_Title");
        /// <summary>Parameter '{0}' has no matching param tag in the XML comment for '{1}' (but other parameters do)</summary>
        internal static string @WRN_MissingParamTag => GetResourceString("WRN_MissingParamTag");
        /// <summary>Parameter has no matching param tag in the XML comment (but other parameters do)</summary>
        internal static string @WRN_MissingParamTag_Title => GetResourceString("WRN_MissingParamTag_Title");
        /// <summary>XML comment has cref attribute '{0}' that could not be resolved</summary>
        internal static string @WRN_BadXMLRef => GetResourceString("WRN_BadXMLRef");
        /// <summary>XML comment has cref attribute that could not be resolved</summary>
        internal static string @WRN_BadXMLRef_Title => GetResourceString("WRN_BadXMLRef_Title");
        /// <summary>A stackalloc expression requires [] after type</summary>
        internal static string @ERR_BadStackAllocExpr => GetResourceString("ERR_BadStackAllocExpr");
        /// <summary>The line number specified for #line directive is missing or invalid</summary>
        internal static string @ERR_InvalidLineNumber => GetResourceString("ERR_InvalidLineNumber");
        /// <summary>Quoted file name, single-line comment or end-of-line expected</summary>
        internal static string @ERR_MissingPPFile => GetResourceString("ERR_MissingPPFile");
        /// <summary>Quoted file name expected</summary>
        internal static string @ERR_ExpectedPPFile => GetResourceString("ERR_ExpectedPPFile");
        /// <summary>#r is only allowed in scripts</summary>
        internal static string @ERR_ReferenceDirectiveOnlyAllowedInScripts => GetResourceString("ERR_ReferenceDirectiveOnlyAllowedInScripts");
        /// <summary>foreach statement cannot operate on variables of type '{0}' because '{0}' does not contain a public instance or extension definition for '{1}'</summary>
        internal static string @ERR_ForEachMissingMember => GetResourceString("ERR_ForEachMissingMember");
        /// <summary>Asynchronous foreach statement cannot operate on variables of type '{0}' because '{0}' does not contain a suitable public instance or extension definition for '{1}'</summary>
        internal static string @ERR_AwaitForEachMissingMember => GetResourceString("ERR_AwaitForEachMissingMember");
        /// <summary>foreach statement cannot operate on variables of type '{0}' because '{0}' does not contain a public instance or extension definition for '{1}'. Did you mean 'await foreach' rather than 'foreach'?</summary>
        internal static string @ERR_ForEachMissingMemberWrongAsync => GetResourceString("ERR_ForEachMissingMemberWrongAsync");
        /// <summary>Asynchronous foreach statement cannot operate on variables of type '{0}' because '{0}' does not contain a public instance or extension definition for '{1}'. Did you mean 'foreach' rather than 'await foreach'?</summary>
        internal static string @ERR_AwaitForEachMissingMemberWrongAsync => GetResourceString("ERR_AwaitForEachMissingMemberWrongAsync");
        /// <summary>The body of an async-iterator method must contain a 'yield' statement.</summary>
        internal static string @ERR_PossibleAsyncIteratorWithoutYield => GetResourceString("ERR_PossibleAsyncIteratorWithoutYield");
        /// <summary>The body of an async-iterator method must contain a 'yield' statement. Consider removing 'async' from the method declaration or adding a 'yield' statement.</summary>
        internal static string @ERR_PossibleAsyncIteratorWithoutYieldOrAwait => GetResourceString("ERR_PossibleAsyncIteratorWithoutYieldOrAwait");
        /// <summary>A static local function cannot contain a reference to '{0}'.</summary>
        internal static string @ERR_StaticLocalFunctionCannotCaptureVariable => GetResourceString("ERR_StaticLocalFunctionCannotCaptureVariable");
        /// <summary>A static local function cannot contain a reference to 'this' or 'base'.</summary>
        internal static string @ERR_StaticLocalFunctionCannotCaptureThis => GetResourceString("ERR_StaticLocalFunctionCannotCaptureThis");
        /// <summary>Invalid type for parameter {0} in XML comment cref attribute: '{1}'</summary>
        internal static string @WRN_BadXMLRefParamType => GetResourceString("WRN_BadXMLRefParamType");
        /// <summary>Invalid type for parameter in XML comment cref attribute</summary>
        internal static string @WRN_BadXMLRefParamType_Title => GetResourceString("WRN_BadXMLRefParamType_Title");
        /// <summary>Invalid return type in XML comment cref attribute</summary>
        internal static string @WRN_BadXMLRefReturnType => GetResourceString("WRN_BadXMLRefReturnType");
        /// <summary>Invalid return type in XML comment cref attribute</summary>
        internal static string @WRN_BadXMLRefReturnType_Title => GetResourceString("WRN_BadXMLRefReturnType_Title");
        /// <summary>Error reading Win32 resources -- {0}</summary>
        internal static string @ERR_BadWin32Res => GetResourceString("ERR_BadWin32Res");
        /// <summary>XML comment has syntactically incorrect cref attribute '{0}'</summary>
        internal static string @WRN_BadXMLRefSyntax => GetResourceString("WRN_BadXMLRefSyntax");
        /// <summary>XML comment has syntactically incorrect cref attribute</summary>
        internal static string @WRN_BadXMLRefSyntax_Title => GetResourceString("WRN_BadXMLRefSyntax_Title");
        /// <summary>Member modifier '{0}' must precede the member type and name</summary>
        internal static string @ERR_BadModifierLocation => GetResourceString("ERR_BadModifierLocation");
        /// <summary>Array creation must have array size or array initializer</summary>
        internal static string @ERR_MissingArraySize => GetResourceString("ERR_MissingArraySize");
        /// <summary>XML comment is not placed on a valid language element</summary>
        internal static string @WRN_UnprocessedXMLComment => GetResourceString("WRN_UnprocessedXMLComment");
        /// <summary>XML comment is not placed on a valid language element</summary>
        internal static string @WRN_UnprocessedXMLComment_Title => GetResourceString("WRN_UnprocessedXMLComment_Title");
        /// <summary>Unable to include XML fragment '{1}' of file '{0}' -- {2}</summary>
        internal static string @WRN_FailedInclude => GetResourceString("WRN_FailedInclude");
        /// <summary>Unable to include XML fragment</summary>
        internal static string @WRN_FailedInclude_Title => GetResourceString("WRN_FailedInclude_Title");
        /// <summary>Invalid XML include element -- {0}</summary>
        internal static string @WRN_InvalidInclude => GetResourceString("WRN_InvalidInclude");
        /// <summary>Invalid XML include element</summary>
        internal static string @WRN_InvalidInclude_Title => GetResourceString("WRN_InvalidInclude_Title");
        /// <summary>Missing XML comment for publicly visible type or member '{0}'</summary>
        internal static string @WRN_MissingXMLComment => GetResourceString("WRN_MissingXMLComment");
        /// <summary>Missing XML comment for publicly visible type or member</summary>
        internal static string @WRN_MissingXMLComment_Title => GetResourceString("WRN_MissingXMLComment_Title");
        /// <summary>The /doc compiler option was specified, but one or more constructs did not have comments.</summary>
        internal static string @WRN_MissingXMLComment_Description => GetResourceString("WRN_MissingXMLComment_Description");
        /// <summary>Badly formed XML in included comments file -- '{0}'</summary>
        internal static string @WRN_XMLParseIncludeError => GetResourceString("WRN_XMLParseIncludeError");
        /// <summary>Badly formed XML in included comments file</summary>
        internal static string @WRN_XMLParseIncludeError_Title => GetResourceString("WRN_XMLParseIncludeError_Title");
        /// <summary>Delegate '{0}' does not take {1} arguments</summary>
        internal static string @ERR_BadDelArgCount => GetResourceString("ERR_BadDelArgCount");
        /// <summary>Semicolon after method or accessor block is not valid</summary>
        internal static string @ERR_UnexpectedSemicolon => GetResourceString("ERR_UnexpectedSemicolon");
        /// <summary>The return type of a method, delegate, or function pointer cannot be '{0}'</summary>
        internal static string @ERR_MethodReturnCantBeRefAny => GetResourceString("ERR_MethodReturnCantBeRefAny");
        /// <summary>Compilation cancelled by user</summary>
        internal static string @ERR_CompileCancelled => GetResourceString("ERR_CompileCancelled");
        /// <summary>Cannot make reference to variable of type '{0}'</summary>
        internal static string @ERR_MethodArgCantBeRefAny => GetResourceString("ERR_MethodArgCantBeRefAny");
        /// <summary>Cannot assign to '{0}' because it is read-only</summary>
        internal static string @ERR_AssgReadonlyLocal => GetResourceString("ERR_AssgReadonlyLocal");
        /// <summary>Cannot use '{0}' as a ref or out value because it is read-only</summary>
        internal static string @ERR_RefReadonlyLocal => GetResourceString("ERR_RefReadonlyLocal");
        /// <summary>The RequiredAttribute attribute is not permitted on C# types</summary>
        internal static string @ERR_CantUseRequiredAttribute => GetResourceString("ERR_CantUseRequiredAttribute");
        /// <summary>Modifiers cannot be placed on event accessor declarations</summary>
        internal static string @ERR_NoModifiersOnAccessor => GetResourceString("ERR_NoModifiersOnAccessor");
        /// <summary>The params parameter cannot be declared as {0}</summary>
        internal static string @ERR_ParamsCantBeWithModifier => GetResourceString("ERR_ParamsCantBeWithModifier");
        /// <summary>Cannot modify the return value of '{0}' because it is not a variable</summary>
        internal static string @ERR_ReturnNotLValue => GetResourceString("ERR_ReturnNotLValue");
        /// <summary>The managed coclass wrapper class '{0}' for interface '{1}' cannot be found (are you missing an assembly reference?)</summary>
        internal static string @ERR_MissingCoClass => GetResourceString("ERR_MissingCoClass");
        /// <summary>'{0}' is ambiguous between '{1}' and '{2}'; use either '@{0}' or '{0}Attribute'</summary>
        internal static string @ERR_AmbiguousAttribute => GetResourceString("ERR_AmbiguousAttribute");
        /// <summary>Argument {0} may not be passed with the '{1}' keyword</summary>
        internal static string @ERR_BadArgExtraRef => GetResourceString("ERR_BadArgExtraRef");
        /// <summary>Option '{0}' overrides attribute '{1}' given in a source file or added module</summary>
        internal static string @WRN_CmdOptionConflictsSource => GetResourceString("WRN_CmdOptionConflictsSource");
        /// <summary>Option overrides attribute given in a source file or added module</summary>
        internal static string @WRN_CmdOptionConflictsSource_Title => GetResourceString("WRN_CmdOptionConflictsSource_Title");
        /// <summary>This warning occurs if the assembly attributes AssemblyKeyFileAttribute or AssemblyKeyNameAttribute found in source conflict with the /keyfile or /keycontainer command line option or key file name or key container specified in the Project Properties.</summary>
        internal static string @WRN_CmdOptionConflictsSource_Description => GetResourceString("WRN_CmdOptionConflictsSource_Description");
        /// <summary>Invalid option '{0}' for /langversion. Use '/langversion:?' to list supported values.</summary>
        internal static string @ERR_BadCompatMode => GetResourceString("ERR_BadCompatMode");
        /// <summary>Cannot create delegate with '{0}' because it or a method it overrides has a Conditional attribute</summary>
        internal static string @ERR_DelegateOnConditional => GetResourceString("ERR_DelegateOnConditional");
        /// <summary>Cannot create temporary file -- {0}</summary>
        internal static string @ERR_CantMakeTempFile => GetResourceString("ERR_CantMakeTempFile");
        /// <summary>Argument {0} must be passed with the '{1}' keyword</summary>
        internal static string @ERR_BadArgRef => GetResourceString("ERR_BadArgRef");
        /// <summary>The yield statement cannot be used inside an anonymous method or lambda expression</summary>
        internal static string @ERR_YieldInAnonMeth => GetResourceString("ERR_YieldInAnonMeth");
        /// <summary>Cannot return a value from an iterator. Use the yield return statement to return a value, or yield break to end the iteration.</summary>
        internal static string @ERR_ReturnInIterator => GetResourceString("ERR_ReturnInIterator");
        /// <summary>Iterators cannot have ref, in or out parameters</summary>
        internal static string @ERR_BadIteratorArgType => GetResourceString("ERR_BadIteratorArgType");
        /// <summary>The body of '{0}' cannot be an iterator block because '{1}' is not an iterator interface type</summary>
        internal static string @ERR_BadIteratorReturn => GetResourceString("ERR_BadIteratorReturn");
        /// <summary>Cannot yield in the body of a finally clause</summary>
        internal static string @ERR_BadYieldInFinally => GetResourceString("ERR_BadYieldInFinally");
        /// <summary>Method '{0}' with an iterator block must be 'async' to return '{1}'</summary>
        internal static string @ERR_IteratorMustBeAsync => GetResourceString("ERR_IteratorMustBeAsync");
        /// <summary>Cannot yield a value in the body of a try block with a catch clause</summary>
        internal static string @ERR_BadYieldInTryOfCatch => GetResourceString("ERR_BadYieldInTryOfCatch");
        /// <summary>Expression expected after yield return</summary>
        internal static string @ERR_EmptyYield => GetResourceString("ERR_EmptyYield");
        /// <summary>Cannot use ref, out, or in parameter '{0}' inside an anonymous method, lambda expression, query expression, or local function</summary>
        internal static string @ERR_AnonDelegateCantUse => GetResourceString("ERR_AnonDelegateCantUse");
        /// <summary>Unsafe code may not appear in iterators</summary>
        internal static string @ERR_IllegalInnerUnsafe => GetResourceString("ERR_IllegalInnerUnsafe");
        /// <summary>Cannot yield a value in the body of a catch clause</summary>
        internal static string @ERR_BadYieldInCatch => GetResourceString("ERR_BadYieldInCatch");
        /// <summary>Control cannot leave the body of an anonymous method or lambda expression</summary>
        internal static string @ERR_BadDelegateLeave => GetResourceString("ERR_BadDelegateLeave");
        /// <summary>The suppression operator is not allowed in this context</summary>
        internal static string @ERR_IllegalSuppression => GetResourceString("ERR_IllegalSuppression");
        /// <summary>Unrecognized #pragma directive</summary>
        internal static string @WRN_IllegalPragma => GetResourceString("WRN_IllegalPragma");
        /// <summary>Unrecognized #pragma directive</summary>
        internal static string @WRN_IllegalPragma_Title => GetResourceString("WRN_IllegalPragma_Title");
        /// <summary>Expected 'disable' or 'restore'</summary>
        internal static string @WRN_IllegalPPWarning => GetResourceString("WRN_IllegalPPWarning");
        /// <summary>Expected 'disable' or 'restore' after #pragma warning</summary>
        internal static string @WRN_IllegalPPWarning_Title => GetResourceString("WRN_IllegalPPWarning_Title");
        /// <summary>Cannot restore warning 'CS{0}' because it was disabled globally</summary>
        internal static string @WRN_BadRestoreNumber => GetResourceString("WRN_BadRestoreNumber");
        /// <summary>Cannot restore warning because it was disabled globally</summary>
        internal static string @WRN_BadRestoreNumber_Title => GetResourceString("WRN_BadRestoreNumber_Title");
        /// <summary>__arglist is not allowed in the parameter list of iterators</summary>
        internal static string @ERR_VarargsIterator => GetResourceString("ERR_VarargsIterator");
        /// <summary>Iterators cannot have unsafe parameters or yield types</summary>
        internal static string @ERR_UnsafeIteratorArgType => GetResourceString("ERR_UnsafeIteratorArgType");
        /// <summary>The managed coclass wrapper class signature '{0}' for interface '{1}' is not a valid class name signature</summary>
        internal static string @ERR_BadCoClassSig => GetResourceString("ERR_BadCoClassSig");
        /// <summary>foreach statement cannot operate on variables of type '{0}' because it implements multiple instantiations of '{1}'; try casting to a specific interface instantiation</summary>
        internal static string @ERR_MultipleIEnumOfT => GetResourceString("ERR_MultipleIEnumOfT");
        /// <summary>Asynchronous foreach statement cannot operate on variables of type '{0}' because it implements multiple instantiations of '{1}'; try casting to a specific interface instantiation</summary>
        internal static string @ERR_MultipleIAsyncEnumOfT => GetResourceString("ERR_MultipleIAsyncEnumOfT");
        /// <summary>A fixed size buffer field must have the array size specifier after the field name</summary>
        internal static string @ERR_FixedDimsRequired => GetResourceString("ERR_FixedDimsRequired");
        /// <summary>Fixed size buffer fields may only be members of structs</summary>
        internal static string @ERR_FixedNotInStruct => GetResourceString("ERR_FixedNotInStruct");
        /// <summary>Not all code paths return a value in {0} of type '{1}'</summary>
        internal static string @ERR_AnonymousReturnExpected => GetResourceString("ERR_AnonymousReturnExpected");
        /// <summary>Feature '{0}' is not part of the standardized ISO C# language specification, and may not be accepted by other compilers</summary>
        internal static string @WRN_NonECMAFeature => GetResourceString("WRN_NonECMAFeature");
        /// <summary>Feature is not part of the standardized ISO C# language specification, and may not be accepted by other compilers</summary>
        internal static string @WRN_NonECMAFeature_Title => GetResourceString("WRN_NonECMAFeature_Title");
        /// <summary>Keyword, identifier, or string expected after verbatim specifier: @</summary>
        internal static string @ERR_ExpectedVerbatimLiteral => GetResourceString("ERR_ExpectedVerbatimLiteral");
        /// <summary>A readonly field cannot be used as a ref or out value (except in a constructor)</summary>
        internal static string @ERR_RefReadonly => GetResourceString("ERR_RefReadonly");
        /// <summary>Members of readonly field '{0}' cannot be used as a ref or out value (except in a constructor)</summary>
        internal static string @ERR_RefReadonly2 => GetResourceString("ERR_RefReadonly2");
        /// <summary>A readonly field cannot be assigned to (except in a constructor or init-only setter of the type in which the field is defined or a variable initializer)</summary>
        internal static string @ERR_AssgReadonly => GetResourceString("ERR_AssgReadonly");
        /// <summary>Members of readonly field '{0}' cannot be modified (except in a constructor or a variable initializer)</summary>
        internal static string @ERR_AssgReadonly2 => GetResourceString("ERR_AssgReadonly2");
        /// <summary>Cannot use {0} '{1}' as a ref or out value because it is a readonly variable</summary>
        internal static string @ERR_RefReadonlyNotField => GetResourceString("ERR_RefReadonlyNotField");
        /// <summary>Members of {0} '{1}' cannot be used as a ref or out value because it is a readonly variable</summary>
        internal static string @ERR_RefReadonlyNotField2 => GetResourceString("ERR_RefReadonlyNotField2");
        /// <summary>Cannot assign to {0} '{1}' because it is a readonly variable</summary>
        internal static string @ERR_AssignReadonlyNotField => GetResourceString("ERR_AssignReadonlyNotField");
        /// <summary>Cannot assign to a member of {0} '{1}' because it is a readonly variable</summary>
        internal static string @ERR_AssignReadonlyNotField2 => GetResourceString("ERR_AssignReadonlyNotField2");
        /// <summary>Cannot return {0} '{1}' by writable reference because it is a readonly variable</summary>
        internal static string @ERR_RefReturnReadonlyNotField => GetResourceString("ERR_RefReturnReadonlyNotField");
        /// <summary>Members of {0} '{1}' cannot be returned by writable reference because it is a readonly variable</summary>
        internal static string @ERR_RefReturnReadonlyNotField2 => GetResourceString("ERR_RefReturnReadonlyNotField2");
        /// <summary>Fields of static readonly field '{0}' cannot be assigned to (except in a static constructor or a variable initializer)</summary>
        internal static string @ERR_AssgReadonlyStatic2 => GetResourceString("ERR_AssgReadonlyStatic2");
        /// <summary>Fields of static readonly field '{0}' cannot be used as a ref or out value (except in a static constructor)</summary>
        internal static string @ERR_RefReadonlyStatic2 => GetResourceString("ERR_RefReadonlyStatic2");
        /// <summary>Cannot modify members of '{0}' because it is a '{1}'</summary>
        internal static string @ERR_AssgReadonlyLocal2Cause => GetResourceString("ERR_AssgReadonlyLocal2Cause");
        /// <summary>Cannot use fields of '{0}' as a ref or out value because it is a '{1}'</summary>
        internal static string @ERR_RefReadonlyLocal2Cause => GetResourceString("ERR_RefReadonlyLocal2Cause");
        /// <summary>Cannot assign to '{0}' because it is a '{1}'</summary>
        internal static string @ERR_AssgReadonlyLocalCause => GetResourceString("ERR_AssgReadonlyLocalCause");
        /// <summary>Cannot use '{0}' as a ref or out value because it is a '{1}'</summary>
        internal static string @ERR_RefReadonlyLocalCause => GetResourceString("ERR_RefReadonlyLocalCause");
        /// <summary>{0}. See also error CS{1}.</summary>
        internal static string @WRN_ErrorOverride => GetResourceString("WRN_ErrorOverride");
        /// <summary>Warning is overriding an error</summary>
        internal static string @WRN_ErrorOverride_Title => GetResourceString("WRN_ErrorOverride_Title");
        /// <summary>The compiler emits this warning when it overrides an error with a warning. For information about the problem, search for the error code mentioned.</summary>
        internal static string @WRN_ErrorOverride_Description => GetResourceString("WRN_ErrorOverride_Description");
        /// <summary>Cannot convert {0} to type '{1}' because it is not a delegate type</summary>
        internal static string @ERR_AnonMethToNonDel => GetResourceString("ERR_AnonMethToNonDel");
        /// <summary>Cannot convert {0} to type '{1}' because the parameter types do not match the delegate parameter types</summary>
        internal static string @ERR_CantConvAnonMethParams => GetResourceString("ERR_CantConvAnonMethParams");
        /// <summary>Cannot convert {0} to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type</summary>
        internal static string @ERR_CantConvAnonMethReturns => GetResourceString("ERR_CantConvAnonMethReturns");
        /// <summary>Since this is an async method, the return expression must be of type '{0}' rather than 'Task&lt;{0}&gt;'</summary>
        internal static string @ERR_BadAsyncReturnExpression => GetResourceString("ERR_BadAsyncReturnExpression");
        /// <summary>Cannot convert async {0} to delegate type '{1}'. An async {0} may return void, Task or Task&lt;T&gt;, none of which are convertible to '{1}'.</summary>
        internal static string @ERR_CantConvAsyncAnonFuncReturns => GetResourceString("ERR_CantConvAsyncAnonFuncReturns");
        /// <summary>Fixed size buffer type must be one of the following: bool, byte, short, int, long, char, sbyte, ushort, uint, ulong, float or double</summary>
        internal static string @ERR_IllegalFixedType => GetResourceString("ERR_IllegalFixedType");
        /// <summary>Fixed size buffer of length {0} and type '{1}' is too big</summary>
        internal static string @ERR_FixedOverflow => GetResourceString("ERR_FixedOverflow");
        /// <summary>Fixed size buffers must have a length greater than zero</summary>
        internal static string @ERR_InvalidFixedArraySize => GetResourceString("ERR_InvalidFixedArraySize");
        /// <summary>You cannot use fixed size buffers contained in unfixed expressions. Try using the fixed statement.</summary>
        internal static string @ERR_FixedBufferNotFixed => GetResourceString("ERR_FixedBufferNotFixed");
        /// <summary>Attribute '{0}' is not valid on property or event accessors. It is only valid on '{1}' declarations.</summary>
        internal static string @ERR_AttributeNotOnAccessor => GetResourceString("ERR_AttributeNotOnAccessor");
        /// <summary>Invalid search path '{0}' specified in '{1}' -- '{2}'</summary>
        internal static string @WRN_InvalidSearchPathDir => GetResourceString("WRN_InvalidSearchPathDir");
        /// <summary>Invalid search path specified</summary>
        internal static string @WRN_InvalidSearchPathDir_Title => GetResourceString("WRN_InvalidSearchPathDir_Title");
        /// <summary>__arglist is not valid in this context</summary>
        internal static string @ERR_IllegalVarArgs => GetResourceString("ERR_IllegalVarArgs");
        /// <summary>params is not valid in this context</summary>
        internal static string @ERR_IllegalParams => GetResourceString("ERR_IllegalParams");
        /// <summary>A namespace declaration cannot have modifiers or attributes</summary>
        internal static string @ERR_BadModifiersOnNamespace => GetResourceString("ERR_BadModifiersOnNamespace");
        /// <summary>Invalid option '{0}' for /platform; must be anycpu, x86, Itanium, arm, arm64 or x64</summary>
        internal static string @ERR_BadPlatformType => GetResourceString("ERR_BadPlatformType");
        /// <summary>Anonymous methods, lambda expressions, query expressions, and local functions inside structs cannot access instance members of 'this'. Consider copying 'this' to a local variable outside the anonymous method, lambda expression, query expression, or local f ...</summary>
        internal static string @ERR_ThisStructNotInAnonMeth => GetResourceString("ERR_ThisStructNotInAnonMeth");
        /// <summary>'{0}': type used in a using statement must be implicitly convertible to 'System.IDisposable'.</summary>
        internal static string @ERR_NoConvToIDisp => GetResourceString("ERR_NoConvToIDisp");
        /// <summary>'{0}': type used in a using statement must be implicitly convertible to 'System.IDisposable'. Did you mean 'await using' rather than 'using'?</summary>
        internal static string @ERR_NoConvToIDispWrongAsync => GetResourceString("ERR_NoConvToIDispWrongAsync");
        /// <summary>'{0}': type used in an asynchronous using statement must be implicitly convertible to 'System.IAsyncDisposable' or implement a suitable 'DisposeAsync' method.</summary>
        internal static string @ERR_NoConvToIAsyncDisp => GetResourceString("ERR_NoConvToIAsyncDisp");
        /// <summary>'{0}': type used in an asynchronous using statement must be implicitly convertible to 'System.IAsyncDisposable' or implement a suitable 'DisposeAsync' method. Did you mean 'using' rather than 'await using'?</summary>
        internal static string @ERR_NoConvToIAsyncDispWrongAsync => GetResourceString("ERR_NoConvToIAsyncDispWrongAsync");
        /// <summary>Parameter {0} must be declared with the '{1}' keyword</summary>
        internal static string @ERR_BadParamRef => GetResourceString("ERR_BadParamRef");
        /// <summary>Parameter {0} should not be declared with the '{1}' keyword</summary>
        internal static string @ERR_BadParamExtraRef => GetResourceString("ERR_BadParamExtraRef");
        /// <summary>Parameter {0} is declared as type '{1}{2}' but should be '{3}{4}'</summary>
        internal static string @ERR_BadParamType => GetResourceString("ERR_BadParamType");
        /// <summary>Invalid extern alias for '/reference'; '{0}' is not a valid identifier</summary>
        internal static string @ERR_BadExternIdentifier => GetResourceString("ERR_BadExternIdentifier");
        /// <summary>Invalid reference alias option: '{0}=' -- missing filename</summary>
        internal static string @ERR_AliasMissingFile => GetResourceString("ERR_AliasMissingFile");
        /// <summary>You cannot redefine the global extern alias</summary>
        internal static string @ERR_GlobalExternAlias => GetResourceString("ERR_GlobalExternAlias");
        /// <summary>Reference to type '{0}' claims it is defined in this assembly, but it is not defined in source or any added modules</summary>
        internal static string @ERR_MissingTypeInSource => GetResourceString("ERR_MissingTypeInSource");
        /// <summary>Reference to type '{0}' claims it is defined in '{1}', but it could not be found</summary>
        internal static string @ERR_MissingTypeInAssembly => GetResourceString("ERR_MissingTypeInAssembly");
        /// <summary>The predefined type '{0}' is defined in multiple assemblies in the global alias; using definition from '{1}'</summary>
        internal static string @WRN_MultiplePredefTypes => GetResourceString("WRN_MultiplePredefTypes");
        /// <summary>Predefined type is defined in multiple assemblies in the global alias</summary>
        internal static string @WRN_MultiplePredefTypes_Title => GetResourceString("WRN_MultiplePredefTypes_Title");
        /// <summary>This error occurs when a predefined system type such as System.Int32 is found in two assemblies. One way this can happen is if you are referencing mscorlib or System.Runtime.dll from two different places, such as trying to run two versions of the .NET Fram ...</summary>
        internal static string @WRN_MultiplePredefTypes_Description => GetResourceString("WRN_MultiplePredefTypes_Description");
        /// <summary>Local '{0}' or its members cannot have their address taken and be used inside an anonymous method or lambda expression</summary>
        internal static string @ERR_LocalCantBeFixedAndHoisted => GetResourceString("ERR_LocalCantBeFixedAndHoisted");
        /// <summary>Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect</summary>
        internal static string @WRN_TooManyLinesForDebugger => GetResourceString("WRN_TooManyLinesForDebugger");
        /// <summary>Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect</summary>
        internal static string @WRN_TooManyLinesForDebugger_Title => GetResourceString("WRN_TooManyLinesForDebugger_Title");
        /// <summary>Cannot convert anonymous method block without a parameter list to delegate type '{0}' because it has one or more out parameters</summary>
        internal static string @ERR_CantConvAnonMethNoParams => GetResourceString("ERR_CantConvAnonMethNoParams");
        /// <summary>Attribute '{0}' is only valid on methods or attribute classes</summary>
        internal static string @ERR_ConditionalOnNonAttributeClass => GetResourceString("ERR_ConditionalOnNonAttributeClass");
        /// <summary>Accessing a member on '{0}' may cause a runtime exception because it is a field of a marshal-by-reference class</summary>
        internal static string @WRN_CallOnNonAgileField => GetResourceString("WRN_CallOnNonAgileField");
        /// <summary>Accessing a member on a field of a marshal-by-reference class may cause a runtime exception</summary>
        internal static string @WRN_CallOnNonAgileField_Title => GetResourceString("WRN_CallOnNonAgileField_Title");
        /// <summary>This warning occurs when you try to call a method, property, or indexer on a member of a class that derives from MarshalByRefObject, and the member is a value type. Objects that inherit from MarshalByRefObject are typically intended to be marshaled by refe ...</summary>
        internal static string @WRN_CallOnNonAgileField_Description => GetResourceString("WRN_CallOnNonAgileField_Description");
        /// <summary>'{0}' is not a valid warning number</summary>
        internal static string @WRN_BadWarningNumber => GetResourceString("WRN_BadWarningNumber");
        /// <summary>Not a valid warning number</summary>
        internal static string @WRN_BadWarningNumber_Title => GetResourceString("WRN_BadWarningNumber_Title");
        /// <summary>A number that was passed to the #pragma warning preprocessor directive was not a valid warning number. Verify that the number represents a warning, not an error.</summary>
        internal static string @WRN_BadWarningNumber_Description => GetResourceString("WRN_BadWarningNumber_Description");
        /// <summary>Invalid number</summary>
        internal static string @WRN_InvalidNumber => GetResourceString("WRN_InvalidNumber");
        /// <summary>Invalid number</summary>
        internal static string @WRN_InvalidNumber_Title => GetResourceString("WRN_InvalidNumber_Title");
        /// <summary>Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename.</summary>
        internal static string @WRN_FileNameTooLong => GetResourceString("WRN_FileNameTooLong");
        /// <summary>Invalid filename specified for preprocessor directive</summary>
        internal static string @WRN_FileNameTooLong_Title => GetResourceString("WRN_FileNameTooLong_Title");
        /// <summary>Invalid #pragma checksum syntax; should be #pragma checksum "filename" "{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}" "XXXX..."</summary>
        internal static string @WRN_IllegalPPChecksum => GetResourceString("WRN_IllegalPPChecksum");
        /// <summary>Invalid #pragma checksum syntax</summary>
        internal static string @WRN_IllegalPPChecksum_Title => GetResourceString("WRN_IllegalPPChecksum_Title");
        /// <summary>Single-line comment or end-of-line expected</summary>
        internal static string @WRN_EndOfPPLineExpected => GetResourceString("WRN_EndOfPPLineExpected");
        /// <summary>Single-line comment or end-of-line expected after #pragma directive</summary>
        internal static string @WRN_EndOfPPLineExpected_Title => GetResourceString("WRN_EndOfPPLineExpected_Title");
        /// <summary>Different checksum values given for '{0}'</summary>
        internal static string @WRN_ConflictingChecksum => GetResourceString("WRN_ConflictingChecksum");
        /// <summary>Different #pragma checksum values given</summary>
        internal static string @WRN_ConflictingChecksum_Title => GetResourceString("WRN_ConflictingChecksum_Title");
        /// <summary>Assembly reference '{0}' is invalid and cannot be resolved</summary>
        internal static string @WRN_InvalidAssemblyName => GetResourceString("WRN_InvalidAssemblyName");
        /// <summary>Assembly reference is invalid and cannot be resolved</summary>
        internal static string @WRN_InvalidAssemblyName_Title => GetResourceString("WRN_InvalidAssemblyName_Title");
        /// <summary>This warning indicates that an attribute, such as InternalsVisibleToAttribute, was not specified correctly.</summary>
        internal static string @WRN_InvalidAssemblyName_Description => GetResourceString("WRN_InvalidAssemblyName_Description");
        /// <summary>Assuming assembly reference '{0}' used by '{1}' matches identity '{2}' of '{3}', you may need to supply runtime policy</summary>
        internal static string @WRN_UnifyReferenceMajMin => GetResourceString("WRN_UnifyReferenceMajMin");
        /// <summary>Assuming assembly reference matches identity</summary>
        internal static string @WRN_UnifyReferenceMajMin_Title => GetResourceString("WRN_UnifyReferenceMajMin_Title");
        /// <summary>The two assemblies differ in release and/or version number. For unification to occur, you must specify directives in the application's .config file, and you must provide the correct strong name of an assembly.</summary>
        internal static string @WRN_UnifyReferenceMajMin_Description => GetResourceString("WRN_UnifyReferenceMajMin_Description");
        /// <summary>Assuming assembly reference '{0}' used by '{1}' matches identity '{2}' of '{3}', you may need to supply runtime policy</summary>
        internal static string @WRN_UnifyReferenceBldRev => GetResourceString("WRN_UnifyReferenceBldRev");
        /// <summary>Assuming assembly reference matches identity</summary>
        internal static string @WRN_UnifyReferenceBldRev_Title => GetResourceString("WRN_UnifyReferenceBldRev_Title");
        /// <summary>The two assemblies differ in release and/or version number. For unification to occur, you must specify directives in the application's .config file, and you must provide the correct strong name of an assembly.</summary>
        internal static string @WRN_UnifyReferenceBldRev_Description => GetResourceString("WRN_UnifyReferenceBldRev_Description");
        /// <summary>Multiple assemblies with equivalent identity have been imported: '{0}' and '{1}'. Remove one of the duplicate references.</summary>
        internal static string @ERR_DuplicateImport => GetResourceString("ERR_DuplicateImport");
        /// <summary>An assembly with the same simple name '{0}' has already been imported. Try removing one of the references (e.g. '{1}') or sign them to enable side-by-side.</summary>
        internal static string @ERR_DuplicateImportSimple => GetResourceString("ERR_DuplicateImportSimple");
        /// <summary>Assembly '{0}' with identity '{1}' uses '{2}' which has a higher version than referenced assembly '{3}' with identity '{4}'</summary>
        internal static string @ERR_AssemblyMatchBadVersion => GetResourceString("ERR_AssemblyMatchBadVersion");
        /// <summary>Fixed size buffers can only be accessed through locals or fields</summary>
        internal static string @ERR_FixedNeedsLvalue => GetResourceString("ERR_FixedNeedsLvalue");
        /// <summary>XML comment has a duplicate typeparam tag for '{0}'</summary>
        internal static string @WRN_DuplicateTypeParamTag => GetResourceString("WRN_DuplicateTypeParamTag");
        /// <summary>XML comment has a duplicate typeparam tag</summary>
        internal static string @WRN_DuplicateTypeParamTag_Title => GetResourceString("WRN_DuplicateTypeParamTag_Title");
        /// <summary>XML comment has a typeparam tag for '{0}', but there is no type parameter by that name</summary>
        internal static string @WRN_UnmatchedTypeParamTag => GetResourceString("WRN_UnmatchedTypeParamTag");
        /// <summary>XML comment has a typeparam tag, but there is no type parameter by that name</summary>
        internal static string @WRN_UnmatchedTypeParamTag_Title => GetResourceString("WRN_UnmatchedTypeParamTag_Title");
        /// <summary>XML comment on '{1}' has a typeparamref tag for '{0}', but there is no type parameter by that name</summary>
        internal static string @WRN_UnmatchedTypeParamRefTag => GetResourceString("WRN_UnmatchedTypeParamRefTag");
        /// <summary>XML comment has a typeparamref tag, but there is no type parameter by that name</summary>
        internal static string @WRN_UnmatchedTypeParamRefTag_Title => GetResourceString("WRN_UnmatchedTypeParamRefTag_Title");
        /// <summary>Type parameter '{0}' has no matching typeparam tag in the XML comment on '{1}' (but other type parameters do)</summary>
        internal static string @WRN_MissingTypeParamTag => GetResourceString("WRN_MissingTypeParamTag");
        /// <summary>Type parameter has no matching typeparam tag in the XML comment (but other type parameters do)</summary>
        internal static string @WRN_MissingTypeParamTag_Title => GetResourceString("WRN_MissingTypeParamTag_Title");
        /// <summary>'{0}': type must be '{2}' to match overridden member '{1}'</summary>
        internal static string @ERR_CantChangeTypeOnOverride => GetResourceString("ERR_CantChangeTypeOnOverride");
        /// <summary>Do not use 'System.Runtime.CompilerServices.FixedBuffer' attribute. Use the 'fixed' field modifier instead.</summary>
        internal static string @ERR_DoNotUseFixedBufferAttr => GetResourceString("ERR_DoNotUseFixedBufferAttr");
        /// <summary>Do not use 'System.Runtime.CompilerServices.FixedBuffer' attribute on a property</summary>
        internal static string @ERR_DoNotUseFixedBufferAttrOnProperty => GetResourceString("ERR_DoNotUseFixedBufferAttrOnProperty");
        /// <summary>Assignment made to same variable; did you mean to assign something else?</summary>
        internal static string @WRN_AssignmentToSelf => GetResourceString("WRN_AssignmentToSelf");
        /// <summary>Assignment made to same variable</summary>
        internal static string @WRN_AssignmentToSelf_Title => GetResourceString("WRN_AssignmentToSelf_Title");
        /// <summary>Comparison made to same variable; did you mean to compare something else?</summary>
        internal static string @WRN_ComparisonToSelf => GetResourceString("WRN_ComparisonToSelf");
        /// <summary>Comparison made to same variable</summary>
        internal static string @WRN_ComparisonToSelf_Title => GetResourceString("WRN_ComparisonToSelf_Title");
        /// <summary>Error opening Win32 resource file '{0}' -- '{1}'</summary>
        internal static string @ERR_CantOpenWin32Res => GetResourceString("ERR_CantOpenWin32Res");
        /// <summary>Expression will always cause a System.NullReferenceException because the default value of '{0}' is null</summary>
        internal static string @WRN_DotOnDefault => GetResourceString("WRN_DotOnDefault");
        /// <summary>Expression will always cause a System.NullReferenceException because the type's default value is null</summary>
        internal static string @WRN_DotOnDefault_Title => GetResourceString("WRN_DotOnDefault_Title");
        /// <summary>Class '{0}' cannot have multiple base classes: '{1}' and '{2}'</summary>
        internal static string @ERR_NoMultipleInheritance => GetResourceString("ERR_NoMultipleInheritance");
        /// <summary>Base class '{0}' must come before any interfaces</summary>
        internal static string @ERR_BaseClassMustBeFirst => GetResourceString("ERR_BaseClassMustBeFirst");
        /// <summary>XML comment has cref attribute '{0}' that refers to a type parameter</summary>
        internal static string @WRN_BadXMLRefTypeVar => GetResourceString("WRN_BadXMLRefTypeVar");
        /// <summary>XML comment has cref attribute that refers to a type parameter</summary>
        internal static string @WRN_BadXMLRefTypeVar_Title => GetResourceString("WRN_BadXMLRefTypeVar_Title");
        /// <summary>Friend assembly reference '{0}' is invalid. InternalsVisibleTo declarations cannot have a version, culture, public key token, or processor architecture specified.</summary>
        internal static string @ERR_FriendAssemblyBadArgs => GetResourceString("ERR_FriendAssemblyBadArgs");
        /// <summary>Friend assembly reference '{0}' is invalid. Strong-name signed assemblies must specify a public key in their InternalsVisibleTo declarations.</summary>
        internal static string @ERR_FriendAssemblySNReq => GetResourceString("ERR_FriendAssemblySNReq");
        /// <summary>Cannot bind delegate to '{0}' because it is a member of 'System.Nullable&lt;T&gt;'</summary>
        internal static string @ERR_DelegateOnNullable => GetResourceString("ERR_DelegateOnNullable");
        /// <summary>'{0}' does not contain a constructor that takes {1} arguments</summary>
        internal static string @ERR_BadCtorArgCount => GetResourceString("ERR_BadCtorArgCount");
        /// <summary>Assembly and module attributes must precede all other elements defined in a file except using clauses and extern alias declarations</summary>
        internal static string @ERR_GlobalAttributesNotFirst => GetResourceString("ERR_GlobalAttributesNotFirst");
        /// <summary>Expected expression</summary>
        internal static string @ERR_ExpressionExpected => GetResourceString("ERR_ExpressionExpected");
        /// <summary>Invalid version {0} for /subsystemversion. The version must be 6.02 or greater for ARM or AppContainerExe, and 4.00 or greater otherwise</summary>
        internal static string @ERR_InvalidSubsystemVersion => GetResourceString("ERR_InvalidSubsystemVersion");
        /// <summary>Embedded interop method '{0}' contains a body.</summary>
        internal static string @ERR_InteropMethodWithBody => GetResourceString("ERR_InteropMethodWithBody");
        /// <summary>Warning level must be zero or greater</summary>
        internal static string @ERR_BadWarningLevel => GetResourceString("ERR_BadWarningLevel");
        /// <summary>Invalid option '{0}' for /debug; must be 'portable', 'embedded', 'full' or 'pdbonly'</summary>
        internal static string @ERR_BadDebugType => GetResourceString("ERR_BadDebugType");
        /// <summary>Invalid option '{0}'; Resource visibility must be either 'public' or 'private'</summary>
        internal static string @ERR_BadResourceVis => GetResourceString("ERR_BadResourceVis");
        /// <summary>The type of the argument to the DefaultParameterValue attribute must match the parameter type</summary>
        internal static string @ERR_DefaultValueTypeMustMatch => GetResourceString("ERR_DefaultValueTypeMustMatch");
        /// <summary>Argument of type '{0}' is not applicable for the DefaultParameterValue attribute</summary>
        internal static string @ERR_DefaultValueBadValueType => GetResourceString("ERR_DefaultValueBadValueType");
        /// <summary>Duplicate initialization of member '{0}'</summary>
        internal static string @ERR_MemberAlreadyInitialized => GetResourceString("ERR_MemberAlreadyInitialized");
        /// <summary>Member '{0}' cannot be initialized. It is not a field or property.</summary>
        internal static string @ERR_MemberCannotBeInitialized => GetResourceString("ERR_MemberCannotBeInitialized");
        /// <summary>Static field or property '{0}' cannot be assigned in an object initializer</summary>
        internal static string @ERR_StaticMemberInObjectInitializer => GetResourceString("ERR_StaticMemberInObjectInitializer");
        /// <summary>Members of readonly field '{0}' of type '{1}' cannot be assigned with an object initializer because it is of a value type</summary>
        internal static string @ERR_ReadonlyValueTypeInObjectInitializer => GetResourceString("ERR_ReadonlyValueTypeInObjectInitializer");
        /// <summary>Members of property '{0}' of type '{1}' cannot be assigned with an object initializer because it is of a value type</summary>
        internal static string @ERR_ValueTypePropertyInObjectInitializer => GetResourceString("ERR_ValueTypePropertyInObjectInitializer");
        /// <summary>Unsafe type '{0}' cannot be used in object creation</summary>
        internal static string @ERR_UnsafeTypeInObjectCreation => GetResourceString("ERR_UnsafeTypeInObjectCreation");
        /// <summary>Element initializer cannot be empty</summary>
        internal static string @ERR_EmptyElementInitializer => GetResourceString("ERR_EmptyElementInitializer");
        /// <summary>The best overloaded method match for '{0}' has wrong signature for the initializer element. The initializable Add must be an accessible instance method.</summary>
        internal static string @ERR_InitializerAddHasWrongSignature => GetResourceString("ERR_InitializerAddHasWrongSignature");
        /// <summary>Cannot initialize type '{0}' with a collection initializer because it does not implement 'System.Collections.IEnumerable'</summary>
        internal static string @ERR_CollectionInitRequiresIEnumerable => GetResourceString("ERR_CollectionInitRequiresIEnumerable");
        /// <summary>Error reading Win32 manifest file '{0}' -- '{1}'</summary>
        internal static string @ERR_CantSetWin32Manifest => GetResourceString("ERR_CantSetWin32Manifest");
        /// <summary>Ignoring /win32manifest for module because it only applies to assemblies</summary>
        internal static string @WRN_CantHaveManifestForModule => GetResourceString("WRN_CantHaveManifestForModule");
        /// <summary>Ignoring /win32manifest for module because it only applies to assemblies</summary>
        internal static string @WRN_CantHaveManifestForModule_Title => GetResourceString("WRN_CantHaveManifestForModule_Title");
        /// <summary>'{0}' does not contain a definition for '{1}' and the best extension method overload '{2}' requires a receiver of type '{3}'</summary>
        internal static string @ERR_BadInstanceArgType => GetResourceString("ERR_BadInstanceArgType");
        /// <summary>The range variable '{0}' has already been declared</summary>
        internal static string @ERR_QueryDuplicateRangeVariable => GetResourceString("ERR_QueryDuplicateRangeVariable");
        /// <summary>The range variable '{0}' conflicts with a previous declaration of '{0}'</summary>
        internal static string @ERR_QueryRangeVariableOverrides => GetResourceString("ERR_QueryRangeVariableOverrides");
        /// <summary>Cannot assign {0} to a range variable</summary>
        internal static string @ERR_QueryRangeVariableAssignedBadValue => GetResourceString("ERR_QueryRangeVariableAssignedBadValue");
        /// <summary>Could not find an implementation of the query pattern for source type '{0}'.  '{1}' not found.  Consider explicitly specifying the type of the range variable '{2}'.</summary>
        internal static string @ERR_QueryNoProviderCastable => GetResourceString("ERR_QueryNoProviderCastable");
        /// <summary>Could not find an implementation of the query pattern for source type '{0}'.  '{1}' not found.  Are you missing required assembly references or a using directive for 'System.Linq'?</summary>
        internal static string @ERR_QueryNoProviderStandard => GetResourceString("ERR_QueryNoProviderStandard");
        /// <summary>Could not find an implementation of the query pattern for source type '{0}'.  '{1}' not found.</summary>
        internal static string @ERR_QueryNoProvider => GetResourceString("ERR_QueryNoProvider");
        /// <summary>The name '{0}' is not in scope on the left side of 'equals'.  Consider swapping the expressions on either side of 'equals'.</summary>
        internal static string @ERR_QueryOuterKey => GetResourceString("ERR_QueryOuterKey");
        /// <summary>The name '{0}' is not in scope on the right side of 'equals'.  Consider swapping the expressions on either side of 'equals'.</summary>
        internal static string @ERR_QueryInnerKey => GetResourceString("ERR_QueryInnerKey");
        /// <summary>Cannot pass the range variable '{0}' as an out or ref parameter</summary>
        internal static string @ERR_QueryOutRefRangeVariable => GetResourceString("ERR_QueryOutRefRangeVariable");
        /// <summary>Multiple implementations of the query pattern were found for source type '{0}'.  Ambiguous call to '{1}'.</summary>
        internal static string @ERR_QueryMultipleProviders => GetResourceString("ERR_QueryMultipleProviders");
        /// <summary>The type of one of the expressions in the {0} clause is incorrect.  Type inference failed in the call to '{1}'.</summary>
        internal static string @ERR_QueryTypeInferenceFailedMulti => GetResourceString("ERR_QueryTypeInferenceFailedMulti");
        /// <summary>The type of the expression in the {0} clause is incorrect.  Type inference failed in the call to '{1}'.</summary>
        internal static string @ERR_QueryTypeInferenceFailed => GetResourceString("ERR_QueryTypeInferenceFailed");
        /// <summary>An expression of type '{0}' is not allowed in a subsequent from clause in a query expression with source type '{1}'.  Type inference failed in the call to '{2}'.</summary>
        internal static string @ERR_QueryTypeInferenceFailedSelectMany => GetResourceString("ERR_QueryTypeInferenceFailedSelectMany");
        /// <summary>An expression tree may not contain an unsafe pointer operation</summary>
        internal static string @ERR_ExpressionTreeContainsPointerOp => GetResourceString("ERR_ExpressionTreeContainsPointerOp");
        /// <summary>An expression tree may not contain an anonymous method expression</summary>
        internal static string @ERR_ExpressionTreeContainsAnonymousMethod => GetResourceString("ERR_ExpressionTreeContainsAnonymousMethod");
        /// <summary>An anonymous method expression cannot be converted to an expression tree</summary>
        internal static string @ERR_AnonymousMethodToExpressionTree => GetResourceString("ERR_AnonymousMethodToExpressionTree");
        /// <summary>Range variable '{0}' cannot be assigned to -- it is read only</summary>
        internal static string @ERR_QueryRangeVariableReadOnly => GetResourceString("ERR_QueryRangeVariableReadOnly");
        /// <summary>The range variable '{0}' cannot have the same name as a method type parameter</summary>
        internal static string @ERR_QueryRangeVariableSameAsTypeParam => GetResourceString("ERR_QueryRangeVariableSameAsTypeParam");
        /// <summary>The contextual keyword 'var' cannot be used in a range variable declaration</summary>
        internal static string @ERR_TypeVarNotFoundRangeVariable => GetResourceString("ERR_TypeVarNotFoundRangeVariable");
        /// <summary>The best overloaded Add method '{0}' for the collection initializer has some invalid arguments</summary>
        internal static string @ERR_BadArgTypesForCollectionAdd => GetResourceString("ERR_BadArgTypesForCollectionAdd");
        /// <summary>An expression tree lambda may not contain a ref, in or out parameter</summary>
        internal static string @ERR_ByRefParameterInExpressionTree => GetResourceString("ERR_ByRefParameterInExpressionTree");
        /// <summary>An expression tree lambda may not contain a method with variable arguments</summary>
        internal static string @ERR_VarArgsInExpressionTree => GetResourceString("ERR_VarArgsInExpressionTree");
        /// <summary>An expression tree lambda may not contain a method group</summary>
        internal static string @ERR_MemGroupInExpressionTree => GetResourceString("ERR_MemGroupInExpressionTree");
        /// <summary>The best overloaded method match '{0}' for the collection initializer element cannot be used. Collection initializer 'Add' methods cannot have ref or out parameters.</summary>
        internal static string @ERR_InitializerAddHasParamModifiers => GetResourceString("ERR_InitializerAddHasParamModifiers");
        /// <summary>Non-invocable member '{0}' cannot be used like a method.</summary>
        internal static string @ERR_NonInvocableMemberCalled => GetResourceString("ERR_NonInvocableMemberCalled");
        /// <summary>Member '{0}' implements interface member '{1}' in type '{2}'. There are multiple matches for the interface member at run-time. It is implementation dependent which method will be called.</summary>
        internal static string @WRN_MultipleRuntimeImplementationMatches => GetResourceString("WRN_MultipleRuntimeImplementationMatches");
        /// <summary>Member implements interface member with multiple matches at run-time</summary>
        internal static string @WRN_MultipleRuntimeImplementationMatches_Title => GetResourceString("WRN_MultipleRuntimeImplementationMatches_Title");
        /// <summary>This warning can be generated when two interface methods are differentiated only by whether a particular parameter is marked with ref or with out. It is best to change your code to avoid this warning because it is not obvious or guaranteed which method is  ...</summary>
        internal static string @WRN_MultipleRuntimeImplementationMatches_Description => GetResourceString("WRN_MultipleRuntimeImplementationMatches_Description");
        /// <summary>Member '{1}' overrides '{0}'. There are multiple override candidates at run-time. It is implementation dependent which method will be called. Please use a newer runtime.</summary>
        internal static string @WRN_MultipleRuntimeOverrideMatches => GetResourceString("WRN_MultipleRuntimeOverrideMatches");
        /// <summary>Member overrides base member with multiple override candidates at run-time</summary>
        internal static string @WRN_MultipleRuntimeOverrideMatches_Title => GetResourceString("WRN_MultipleRuntimeOverrideMatches_Title");
        /// <summary>Object and collection initializer expressions may not be applied to a delegate creation expression</summary>
        internal static string @ERR_ObjectOrCollectionInitializerWithDelegateCreation => GetResourceString("ERR_ObjectOrCollectionInitializerWithDelegateCreation");
        /// <summary>'{0}' is of type '{1}'. The type specified in a constant declaration must be sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, bool, string, an enum-type, or a reference-type.</summary>
        internal static string @ERR_InvalidConstantDeclarationType => GetResourceString("ERR_InvalidConstantDeclarationType");
        /// <summary>Source file '{0}' could not be found.</summary>
        internal static string @ERR_FileNotFound => GetResourceString("ERR_FileNotFound");
        /// <summary>Source file '{0}' specified multiple times</summary>
        internal static string @WRN_FileAlreadyIncluded => GetResourceString("WRN_FileAlreadyIncluded");
        /// <summary>Source file specified multiple times</summary>
        internal static string @WRN_FileAlreadyIncluded_Title => GetResourceString("WRN_FileAlreadyIncluded_Title");
        /// <summary>Missing file specification for '{0}' option</summary>
        internal static string @ERR_NoFileSpec => GetResourceString("ERR_NoFileSpec");
        /// <summary>Command-line syntax error: Missing '{0}' for '{1}' option</summary>
        internal static string @ERR_SwitchNeedsString => GetResourceString("ERR_SwitchNeedsString");
        /// <summary>Unrecognized option: '{0}'</summary>
        internal static string @ERR_BadSwitch => GetResourceString("ERR_BadSwitch");
        /// <summary>No source files specified.</summary>
        internal static string @WRN_NoSources => GetResourceString("WRN_NoSources");
        /// <summary>No source files specified</summary>
        internal static string @WRN_NoSources_Title => GetResourceString("WRN_NoSources_Title");
        /// <summary>Expected a script (.csx file) but none specified</summary>
        internal static string @ERR_ExpectedSingleScript => GetResourceString("ERR_ExpectedSingleScript");
        /// <summary>Error opening response file '{0}'</summary>
        internal static string @ERR_OpenResponseFile => GetResourceString("ERR_OpenResponseFile");
        /// <summary>Cannot open '{0}' for writing -- '{1}'</summary>
        internal static string @ERR_CantOpenFileWrite => GetResourceString("ERR_CantOpenFileWrite");
        /// <summary>Invalid image base number '{0}'</summary>
        internal static string @ERR_BadBaseNumber => GetResourceString("ERR_BadBaseNumber");
        /// <summary>'{0}' is a binary file instead of a text file</summary>
        internal static string @ERR_BinaryFile => GetResourceString("ERR_BinaryFile");
        /// <summary>Code page '{0}' is invalid or not installed</summary>
        internal static string @FTL_BadCodepage => GetResourceString("FTL_BadCodepage");
        /// <summary>Algorithm '{0}' is not supported</summary>
        internal static string @FTL_BadChecksumAlgorithm => GetResourceString("FTL_BadChecksumAlgorithm");
        /// <summary>Cannot specify /main if building a module or library</summary>
        internal static string @ERR_NoMainOnDLL => GetResourceString("ERR_NoMainOnDLL");
        /// <summary>Invalid target type for /target: must specify 'exe', 'winexe', 'library', or 'module'</summary>
        internal static string @FTL_InvalidTarget => GetResourceString("FTL_InvalidTarget");
        /// <summary>File name '{0}' is empty, contains invalid characters, has a drive specification without an absolute path, or is too long</summary>
        internal static string @FTL_InvalidInputFileName => GetResourceString("FTL_InvalidInputFileName");
        /// <summary>Ignoring /noconfig option because it was specified in a response file</summary>
        internal static string @WRN_NoConfigNotOnCommandLine => GetResourceString("WRN_NoConfigNotOnCommandLine");
        /// <summary>Ignoring /noconfig option because it was specified in a response file</summary>
        internal static string @WRN_NoConfigNotOnCommandLine_Title => GetResourceString("WRN_NoConfigNotOnCommandLine_Title");
        /// <summary>Invalid file section alignment '{0}'</summary>
        internal static string @ERR_InvalidFileAlignment => GetResourceString("ERR_InvalidFileAlignment");
        /// <summary>Invalid output name: {0}</summary>
        internal static string @ERR_InvalidOutputName => GetResourceString("ERR_InvalidOutputName");
        /// <summary>Invalid debug information format: {0}</summary>
        internal static string @ERR_InvalidDebugInformationFormat => GetResourceString("ERR_InvalidDebugInformationFormat");
        /// <summary>'id#' syntax is no longer supported. Use '$id' instead.</summary>
        internal static string @ERR_LegacyObjectIdSyntax => GetResourceString("ERR_LegacyObjectIdSyntax");
        /// <summary>Invalid name for a preprocessing symbol; '{0}' is not a valid identifier</summary>
        internal static string @WRN_DefineIdentifierRequired => GetResourceString("WRN_DefineIdentifierRequired");
        /// <summary>Invalid name for a preprocessing symbol; not a valid identifier</summary>
        internal static string @WRN_DefineIdentifierRequired_Title => GetResourceString("WRN_DefineIdentifierRequired_Title");
        /// <summary>Cannot create short filename '{0}' when a long filename with the same short filename already exists</summary>
        internal static string @FTL_OutputFileExists => GetResourceString("FTL_OutputFileExists");
        /// <summary>A /reference option that declares an extern alias can only have one filename. To specify multiple aliases or filenames, use multiple /reference options.</summary>
        internal static string @ERR_OneAliasPerReference => GetResourceString("ERR_OneAliasPerReference");
        /// <summary>Command-line syntax error: Missing ':&lt;number&gt;' for '{0}' option</summary>
        internal static string @ERR_SwitchNeedsNumber => GetResourceString("ERR_SwitchNeedsNumber");
        /// <summary>The /pdb option requires that the /debug option also be used</summary>
        internal static string @ERR_MissingDebugSwitch => GetResourceString("ERR_MissingDebugSwitch");
        /// <summary>An expression tree lambda may not contain a COM call with ref omitted on arguments</summary>
        internal static string @ERR_ComRefCallInExpressionTree => GetResourceString("ERR_ComRefCallInExpressionTree");
        /// <summary>Command-line syntax error: Invalid Guid format '{0}' for option '{1}'</summary>
        internal static string @ERR_InvalidFormatForGuidForOption => GetResourceString("ERR_InvalidFormatForGuidForOption");
        /// <summary>Command-line syntax error: Missing Guid for option '{1}'</summary>
        internal static string @ERR_MissingGuidForOption => GetResourceString("ERR_MissingGuidForOption");
        /// <summary>Methods with variable arguments are not CLS-compliant</summary>
        internal static string @WRN_CLS_NoVarArgs => GetResourceString("WRN_CLS_NoVarArgs");
        /// <summary>Methods with variable arguments are not CLS-compliant</summary>
        internal static string @WRN_CLS_NoVarArgs_Title => GetResourceString("WRN_CLS_NoVarArgs_Title");
        /// <summary>Argument type '{0}' is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadArgType => GetResourceString("WRN_CLS_BadArgType");
        /// <summary>Argument type is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadArgType_Title => GetResourceString("WRN_CLS_BadArgType_Title");
        /// <summary>Return type of '{0}' is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadReturnType => GetResourceString("WRN_CLS_BadReturnType");
        /// <summary>Return type is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadReturnType_Title => GetResourceString("WRN_CLS_BadReturnType_Title");
        /// <summary>Type of '{0}' is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadFieldPropType => GetResourceString("WRN_CLS_BadFieldPropType");
        /// <summary>Type is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadFieldPropType_Title => GetResourceString("WRN_CLS_BadFieldPropType_Title");
        /// <summary>A public, protected, or protected internal variable must be of a type that is compliant with the Common Language Specification (CLS).</summary>
        internal static string @WRN_CLS_BadFieldPropType_Description => GetResourceString("WRN_CLS_BadFieldPropType_Description");
        /// <summary>Identifier '{0}' differing only in case is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadIdentifierCase => GetResourceString("WRN_CLS_BadIdentifierCase");
        /// <summary>Identifier differing only in case is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadIdentifierCase_Title => GetResourceString("WRN_CLS_BadIdentifierCase_Title");
        /// <summary>Overloaded method '{0}' differing only in ref or out, or in array rank, is not CLS-compliant</summary>
        internal static string @WRN_CLS_OverloadRefOut => GetResourceString("WRN_CLS_OverloadRefOut");
        /// <summary>Overloaded method differing only in ref or out, or in array rank, is not CLS-compliant</summary>
        internal static string @WRN_CLS_OverloadRefOut_Title => GetResourceString("WRN_CLS_OverloadRefOut_Title");
        /// <summary>Overloaded method '{0}' differing only by unnamed array types is not CLS-compliant</summary>
        internal static string @WRN_CLS_OverloadUnnamed => GetResourceString("WRN_CLS_OverloadUnnamed");
        /// <summary>Overloaded method differing only by unnamed array types is not CLS-compliant</summary>
        internal static string @WRN_CLS_OverloadUnnamed_Title => GetResourceString("WRN_CLS_OverloadUnnamed_Title");
        /// <summary>This error occurs if you have an overloaded method that takes a jagged array and the only difference between the method signatures is the element type of the array. To avoid this error, consider using a rectangular array rather than a jagged array; use an  ...</summary>
        internal static string @WRN_CLS_OverloadUnnamed_Description => GetResourceString("WRN_CLS_OverloadUnnamed_Description");
        /// <summary>Identifier '{0}' is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadIdentifier => GetResourceString("WRN_CLS_BadIdentifier");
        /// <summary>Identifier is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadIdentifier_Title => GetResourceString("WRN_CLS_BadIdentifier_Title");
        /// <summary>'{0}': base type '{1}' is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadBase => GetResourceString("WRN_CLS_BadBase");
        /// <summary>Base type is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadBase_Title => GetResourceString("WRN_CLS_BadBase_Title");
        /// <summary>A base type was marked as not having to be compliant with the Common Language Specification (CLS) in an assembly that was marked as being CLS compliant. Either remove the attribute that specifies the assembly is CLS compliant or remove the attribute that i ...</summary>
        internal static string @WRN_CLS_BadBase_Description => GetResourceString("WRN_CLS_BadBase_Description");
        /// <summary>'{0}': CLS-compliant interfaces must have only CLS-compliant members</summary>
        internal static string @WRN_CLS_BadInterfaceMember => GetResourceString("WRN_CLS_BadInterfaceMember");
        /// <summary>CLS-compliant interfaces must have only CLS-compliant members</summary>
        internal static string @WRN_CLS_BadInterfaceMember_Title => GetResourceString("WRN_CLS_BadInterfaceMember_Title");
        /// <summary>'{0}': only CLS-compliant members can be abstract</summary>
        internal static string @WRN_CLS_NoAbstractMembers => GetResourceString("WRN_CLS_NoAbstractMembers");
        /// <summary>Only CLS-compliant members can be abstract</summary>
        internal static string @WRN_CLS_NoAbstractMembers_Title => GetResourceString("WRN_CLS_NoAbstractMembers_Title");
        /// <summary>You must specify the CLSCompliant attribute on the assembly, not the module, to enable CLS compliance checking</summary>
        internal static string @WRN_CLS_NotOnModules => GetResourceString("WRN_CLS_NotOnModules");
        /// <summary>You must specify the CLSCompliant attribute on the assembly, not the module, to enable CLS compliance checking</summary>
        internal static string @WRN_CLS_NotOnModules_Title => GetResourceString("WRN_CLS_NotOnModules_Title");
        /// <summary>Added modules must be marked with the CLSCompliant attribute to match the assembly</summary>
        internal static string @WRN_CLS_ModuleMissingCLS => GetResourceString("WRN_CLS_ModuleMissingCLS");
        /// <summary>Added modules must be marked with the CLSCompliant attribute to match the assembly</summary>
        internal static string @WRN_CLS_ModuleMissingCLS_Title => GetResourceString("WRN_CLS_ModuleMissingCLS_Title");
        /// <summary>'{0}' cannot be marked as CLS-compliant because the assembly does not have a CLSCompliant attribute</summary>
        internal static string @WRN_CLS_AssemblyNotCLS => GetResourceString("WRN_CLS_AssemblyNotCLS");
        /// <summary>Type or member cannot be marked as CLS-compliant because the assembly does not have a CLSCompliant attribute</summary>
        internal static string @WRN_CLS_AssemblyNotCLS_Title => GetResourceString("WRN_CLS_AssemblyNotCLS_Title");
        /// <summary>'{0}' has no accessible constructors which use only CLS-compliant types</summary>
        internal static string @WRN_CLS_BadAttributeType => GetResourceString("WRN_CLS_BadAttributeType");
        /// <summary>Type has no accessible constructors which use only CLS-compliant types</summary>
        internal static string @WRN_CLS_BadAttributeType_Title => GetResourceString("WRN_CLS_BadAttributeType_Title");
        /// <summary>Arrays as attribute arguments is not CLS-compliant</summary>
        internal static string @WRN_CLS_ArrayArgumentToAttribute => GetResourceString("WRN_CLS_ArrayArgumentToAttribute");
        /// <summary>Arrays as attribute arguments is not CLS-compliant</summary>
        internal static string @WRN_CLS_ArrayArgumentToAttribute_Title => GetResourceString("WRN_CLS_ArrayArgumentToAttribute_Title");
        /// <summary>You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly</summary>
        internal static string @WRN_CLS_NotOnModules2 => GetResourceString("WRN_CLS_NotOnModules2");
        /// <summary>You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly</summary>
        internal static string @WRN_CLS_NotOnModules2_Title => GetResourceString("WRN_CLS_NotOnModules2_Title");
        /// <summary>'{0}' cannot be marked as CLS-compliant because it is a member of non-CLS-compliant type '{1}'</summary>
        internal static string @WRN_CLS_IllegalTrueInFalse => GetResourceString("WRN_CLS_IllegalTrueInFalse");
        /// <summary>Type cannot be marked as CLS-compliant because it is a member of non-CLS-compliant type</summary>
        internal static string @WRN_CLS_IllegalTrueInFalse_Title => GetResourceString("WRN_CLS_IllegalTrueInFalse_Title");
        /// <summary>CLS compliance checking will not be performed on '{0}' because it is not visible from outside this assembly</summary>
        internal static string @WRN_CLS_MeaninglessOnPrivateType => GetResourceString("WRN_CLS_MeaninglessOnPrivateType");
        /// <summary>CLS compliance checking will not be performed because it is not visible from outside this assembly</summary>
        internal static string @WRN_CLS_MeaninglessOnPrivateType_Title => GetResourceString("WRN_CLS_MeaninglessOnPrivateType_Title");
        /// <summary>'{0}' does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute</summary>
        internal static string @WRN_CLS_AssemblyNotCLS2 => GetResourceString("WRN_CLS_AssemblyNotCLS2");
        /// <summary>Type or member does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute</summary>
        internal static string @WRN_CLS_AssemblyNotCLS2_Title => GetResourceString("WRN_CLS_AssemblyNotCLS2_Title");
        /// <summary>CLSCompliant attribute has no meaning when applied to parameters. Try putting it on the method instead.</summary>
        internal static string @WRN_CLS_MeaninglessOnParam => GetResourceString("WRN_CLS_MeaninglessOnParam");
        /// <summary>CLSCompliant attribute has no meaning when applied to parameters</summary>
        internal static string @WRN_CLS_MeaninglessOnParam_Title => GetResourceString("WRN_CLS_MeaninglessOnParam_Title");
        /// <summary>CLSCompliant attribute has no meaning when applied to return types. Try putting it on the method instead.</summary>
        internal static string @WRN_CLS_MeaninglessOnReturn => GetResourceString("WRN_CLS_MeaninglessOnReturn");
        /// <summary>CLSCompliant attribute has no meaning when applied to return types</summary>
        internal static string @WRN_CLS_MeaninglessOnReturn_Title => GetResourceString("WRN_CLS_MeaninglessOnReturn_Title");
        /// <summary>Constraint type '{0}' is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadTypeVar => GetResourceString("WRN_CLS_BadTypeVar");
        /// <summary>Constraint type is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadTypeVar_Title => GetResourceString("WRN_CLS_BadTypeVar_Title");
        /// <summary>CLS-compliant field '{0}' cannot be volatile</summary>
        internal static string @WRN_CLS_VolatileField => GetResourceString("WRN_CLS_VolatileField");
        /// <summary>CLS-compliant field cannot be volatile</summary>
        internal static string @WRN_CLS_VolatileField_Title => GetResourceString("WRN_CLS_VolatileField_Title");
        /// <summary>'{0}' is not CLS-compliant because base interface '{1}' is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadInterface => GetResourceString("WRN_CLS_BadInterface");
        /// <summary>Type is not CLS-compliant because base interface is not CLS-compliant</summary>
        internal static string @WRN_CLS_BadInterface_Title => GetResourceString("WRN_CLS_BadInterface_Title");
        /// <summary>'await' requires that the type {0} have a suitable 'GetAwaiter' method</summary>
        internal static string @ERR_BadAwaitArg => GetResourceString("ERR_BadAwaitArg");
        /// <summary>Cannot await '{0}'</summary>
        internal static string @ERR_BadAwaitArgIntrinsic => GetResourceString("ERR_BadAwaitArgIntrinsic");
        /// <summary>'await' requires that the return type '{0}' of '{1}.GetAwaiter()' have suitable 'IsCompleted', 'OnCompleted', and 'GetResult' members, and implement 'INotifyCompletion' or 'ICriticalNotifyCompletion'</summary>
        internal static string @ERR_BadAwaiterPattern => GetResourceString("ERR_BadAwaiterPattern");
        /// <summary>'await' requires that the type '{0}' have a suitable 'GetAwaiter' method. Are you missing a using directive for 'System'?</summary>
        internal static string @ERR_BadAwaitArg_NeedSystem => GetResourceString("ERR_BadAwaitArg_NeedSystem");
        /// <summary>Cannot await 'void'</summary>
        internal static string @ERR_BadAwaitArgVoidCall => GetResourceString("ERR_BadAwaitArgVoidCall");
        /// <summary>'await' cannot be used as an identifier within an async method or lambda expression</summary>
        internal static string @ERR_BadAwaitAsIdentifier => GetResourceString("ERR_BadAwaitAsIdentifier");
        /// <summary>'{0}' does not implement '{1}'</summary>
        internal static string @ERR_DoesntImplementAwaitInterface => GetResourceString("ERR_DoesntImplementAwaitInterface");
        /// <summary>Since '{0}' is an async method that returns 'Task', a return keyword must not be followed by an object expression. Did you intend to return 'Task&lt;T&gt;'?</summary>
        internal static string @ERR_TaskRetNoObjectRequired => GetResourceString("ERR_TaskRetNoObjectRequired");
        /// <summary>The return type of an async method must be void, Task, Task&lt;T&gt;, a task-like type, IAsyncEnumerable&lt;T&gt;, or IAsyncEnumerator&lt;T&gt;</summary>
        internal static string @ERR_BadAsyncReturn => GetResourceString("ERR_BadAsyncReturn");
        /// <summary>Cannot return an expression of type 'void'</summary>
        internal static string @ERR_CantReturnVoid => GetResourceString("ERR_CantReturnVoid");
        /// <summary>__arglist is not allowed in the parameter list of async methods</summary>
        internal static string @ERR_VarargsAsync => GetResourceString("ERR_VarargsAsync");
        /// <summary>'await' cannot be used in an expression containing the type '{0}'</summary>
        internal static string @ERR_ByRefTypeAndAwait => GetResourceString("ERR_ByRefTypeAndAwait");
        /// <summary>Async methods cannot have unsafe parameters or return types</summary>
        internal static string @ERR_UnsafeAsyncArgType => GetResourceString("ERR_UnsafeAsyncArgType");
        /// <summary>Async methods cannot have ref, in or out parameters</summary>
        internal static string @ERR_BadAsyncArgType => GetResourceString("ERR_BadAsyncArgType");
        /// <summary>The 'await' operator can only be used when contained within a method or lambda expression marked with the 'async' modifier</summary>
        internal static string @ERR_BadAwaitWithoutAsync => GetResourceString("ERR_BadAwaitWithoutAsync");
        /// <summary>The 'await' operator can only be used within an async {0}. Consider marking this {0} with the 'async' modifier.</summary>
        internal static string @ERR_BadAwaitWithoutAsyncLambda => GetResourceString("ERR_BadAwaitWithoutAsyncLambda");
        /// <summary>The 'await' operator can only be used within an async method. Consider marking this method with the 'async' modifier and changing its return type to 'Task&lt;{0}&gt;'.</summary>
        internal static string @ERR_BadAwaitWithoutAsyncMethod => GetResourceString("ERR_BadAwaitWithoutAsyncMethod");
        /// <summary>The 'await' operator can only be used within an async method. Consider marking this method with the 'async' modifier and changing its return type to 'Task'.</summary>
        internal static string @ERR_BadAwaitWithoutVoidAsyncMethod => GetResourceString("ERR_BadAwaitWithoutVoidAsyncMethod");
        /// <summary>Cannot await in the body of a finally clause</summary>
        internal static string @ERR_BadAwaitInFinally => GetResourceString("ERR_BadAwaitInFinally");
        /// <summary>Cannot await in a catch clause</summary>
        internal static string @ERR_BadAwaitInCatch => GetResourceString("ERR_BadAwaitInCatch");
        /// <summary>Cannot await in the filter expression of a catch clause</summary>
        internal static string @ERR_BadAwaitInCatchFilter => GetResourceString("ERR_BadAwaitInCatchFilter");
        /// <summary>Cannot await in the body of a lock statement</summary>
        internal static string @ERR_BadAwaitInLock => GetResourceString("ERR_BadAwaitInLock");
        /// <summary>The 'await' operator cannot be used in a static script variable initializer.</summary>
        internal static string @ERR_BadAwaitInStaticVariableInitializer => GetResourceString("ERR_BadAwaitInStaticVariableInitializer");
        /// <summary>Cannot await in an unsafe context</summary>
        internal static string @ERR_AwaitInUnsafeContext => GetResourceString("ERR_AwaitInUnsafeContext");
        /// <summary>The 'async' modifier can only be used in methods that have a body.</summary>
        internal static string @ERR_BadAsyncLacksBody => GetResourceString("ERR_BadAsyncLacksBody");
        /// <summary>Parameters or locals of type '{0}' cannot be declared in async methods or lambda expressions.</summary>
        internal static string @ERR_BadSpecialByRefLocal => GetResourceString("ERR_BadSpecialByRefLocal");
        /// <summary>foreach statement cannot operate on enumerators of type '{0}' in async or iterator methods because '{0}' is a ref struct.</summary>
        internal static string @ERR_BadSpecialByRefIterator => GetResourceString("ERR_BadSpecialByRefIterator");
        /// <summary>Security attribute '{0}' cannot be applied to an Async method.</summary>
        internal static string @ERR_SecurityCriticalOrSecuritySafeCriticalOnAsync => GetResourceString("ERR_SecurityCriticalOrSecuritySafeCriticalOnAsync");
        /// <summary>Async methods are not allowed in an Interface, Class, or Structure which has the 'SecurityCritical' or 'SecuritySafeCritical' attribute.</summary>
        internal static string @ERR_SecurityCriticalOrSecuritySafeCriticalOnAsyncInClassOrStruct => GetResourceString("ERR_SecurityCriticalOrSecuritySafeCriticalOnAsyncInClassOrStruct");
        /// <summary>The 'await' operator may only be used in a query expression within the first collection expression of the initial 'from' clause or within the collection expression of a 'join' clause</summary>
        internal static string @ERR_BadAwaitInQuery => GetResourceString("ERR_BadAwaitInQuery");
        /// <summary>This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.</summary>
        internal static string @WRN_AsyncLacksAwaits => GetResourceString("WRN_AsyncLacksAwaits");
        /// <summary>Async method lacks 'await' operators and will run synchronously</summary>
        internal static string @WRN_AsyncLacksAwaits_Title => GetResourceString("WRN_AsyncLacksAwaits_Title");
        /// <summary>Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'await' operator to the result of the call.</summary>
        internal static string @WRN_UnobservedAwaitableExpression => GetResourceString("WRN_UnobservedAwaitableExpression");
        /// <summary>Because this call is not awaited, execution of the current method continues before the call is completed</summary>
        internal static string @WRN_UnobservedAwaitableExpression_Title => GetResourceString("WRN_UnobservedAwaitableExpression_Title");
        /// <summary>The current method calls an async method that returns a Task or a Task&lt;TResult&gt; and doesn't apply the await operator to the result. The call to the async method starts an asynchronous task. However, because no await operator is applied, the program continu ...</summary>
        internal static string @WRN_UnobservedAwaitableExpression_Description => GetResourceString("WRN_UnobservedAwaitableExpression_Description");
        /// <summary>'MethodImplOptions.Synchronized' cannot be applied to an async method</summary>
        internal static string @ERR_SynchronizedAsyncMethod => GetResourceString("ERR_SynchronizedAsyncMethod");
        /// <summary>CallerLineNumberAttribute cannot be applied because there are no standard conversions from type '{0}' to type '{1}'</summary>
        internal static string @ERR_NoConversionForCallerLineNumberParam => GetResourceString("ERR_NoConversionForCallerLineNumberParam");
        /// <summary>CallerFilePathAttribute cannot be applied because there are no standard conversions from type '{0}' to type '{1}'</summary>
        internal static string @ERR_NoConversionForCallerFilePathParam => GetResourceString("ERR_NoConversionForCallerFilePathParam");
        /// <summary>CallerMemberNameAttribute cannot be applied because there are no standard conversions from type '{0}' to type '{1}'</summary>
        internal static string @ERR_NoConversionForCallerMemberNameParam => GetResourceString("ERR_NoConversionForCallerMemberNameParam");
        /// <summary>The CallerLineNumberAttribute may only be applied to parameters with default values</summary>
        internal static string @ERR_BadCallerLineNumberParamWithoutDefaultValue => GetResourceString("ERR_BadCallerLineNumberParamWithoutDefaultValue");
        /// <summary>The CallerFilePathAttribute may only be applied to parameters with default values</summary>
        internal static string @ERR_BadCallerFilePathParamWithoutDefaultValue => GetResourceString("ERR_BadCallerFilePathParamWithoutDefaultValue");
        /// <summary>The CallerMemberNameAttribute may only be applied to parameters with default values</summary>
        internal static string @ERR_BadCallerMemberNameParamWithoutDefaultValue => GetResourceString("ERR_BadCallerMemberNameParamWithoutDefaultValue");
        /// <summary>The CallerLineNumberAttribute applied to parameter '{0}' will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</summary>
        internal static string @WRN_CallerLineNumberParamForUnconsumedLocation => GetResourceString("WRN_CallerLineNumberParamForUnconsumedLocation");
        /// <summary>The CallerLineNumberAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</summary>
        internal static string @WRN_CallerLineNumberParamForUnconsumedLocation_Title => GetResourceString("WRN_CallerLineNumberParamForUnconsumedLocation_Title");
        /// <summary>The CallerFilePathAttribute applied to parameter '{0}' will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</summary>
        internal static string @WRN_CallerFilePathParamForUnconsumedLocation => GetResourceString("WRN_CallerFilePathParamForUnconsumedLocation");
        /// <summary>The CallerFilePathAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</summary>
        internal static string @WRN_CallerFilePathParamForUnconsumedLocation_Title => GetResourceString("WRN_CallerFilePathParamForUnconsumedLocation_Title");
        /// <summary>The CallerMemberNameAttribute applied to parameter '{0}' will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</summary>
        internal static string @WRN_CallerMemberNameParamForUnconsumedLocation => GetResourceString("WRN_CallerMemberNameParamForUnconsumedLocation");
        /// <summary>The CallerMemberNameAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</summary>
        internal static string @WRN_CallerMemberNameParamForUnconsumedLocation_Title => GetResourceString("WRN_CallerMemberNameParamForUnconsumedLocation_Title");
        /// <summary>Program does not contain a static 'Main' method suitable for an entry point</summary>
        internal static string @ERR_NoEntryPoint => GetResourceString("ERR_NoEntryPoint");
        /// <summary>An array initializer of length '{0}' is expected</summary>
        internal static string @ERR_ArrayInitializerIncorrectLength => GetResourceString("ERR_ArrayInitializerIncorrectLength");
        /// <summary>A nested array initializer is expected</summary>
        internal static string @ERR_ArrayInitializerExpected => GetResourceString("ERR_ArrayInitializerExpected");
        /// <summary>Invalid variance modifier. Only interface and delegate type parameters can be specified as variant.</summary>
        internal static string @ERR_IllegalVarianceSyntax => GetResourceString("ERR_IllegalVarianceSyntax");
        /// <summary>Unexpected use of an aliased name</summary>
        internal static string @ERR_UnexpectedAliasedName => GetResourceString("ERR_UnexpectedAliasedName");
        /// <summary>Unexpected use of a generic name</summary>
        internal static string @ERR_UnexpectedGenericName => GetResourceString("ERR_UnexpectedGenericName");
        /// <summary>Unexpected use of an unbound generic name</summary>
        internal static string @ERR_UnexpectedUnboundGenericName => GetResourceString("ERR_UnexpectedUnboundGenericName");
        /// <summary>Expressions and statements can only occur in a method body</summary>
        internal static string @ERR_GlobalStatement => GetResourceString("ERR_GlobalStatement");
        /// <summary>An array access may not have a named argument specifier</summary>
        internal static string @ERR_NamedArgumentForArray => GetResourceString("ERR_NamedArgumentForArray");
        /// <summary>This language feature ('{0}') is not yet implemented.</summary>
        internal static string @ERR_NotYetImplementedInRoslyn => GetResourceString("ERR_NotYetImplementedInRoslyn");
        /// <summary>Default values are not valid in this context.</summary>
        internal static string @ERR_DefaultValueNotAllowed => GetResourceString("ERR_DefaultValueNotAllowed");
        /// <summary>Error opening icon file {0} -- {1}</summary>
        internal static string @ERR_CantOpenIcon => GetResourceString("ERR_CantOpenIcon");
        /// <summary>Error opening Win32 manifest file {0} -- {1}</summary>
        internal static string @ERR_CantOpenWin32Manifest => GetResourceString("ERR_CantOpenWin32Manifest");
        /// <summary>Error building Win32 resources -- {0}</summary>
        internal static string @ERR_ErrorBuildingWin32Resources => GetResourceString("ERR_ErrorBuildingWin32Resources");
        /// <summary>Optional parameters must appear after all required parameters</summary>
        internal static string @ERR_DefaultValueBeforeRequiredValue => GetResourceString("ERR_DefaultValueBeforeRequiredValue");
        /// <summary>Cannot inherit interface '{0}' with the specified type parameters because it causes method '{1}' to contain overloads which differ only on ref and out</summary>
        internal static string @ERR_ExplicitImplCollisionOnRefOut => GetResourceString("ERR_ExplicitImplCollisionOnRefOut");
        /// <summary>Partial declarations of '{0}' must have the same type parameter names and variance modifiers in the same order</summary>
        internal static string @ERR_PartialWrongTypeParamsVariance => GetResourceString("ERR_PartialWrongTypeParamsVariance");
        /// <summary>Invalid variance: The type parameter '{1}' must be {3} valid on '{0}'. '{1}' is {2}.</summary>
        internal static string @ERR_UnexpectedVariance => GetResourceString("ERR_UnexpectedVariance");
        /// <summary>Invalid variance: The type parameter '{1}' must be {3} valid on '{0}' unless language version '{4}' or greater is used. '{1}' is {2}.</summary>
        internal static string @ERR_UnexpectedVarianceStaticMember => GetResourceString("ERR_UnexpectedVarianceStaticMember");
        /// <summary>'{0}': cannot derive from the dynamic type</summary>
        internal static string @ERR_DeriveFromDynamic => GetResourceString("ERR_DeriveFromDynamic");
        /// <summary>'{0}': cannot implement a dynamic interface '{1}'</summary>
        internal static string @ERR_DeriveFromConstructedDynamic => GetResourceString("ERR_DeriveFromConstructedDynamic");
        /// <summary>Constraint cannot be the dynamic type</summary>
        internal static string @ERR_DynamicTypeAsBound => GetResourceString("ERR_DynamicTypeAsBound");
        /// <summary>Constraint cannot be a dynamic type '{0}'</summary>
        internal static string @ERR_ConstructedDynamicTypeAsBound => GetResourceString("ERR_ConstructedDynamicTypeAsBound");
        /// <summary>One or more types required to compile a dynamic expression cannot be found. Are you missing a reference?</summary>
        internal static string @ERR_DynamicRequiredTypesMissing => GetResourceString("ERR_DynamicRequiredTypesMissing");
        /// <summary>Name '{0}' exceeds the maximum length allowed in metadata.</summary>
        internal static string @ERR_MetadataNameTooLong => GetResourceString("ERR_MetadataNameTooLong");
        /// <summary>Attributes are not valid in this context.</summary>
        internal static string @ERR_AttributesNotAllowed => GetResourceString("ERR_AttributesNotAllowed");
        /// <summary>'extern alias' is not valid in this context</summary>
        internal static string @ERR_ExternAliasNotAllowed => GetResourceString("ERR_ExternAliasNotAllowed");
        /// <summary>Using '{0}' to test compatibility with '{1}' is essentially identical to testing compatibility with '{2}' and will succeed for all non-null values</summary>
        internal static string @WRN_IsDynamicIsConfusing => GetResourceString("WRN_IsDynamicIsConfusing");
        /// <summary>Using 'is' to test compatibility with 'dynamic' is essentially identical to testing compatibility with 'Object'</summary>
        internal static string @WRN_IsDynamicIsConfusing_Title => GetResourceString("WRN_IsDynamicIsConfusing_Title");
        /// <summary>Cannot use 'yield' in top-level script code</summary>
        internal static string @ERR_YieldNotAllowedInScript => GetResourceString("ERR_YieldNotAllowedInScript");
        /// <summary>Cannot declare namespace in script code</summary>
        internal static string @ERR_NamespaceNotAllowedInScript => GetResourceString("ERR_NamespaceNotAllowedInScript");
        /// <summary>Assembly and module attributes are not allowed in this context</summary>
        internal static string @ERR_GlobalAttributesNotAllowed => GetResourceString("ERR_GlobalAttributesNotAllowed");
        /// <summary>Delegate '{0}' has no invoke method or an invoke method with a return type or parameter types that are not supported.</summary>
        internal static string @ERR_InvalidDelegateType => GetResourceString("ERR_InvalidDelegateType");
        /// <summary>The entry point of the program is global code; ignoring '{0}' entry point.</summary>
        internal static string @WRN_MainIgnored => GetResourceString("WRN_MainIgnored");
        /// <summary>The entry point of the program is global code; ignoring entry point</summary>
        internal static string @WRN_MainIgnored_Title => GetResourceString("WRN_MainIgnored_Title");
        /// <summary>The second operand of an 'is' or 'as' operator may not be static type '{0}'</summary>
        internal static string @WRN_StaticInAsOrIs => GetResourceString("WRN_StaticInAsOrIs");
        /// <summary>The second operand of an 'is' or 'as' operator may not be a static type</summary>
        internal static string @WRN_StaticInAsOrIs_Title => GetResourceString("WRN_StaticInAsOrIs_Title");
        /// <summary>Inconsistent accessibility: event type '{1}' is less accessible than event '{0}'</summary>
        internal static string @ERR_BadVisEventType => GetResourceString("ERR_BadVisEventType");
        /// <summary>Named argument specifications must appear after all fixed arguments have been specified. Please use language version {0} or greater to allow non-trailing named arguments.</summary>
        internal static string @ERR_NamedArgumentSpecificationBeforeFixedArgument => GetResourceString("ERR_NamedArgumentSpecificationBeforeFixedArgument");
        /// <summary>Named argument specifications must appear after all fixed arguments have been specified in a dynamic invocation.</summary>
        internal static string @ERR_NamedArgumentSpecificationBeforeFixedArgumentInDynamicInvocation => GetResourceString("ERR_NamedArgumentSpecificationBeforeFixedArgumentInDynamicInvocation");
        /// <summary>The best overload for '{0}' does not have a parameter named '{1}'</summary>
        internal static string @ERR_BadNamedArgument => GetResourceString("ERR_BadNamedArgument");
        /// <summary>The delegate '{0}' does not have a parameter named '{1}'</summary>
        internal static string @ERR_BadNamedArgumentForDelegateInvoke => GetResourceString("ERR_BadNamedArgumentForDelegateInvoke");
        /// <summary>Named argument '{0}' cannot be specified multiple times</summary>
        internal static string @ERR_DuplicateNamedArgument => GetResourceString("ERR_DuplicateNamedArgument");
        /// <summary>Named argument '{0}' specifies a parameter for which a positional argument has already been given</summary>
        internal static string @ERR_NamedArgumentUsedInPositional => GetResourceString("ERR_NamedArgumentUsedInPositional");
        /// <summary>Named argument '{0}' is used out-of-position but is followed by an unnamed argument</summary>
        internal static string @ERR_BadNonTrailingNamedArgument => GetResourceString("ERR_BadNonTrailingNamedArgument");
        /// <summary>Cannot specify default parameter value in conjunction with DefaultParameterAttribute or OptionalAttribute</summary>
        internal static string @ERR_DefaultValueUsedWithAttributes => GetResourceString("ERR_DefaultValueUsedWithAttributes");
        /// <summary>Default parameter value for '{0}' must be a compile-time constant</summary>
        internal static string @ERR_DefaultValueMustBeConstant => GetResourceString("ERR_DefaultValueMustBeConstant");
        /// <summary>A ref or out parameter cannot have a default value</summary>
        internal static string @ERR_RefOutDefaultValue => GetResourceString("ERR_RefOutDefaultValue");
        /// <summary>Cannot specify a default value for the 'this' parameter</summary>
        internal static string @ERR_DefaultValueForExtensionParameter => GetResourceString("ERR_DefaultValueForExtensionParameter");
        /// <summary>Cannot specify a default value for a parameter array</summary>
        internal static string @ERR_DefaultValueForParamsParameter => GetResourceString("ERR_DefaultValueForParamsParameter");
        /// <summary>A value of type '{0}' cannot be used as a default parameter because there are no standard conversions to type '{1}'</summary>
        internal static string @ERR_NoConversionForDefaultParam => GetResourceString("ERR_NoConversionForDefaultParam");
        /// <summary>A value of type '{0}' cannot be used as default parameter for nullable parameter '{1}' because '{0}' is not a simple type</summary>
        internal static string @ERR_NoConversionForNubDefaultParam => GetResourceString("ERR_NoConversionForNubDefaultParam");
        /// <summary>'{0}' is of type '{1}'. A default parameter value of a reference type other than string can only be initialized with null</summary>
        internal static string @ERR_NotNullRefDefaultParameter => GetResourceString("ERR_NotNullRefDefaultParameter");
        /// <summary>The default value specified for parameter '{0}' will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</summary>
        internal static string @WRN_DefaultValueForUnconsumedLocation => GetResourceString("WRN_DefaultValueForUnconsumedLocation");
        /// <summary>The default value specified will have no effect because it applies to a member that is used in contexts that do not allow optional arguments</summary>
        internal static string @WRN_DefaultValueForUnconsumedLocation_Title => GetResourceString("WRN_DefaultValueForUnconsumedLocation_Title");
        /// <summary>Error signing output with public key from file '{0}' -- {1}</summary>
        internal static string @ERR_PublicKeyFileFailure => GetResourceString("ERR_PublicKeyFileFailure");
        /// <summary>Error signing output with public key from container '{0}' -- {1}</summary>
        internal static string @ERR_PublicKeyContainerFailure => GetResourceString("ERR_PublicKeyContainerFailure");
        /// <summary>The typeof operator cannot be used on the dynamic type</summary>
        internal static string @ERR_BadDynamicTypeof => GetResourceString("ERR_BadDynamicTypeof");
        /// <summary>The typeof operator cannot be used on a nullable reference type</summary>
        internal static string @ERR_BadNullableTypeof => GetResourceString("ERR_BadNullableTypeof");
        /// <summary>An expression tree may not contain a dynamic operation</summary>
        internal static string @ERR_ExpressionTreeContainsDynamicOperation => GetResourceString("ERR_ExpressionTreeContainsDynamicOperation");
        /// <summary>Async lambda expressions cannot be converted to expression trees</summary>
        internal static string @ERR_BadAsyncExpressionTree => GetResourceString("ERR_BadAsyncExpressionTree");
        /// <summary>Cannot define a class or member that utilizes 'dynamic' because the compiler required type '{0}' cannot be found. Are you missing a reference?</summary>
        internal static string @ERR_DynamicAttributeMissing => GetResourceString("ERR_DynamicAttributeMissing");
        /// <summary>Cannot pass null for friend assembly name</summary>
        internal static string @ERR_CannotPassNullForFriendAssembly => GetResourceString("ERR_CannotPassNullForFriendAssembly");
        /// <summary>Key file '{0}' is missing the private key needed for signing</summary>
        internal static string @ERR_SignButNoPrivateKey => GetResourceString("ERR_SignButNoPrivateKey");
        /// <summary>Public signing was specified and requires a public key, but no public key was specified.</summary>
        internal static string @ERR_PublicSignButNoKey => GetResourceString("ERR_PublicSignButNoKey");
        /// <summary>Public signing is not supported for netmodules.</summary>
        internal static string @ERR_PublicSignNetModule => GetResourceString("ERR_PublicSignNetModule");
        /// <summary>Delay signing was specified and requires a public key, but no public key was specified</summary>
        internal static string @WRN_DelaySignButNoKey => GetResourceString("WRN_DelaySignButNoKey");
        /// <summary>Delay signing was specified and requires a public key, but no public key was specified</summary>
        internal static string @WRN_DelaySignButNoKey_Title => GetResourceString("WRN_DelaySignButNoKey_Title");
        /// <summary>The specified version string does not conform to the required format - major[.minor[.build[.revision]]]</summary>
        internal static string @ERR_InvalidVersionFormat => GetResourceString("ERR_InvalidVersionFormat");
        /// <summary>The specified version string contains wildcards, which are not compatible with determinism. Either remove wildcards from the version string, or disable determinism for this compilation</summary>
        internal static string @ERR_InvalidVersionFormatDeterministic => GetResourceString("ERR_InvalidVersionFormatDeterministic");
        /// <summary>The specified version string does not conform to the required format - major.minor.build.revision (without wildcards)</summary>
        internal static string @ERR_InvalidVersionFormat2 => GetResourceString("ERR_InvalidVersionFormat2");
        /// <summary>The specified version string does not conform to the recommended format - major.minor.build.revision</summary>
        internal static string @WRN_InvalidVersionFormat => GetResourceString("WRN_InvalidVersionFormat");
        /// <summary>The specified version string does not conform to the recommended format - major.minor.build.revision</summary>
        internal static string @WRN_InvalidVersionFormat_Title => GetResourceString("WRN_InvalidVersionFormat_Title");
        /// <summary>Executables cannot be satellite assemblies; culture should always be empty</summary>
        internal static string @ERR_InvalidAssemblyCultureForExe => GetResourceString("ERR_InvalidAssemblyCultureForExe");
        /// <summary>There is no argument given that corresponds to the required formal parameter '{0}' of '{1}'</summary>
        internal static string @ERR_NoCorrespondingArgument => GetResourceString("ERR_NoCorrespondingArgument");
        /// <summary>The command line switch '{0}' is not yet implemented and was ignored.</summary>
        internal static string @WRN_UnimplementedCommandLineSwitch => GetResourceString("WRN_UnimplementedCommandLineSwitch");
        /// <summary>Command line switch is not yet implemented</summary>
        internal static string @WRN_UnimplementedCommandLineSwitch_Title => GetResourceString("WRN_UnimplementedCommandLineSwitch_Title");
        /// <summary>Failed to emit module '{0}': {1}</summary>
        internal static string @ERR_ModuleEmitFailure => GetResourceString("ERR_ModuleEmitFailure");
        /// <summary>Cannot use fixed local '{0}' inside an anonymous method, lambda expression, or query expression</summary>
        internal static string @ERR_FixedLocalInLambda => GetResourceString("ERR_FixedLocalInLambda");
        /// <summary>An expression tree may not contain a named argument specification</summary>
        internal static string @ERR_ExpressionTreeContainsNamedArgument => GetResourceString("ERR_ExpressionTreeContainsNamedArgument");
        /// <summary>An expression tree may not contain a call or invocation that uses optional arguments</summary>
        internal static string @ERR_ExpressionTreeContainsOptionalArgument => GetResourceString("ERR_ExpressionTreeContainsOptionalArgument");
        /// <summary>An expression tree may not contain an indexed property</summary>
        internal static string @ERR_ExpressionTreeContainsIndexedProperty => GetResourceString("ERR_ExpressionTreeContainsIndexedProperty");
        /// <summary>Indexed property '{0}' has non-optional arguments which must be provided</summary>
        internal static string @ERR_IndexedPropertyRequiresParams => GetResourceString("ERR_IndexedPropertyRequiresParams");
        /// <summary>Indexed property '{0}' must have all arguments optional</summary>
        internal static string @ERR_IndexedPropertyMustHaveAllOptionalParams => GetResourceString("ERR_IndexedPropertyMustHaveAllOptionalParams");
        /// <summary>Instance of type '{0}' cannot be used inside a nested function, query expression, iterator block or async method</summary>
        internal static string @ERR_SpecialByRefInLambda => GetResourceString("ERR_SpecialByRefInLambda");
        /// <summary>First argument to a security attribute must be a valid SecurityAction</summary>
        internal static string @ERR_SecurityAttributeMissingAction => GetResourceString("ERR_SecurityAttributeMissingAction");
        /// <summary>Security attribute '{0}' has an invalid SecurityAction value '{1}'</summary>
        internal static string @ERR_SecurityAttributeInvalidAction => GetResourceString("ERR_SecurityAttributeInvalidAction");
        /// <summary>SecurityAction value '{0}' is invalid for security attributes applied to an assembly</summary>
        internal static string @ERR_SecurityAttributeInvalidActionAssembly => GetResourceString("ERR_SecurityAttributeInvalidActionAssembly");
        /// <summary>SecurityAction value '{0}' is invalid for security attributes applied to a type or a method</summary>
        internal static string @ERR_SecurityAttributeInvalidActionTypeOrMethod => GetResourceString("ERR_SecurityAttributeInvalidActionTypeOrMethod");
        /// <summary>SecurityAction value '{0}' is invalid for PrincipalPermission attribute</summary>
        internal static string @ERR_PrincipalPermissionInvalidAction => GetResourceString("ERR_PrincipalPermissionInvalidAction");
        /// <summary>An expression tree may not contain '{0}'</summary>
        internal static string @ERR_FeatureNotValidInExpressionTree => GetResourceString("ERR_FeatureNotValidInExpressionTree");
        /// <summary>Unable to resolve file path '{0}' specified for the named argument '{1}' for PermissionSet attribute</summary>
        internal static string @ERR_PermissionSetAttributeInvalidFile => GetResourceString("ERR_PermissionSetAttributeInvalidFile");
        /// <summary>Error reading file '{0}' specified for the named argument '{1}' for PermissionSet attribute: '{2}'</summary>
        internal static string @ERR_PermissionSetAttributeFileReadError => GetResourceString("ERR_PermissionSetAttributeFileReadError");
        /// <summary>The type name '{0}' could not be found in the global namespace. This type has been forwarded to assembly '{1}' Consider adding a reference to that assembly.</summary>
        internal static string @ERR_GlobalSingleTypeNameNotFoundFwd => GetResourceString("ERR_GlobalSingleTypeNameNotFoundFwd");
        /// <summary>The type name '{0}' could not be found in the namespace '{1}'. This type has been forwarded to assembly '{2}' Consider adding a reference to that assembly.</summary>
        internal static string @ERR_DottedTypeNameNotFoundInNSFwd => GetResourceString("ERR_DottedTypeNameNotFoundInNSFwd");
        /// <summary>The type name '{0}' could not be found. This type has been forwarded to assembly '{1}'. Consider adding a reference to that assembly.</summary>
        internal static string @ERR_SingleTypeNameNotFoundFwd => GetResourceString("ERR_SingleTypeNameNotFoundFwd");
        /// <summary>Assemblies '{0}' and '{1}' refer to the same metadata but only one is a linked reference (specified using /link option); consider removing one of the references.</summary>
        internal static string @ERR_AssemblySpecifiedForLinkAndRef => GetResourceString("ERR_AssemblySpecifiedForLinkAndRef");
        /// <summary>The best overloaded Add method '{0}' for the collection initializer element is obsolete.</summary>
        internal static string @WRN_DeprecatedCollectionInitAdd => GetResourceString("WRN_DeprecatedCollectionInitAdd");
        /// <summary>The best overloaded Add method for the collection initializer element is obsolete</summary>
        internal static string @WRN_DeprecatedCollectionInitAdd_Title => GetResourceString("WRN_DeprecatedCollectionInitAdd_Title");
        /// <summary>The best overloaded Add method '{0}' for the collection initializer element is obsolete. {1}</summary>
        internal static string @WRN_DeprecatedCollectionInitAddStr => GetResourceString("WRN_DeprecatedCollectionInitAddStr");
        /// <summary>The best overloaded Add method for the collection initializer element is obsolete</summary>
        internal static string @WRN_DeprecatedCollectionInitAddStr_Title => GetResourceString("WRN_DeprecatedCollectionInitAddStr_Title");
        /// <summary>The best overloaded Add method '{0}' for the collection initializer element is obsolete. {1}</summary>
        internal static string @ERR_DeprecatedCollectionInitAddStr => GetResourceString("ERR_DeprecatedCollectionInitAddStr");
        /// <summary>Yield statements may not appear at the top level in interactive code.</summary>
        internal static string @ERR_IteratorInInteractive => GetResourceString("ERR_IteratorInInteractive");
        /// <summary>Security attribute '{0}' is not valid on this declaration type. Security attributes are only valid on assembly, type and method declarations.</summary>
        internal static string @ERR_SecurityAttributeInvalidTarget => GetResourceString("ERR_SecurityAttributeInvalidTarget");
        /// <summary>Cannot use an expression of type '{0}' as an argument to a dynamically dispatched operation.</summary>
        internal static string @ERR_BadDynamicMethodArg => GetResourceString("ERR_BadDynamicMethodArg");
        /// <summary>Cannot use a lambda expression as an argument to a dynamically dispatched operation without first casting it to a delegate or expression tree type.</summary>
        internal static string @ERR_BadDynamicMethodArgLambda => GetResourceString("ERR_BadDynamicMethodArgLambda");
        /// <summary>Cannot use a method group as an argument to a dynamically dispatched operation. Did you intend to invoke the method?</summary>
        internal static string @ERR_BadDynamicMethodArgMemgrp => GetResourceString("ERR_BadDynamicMethodArgMemgrp");
        /// <summary>The call to method '{0}' needs to be dynamically dispatched, but cannot be because it is part of a base access expression. Consider casting the dynamic arguments or eliminating the base access.</summary>
        internal static string @ERR_NoDynamicPhantomOnBase => GetResourceString("ERR_NoDynamicPhantomOnBase");
        /// <summary>Query expressions over source type 'dynamic' or with a join sequence of type 'dynamic' are not allowed</summary>
        internal static string @ERR_BadDynamicQuery => GetResourceString("ERR_BadDynamicQuery");
        /// <summary>The indexer access needs to be dynamically dispatched, but cannot be because it is part of a base access expression. Consider casting the dynamic arguments or eliminating the base access.</summary>
        internal static string @ERR_NoDynamicPhantomOnBaseIndexer => GetResourceString("ERR_NoDynamicPhantomOnBaseIndexer");
        /// <summary>The dynamically dispatched call to method '{0}' may fail at runtime because one or more applicable overloads are conditional methods.</summary>
        internal static string @WRN_DynamicDispatchToConditionalMethod => GetResourceString("WRN_DynamicDispatchToConditionalMethod");
        /// <summary>Dynamically dispatched call may fail at runtime because one or more applicable overloads are conditional methods</summary>
        internal static string @WRN_DynamicDispatchToConditionalMethod_Title => GetResourceString("WRN_DynamicDispatchToConditionalMethod_Title");
        /// <summary>'{0}' has no applicable method named '{1}' but appears to have an extension method by that name. Extension methods cannot be dynamically dispatched. Consider casting the dynamic arguments or calling the extension method without the extension method syntax.</summary>
        internal static string @ERR_BadArgTypeDynamicExtension => GetResourceString("ERR_BadArgTypeDynamicExtension");
        /// <summary>The CallerMemberNameAttribute applied to parameter '{0}' will have no effect. It is overridden by the CallerFilePathAttribute.</summary>
        internal static string @WRN_CallerFilePathPreferredOverCallerMemberName => GetResourceString("WRN_CallerFilePathPreferredOverCallerMemberName");
        /// <summary>The CallerMemberNameAttribute will have no effect; it is overridden by the CallerFilePathAttribute</summary>
        internal static string @WRN_CallerFilePathPreferredOverCallerMemberName_Title => GetResourceString("WRN_CallerFilePathPreferredOverCallerMemberName_Title");
        /// <summary>The CallerMemberNameAttribute applied to parameter '{0}' will have no effect. It is overridden by the CallerLineNumberAttribute.</summary>
        internal static string @WRN_CallerLineNumberPreferredOverCallerMemberName => GetResourceString("WRN_CallerLineNumberPreferredOverCallerMemberName");
        /// <summary>The CallerMemberNameAttribute will have no effect; it is overridden by the CallerLineNumberAttribute</summary>
        internal static string @WRN_CallerLineNumberPreferredOverCallerMemberName_Title => GetResourceString("WRN_CallerLineNumberPreferredOverCallerMemberName_Title");
        /// <summary>The CallerFilePathAttribute applied to parameter '{0}' will have no effect. It is overridden by the CallerLineNumberAttribute.</summary>
        internal static string @WRN_CallerLineNumberPreferredOverCallerFilePath => GetResourceString("WRN_CallerLineNumberPreferredOverCallerFilePath");
        /// <summary>The CallerFilePathAttribute will have no effect; it is overridden by the CallerLineNumberAttribute</summary>
        internal static string @WRN_CallerLineNumberPreferredOverCallerFilePath_Title => GetResourceString("WRN_CallerLineNumberPreferredOverCallerFilePath_Title");
        /// <summary>Expression must be implicitly convertible to Boolean or its type '{0}' must define operator '{1}'.</summary>
        internal static string @ERR_InvalidDynamicCondition => GetResourceString("ERR_InvalidDynamicCondition");
        /// <summary>'{0}' cannot implement '{1}' because '{2}' is a Windows Runtime event and '{3}' is a regular .NET event.</summary>
        internal static string @ERR_MixingWinRTEventWithRegular => GetResourceString("ERR_MixingWinRTEventWithRegular");
        /// <summary>Call System.IDisposable.Dispose() on allocated instance of {0} before all references to it are out of scope.</summary>
        internal static string @WRN_CA2000_DisposeObjectsBeforeLosingScope1 => GetResourceString("WRN_CA2000_DisposeObjectsBeforeLosingScope1");
        /// <summary>Call System.IDisposable.Dispose() on allocated instance before all references to it are out of scope</summary>
        internal static string @WRN_CA2000_DisposeObjectsBeforeLosingScope1_Title => GetResourceString("WRN_CA2000_DisposeObjectsBeforeLosingScope1_Title");
        /// <summary>Allocated instance of {0} is not disposed along all exception paths.  Call System.IDisposable.Dispose() before all references to it are out of scope.</summary>
        internal static string @WRN_CA2000_DisposeObjectsBeforeLosingScope2 => GetResourceString("WRN_CA2000_DisposeObjectsBeforeLosingScope2");
        /// <summary>Allocated instance is not disposed along all exception paths</summary>
        internal static string @WRN_CA2000_DisposeObjectsBeforeLosingScope2_Title => GetResourceString("WRN_CA2000_DisposeObjectsBeforeLosingScope2_Title");
        /// <summary>Object '{0}' can be disposed more than once.</summary>
        internal static string @WRN_CA2202_DoNotDisposeObjectsMultipleTimes => GetResourceString("WRN_CA2202_DoNotDisposeObjectsMultipleTimes");
        /// <summary>Object can be disposed more than once</summary>
        internal static string @WRN_CA2202_DoNotDisposeObjectsMultipleTimes_Title => GetResourceString("WRN_CA2202_DoNotDisposeObjectsMultipleTimes_Title");
        /// <summary>Interop type '{0}' cannot be embedded. Use the applicable interface instead.</summary>
        internal static string @ERR_NewCoClassOnLink => GetResourceString("ERR_NewCoClassOnLink");
        /// <summary>Type '{0}' cannot be embedded because it is a nested type. Consider setting the 'Embed Interop Types' property to false.</summary>
        internal static string @ERR_NoPIANestedType => GetResourceString("ERR_NoPIANestedType");
        /// <summary>Type '{0}' cannot be embedded because it has a generic argument. Consider setting the 'Embed Interop Types' property to false.</summary>
        internal static string @ERR_GenericsUsedInNoPIAType => GetResourceString("ERR_GenericsUsedInNoPIAType");
        /// <summary>Embedded interop struct '{0}' can contain only public instance fields.</summary>
        internal static string @ERR_InteropStructContainsMethods => GetResourceString("ERR_InteropStructContainsMethods");
        /// <summary>A Windows Runtime event may not be passed as an out or ref parameter.</summary>
        internal static string @ERR_WinRtEventPassedByRef => GetResourceString("ERR_WinRtEventPassedByRef");
        /// <summary>Source interface '{0}' is missing method '{1}' which is required to embed event '{2}'.</summary>
        internal static string @ERR_MissingMethodOnSourceInterface => GetResourceString("ERR_MissingMethodOnSourceInterface");
        /// <summary>Interface '{0}' has an invalid source interface which is required to embed event '{1}'.</summary>
        internal static string @ERR_MissingSourceInterface => GetResourceString("ERR_MissingSourceInterface");
        /// <summary>Interop type '{0}' cannot be embedded because it is missing the required '{1}' attribute.</summary>
        internal static string @ERR_InteropTypeMissingAttribute => GetResourceString("ERR_InteropTypeMissingAttribute");
        /// <summary>Cannot embed interop types from assembly '{0}' because it is missing the '{1}' attribute.</summary>
        internal static string @ERR_NoPIAAssemblyMissingAttribute => GetResourceString("ERR_NoPIAAssemblyMissingAttribute");
        /// <summary>Cannot embed interop types from assembly '{0}' because it is missing either the '{1}' attribute or the '{2}' attribute.</summary>
        internal static string @ERR_NoPIAAssemblyMissingAttributes => GetResourceString("ERR_NoPIAAssemblyMissingAttributes");
        /// <summary>Cannot embed interop type '{0}' found in both assembly '{1}' and '{2}'. Consider setting the 'Embed Interop Types' property to false.</summary>
        internal static string @ERR_InteropTypesWithSameNameAndGuid => GetResourceString("ERR_InteropTypesWithSameNameAndGuid");
        /// <summary>Embedding the interop type '{0}' from assembly '{1}' causes a name clash in the current assembly. Consider setting the 'Embed Interop Types' property to false.</summary>
        internal static string @ERR_LocalTypeNameClash => GetResourceString("ERR_LocalTypeNameClash");
        /// <summary>A reference was created to embedded interop assembly '{0}' because of an indirect reference to that assembly created by assembly '{1}'. Consider changing the 'Embed Interop Types' property on either assembly.</summary>
        internal static string @WRN_ReferencedAssemblyReferencesLinkedPIA => GetResourceString("WRN_ReferencedAssemblyReferencesLinkedPIA");
        /// <summary>A reference was created to embedded interop assembly because of an indirect assembly reference</summary>
        internal static string @WRN_ReferencedAssemblyReferencesLinkedPIA_Title => GetResourceString("WRN_ReferencedAssemblyReferencesLinkedPIA_Title");
        /// <summary>You have added a reference to an assembly using /link (Embed Interop Types property set to True). This instructs the compiler to embed interop type information from that assembly. However, the compiler cannot embed interop type information from that assemb ...</summary>
        internal static string @WRN_ReferencedAssemblyReferencesLinkedPIA_Description => GetResourceString("WRN_ReferencedAssemblyReferencesLinkedPIA_Description");
        /// <summary>Type '{0}' from assembly '{1}' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.</summary>
        internal static string @ERR_GenericsUsedAcrossAssemblies => GetResourceString("ERR_GenericsUsedAcrossAssemblies");
        /// <summary>Cannot find the interop type that matches the embedded interop type '{0}'. Are you missing an assembly reference?</summary>
        internal static string @ERR_NoCanonicalView => GetResourceString("ERR_NoCanonicalView");
        /// <summary>By-reference return type 'ref {0}' is not supported.</summary>
        internal static string @ERR_ByRefReturnUnsupported => GetResourceString("ERR_ByRefReturnUnsupported");
        /// <summary>Module name '{0}' stored in '{1}' must match its filename.</summary>
        internal static string @ERR_NetModuleNameMismatch => GetResourceString("ERR_NetModuleNameMismatch");
        /// <summary>Invalid module name: {0}</summary>
        internal static string @ERR_BadModuleName => GetResourceString("ERR_BadModuleName");
        /// <summary>Invalid '{0}' value: '{1}'.</summary>
        internal static string @ERR_BadCompilationOptionValue => GetResourceString("ERR_BadCompilationOptionValue");
        /// <summary>AppConfigPath must be absolute.</summary>
        internal static string @ERR_BadAppConfigPath => GetResourceString("ERR_BadAppConfigPath");
        /// <summary>Attribute '{0}' from module '{1}' will be ignored in favor of the instance appearing in source</summary>
        internal static string @WRN_AssemblyAttributeFromModuleIsOverridden => GetResourceString("WRN_AssemblyAttributeFromModuleIsOverridden");
        /// <summary>Attribute will be ignored in favor of the instance appearing in source</summary>
        internal static string @WRN_AssemblyAttributeFromModuleIsOverridden_Title => GetResourceString("WRN_AssemblyAttributeFromModuleIsOverridden_Title");
        /// <summary>Attribute '{0}' given in a source file conflicts with option '{1}'.</summary>
        internal static string @ERR_CmdOptionConflictsSource => GetResourceString("ERR_CmdOptionConflictsSource");
        /// <summary>A fixed buffer may only have one dimension.</summary>
        internal static string @ERR_FixedBufferTooManyDimensions => GetResourceString("ERR_FixedBufferTooManyDimensions");
        /// <summary>Referenced assembly '{0}' does not have a strong name.</summary>
        internal static string @WRN_ReferencedAssemblyDoesNotHaveStrongName => GetResourceString("WRN_ReferencedAssemblyDoesNotHaveStrongName");
        /// <summary>Referenced assembly does not have a strong name</summary>
        internal static string @WRN_ReferencedAssemblyDoesNotHaveStrongName_Title => GetResourceString("WRN_ReferencedAssemblyDoesNotHaveStrongName_Title");
        /// <summary>Invalid signature public key specified in AssemblySignatureKeyAttribute.</summary>
        internal static string @ERR_InvalidSignaturePublicKey => GetResourceString("ERR_InvalidSignaturePublicKey");
        /// <summary>Type '{0}' exported from module '{1}' conflicts with type declared in primary module of this assembly.</summary>
        internal static string @ERR_ExportedTypeConflictsWithDeclaration => GetResourceString("ERR_ExportedTypeConflictsWithDeclaration");
        /// <summary>Type '{0}' exported from module '{1}' conflicts with type '{2}' exported from module '{3}'.</summary>
        internal static string @ERR_ExportedTypesConflict => GetResourceString("ERR_ExportedTypesConflict");
        /// <summary>Forwarded type '{0}' conflicts with type declared in primary module of this assembly.</summary>
        internal static string @ERR_ForwardedTypeConflictsWithDeclaration => GetResourceString("ERR_ForwardedTypeConflictsWithDeclaration");
        /// <summary>Type '{0}' forwarded to assembly '{1}' conflicts with type '{2}' forwarded to assembly '{3}'.</summary>
        internal static string @ERR_ForwardedTypesConflict => GetResourceString("ERR_ForwardedTypesConflict");
        /// <summary>Type '{0}' forwarded to assembly '{1}' conflicts with type '{2}' exported from module '{3}'.</summary>
        internal static string @ERR_ForwardedTypeConflictsWithExportedType => GetResourceString("ERR_ForwardedTypeConflictsWithExportedType");
        /// <summary>Referenced assembly '{0}' has different culture setting of '{1}'.</summary>
        internal static string @WRN_RefCultureMismatch => GetResourceString("WRN_RefCultureMismatch");
        /// <summary>Referenced assembly has different culture setting</summary>
        internal static string @WRN_RefCultureMismatch_Title => GetResourceString("WRN_RefCultureMismatch_Title");
        /// <summary>Agnostic assembly cannot have a processor specific module '{0}'.</summary>
        internal static string @ERR_AgnosticToMachineModule => GetResourceString("ERR_AgnosticToMachineModule");
        /// <summary>Assembly and module '{0}' cannot target different processors.</summary>
        internal static string @ERR_ConflictingMachineModule => GetResourceString("ERR_ConflictingMachineModule");
        /// <summary>Referenced assembly '{0}' targets a different processor.</summary>
        internal static string @WRN_ConflictingMachineAssembly => GetResourceString("WRN_ConflictingMachineAssembly");
        /// <summary>Referenced assembly targets a different processor</summary>
        internal static string @WRN_ConflictingMachineAssembly_Title => GetResourceString("WRN_ConflictingMachineAssembly_Title");
        /// <summary>Cryptographic failure while creating hashes.</summary>
        internal static string @ERR_CryptoHashFailed => GetResourceString("ERR_CryptoHashFailed");
        /// <summary>Reference to '{0}' netmodule missing.</summary>
        internal static string @ERR_MissingNetModuleReference => GetResourceString("ERR_MissingNetModuleReference");
        /// <summary>Module '{0}' is already defined in this assembly. Each module must have a unique filename.</summary>
        internal static string @ERR_NetModuleNameMustBeUnique => GetResourceString("ERR_NetModuleNameMustBeUnique");
        /// <summary>Cannot read config file '{0}' -- '{1}'</summary>
        internal static string @ERR_CantReadConfigFile => GetResourceString("ERR_CantReadConfigFile");
        /// <summary>Cannot continue since the edit includes a reference to an embedded type: '{0}'.</summary>
        internal static string @ERR_EncNoPIAReference => GetResourceString("ERR_EncNoPIAReference");
        /// <summary>Member '{0}' added during the current debug session can only be accessed from within its declaring assembly '{1}'.</summary>
        internal static string @ERR_EncReferenceToAddedMember => GetResourceString("ERR_EncReferenceToAddedMember");
        /// <summary>Compilation options '{0}' and '{1}' can't both be specified at the same time.</summary>
        internal static string @ERR_MutuallyExclusiveOptions => GetResourceString("ERR_MutuallyExclusiveOptions");
        /// <summary>Linked netmodule metadata must provide a full PE image: '{0}'.</summary>
        internal static string @ERR_LinkedNetmoduleMetadataMustProvideFullPEImage => GetResourceString("ERR_LinkedNetmoduleMetadataMustProvideFullPEImage");
        /// <summary>/platform:anycpu32bitpreferred can only be used with /t:exe, /t:winexe and /t:appcontainerexe</summary>
        internal static string @ERR_BadPrefer32OnLib => GetResourceString("ERR_BadPrefer32OnLib");
        /// <summary>&lt;path list&gt;</summary>
        internal static string @IDS_PathList => GetResourceString("IDS_PathList");
        /// <summary>&lt;text&gt;</summary>
        internal static string @IDS_Text => GetResourceString("IDS_Text");
        /// <summary>null propagating operator</summary>
        internal static string @IDS_FeatureNullPropagatingOperator => GetResourceString("IDS_FeatureNullPropagatingOperator");
        /// <summary>expression-bodied method</summary>
        internal static string @IDS_FeatureExpressionBodiedMethod => GetResourceString("IDS_FeatureExpressionBodiedMethod");
        /// <summary>expression-bodied property</summary>
        internal static string @IDS_FeatureExpressionBodiedProperty => GetResourceString("IDS_FeatureExpressionBodiedProperty");
        /// <summary>expression-bodied indexer</summary>
        internal static string @IDS_FeatureExpressionBodiedIndexer => GetResourceString("IDS_FeatureExpressionBodiedIndexer");
        /// <summary>auto property initializer</summary>
        internal static string @IDS_FeatureAutoPropertyInitializer => GetResourceString("IDS_FeatureAutoPropertyInitializer");
        /// <summary>&lt;namespace&gt;</summary>
        internal static string @IDS_Namespace1 => GetResourceString("IDS_Namespace1");
        /// <summary>byref locals and returns</summary>
        internal static string @IDS_FeatureRefLocalsReturns => GetResourceString("IDS_FeatureRefLocalsReturns");
        /// <summary>readonly references</summary>
        internal static string @IDS_FeatureReadOnlyReferences => GetResourceString("IDS_FeatureReadOnlyReferences");
        /// <summary>ref structs</summary>
        internal static string @IDS_FeatureRefStructs => GetResourceString("IDS_FeatureRefStructs");
        /// <summary>ref conditional expression</summary>
        internal static string @IDS_FeatureRefConditional => GetResourceString("IDS_FeatureRefConditional");
        /// <summary>ref reassignment</summary>
        internal static string @IDS_FeatureRefReassignment => GetResourceString("IDS_FeatureRefReassignment");
        /// <summary>ref for-loop variables</summary>
        internal static string @IDS_FeatureRefFor => GetResourceString("IDS_FeatureRefFor");
        /// <summary>ref foreach iteration variables</summary>
        internal static string @IDS_FeatureRefForEach => GetResourceString("IDS_FeatureRefForEach");
        /// <summary>extensible fixed statement</summary>
        internal static string @IDS_FeatureExtensibleFixedStatement => GetResourceString("IDS_FeatureExtensibleFixedStatement");
        /// <summary>Compilation (C#):</summary>
        internal static string @CompilationC => GetResourceString("CompilationC");
        /// <summary>Syntax node is not within syntax tree</summary>
        internal static string @SyntaxNodeIsNotWithinSynt => GetResourceString("SyntaxNodeIsNotWithinSynt");
        /// <summary>Location must be provided in order to provide minimal type qualification.</summary>
        internal static string @LocationMustBeProvided => GetResourceString("LocationMustBeProvided");
        /// <summary>SyntaxTreeSemanticModel must be provided in order to provide minimal type qualification.</summary>
        internal static string @SyntaxTreeSemanticModelMust => GetResourceString("SyntaxTreeSemanticModelMust");
        /// <summary>Can't reference compilation of type '{0}' from {1} compilation.</summary>
        internal static string @CantReferenceCompilationOf => GetResourceString("CantReferenceCompilationOf");
        /// <summary>Syntax tree already present</summary>
        internal static string @SyntaxTreeAlreadyPresent => GetResourceString("SyntaxTreeAlreadyPresent");
        /// <summary>Submission can only include script code.</summary>
        internal static string @SubmissionCanOnlyInclude => GetResourceString("SubmissionCanOnlyInclude");
        /// <summary>Submission can have at most one syntax tree.</summary>
        internal static string @SubmissionCanHaveAtMostOne => GetResourceString("SubmissionCanHaveAtMostOne");
        /// <summary>SyntaxTree is not part of the compilation, so it cannot be removed</summary>
        internal static string @SyntaxTreeNotFoundToRemove => GetResourceString("SyntaxTreeNotFoundToRemove");
        /// <summary>tree must have a root node with SyntaxKind.CompilationUnit</summary>
        internal static string @TreeMustHaveARootNodeWith => GetResourceString("TreeMustHaveARootNodeWith");
        /// <summary>Type argument cannot be null</summary>
        internal static string @TypeArgumentCannotBeNull => GetResourceString("TypeArgumentCannotBeNull");
        /// <summary>Wrong number of type arguments</summary>
        internal static string @WrongNumberOfTypeArguments => GetResourceString("WrongNumberOfTypeArguments");
        /// <summary>Name conflict for name {0}</summary>
        internal static string @NameConflictForName => GetResourceString("NameConflictForName");
        /// <summary>LookupOptions has an invalid combination of options</summary>
        internal static string @LookupOptionsHasInvalidCombo => GetResourceString("LookupOptionsHasInvalidCombo");
        /// <summary>items: must be non-empty</summary>
        internal static string @ItemsMustBeNonEmpty => GetResourceString("ItemsMustBeNonEmpty");
        /// <summary>Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier or Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier to create identifier tokens.</summary>
        internal static string @UseVerbatimIdentifier => GetResourceString("UseVerbatimIdentifier");
        /// <summary>Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal to create character literal tokens.</summary>
        internal static string @UseLiteralForTokens => GetResourceString("UseLiteralForTokens");
        /// <summary>Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal to create numeric literal tokens.</summary>
        internal static string @UseLiteralForNumeric => GetResourceString("UseLiteralForNumeric");
        /// <summary>This method can only be used to create tokens - {0} is not a token kind.</summary>
        internal static string @ThisMethodCanOnlyBeUsedToCreateTokens => GetResourceString("ThisMethodCanOnlyBeUsedToCreateTokens");
        /// <summary>Generic parameter is definition when expected to be reference {0}</summary>
        internal static string @GenericParameterDefinition => GetResourceString("GenericParameterDefinition");
        /// <summary>Called GetDeclarationName for a declaration node that can possibly contain multiple variable declarators.</summary>
        internal static string @InvalidGetDeclarationNameMultipleDeclarators => GetResourceString("InvalidGetDeclarationNameMultipleDeclarators");
        /// <summary>tree not part of compilation</summary>
        internal static string @TreeNotPartOfCompilation => GetResourceString("TreeNotPartOfCompilation");
        /// <summary>Position is not within syntax tree with full span {0}</summary>
        internal static string @PositionIsNotWithinSyntax => GetResourceString("PositionIsNotWithinSyntax");
        /// <summary>The language name '{0}' is invalid.</summary>
        internal static string @WRN_BadUILang => GetResourceString("WRN_BadUILang");
        /// <summary>The language name is invalid</summary>
        internal static string @WRN_BadUILang_Title => GetResourceString("WRN_BadUILang_Title");
        /// <summary>Transparent identifier member access failed for field '{0}' of '{1}'.  Does the data being queried implement the query pattern?</summary>
        internal static string @ERR_UnsupportedTransparentIdentifierAccess => GetResourceString("ERR_UnsupportedTransparentIdentifierAccess");
        /// <summary>The parameter has multiple distinct default values.</summary>
        internal static string @ERR_ParamDefaultValueDiffersFromAttribute => GetResourceString("ERR_ParamDefaultValueDiffersFromAttribute");
        /// <summary>The field has multiple distinct constant values.</summary>
        internal static string @ERR_FieldHasMultipleDistinctConstantValues => GetResourceString("ERR_FieldHasMultipleDistinctConstantValues");
        /// <summary>Within cref attributes, nested types of generic types should be qualified.</summary>
        internal static string @WRN_UnqualifiedNestedTypeInCref => GetResourceString("WRN_UnqualifiedNestedTypeInCref");
        /// <summary>Within cref attributes, nested types of generic types should be qualified</summary>
        internal static string @WRN_UnqualifiedNestedTypeInCref_Title => GetResourceString("WRN_UnqualifiedNestedTypeInCref_Title");
        /// <summary>Not a C# symbol.</summary>
        internal static string @NotACSharpSymbol => GetResourceString("NotACSharpSymbol");
        /// <summary>Unnecessary using directive.</summary>
        internal static string @HDN_UnusedUsingDirective => GetResourceString("HDN_UnusedUsingDirective");
        /// <summary>Unused extern alias.</summary>
        internal static string @HDN_UnusedExternAlias => GetResourceString("HDN_UnusedExternAlias");
        /// <summary>Elements cannot be null.</summary>
        internal static string @ElementsCannotBeNull => GetResourceString("ElementsCannotBeNull");
        /// <summary>LIB environment variable</summary>
        internal static string @IDS_LIB_ENV => GetResourceString("IDS_LIB_ENV");
        /// <summary>/LIB option</summary>
        internal static string @IDS_LIB_OPTION => GetResourceString("IDS_LIB_OPTION");
        /// <summary>/REFERENCEPATH option</summary>
        internal static string @IDS_REFERENCEPATH_OPTION => GetResourceString("IDS_REFERENCEPATH_OPTION");
        /// <summary>directory does not exist</summary>
        internal static string @IDS_DirectoryDoesNotExist => GetResourceString("IDS_DirectoryDoesNotExist");
        /// <summary>path is too long or invalid</summary>
        internal static string @IDS_DirectoryHasInvalidPath => GetResourceString("IDS_DirectoryHasInvalidPath");
        /// <summary>No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options.</summary>
        internal static string @WRN_NoRuntimeMetadataVersion => GetResourceString("WRN_NoRuntimeMetadataVersion");
        /// <summary>No value for RuntimeMetadataVersion found</summary>
        internal static string @WRN_NoRuntimeMetadataVersion_Title => GetResourceString("WRN_NoRuntimeMetadataVersion_Title");
        /// <summary>Expected a {0} SemanticModel.</summary>
        internal static string @WrongSemanticModelType => GetResourceString("WrongSemanticModelType");
        /// <summary>lambda expression</summary>
        internal static string @IDS_FeatureLambda => GetResourceString("IDS_FeatureLambda");
        /// <summary>Feature '{0}' is not available in C# 1. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion1 => GetResourceString("ERR_FeatureNotAvailableInVersion1");
        /// <summary>Feature '{0}' is not available in C# 2. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion2 => GetResourceString("ERR_FeatureNotAvailableInVersion2");
        /// <summary>Feature '{0}' is not available in C# 3. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion3 => GetResourceString("ERR_FeatureNotAvailableInVersion3");
        /// <summary>Feature '{0}' is not available in C# 4. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion4 => GetResourceString("ERR_FeatureNotAvailableInVersion4");
        /// <summary>Feature '{0}' is not available in C# 5. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion5 => GetResourceString("ERR_FeatureNotAvailableInVersion5");
        /// <summary>Feature '{0}' is not available in C# 6. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion6 => GetResourceString("ERR_FeatureNotAvailableInVersion6");
        /// <summary>Feature '{0}' is not available in C# 7.0. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion7 => GetResourceString("ERR_FeatureNotAvailableInVersion7");
        /// <summary>Feature '{0}' is experimental and unsupported; use '/features:{1}' to enable.</summary>
        internal static string @ERR_FeatureIsExperimental => GetResourceString("ERR_FeatureIsExperimental");
        /// <summary>'experimental'</summary>
        internal static string @IDS_VersionExperimental => GetResourceString("IDS_VersionExperimental");
        /// <summary>Position must be within span of the syntax tree.</summary>
        internal static string @PositionNotWithinTree => GetResourceString("PositionNotWithinTree");
        /// <summary>Syntax node to be speculated cannot belong to a syntax tree from the current compilation.</summary>
        internal static string @SpeculatedSyntaxNodeCannotBelongToCurrentCompilation => GetResourceString("SpeculatedSyntaxNodeCannotBelongToCurrentCompilation");
        /// <summary>Chaining speculative semantic model is not supported. You should create a speculative model from the non-speculative ParentModel.</summary>
        internal static string @ChainingSpeculativeModelIsNotSupported => GetResourceString("ChainingSpeculativeModelIsNotSupported");
        /// <summary>Microsoft (R) Visual C# Compiler</summary>
        internal static string @IDS_ToolName => GetResourceString("IDS_ToolName");
        /// <summary>{0} version {1}</summary>
        internal static string @IDS_LogoLine1 => GetResourceString("IDS_LogoLine1");
        /// <summary>Copyright (C) Microsoft Corporation. All rights reserved.</summary>
        internal static string @IDS_LogoLine2 => GetResourceString("IDS_LogoLine2");
        /// <summary>Supported language versions:</summary>
        internal static string @IDS_LangVersions => GetResourceString("IDS_LangVersions");
        /// <summary>Visual C# Compiler Options
        /// 
        ///                        - OUTPUT FILES -
        /// -out:&lt;file&gt;                   Specify output file name (default: base name of
        ///                               file with main class or first file)
        /// -target:exe                   Build a consol ...</summary>
        internal static string @IDS_CSCHelp => GetResourceString("IDS_CSCHelp");
        /// <summary>'{0}': a class with the ComImport attribute cannot specify field initializers.</summary>
        internal static string @ERR_ComImportWithInitializers => GetResourceString("ERR_ComImportWithInitializers");
        /// <summary>Local name '{0}' is too long for PDB.  Consider shortening or compiling without /debug.</summary>
        internal static string @WRN_PdbLocalNameTooLong => GetResourceString("WRN_PdbLocalNameTooLong");
        /// <summary>Local name is too long for PDB</summary>
        internal static string @WRN_PdbLocalNameTooLong_Title => GetResourceString("WRN_PdbLocalNameTooLong_Title");
        /// <summary>Anonymous function converted to a void returning delegate cannot return a value</summary>
        internal static string @ERR_RetNoObjectRequiredLambda => GetResourceString("ERR_RetNoObjectRequiredLambda");
        /// <summary>Async lambda expression converted to a 'Task' returning delegate cannot return a value. Did you intend to return 'Task&lt;T&gt;'?</summary>
        internal static string @ERR_TaskRetNoObjectRequiredLambda => GetResourceString("ERR_TaskRetNoObjectRequiredLambda");
        /// <summary>An instance of analyzer {0} cannot be created from {1} : {2}.</summary>
        internal static string @WRN_AnalyzerCannotBeCreated => GetResourceString("WRN_AnalyzerCannotBeCreated");
        /// <summary>An analyzer instance cannot be created</summary>
        internal static string @WRN_AnalyzerCannotBeCreated_Title => GetResourceString("WRN_AnalyzerCannotBeCreated_Title");
        /// <summary>The assembly {0} does not contain any analyzers.</summary>
        internal static string @WRN_NoAnalyzerInAssembly => GetResourceString("WRN_NoAnalyzerInAssembly");
        /// <summary>Assembly does not contain any analyzers</summary>
        internal static string @WRN_NoAnalyzerInAssembly_Title => GetResourceString("WRN_NoAnalyzerInAssembly_Title");
        /// <summary>Unable to load Analyzer assembly {0} : {1}</summary>
        internal static string @WRN_UnableToLoadAnalyzer => GetResourceString("WRN_UnableToLoadAnalyzer");
        /// <summary>Unable to load Analyzer assembly</summary>
        internal static string @WRN_UnableToLoadAnalyzer_Title => GetResourceString("WRN_UnableToLoadAnalyzer_Title");
        /// <summary>Skipping some types in analyzer assembly {0} due to a ReflectionTypeLoadException : {1}.</summary>
        internal static string @INF_UnableToLoadSomeTypesInAnalyzer => GetResourceString("INF_UnableToLoadSomeTypesInAnalyzer");
        /// <summary>Error reading ruleset file {0} - {1}</summary>
        internal static string @ERR_CantReadRulesetFile => GetResourceString("ERR_CantReadRulesetFile");
        /// <summary>Error reading debug information for '{0}'</summary>
        internal static string @ERR_BadPdbData => GetResourceString("ERR_BadPdbData");
        /// <summary>Operation caused a stack overflow.</summary>
        internal static string @IDS_OperationCausedStackOverflow => GetResourceString("IDS_OperationCausedStackOverflow");
        /// <summary>Expected identifier or numeric literal.</summary>
        internal static string @WRN_IdentifierOrNumericLiteralExpected => GetResourceString("WRN_IdentifierOrNumericLiteralExpected");
        /// <summary>Expected identifier or numeric literal</summary>
        internal static string @WRN_IdentifierOrNumericLiteralExpected_Title => GetResourceString("WRN_IdentifierOrNumericLiteralExpected_Title");
        /// <summary>Only auto-implemented properties can have initializers.</summary>
        internal static string @ERR_InitializerOnNonAutoProperty => GetResourceString("ERR_InitializerOnNonAutoProperty");
        /// <summary>Instance properties in interfaces cannot have initializers.</summary>
        internal static string @ERR_InstancePropertyInitializerInInterface => GetResourceString("ERR_InstancePropertyInitializerInInterface");
        /// <summary>Auto-implemented properties must have get accessors.</summary>
        internal static string @ERR_AutoPropertyMustHaveGetAccessor => GetResourceString("ERR_AutoPropertyMustHaveGetAccessor");
        /// <summary>Auto-implemented properties must override all accessors of the overridden property.</summary>
        internal static string @ERR_AutoPropertyMustOverrideSet => GetResourceString("ERR_AutoPropertyMustOverrideSet");
        /// <summary>Structs without explicit constructors cannot contain members with initializers.</summary>
        internal static string @ERR_InitializerInStructWithoutExplicitConstructor => GetResourceString("ERR_InitializerInStructWithoutExplicitConstructor");
        /// <summary>Cannot emit debug information for a source text without encoding.</summary>
        internal static string @ERR_EncodinglessSyntaxTree => GetResourceString("ERR_EncodinglessSyntaxTree");
        /// <summary>Block bodies and expression bodies cannot both be provided.</summary>
        internal static string @ERR_BlockBodyAndExpressionBody => GetResourceString("ERR_BlockBodyAndExpressionBody");
        /// <summary>Control cannot fall out of switch from final case label ('{0}')</summary>
        internal static string @ERR_SwitchFallOut => GetResourceString("ERR_SwitchFallOut");
        /// <summary>Type arguments are not allowed in the nameof operator.</summary>
        internal static string @ERR_UnexpectedBoundGenericName => GetResourceString("ERR_UnexpectedBoundGenericName");
        /// <summary>An expression tree lambda may not contain a null propagating operator.</summary>
        internal static string @ERR_NullPropagatingOpInExpressionTree => GetResourceString("ERR_NullPropagatingOpInExpressionTree");
        /// <summary>An expression tree lambda may not contain a dictionary initializer.</summary>
        internal static string @ERR_DictionaryInitializerInExpressionTree => GetResourceString("ERR_DictionaryInitializerInExpressionTree");
        /// <summary>An extension Add method is not supported for a collection initializer in an expression lambda.</summary>
        internal static string @ERR_ExtensionCollectionElementInitializerInExpressionTree => GetResourceString("ERR_ExtensionCollectionElementInitializerInExpressionTree");
        /// <summary>nameof operator</summary>
        internal static string @IDS_FeatureNameof => GetResourceString("IDS_FeatureNameof");
        /// <summary>dictionary initializer</summary>
        internal static string @IDS_FeatureDictionaryInitializer => GetResourceString("IDS_FeatureDictionaryInitializer");
        /// <summary>Missing close delimiter '}' for interpolated expression started with '{'.</summary>
        internal static string @ERR_UnclosedExpressionHole => GetResourceString("ERR_UnclosedExpressionHole");
        /// <summary>A single-line comment may not be used in an interpolated string.</summary>
        internal static string @ERR_SingleLineCommentInExpressionHole => GetResourceString("ERR_SingleLineCommentInExpressionHole");
        /// <summary>An expression is too long or complex to compile</summary>
        internal static string @ERR_InsufficientStack => GetResourceString("ERR_InsufficientStack");
        /// <summary>Expression does not have a name.</summary>
        internal static string @ERR_ExpressionHasNoName => GetResourceString("ERR_ExpressionHasNoName");
        /// <summary>Sub-expression cannot be used in an argument to nameof.</summary>
        internal static string @ERR_SubexpressionNotInNameof => GetResourceString("ERR_SubexpressionNotInNameof");
        /// <summary>An alias-qualified name is not an expression.</summary>
        internal static string @ERR_AliasQualifiedNameNotAnExpression => GetResourceString("ERR_AliasQualifiedNameNotAnExpression");
        /// <summary>Type parameters are not allowed on a method group as an argument to 'nameof'.</summary>
        internal static string @ERR_NameofMethodGroupWithTypeParameters => GetResourceString("ERR_NameofMethodGroupWithTypeParameters");
        /// <summary>SearchCriteria is expected.</summary>
        internal static string @NoNoneSearchCriteria => GetResourceString("NoNoneSearchCriteria");
        /// <summary>Assembly culture strings may not contain embedded NUL characters.</summary>
        internal static string @ERR_InvalidAssemblyCulture => GetResourceString("ERR_InvalidAssemblyCulture");
        /// <summary>using static</summary>
        internal static string @IDS_FeatureUsingStatic => GetResourceString("IDS_FeatureUsingStatic");
        /// <summary>interpolated strings</summary>
        internal static string @IDS_FeatureInterpolatedStrings => GetResourceString("IDS_FeatureInterpolatedStrings");
        /// <summary>alternative interpolated verbatim strings</summary>
        internal static string @IDS_FeatureAltInterpolatedVerbatimStrings => GetResourceString("IDS_FeatureAltInterpolatedVerbatimStrings");
        /// <summary>await in catch blocks and finally blocks</summary>
        internal static string @IDS_AwaitInCatchAndFinally => GetResourceString("IDS_AwaitInCatchAndFinally");
        /// <summary>binary literals</summary>
        internal static string @IDS_FeatureBinaryLiteral => GetResourceString("IDS_FeatureBinaryLiteral");
        /// <summary>digit separators</summary>
        internal static string @IDS_FeatureDigitSeparator => GetResourceString("IDS_FeatureDigitSeparator");
        /// <summary>local functions</summary>
        internal static string @IDS_FeatureLocalFunctions => GetResourceString("IDS_FeatureLocalFunctions");
        /// <summary>A '{0}' character must be escaped (by doubling) in an interpolated string.</summary>
        internal static string @ERR_UnescapedCurly => GetResourceString("ERR_UnescapedCurly");
        /// <summary>A '{0}' character may only be escaped by doubling '{0}{0}' in an interpolated string.</summary>
        internal static string @ERR_EscapedCurly => GetResourceString("ERR_EscapedCurly");
        /// <summary>A format specifier may not contain trailing whitespace.</summary>
        internal static string @ERR_TrailingWhitespaceInFormatSpecifier => GetResourceString("ERR_TrailingWhitespaceInFormatSpecifier");
        /// <summary>Empty format specifier.</summary>
        internal static string @ERR_EmptyFormatSpecifier => GetResourceString("ERR_EmptyFormatSpecifier");
        /// <summary>There is an error in a referenced assembly '{0}'.</summary>
        internal static string @ERR_ErrorInReferencedAssembly => GetResourceString("ERR_ErrorInReferencedAssembly");
        /// <summary>Expression or declaration statement expected.</summary>
        internal static string @ERR_ExpressionOrDeclarationExpected => GetResourceString("ERR_ExpressionOrDeclarationExpected");
        /// <summary>Extension method groups are not allowed as an argument to 'nameof'.</summary>
        internal static string @ERR_NameofExtensionMethod => GetResourceString("ERR_NameofExtensionMethod");
        /// <summary>Alignment value {0} has a magnitude greater than {1} and may result in a large formatted string.</summary>
        internal static string @WRN_AlignmentMagnitude => GetResourceString("WRN_AlignmentMagnitude");
        /// <summary>Unused extern alias</summary>
        internal static string @HDN_UnusedExternAlias_Title => GetResourceString("HDN_UnusedExternAlias_Title");
        /// <summary>Unnecessary using directive</summary>
        internal static string @HDN_UnusedUsingDirective_Title => GetResourceString("HDN_UnusedUsingDirective_Title");
        /// <summary>Skip loading types in analyzer assembly that fail due to a ReflectionTypeLoadException</summary>
        internal static string @INF_UnableToLoadSomeTypesInAnalyzer_Title => GetResourceString("INF_UnableToLoadSomeTypesInAnalyzer_Title");
        /// <summary>Alignment value has a magnitude that may result in a large formatted string</summary>
        internal static string @WRN_AlignmentMagnitude_Title => GetResourceString("WRN_AlignmentMagnitude_Title");
        /// <summary>Length of String constant resulting from concatenation exceeds System.Int32.MaxValue.  Try splitting the string into multiple constants.</summary>
        internal static string @ERR_ConstantStringTooLong => GetResourceString("ERR_ConstantStringTooLong");
        /// <summary>Tuple must contain at least two elements.</summary>
        internal static string @ERR_TupleTooFewElements => GetResourceString("ERR_TupleTooFewElements");
        /// <summary>Debug entry point must be a definition of a method declared in the current compilation.</summary>
        internal static string @ERR_DebugEntryPointNotSourceMethodDefinition => GetResourceString("ERR_DebugEntryPointNotSourceMethodDefinition");
        /// <summary>#load is only allowed in scripts</summary>
        internal static string @ERR_LoadDirectiveOnlyAllowedInScripts => GetResourceString("ERR_LoadDirectiveOnlyAllowedInScripts");
        /// <summary>Cannot use #load after first token in file</summary>
        internal static string @ERR_PPLoadFollowsToken => GetResourceString("ERR_PPLoadFollowsToken");
        /// <summary>Could not find file.</summary>
        internal static string @CouldNotFindFile => GetResourceString("CouldNotFindFile");
        /// <summary>SyntaxTree resulted from a #load directive and cannot be removed or replaced directly.</summary>
        internal static string @SyntaxTreeFromLoadNoRemoveReplace => GetResourceString("SyntaxTreeFromLoadNoRemoveReplace");
        /// <summary>Source file references are not supported.</summary>
        internal static string @ERR_SourceFileReferencesNotSupported => GetResourceString("ERR_SourceFileReferencesNotSupported");
        /// <summary>The pathmap option was incorrectly formatted.</summary>
        internal static string @ERR_InvalidPathMap => GetResourceString("ERR_InvalidPathMap");
        /// <summary>Invalid real literal.</summary>
        internal static string @ERR_InvalidReal => GetResourceString("ERR_InvalidReal");
        /// <summary>Auto-implemented properties cannot return by reference</summary>
        internal static string @ERR_AutoPropertyCannotBeRefReturning => GetResourceString("ERR_AutoPropertyCannotBeRefReturning");
        /// <summary>Properties which return by reference must have a get accessor</summary>
        internal static string @ERR_RefPropertyMustHaveGetAccessor => GetResourceString("ERR_RefPropertyMustHaveGetAccessor");
        /// <summary>Properties which return by reference cannot have set accessors</summary>
        internal static string @ERR_RefPropertyCannotHaveSetAccessor => GetResourceString("ERR_RefPropertyCannotHaveSetAccessor");
        /// <summary>'{0}' must match by reference return of overridden member '{1}'</summary>
        internal static string @ERR_CantChangeRefReturnOnOverride => GetResourceString("ERR_CantChangeRefReturnOnOverride");
        /// <summary>'{0}' must match by init-only of overridden member '{1}'</summary>
        internal static string @ERR_CantChangeInitOnlyOnOverride => GetResourceString("ERR_CantChangeInitOnlyOnOverride");
        /// <summary>By-reference returns may only be used in methods that return by reference</summary>
        internal static string @ERR_MustNotHaveRefReturn => GetResourceString("ERR_MustNotHaveRefReturn");
        /// <summary>By-value returns may only be used in methods that return by value</summary>
        internal static string @ERR_MustHaveRefReturn => GetResourceString("ERR_MustHaveRefReturn");
        /// <summary>The return expression must be of type '{0}' because this method returns by reference</summary>
        internal static string @ERR_RefReturnMustHaveIdentityConversion => GetResourceString("ERR_RefReturnMustHaveIdentityConversion");
        /// <summary>'{0}' does not implement interface member '{1}'. '{2}' cannot implement '{1}' because it does not have matching return by reference.</summary>
        internal static string @ERR_CloseUnimplementedInterfaceMemberWrongRefReturn => GetResourceString("ERR_CloseUnimplementedInterfaceMemberWrongRefReturn");
        /// <summary>'{0}' does not implement interface member '{1}'. '{2}' cannot implement '{1}'.</summary>
        internal static string @ERR_CloseUnimplementedInterfaceMemberWrongInitOnly => GetResourceString("ERR_CloseUnimplementedInterfaceMemberWrongInitOnly");
        /// <summary>The body of '{0}' cannot be an iterator block because '{0}' returns by reference</summary>
        internal static string @ERR_BadIteratorReturnRef => GetResourceString("ERR_BadIteratorReturnRef");
        /// <summary>Lambda expressions that return by reference cannot be converted to expression trees</summary>
        internal static string @ERR_BadRefReturnExpressionTree => GetResourceString("ERR_BadRefReturnExpressionTree");
        /// <summary>An expression tree lambda may not contain a call to a method, property, or indexer that returns by reference</summary>
        internal static string @ERR_RefReturningCallInExpressionTree => GetResourceString("ERR_RefReturningCallInExpressionTree");
        /// <summary>An expression cannot be used in this context because it may not be passed or returned by reference</summary>
        internal static string @ERR_RefReturnLvalueExpected => GetResourceString("ERR_RefReturnLvalueExpected");
        /// <summary>Cannot return '{0}' by reference because it was initialized to a value that cannot be returned by reference</summary>
        internal static string @ERR_RefReturnNonreturnableLocal => GetResourceString("ERR_RefReturnNonreturnableLocal");
        /// <summary>Cannot return by reference a member of '{0}' because it was initialized to a value that cannot be returned by reference</summary>
        internal static string @ERR_RefReturnNonreturnableLocal2 => GetResourceString("ERR_RefReturnNonreturnableLocal2");
        /// <summary>Cannot return '{0}' by reference because it is read-only</summary>
        internal static string @ERR_RefReturnReadonlyLocal => GetResourceString("ERR_RefReturnReadonlyLocal");
        /// <summary>Cannot return the range variable '{0}' by reference</summary>
        internal static string @ERR_RefReturnRangeVariable => GetResourceString("ERR_RefReturnRangeVariable");
        /// <summary>Cannot return '{0}' by reference because it is a '{1}'</summary>
        internal static string @ERR_RefReturnReadonlyLocalCause => GetResourceString("ERR_RefReturnReadonlyLocalCause");
        /// <summary>Cannot return fields of '{0}' by reference because it is a '{1}'</summary>
        internal static string @ERR_RefReturnReadonlyLocal2Cause => GetResourceString("ERR_RefReturnReadonlyLocal2Cause");
        /// <summary>A readonly field cannot be returned by writable reference</summary>
        internal static string @ERR_RefReturnReadonly => GetResourceString("ERR_RefReturnReadonly");
        /// <summary>A static readonly field cannot be returned by writable reference</summary>
        internal static string @ERR_RefReturnReadonlyStatic => GetResourceString("ERR_RefReturnReadonlyStatic");
        /// <summary>Members of readonly field '{0}' cannot be returned by writable reference</summary>
        internal static string @ERR_RefReturnReadonly2 => GetResourceString("ERR_RefReturnReadonly2");
        /// <summary>Fields of static readonly field '{0}' cannot be returned by writable reference</summary>
        internal static string @ERR_RefReturnReadonlyStatic2 => GetResourceString("ERR_RefReturnReadonlyStatic2");
        /// <summary>Cannot return a parameter by reference '{0}' because it is not a ref or out parameter</summary>
        internal static string @ERR_RefReturnParameter => GetResourceString("ERR_RefReturnParameter");
        /// <summary>Cannot return by reference a member of parameter '{0}' because it is not a ref or out parameter</summary>
        internal static string @ERR_RefReturnParameter2 => GetResourceString("ERR_RefReturnParameter2");
        /// <summary>Cannot return local '{0}' by reference because it is not a ref local</summary>
        internal static string @ERR_RefReturnLocal => GetResourceString("ERR_RefReturnLocal");
        /// <summary>Cannot return a member of local '{0}' by reference because it is not a ref local</summary>
        internal static string @ERR_RefReturnLocal2 => GetResourceString("ERR_RefReturnLocal2");
        /// <summary>Struct members cannot return 'this' or other instance members by reference</summary>
        internal static string @ERR_RefReturnStructThis => GetResourceString("ERR_RefReturnStructThis");
        /// <summary>Expression cannot be used in this context because it may indirectly expose variables outside of their declaration scope</summary>
        internal static string @ERR_EscapeOther => GetResourceString("ERR_EscapeOther");
        /// <summary>Cannot use local '{0}' in this context because it may expose referenced variables outside of their declaration scope</summary>
        internal static string @ERR_EscapeLocal => GetResourceString("ERR_EscapeLocal");
        /// <summary>Cannot use a result of '{0}' in this context because it may expose variables referenced by parameter '{1}' outside of their declaration scope</summary>
        internal static string @ERR_EscapeCall => GetResourceString("ERR_EscapeCall");
        /// <summary>Cannot use a member of result of '{0}' in this context because it may expose variables referenced by parameter '{1}' outside of their declaration scope</summary>
        internal static string @ERR_EscapeCall2 => GetResourceString("ERR_EscapeCall2");
        /// <summary>This combination of arguments to '{0}' is disallowed because it may expose variables referenced by parameter '{1}' outside of their declaration scope</summary>
        internal static string @ERR_CallArgMixing => GetResourceString("ERR_CallArgMixing");
        /// <summary>Branches of a ref conditional operator cannot refer to variables with incompatible declaration scopes</summary>
        internal static string @ERR_MismatchedRefEscapeInTernary => GetResourceString("ERR_MismatchedRefEscapeInTernary");
        /// <summary>A result of a stackalloc expression of type '{0}' cannot be used in this context because it may be exposed outside of the containing method</summary>
        internal static string @ERR_EscapeStackAlloc => GetResourceString("ERR_EscapeStackAlloc");
        /// <summary>Cannot initialize a by-value variable with a reference</summary>
        internal static string @ERR_InitializeByValueVariableWithReference => GetResourceString("ERR_InitializeByValueVariableWithReference");
        /// <summary>Cannot initialize a by-reference variable with a value</summary>
        internal static string @ERR_InitializeByReferenceVariableWithValue => GetResourceString("ERR_InitializeByReferenceVariableWithValue");
        /// <summary>The expression must be of type '{0}' because it is being assigned by reference</summary>
        internal static string @ERR_RefAssignmentMustHaveIdentityConversion => GetResourceString("ERR_RefAssignmentMustHaveIdentityConversion");
        /// <summary>A declaration of a by-reference variable must have an initializer</summary>
        internal static string @ERR_ByReferenceVariableMustBeInitialized => GetResourceString("ERR_ByReferenceVariableMustBeInitialized");
        /// <summary>Cannot use ref local '{0}' inside an anonymous method, lambda expression, or query expression</summary>
        internal static string @ERR_AnonDelegateCantUseLocal => GetResourceString("ERR_AnonDelegateCantUseLocal");
        /// <summary>Iterators cannot have by-reference locals</summary>
        internal static string @ERR_BadIteratorLocalType => GetResourceString("ERR_BadIteratorLocalType");
        /// <summary>Async methods cannot have by-reference locals</summary>
        internal static string @ERR_BadAsyncLocalType => GetResourceString("ERR_BadAsyncLocalType");
        /// <summary>'await' cannot be used in an expression containing a call to '{0}' because it returns by reference</summary>
        internal static string @ERR_RefReturningCallAndAwait => GetResourceString("ERR_RefReturningCallAndAwait");
        /// <summary>'await' cannot be used in an expression containing a ref conditional operator</summary>
        internal static string @ERR_RefConditionalAndAwait => GetResourceString("ERR_RefConditionalAndAwait");
        /// <summary>Both conditional operator values must be ref values or neither may be a ref value</summary>
        internal static string @ERR_RefConditionalNeedsTwoRefs => GetResourceString("ERR_RefConditionalNeedsTwoRefs");
        /// <summary>The expression must be of type '{0}' to match the alternative ref value</summary>
        internal static string @ERR_RefConditionalDifferentTypes => GetResourceString("ERR_RefConditionalDifferentTypes");
        /// <summary>An expression tree may not contain a reference to a local function</summary>
        internal static string @ERR_ExpressionTreeContainsLocalFunction => GetResourceString("ERR_ExpressionTreeContainsLocalFunction");
        /// <summary>Cannot pass argument with dynamic type to params parameter '{0}' of local function '{1}'.</summary>
        internal static string @ERR_DynamicLocalFunctionParamsParameter => GetResourceString("ERR_DynamicLocalFunctionParamsParameter");
        /// <summary>Syntax tree should be created from a submission.</summary>
        internal static string @SyntaxTreeIsNotASubmission => GetResourceString("SyntaxTreeIsNotASubmission");
        /// <summary>Combined length of user strings used by the program exceeds allowed limit. Try to decrease use of string literals.</summary>
        internal static string @ERR_TooManyUserStrings => GetResourceString("ERR_TooManyUserStrings");
        /// <summary>It is not legal to use nullable type '{0}?' in a pattern; use the underlying type '{0}' instead.</summary>
        internal static string @ERR_PatternNullableType => GetResourceString("ERR_PatternNullableType");
        /// <summary>It is not legal to use nullable reference type '{0}?' in an is-type expression; use the underlying type '{0}' instead.</summary>
        internal static string @ERR_IsNullableType => GetResourceString("ERR_IsNullableType");
        /// <summary>It is not legal to use nullable reference type '{0}?' in an as expression; use the underlying type '{0}' instead.</summary>
        internal static string @ERR_AsNullableType => GetResourceString("ERR_AsNullableType");
        /// <summary>Invalid operand for pattern match; value required, but found '{0}'.</summary>
        internal static string @ERR_BadPatternExpression => GetResourceString("ERR_BadPatternExpression");
        /// <summary>An error occurred while writing the output file: {0}.</summary>
        internal static string @ERR_PeWritingFailure => GetResourceString("ERR_PeWritingFailure");
        /// <summary>Tuple element names must be unique.</summary>
        internal static string @ERR_TupleDuplicateElementName => GetResourceString("ERR_TupleDuplicateElementName");
        /// <summary>Tuple element name '{0}' is only allowed at position {1}.</summary>
        internal static string @ERR_TupleReservedElementName => GetResourceString("ERR_TupleReservedElementName");
        /// <summary>Tuple element name '{0}' is disallowed at any position.</summary>
        internal static string @ERR_TupleReservedElementNameAnyPosition => GetResourceString("ERR_TupleReservedElementNameAnyPosition");
        /// <summary>Member '{0}' was not found on type '{1}' from assembly '{2}'.</summary>
        internal static string @ERR_PredefinedTypeMemberNotFoundInAssembly => GetResourceString("ERR_PredefinedTypeMemberNotFoundInAssembly");
        /// <summary>tuples</summary>
        internal static string @IDS_FeatureTuples => GetResourceString("IDS_FeatureTuples");
        /// <summary>No suitable 'Deconstruct' instance or extension method was found for type '{0}', with {1} out parameters and a void return type.</summary>
        internal static string @ERR_MissingDeconstruct => GetResourceString("ERR_MissingDeconstruct");
        /// <summary>Deconstruct assignment requires an expression with a type on the right-hand-side.</summary>
        internal static string @ERR_DeconstructRequiresExpression => GetResourceString("ERR_DeconstructRequiresExpression");
        /// <summary>The switch expression must be a value; found '{0}'.</summary>
        internal static string @ERR_SwitchExpressionValueExpected => GetResourceString("ERR_SwitchExpressionValueExpected");
        /// <summary>The switch case is unreachable. It has already been handled by a previous case or it is impossible to match.</summary>
        internal static string @ERR_SwitchCaseSubsumed => GetResourceString("ERR_SwitchCaseSubsumed");
        /// <summary>stdin argument '-' is specified, but input has not been redirected from the standard input stream.</summary>
        internal static string @ERR_StdInOptionProvidedButConsoleInputIsNotRedirected => GetResourceString("ERR_StdInOptionProvidedButConsoleInputIsNotRedirected");
        /// <summary>The pattern is unreachable. It has already been handled by a previous arm of the switch expression or it is impossible to match.</summary>
        internal static string @ERR_SwitchArmSubsumed => GetResourceString("ERR_SwitchArmSubsumed");
        /// <summary>An expression of type '{0}' cannot be handled by a pattern of type '{1}'.</summary>
        internal static string @ERR_PatternWrongType => GetResourceString("ERR_PatternWrongType");
        /// <summary>An expression of type '{0}' cannot be handled by a pattern of type '{1}'. Please use language version '{2}' or greater to match an open type with a constant pattern.</summary>
        internal static string @ERR_ConstantPatternVsOpenType => GetResourceString("ERR_ConstantPatternVsOpenType");
        /// <summary>Attribute '{0}' is ignored when public signing is specified.</summary>
        internal static string @WRN_AttributeIgnoredWhenPublicSigning => GetResourceString("WRN_AttributeIgnoredWhenPublicSigning");
        /// <summary>Attribute is ignored when public signing is specified.</summary>
        internal static string @WRN_AttributeIgnoredWhenPublicSigning_Title => GetResourceString("WRN_AttributeIgnoredWhenPublicSigning_Title");
        /// <summary>Option '{0}' must be an absolute path.</summary>
        internal static string @ERR_OptionMustBeAbsolutePath => GetResourceString("ERR_OptionMustBeAbsolutePath");
        /// <summary>Tuple with {0} elements cannot be converted to type '{1}'.</summary>
        internal static string @ERR_ConversionNotTupleCompatible => GetResourceString("ERR_ConversionNotTupleCompatible");
        /// <summary>out variable declaration</summary>
        internal static string @IDS_FeatureOutVar => GetResourceString("IDS_FeatureOutVar");
        /// <summary>Reference to an implicitly-typed out variable '{0}' is not permitted in the same argument list.</summary>
        internal static string @ERR_ImplicitlyTypedOutVariableUsedInTheSameArgumentList => GetResourceString("ERR_ImplicitlyTypedOutVariableUsedInTheSameArgumentList");
        /// <summary>Cannot infer the type of implicitly-typed out variable '{0}'.</summary>
        internal static string @ERR_TypeInferenceFailedForImplicitlyTypedOutVariable => GetResourceString("ERR_TypeInferenceFailedForImplicitlyTypedOutVariable");
        /// <summary>Cannot infer the type of implicitly-typed deconstruction variable '{0}'.</summary>
        internal static string @ERR_TypeInferenceFailedForImplicitlyTypedDeconstructionVariable => GetResourceString("ERR_TypeInferenceFailedForImplicitlyTypedDeconstructionVariable");
        /// <summary>Cannot infer the type of implicitly-typed discard.</summary>
        internal static string @ERR_DiscardTypeInferenceFailed => GetResourceString("ERR_DiscardTypeInferenceFailed");
        /// <summary>Cannot deconstruct a tuple of '{0}' elements into '{1}' variables.</summary>
        internal static string @ERR_DeconstructWrongCardinality => GetResourceString("ERR_DeconstructWrongCardinality");
        /// <summary>Cannot deconstruct dynamic objects.</summary>
        internal static string @ERR_CannotDeconstructDynamic => GetResourceString("ERR_CannotDeconstructDynamic");
        /// <summary>Deconstruction must contain at least two variables.</summary>
        internal static string @ERR_DeconstructTooFewElements => GetResourceString("ERR_DeconstructTooFewElements");
        /// <summary>The tuple element name '{0}' is ignored because a different name or no name is specified by the target type '{1}'.</summary>
        internal static string @WRN_TupleLiteralNameMismatch => GetResourceString("WRN_TupleLiteralNameMismatch");
        /// <summary>The tuple element name is ignored because a different name or no name is specified by the assignment target.</summary>
        internal static string @WRN_TupleLiteralNameMismatch_Title => GetResourceString("WRN_TupleLiteralNameMismatch_Title");
        /// <summary>The tuple element name '{0}' is ignored because a different name or no name is specified on the other side of the tuple == or != operator.</summary>
        internal static string @WRN_TupleBinopLiteralNameMismatch => GetResourceString("WRN_TupleBinopLiteralNameMismatch");
        /// <summary>The tuple element name is ignored because a different name or no name is specified on the other side of the tuple == or != operator.</summary>
        internal static string @WRN_TupleBinopLiteralNameMismatch_Title => GetResourceString("WRN_TupleBinopLiteralNameMismatch_Title");
        /// <summary>Predefined type '{0}' must be a struct.</summary>
        internal static string @ERR_PredefinedValueTupleTypeMustBeStruct => GetResourceString("ERR_PredefinedValueTupleTypeMustBeStruct");
        /// <summary>'new' cannot be used with tuple type. Use a tuple literal expression instead.</summary>
        internal static string @ERR_NewWithTupleTypeSyntax => GetResourceString("ERR_NewWithTupleTypeSyntax");
        /// <summary>Deconstruction 'var (...)' form disallows a specific type for 'var'.</summary>
        internal static string @ERR_DeconstructionVarFormDisallowsSpecificType => GetResourceString("ERR_DeconstructionVarFormDisallowsSpecificType");
        /// <summary>Cannot define a class or member that utilizes tuples because the compiler required type '{0}' cannot be found. Are you missing a reference?</summary>
        internal static string @ERR_TupleElementNamesAttributeMissing => GetResourceString("ERR_TupleElementNamesAttributeMissing");
        /// <summary>Cannot reference 'System.Runtime.CompilerServices.TupleElementNamesAttribute' explicitly. Use the tuple syntax to define tuple names.</summary>
        internal static string @ERR_ExplicitTupleElementNamesAttribute => GetResourceString("ERR_ExplicitTupleElementNamesAttribute");
        /// <summary>An expression tree may not contain an out argument variable declaration.</summary>
        internal static string @ERR_ExpressionTreeContainsOutVariable => GetResourceString("ERR_ExpressionTreeContainsOutVariable");
        /// <summary>An expression tree may not contain a discard.</summary>
        internal static string @ERR_ExpressionTreeContainsDiscard => GetResourceString("ERR_ExpressionTreeContainsDiscard");
        /// <summary>An expression tree may not contain an 'is' pattern-matching operator.</summary>
        internal static string @ERR_ExpressionTreeContainsIsMatch => GetResourceString("ERR_ExpressionTreeContainsIsMatch");
        /// <summary>An expression tree may not contain a tuple literal.</summary>
        internal static string @ERR_ExpressionTreeContainsTupleLiteral => GetResourceString("ERR_ExpressionTreeContainsTupleLiteral");
        /// <summary>An expression tree may not contain a tuple conversion.</summary>
        internal static string @ERR_ExpressionTreeContainsTupleConversion => GetResourceString("ERR_ExpressionTreeContainsTupleConversion");
        /// <summary>/sourcelink switch is only supported when emitting PDB.</summary>
        internal static string @ERR_SourceLinkRequiresPdb => GetResourceString("ERR_SourceLinkRequiresPdb");
        /// <summary>/embed switch is only supported when emitting a PDB.</summary>
        internal static string @ERR_CannotEmbedWithoutPdb => GetResourceString("ERR_CannotEmbedWithoutPdb");
        /// <summary>Invalid instrumentation kind: {0}</summary>
        internal static string @ERR_InvalidInstrumentationKind => GetResourceString("ERR_InvalidInstrumentationKind");
        /// <summary>Invalid hash algorithm name: '{0}'</summary>
        internal static string @ERR_InvalidHashAlgorithmName => GetResourceString("ERR_InvalidHashAlgorithmName");
        /// <summary>The syntax 'var (...)' as an lvalue is reserved.</summary>
        internal static string @ERR_VarInvocationLvalueReserved => GetResourceString("ERR_VarInvocationLvalueReserved");
        /// <summary>{ or ; or =&gt; expected</summary>
        internal static string @ERR_SemiOrLBraceOrArrowExpected => GetResourceString("ERR_SemiOrLBraceOrArrowExpected");
        /// <summary>A throw expression is not allowed in this context.</summary>
        internal static string @ERR_ThrowMisplaced => GetResourceString("ERR_ThrowMisplaced");
        /// <summary>A deconstruction cannot mix declarations and expressions on the left-hand-side.</summary>
        internal static string @ERR_MixedDeconstructionUnsupported => GetResourceString("ERR_MixedDeconstructionUnsupported");
        /// <summary>A declaration is not allowed in this context.</summary>
        internal static string @ERR_DeclarationExpressionNotPermitted => GetResourceString("ERR_DeclarationExpressionNotPermitted");
        /// <summary>A foreach loop must declare its iteration variables.</summary>
        internal static string @ERR_MustDeclareForeachIteration => GetResourceString("ERR_MustDeclareForeachIteration");
        /// <summary>Tuple element names are not permitted on the left of a deconstruction.</summary>
        internal static string @ERR_TupleElementNamesInDeconstruction => GetResourceString("ERR_TupleElementNamesInDeconstruction");
        /// <summary>To cast a negative value, you must enclose the value in parentheses.</summary>
        internal static string @ERR_PossibleBadNegCast => GetResourceString("ERR_PossibleBadNegCast");
        /// <summary>An expression tree may not contain a throw-expression.</summary>
        internal static string @ERR_ExpressionTreeContainsThrowExpression => GetResourceString("ERR_ExpressionTreeContainsThrowExpression");
        /// <summary>An expression tree may not contain a with-expression.</summary>
        internal static string @ERR_ExpressionTreeContainsWithExpression => GetResourceString("ERR_ExpressionTreeContainsWithExpression");
        /// <summary>Invalid assembly name: {0}</summary>
        internal static string @ERR_BadAssemblyName => GetResourceString("ERR_BadAssemblyName");
        /// <summary>For type '{0}' to be used as an AsyncMethodBuilder for type '{1}', its Task property should return type '{1}' instead of type '{2}'.</summary>
        internal static string @ERR_BadAsyncMethodBuilderTaskProperty => GetResourceString("ERR_BadAsyncMethodBuilderTaskProperty");
        /// <summary>Attributes are not allowed on local function parameters or type parameters</summary>
        internal static string @ERR_AttributesInLocalFuncDecl => GetResourceString("ERR_AttributesInLocalFuncDecl");
        /// <summary>Module '{0}' in assembly '{1}' is forwarding the type '{2}' to multiple assemblies: '{3}' and '{4}'.</summary>
        internal static string @ERR_TypeForwardedToMultipleAssemblies => GetResourceString("ERR_TypeForwardedToMultipleAssemblies");
        /// <summary>It is not legal to use the type 'dynamic' in a pattern.</summary>
        internal static string @ERR_PatternDynamicType => GetResourceString("ERR_PatternDynamicType");
        /// <summary>Provided documentation mode is unsupported or invalid: '{0}'.</summary>
        internal static string @ERR_BadDocumentationMode => GetResourceString("ERR_BadDocumentationMode");
        /// <summary>Provided source code kind is unsupported or invalid: '{0}'</summary>
        internal static string @ERR_BadSourceCodeKind => GetResourceString("ERR_BadSourceCodeKind");
        /// <summary>Provided language version is unsupported or invalid: '{0}'.</summary>
        internal static string @ERR_BadLanguageVersion => GetResourceString("ERR_BadLanguageVersion");
        /// <summary>Invalid name for a preprocessing symbol; '{0}' is not a valid identifier</summary>
        internal static string @ERR_InvalidPreprocessingSymbol => GetResourceString("ERR_InvalidPreprocessingSymbol");
        /// <summary>Feature '{0}' is not available in C# 7.1. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion7_1 => GetResourceString("ERR_FeatureNotAvailableInVersion7_1");
        /// <summary>Feature '{0}' is not available in C# 7.2. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion7_2 => GetResourceString("ERR_FeatureNotAvailableInVersion7_2");
        /// <summary>Feature '{0}' is not available in C# 7.3. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion7_3 => GetResourceString("ERR_FeatureNotAvailableInVersion7_3");
        /// <summary>Feature '{0}' is not available in C# 8.0. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion8 => GetResourceString("ERR_FeatureNotAvailableInVersion8");
        /// <summary>Specified language version '{0}' cannot have leading zeroes</summary>
        internal static string @ERR_LanguageVersionCannotHaveLeadingZeroes => GetResourceString("ERR_LanguageVersionCannotHaveLeadingZeroes");
        /// <summary>A value of type 'void' may not be assigned.</summary>
        internal static string @ERR_VoidAssignment => GetResourceString("ERR_VoidAssignment");
        /// <summary>'{0}' is for evaluation purposes only and is subject to change or removal in future updates.</summary>
        internal static string @WRN_Experimental => GetResourceString("WRN_Experimental");
        /// <summary>Type is for evaluation purposes only and is subject to change or removal in future updates.</summary>
        internal static string @WRN_Experimental_Title => GetResourceString("WRN_Experimental_Title");
        /// <summary>Compiler version: '{0}'. Language version: {1}.</summary>
        internal static string @ERR_CompilerAndLanguageVersion => GetResourceString("ERR_CompilerAndLanguageVersion");
        /// <summary>async main</summary>
        internal static string @IDS_FeatureAsyncMain => GetResourceString("IDS_FeatureAsyncMain");
        /// <summary>Tuple element name '{0}' is inferred. Please use language version {1} or greater to access an element by its inferred name.</summary>
        internal static string @ERR_TupleInferredNamesNotAvailable => GetResourceString("ERR_TupleInferredNamesNotAvailable");
        /// <summary>To use '@$' instead of '$@' for an interpolated verbatim string, please use language version '{0}' or greater.</summary>
        internal static string @ERR_AltInterpolatedVerbatimStringsNotAvailable => GetResourceString("ERR_AltInterpolatedVerbatimStringsNotAvailable");
        /// <summary>Field-targeted attributes on auto-properties are not supported in language version {0}. Please use language version {1} or greater.</summary>
        internal static string @WRN_AttributesOnBackingFieldsNotAvailable => GetResourceString("WRN_AttributesOnBackingFieldsNotAvailable");
        /// <summary>Field-targeted attributes on auto-properties are not supported in this version of the language.</summary>
        internal static string @WRN_AttributesOnBackingFieldsNotAvailable_Title => GetResourceString("WRN_AttributesOnBackingFieldsNotAvailable_Title");
        /// <summary>A tuple may not contain a value of type 'void'.</summary>
        internal static string @ERR_VoidInTuple => GetResourceString("ERR_VoidInTuple");
        /// <summary>nullable reference types</summary>
        internal static string @IDS_FeatureNullableReferenceTypes => GetResourceString("IDS_FeatureNullableReferenceTypes");
        /// <summary>warning action enable</summary>
        internal static string @IDS_FeaturePragmaWarningEnable => GetResourceString("IDS_FeaturePragmaWarningEnable");
        /// <summary>Converting null literal or possible null value to non-nullable type.</summary>
        internal static string @WRN_ConvertingNullableToNonNullable => GetResourceString("WRN_ConvertingNullableToNonNullable");
        /// <summary>Converting null literal or possible null value to non-nullable type.</summary>
        internal static string @WRN_ConvertingNullableToNonNullable_Title => GetResourceString("WRN_ConvertingNullableToNonNullable_Title");
        /// <summary>Possible null reference assignment.</summary>
        internal static string @WRN_NullReferenceAssignment => GetResourceString("WRN_NullReferenceAssignment");
        /// <summary>Possible null reference assignment.</summary>
        internal static string @WRN_NullReferenceAssignment_Title => GetResourceString("WRN_NullReferenceAssignment_Title");
        /// <summary>Dereference of a possibly null reference.</summary>
        internal static string @WRN_NullReferenceReceiver => GetResourceString("WRN_NullReferenceReceiver");
        /// <summary>Dereference of a possibly null reference.</summary>
        internal static string @WRN_NullReferenceReceiver_Title => GetResourceString("WRN_NullReferenceReceiver_Title");
        /// <summary>Possible null reference return.</summary>
        internal static string @WRN_NullReferenceReturn => GetResourceString("WRN_NullReferenceReturn");
        /// <summary>Possible null reference return.</summary>
        internal static string @WRN_NullReferenceReturn_Title => GetResourceString("WRN_NullReferenceReturn_Title");
        /// <summary>Possible null reference argument for parameter '{0}' in '{1}'.</summary>
        internal static string @WRN_NullReferenceArgument => GetResourceString("WRN_NullReferenceArgument");
        /// <summary>Possible null reference argument.</summary>
        internal static string @WRN_NullReferenceArgument_Title => GetResourceString("WRN_NullReferenceArgument_Title");
        /// <summary>Thrown value may be null.</summary>
        internal static string @WRN_ThrowPossibleNull => GetResourceString("WRN_ThrowPossibleNull");
        /// <summary>Thrown value may be null.</summary>
        internal static string @WRN_ThrowPossibleNull_Title => GetResourceString("WRN_ThrowPossibleNull_Title");
        /// <summary>Unboxing a possibly null value.</summary>
        internal static string @WRN_UnboxPossibleNull => GetResourceString("WRN_UnboxPossibleNull");
        /// <summary>Unboxing a possibly null value.</summary>
        internal static string @WRN_UnboxPossibleNull_Title => GetResourceString("WRN_UnboxPossibleNull_Title");
        /// <summary>Nullability of reference types in type doesn't match overridden member.</summary>
        internal static string @WRN_NullabilityMismatchInTypeOnOverride => GetResourceString("WRN_NullabilityMismatchInTypeOnOverride");
        /// <summary>Nullability of reference types in type doesn't match overridden member.</summary>
        internal static string @WRN_NullabilityMismatchInTypeOnOverride_Title => GetResourceString("WRN_NullabilityMismatchInTypeOnOverride_Title");
        /// <summary>Nullability of reference types in return type doesn't match overridden member.</summary>
        internal static string @WRN_NullabilityMismatchInReturnTypeOnOverride => GetResourceString("WRN_NullabilityMismatchInReturnTypeOnOverride");
        /// <summary>Nullability of reference types in return type doesn't match overridden member.</summary>
        internal static string @WRN_NullabilityMismatchInReturnTypeOnOverride_Title => GetResourceString("WRN_NullabilityMismatchInReturnTypeOnOverride_Title");
        /// <summary>Nullability of return type doesn't match overridden member (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride => GetResourceString("WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride");
        /// <summary>Nullability of return type doesn't match overridden member (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride_Title => GetResourceString("WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride_Title");
        /// <summary>Nullability of reference types in type of parameter '{0}' doesn't match overridden member.</summary>
        internal static string @WRN_NullabilityMismatchInParameterTypeOnOverride => GetResourceString("WRN_NullabilityMismatchInParameterTypeOnOverride");
        /// <summary>Nullability of reference types in type of parameter doesn't match overridden member.</summary>
        internal static string @WRN_NullabilityMismatchInParameterTypeOnOverride_Title => GetResourceString("WRN_NullabilityMismatchInParameterTypeOnOverride_Title");
        /// <summary>Nullability of type of parameter '{0}' doesn't match overridden member (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride => GetResourceString("WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride");
        /// <summary>Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride_Title => GetResourceString("WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride_Title");
        /// <summary>Nullability of reference types in type of parameter '{0}' doesn't match partial method declaration.</summary>
        internal static string @WRN_NullabilityMismatchInParameterTypeOnPartial => GetResourceString("WRN_NullabilityMismatchInParameterTypeOnPartial");
        /// <summary>Nullability of reference types in type of parameter doesn't match partial method declaration.</summary>
        internal static string @WRN_NullabilityMismatchInParameterTypeOnPartial_Title => GetResourceString("WRN_NullabilityMismatchInParameterTypeOnPartial_Title");
        /// <summary>Nullability of reference types in return type doesn't match partial method declaration.</summary>
        internal static string @WRN_NullabilityMismatchInReturnTypeOnPartial => GetResourceString("WRN_NullabilityMismatchInReturnTypeOnPartial");
        /// <summary>Nullability of reference types in return type doesn't match partial method declaration.</summary>
        internal static string @WRN_NullabilityMismatchInReturnTypeOnPartial_Title => GetResourceString("WRN_NullabilityMismatchInReturnTypeOnPartial_Title");
        /// <summary>Nullability of reference types in type of '{0}' doesn't match implicitly implemented member '{1}'.</summary>
        internal static string @WRN_NullabilityMismatchInTypeOnImplicitImplementation => GetResourceString("WRN_NullabilityMismatchInTypeOnImplicitImplementation");
        /// <summary>Nullability of reference types in type doesn't match implicitly implemented member.</summary>
        internal static string @WRN_NullabilityMismatchInTypeOnImplicitImplementation_Title => GetResourceString("WRN_NullabilityMismatchInTypeOnImplicitImplementation_Title");
        /// <summary>Nullability of reference types in return type of '{0}' doesn't match implicitly implemented member '{1}'.</summary>
        internal static string @WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation => GetResourceString("WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation");
        /// <summary>Nullability of reference types in return type doesn't match implicitly implemented member.</summary>
        internal static string @WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation_Title => GetResourceString("WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation_Title");
        /// <summary>Nullability of reference types in type of parameter '{0}' of '{1}' doesn't match implicitly implemented member '{2}'.</summary>
        internal static string @WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation => GetResourceString("WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation");
        /// <summary>Nullability of reference types in type of parameter doesn't match implicitly implemented member.</summary>
        internal static string @WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation_Title => GetResourceString("WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation_Title");
        /// <summary>Nullability of reference types in return type of '{0}' doesn't match implicitly implemented member '{1}' (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation => GetResourceString("WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation");
        /// <summary>Nullability of reference types in return type doesn't match implicitly implemented member (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation_Title => GetResourceString("WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation_Title");
        /// <summary>Nullability of reference types in type of parameter '{0}' of '{1}' doesn't match implicitly implemented member '{2}' (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation => GetResourceString("WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation");
        /// <summary>Nullability of reference types in type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation_Title => GetResourceString("WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation_Title");
        /// <summary>Nullability of reference types in type doesn't match implemented member '{0}'.</summary>
        internal static string @WRN_NullabilityMismatchInTypeOnExplicitImplementation => GetResourceString("WRN_NullabilityMismatchInTypeOnExplicitImplementation");
        /// <summary>Nullability of reference types in type doesn't match implemented member.</summary>
        internal static string @WRN_NullabilityMismatchInTypeOnExplicitImplementation_Title => GetResourceString("WRN_NullabilityMismatchInTypeOnExplicitImplementation_Title");
        /// <summary>Nullability of reference types in return type doesn't match implemented member '{0}'.</summary>
        internal static string @WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation => GetResourceString("WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation");
        /// <summary>Nullability of reference types in return type doesn't match implemented member.</summary>
        internal static string @WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation_Title => GetResourceString("WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation_Title");
        /// <summary>Nullability of reference types in type of parameter '{0}' doesn't match implemented member '{1}'.</summary>
        internal static string @WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation => GetResourceString("WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation");
        /// <summary>Nullability of reference types in type of parameter doesn't match implemented member.</summary>
        internal static string @WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation_Title => GetResourceString("WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation_Title");
        /// <summary>Nullability of reference types in return type doesn't match implemented member '{0}' (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation => GetResourceString("WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation");
        /// <summary>Nullability of reference types in return type doesn't match implemented member (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation_Title => GetResourceString("WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation_Title");
        /// <summary>Nullability of reference types in type of parameter '{0}' doesn't match implemented member '{1}' (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation => GetResourceString("WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation");
        /// <summary>Nullability of reference types in type of parameter doesn't match implemented member (possibly because of nullability attributes).</summary>
        internal static string @WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation_Title => GetResourceString("WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation_Title");
        /// <summary>Non-nullable {0} '{1}' must contain a non-null value when exiting constructor. Consider declaring the {0} as nullable.</summary>
        internal static string @WRN_UninitializedNonNullableField => GetResourceString("WRN_UninitializedNonNullableField");
        /// <summary>Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.</summary>
        internal static string @WRN_UninitializedNonNullableField_Title => GetResourceString("WRN_UninitializedNonNullableField_Title");
        /// <summary>Nullability of reference types in value of type '{0}' doesn't match target type '{1}'.</summary>
        internal static string @WRN_NullabilityMismatchInAssignment => GetResourceString("WRN_NullabilityMismatchInAssignment");
        /// <summary>Nullability of reference types in value doesn't match target type.</summary>
        internal static string @WRN_NullabilityMismatchInAssignment_Title => GetResourceString("WRN_NullabilityMismatchInAssignment_Title");
        /// <summary>Call to non-readonly member '{0}' from a 'readonly' member results in an implicit copy of '{1}'.</summary>
        internal static string @WRN_ImplicitCopyInReadOnlyMember => GetResourceString("WRN_ImplicitCopyInReadOnlyMember");
        /// <summary>Call to non-readonly member from a 'readonly' member results in an implicit copy.</summary>
        internal static string @WRN_ImplicitCopyInReadOnlyMember_Title => GetResourceString("WRN_ImplicitCopyInReadOnlyMember_Title");
        /// <summary>Static member '{0}' cannot be marked 'readonly'.</summary>
        internal static string @ERR_StaticMemberCantBeReadOnly => GetResourceString("ERR_StaticMemberCantBeReadOnly");
        /// <summary>Auto-implemented 'set' accessor '{0}' cannot be marked 'readonly'.</summary>
        internal static string @ERR_AutoSetterCantBeReadOnly => GetResourceString("ERR_AutoSetterCantBeReadOnly");
        /// <summary>Auto-implemented property '{0}' cannot be marked 'readonly' because it has a 'set' accessor.</summary>
        internal static string @ERR_AutoPropertyWithSetterCantBeReadOnly => GetResourceString("ERR_AutoPropertyWithSetterCantBeReadOnly");
        /// <summary>Cannot specify 'readonly' modifiers on both property or indexer '{0}' and its accessor. Remove one of them.</summary>
        internal static string @ERR_InvalidPropertyReadOnlyMods => GetResourceString("ERR_InvalidPropertyReadOnlyMods");
        /// <summary>Cannot specify 'readonly' modifiers on both accessors of property or indexer '{0}'. Instead, put a 'readonly' modifier on the property itself.</summary>
        internal static string @ERR_DuplicatePropertyReadOnlyMods => GetResourceString("ERR_DuplicatePropertyReadOnlyMods");
        /// <summary>Field-like event '{0}' cannot be 'readonly'.</summary>
        internal static string @ERR_FieldLikeEventCantBeReadOnly => GetResourceString("ERR_FieldLikeEventCantBeReadOnly");
        /// <summary>Both partial method declarations must be readonly or neither may be readonly</summary>
        internal static string @ERR_PartialMethodReadOnlyDifference => GetResourceString("ERR_PartialMethodReadOnlyDifference");
        /// <summary>'{0}': 'readonly' can only be used on accessors if the property or indexer has both a get and a set accessor</summary>
        internal static string @ERR_ReadOnlyModMissingAccessor => GetResourceString("ERR_ReadOnlyModMissingAccessor");
        /// <summary>Argument of type '{0}' cannot be used for parameter '{2}' of type '{1}' in '{3}' due to differences in the nullability of reference types.</summary>
        internal static string @WRN_NullabilityMismatchInArgument => GetResourceString("WRN_NullabilityMismatchInArgument");
        /// <summary>Argument cannot be used for parameter due to differences in the nullability of reference types.</summary>
        internal static string @WRN_NullabilityMismatchInArgument_Title => GetResourceString("WRN_NullabilityMismatchInArgument_Title");
        /// <summary>Argument of type '{0}' cannot be used as an output of type '{1}' for parameter '{2}' in '{3}' due to differences in the nullability of reference types.</summary>
        internal static string @WRN_NullabilityMismatchInArgumentForOutput => GetResourceString("WRN_NullabilityMismatchInArgumentForOutput");
        /// <summary>Argument cannot be used as an output for parameter due to differences in the nullability of reference types.</summary>
        internal static string @WRN_NullabilityMismatchInArgumentForOutput_Title => GetResourceString("WRN_NullabilityMismatchInArgumentForOutput_Title");
        /// <summary>A possible null value may not be used for a type marked with [NotNull] or [DisallowNull]</summary>
        internal static string @WRN_DisallowNullAttributeForbidsMaybeNullAssignment => GetResourceString("WRN_DisallowNullAttributeForbidsMaybeNullAssignment");
        /// <summary>A possible null value may not be used for a type marked with [NotNull] or [DisallowNull]</summary>
        internal static string @WRN_DisallowNullAttributeForbidsMaybeNullAssignment_Title => GetResourceString("WRN_DisallowNullAttributeForbidsMaybeNullAssignment_Title");
        /// <summary>Parameter '{0}' must have a non-null value when exiting with '{1}'.</summary>
        internal static string @WRN_ParameterConditionallyDisallowsNull => GetResourceString("WRN_ParameterConditionallyDisallowsNull");
        /// <summary>Parameter must have a non-null value when exiting in some condition.</summary>
        internal static string @WRN_ParameterConditionallyDisallowsNull_Title => GetResourceString("WRN_ParameterConditionallyDisallowsNull_Title");
        /// <summary>Parameter '{0}' must have a non-null value when exiting.</summary>
        internal static string @WRN_ParameterDisallowsNull => GetResourceString("WRN_ParameterDisallowsNull");
        /// <summary>Parameter must have a non-null value when exiting.</summary>
        internal static string @WRN_ParameterDisallowsNull_Title => GetResourceString("WRN_ParameterDisallowsNull_Title");
        /// <summary>Parameter '{0}' must have a non-null value when exiting because parameter '{1}' is non-null.</summary>
        internal static string @WRN_ParameterNotNullIfNotNull => GetResourceString("WRN_ParameterNotNullIfNotNull");
        /// <summary>Parameter must have a non-null value when exiting because parameter referenced by NotNullIfNotNull is non-null.</summary>
        internal static string @WRN_ParameterNotNullIfNotNull_Title => GetResourceString("WRN_ParameterNotNullIfNotNull_Title");
        /// <summary>Return value must be non-null because parameter '{0}' is non-null.</summary>
        internal static string @WRN_ReturnNotNullIfNotNull => GetResourceString("WRN_ReturnNotNullIfNotNull");
        /// <summary>Return value must be non-null because parameter is non-null.</summary>
        internal static string @WRN_ReturnNotNullIfNotNull_Title => GetResourceString("WRN_ReturnNotNullIfNotNull_Title");
        /// <summary>Member '{0}' must have a non-null value when exiting.</summary>
        internal static string @WRN_MemberNotNull => GetResourceString("WRN_MemberNotNull");
        /// <summary>Member must have a non-null value when exiting.</summary>
        internal static string @WRN_MemberNotNull_Title => GetResourceString("WRN_MemberNotNull_Title");
        /// <summary>Member '{0}' cannot be used in this attribute.</summary>
        internal static string @WRN_MemberNotNullBadMember => GetResourceString("WRN_MemberNotNullBadMember");
        /// <summary>Member cannot be used in this attribute.</summary>
        internal static string @WRN_MemberNotNullBadMember_Title => GetResourceString("WRN_MemberNotNullBadMember_Title");
        /// <summary>Member '{0}' must have a non-null value when exiting with '{1}'.</summary>
        internal static string @WRN_MemberNotNullWhen => GetResourceString("WRN_MemberNotNullWhen");
        /// <summary>Member must have a non-null value when exiting in some condition.</summary>
        internal static string @WRN_MemberNotNullWhen_Title => GetResourceString("WRN_MemberNotNullWhen_Title");
        /// <summary>A method marked [DoesNotReturn] should not return.</summary>
        internal static string @WRN_ShouldNotReturn => GetResourceString("WRN_ShouldNotReturn");
        /// <summary>A method marked [DoesNotReturn] should not return.</summary>
        internal static string @WRN_ShouldNotReturn_Title => GetResourceString("WRN_ShouldNotReturn_Title");
        /// <summary>Method '{0}' lacks `[DoesNotReturn]` annotation to match implemented or overridden member.</summary>
        internal static string @WRN_DoesNotReturnMismatch => GetResourceString("WRN_DoesNotReturnMismatch");
        /// <summary>Method lacks `[DoesNotReturn]` annotation to match implemented or overridden member.</summary>
        internal static string @WRN_DoesNotReturnMismatch_Title => GetResourceString("WRN_DoesNotReturnMismatch_Title");
        /// <summary>Nullability of reference types in return type of '{0}' doesn't match the target delegate '{1}' (possibly because of nullability attributes).</summary>
        internal static string @WRN_NullabilityMismatchInReturnTypeOfTargetDelegate => GetResourceString("WRN_NullabilityMismatchInReturnTypeOfTargetDelegate");
        /// <summary>Nullability of reference types in return type doesn't match the target delegate (possibly because of nullability attributes).</summary>
        internal static string @WRN_NullabilityMismatchInReturnTypeOfTargetDelegate_Title => GetResourceString("WRN_NullabilityMismatchInReturnTypeOfTargetDelegate_Title");
        /// <summary>Nullability of reference types in type of parameter '{0}' of '{1}' doesn't match the target delegate '{2}' (possibly because of nullability attributes).</summary>
        internal static string @WRN_NullabilityMismatchInParameterTypeOfTargetDelegate => GetResourceString("WRN_NullabilityMismatchInParameterTypeOfTargetDelegate");
        /// <summary>Nullability of reference types in type of parameter doesn't match the target delegate (possibly because of nullability attributes).</summary>
        internal static string @WRN_NullabilityMismatchInParameterTypeOfTargetDelegate_Title => GetResourceString("WRN_NullabilityMismatchInParameterTypeOfTargetDelegate_Title");
        /// <summary>Cannot convert null literal to non-nullable reference type.</summary>
        internal static string @WRN_NullAsNonNullable => GetResourceString("WRN_NullAsNonNullable");
        /// <summary>Cannot convert null literal to non-nullable reference type.</summary>
        internal static string @WRN_NullAsNonNullable_Title => GetResourceString("WRN_NullAsNonNullable_Title");
        /// <summary>Cannot use a nullable reference type in object creation.</summary>
        internal static string @ERR_AnnotationDisallowedInObjectCreation => GetResourceString("ERR_AnnotationDisallowedInObjectCreation");
        /// <summary>Nullable value type may be null.</summary>
        internal static string @WRN_NullableValueTypeMayBeNull => GetResourceString("WRN_NullableValueTypeMayBeNull");
        /// <summary>Nullable value type may be null.</summary>
        internal static string @WRN_NullableValueTypeMayBeNull_Title => GetResourceString("WRN_NullableValueTypeMayBeNull_Title");
        /// <summary>The type '{3}' cannot be used as type parameter '{2}' in the generic type or method '{0}'. Nullability of type argument '{3}' doesn't match constraint type '{1}'.</summary>
        internal static string @WRN_NullabilityMismatchInTypeParameterConstraint => GetResourceString("WRN_NullabilityMismatchInTypeParameterConstraint");
        /// <summary>The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn't match constraint type.</summary>
        internal static string @WRN_NullabilityMismatchInTypeParameterConstraint_Title => GetResourceString("WRN_NullabilityMismatchInTypeParameterConstraint_Title");
        /// <summary>The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.</summary>
        internal static string @WRN_MissingNonNullTypesContextForAnnotation => GetResourceString("WRN_MissingNonNullTypesContextForAnnotation");
        /// <summary>The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.</summary>
        internal static string @WRN_MissingNonNullTypesContextForAnnotation_Title => GetResourceString("WRN_MissingNonNullTypesContextForAnnotation_Title");
        /// <summary>Explicit application of 'System.Runtime.CompilerServices.NullableAttribute' is not allowed.</summary>
        internal static string @ERR_ExplicitNullableAttribute => GetResourceString("ERR_ExplicitNullableAttribute");
        /// <summary>A nullable type parameter must be known to be a value type or non-nullable reference type unless language version '{0}' or greater is used. Consider changing the language version or adding a 'class', 'struct', or type constraint.</summary>
        internal static string @ERR_NullableUnconstrainedTypeParameter => GetResourceString("ERR_NullableUnconstrainedTypeParameter");
        /// <summary>Invalid '{0}' value: '{1}' for C# {2}. Please use language version '{3}' or greater.</summary>
        internal static string @ERR_NullableOptionNotAvailable => GetResourceString("ERR_NullableOptionNotAvailable");
        /// <summary>A void or int returning entry point cannot be async</summary>
        internal static string @ERR_NonTaskMainCantBeAsync => GetResourceString("ERR_NonTaskMainCantBeAsync");
        /// <summary>An expression of type '{0}' cannot be handled by a pattern of type '{1}' in C# {2}. Please use language version {3} or greater.</summary>
        internal static string @ERR_PatternWrongGenericTypeInVersion => GetResourceString("ERR_PatternWrongGenericTypeInVersion");
        /// <summary>The local function '{0}' is declared but never used</summary>
        internal static string @WRN_UnreferencedLocalFunction => GetResourceString("WRN_UnreferencedLocalFunction");
        /// <summary>Local function is declared but never used</summary>
        internal static string @WRN_UnreferencedLocalFunction_Title => GetResourceString("WRN_UnreferencedLocalFunction_Title");
        /// <summary>Local function '{0}' must declare a body because it is not marked 'static extern'.</summary>
        internal static string @ERR_LocalFunctionMissingBody => GetResourceString("ERR_LocalFunctionMissingBody");
        /// <summary>Unable to read debug information of method '{0}' (token 0x{1:X8}) from assembly '{2}'</summary>
        internal static string @ERR_InvalidDebugInfo => GetResourceString("ERR_InvalidDebugInfo");
        /// <summary>{0} is not a valid C# conversion expression</summary>
        internal static string @IConversionExpressionIsNotCSharpConversion => GetResourceString("IConversionExpressionIsNotCSharpConversion");
        /// <summary>Cannot pass argument with dynamic type to generic local function '{0}' with inferred type arguments.</summary>
        internal static string @ERR_DynamicLocalFunctionTypeParameter => GetResourceString("ERR_DynamicLocalFunctionTypeParameter");
        /// <summary>leading digit separator</summary>
        internal static string @IDS_FeatureLeadingDigitSeparator => GetResourceString("IDS_FeatureLeadingDigitSeparator");
        /// <summary>Do not use '{0}'. This is reserved for compiler usage.</summary>
        internal static string @ERR_ExplicitReservedAttr => GetResourceString("ERR_ExplicitReservedAttr");
        /// <summary>The type name '{0}' is reserved to be used by the compiler.</summary>
        internal static string @ERR_TypeReserved => GetResourceString("ERR_TypeReserved");
        /// <summary>The first parameter of the 'in' extension method '{0}' must be a concrete (non-generic) value type.</summary>
        internal static string @ERR_InExtensionMustBeValueType => GetResourceString("ERR_InExtensionMustBeValueType");
        /// <summary>Instance fields of readonly structs must be readonly.</summary>
        internal static string @ERR_FieldsInRoStruct => GetResourceString("ERR_FieldsInRoStruct");
        /// <summary>Auto-implemented instance properties in readonly structs must be readonly.</summary>
        internal static string @ERR_AutoPropsInRoStruct => GetResourceString("ERR_AutoPropsInRoStruct");
        /// <summary>Field-like events are not allowed in readonly structs.</summary>
        internal static string @ERR_FieldlikeEventsInRoStruct => GetResourceString("ERR_FieldlikeEventsInRoStruct");
        /// <summary>ref extension methods</summary>
        internal static string @IDS_FeatureRefExtensionMethods => GetResourceString("IDS_FeatureRefExtensionMethods");
        /// <summary>Conversion of a stackalloc expression of type '{0}' to type '{1}' is not possible.</summary>
        internal static string @ERR_StackAllocConversionNotPossible => GetResourceString("ERR_StackAllocConversionNotPossible");
        /// <summary>The first parameter of a 'ref' extension method '{0}' must be a value type or a generic type constrained to struct.</summary>
        internal static string @ERR_RefExtensionMustBeValueTypeOrConstrainedToOne => GetResourceString("ERR_RefExtensionMustBeValueTypeOrConstrainedToOne");
        /// <summary>An in parameter cannot have the Out attribute.</summary>
        internal static string @ERR_OutAttrOnInParam => GetResourceString("ERR_OutAttrOnInParam");
        /// <summary>{0} is not a valid C# compound assignment operation</summary>
        internal static string @ICompoundAssignmentOperationIsNotCSharpCompoundAssignment => GetResourceString("ICompoundAssignmentOperationIsNotCSharpCompoundAssignment");
        /// <summary>Filter expression is a constant 'false', consider removing the catch clause</summary>
        internal static string @WRN_FilterIsConstantFalse => GetResourceString("WRN_FilterIsConstantFalse");
        /// <summary>Filter expression is a constant 'false'</summary>
        internal static string @WRN_FilterIsConstantFalse_Title => GetResourceString("WRN_FilterIsConstantFalse_Title");
        /// <summary>Filter expression is a constant 'false', consider removing the try-catch block</summary>
        internal static string @WRN_FilterIsConstantFalseRedundantTryCatch => GetResourceString("WRN_FilterIsConstantFalseRedundantTryCatch");
        /// <summary>Filter expression is a constant 'false'.</summary>
        internal static string @WRN_FilterIsConstantFalseRedundantTryCatch_Title => GetResourceString("WRN_FilterIsConstantFalseRedundantTryCatch_Title");
        /// <summary>A conditional expression cannot be used directly in a string interpolation because the ':' ends the interpolation. Parenthesize the conditional expression.</summary>
        internal static string @ERR_ConditionalInInterpolation => GetResourceString("ERR_ConditionalInInterpolation");
        /// <summary>Arguments with 'in' modifier cannot be used in dynamically dispatched expressions.</summary>
        internal static string @ERR_InDynamicMethodArg => GetResourceString("ERR_InDynamicMethodArg");
        /// <summary>Tuple types used as operands of an == or != operator must have matching cardinalities. But this operator has tuple types of cardinality {0} on the left and {1} on the right.</summary>
        internal static string @ERR_TupleSizesMismatchForBinOps => GetResourceString("ERR_TupleSizesMismatchForBinOps");
        /// <summary>The left-hand side of a ref assignment must be a ref local or parameter.</summary>
        internal static string @ERR_RefLocalOrParamExpected => GetResourceString("ERR_RefLocalOrParamExpected");
        /// <summary>Cannot ref-assign '{1}' to '{0}' because '{1}' has a narrower escape scope than '{0}'.</summary>
        internal static string @ERR_RefAssignNarrower => GetResourceString("ERR_RefAssignNarrower");
        /// <summary>enum generic type constraints</summary>
        internal static string @IDS_FeatureEnumGenericTypeConstraint => GetResourceString("IDS_FeatureEnumGenericTypeConstraint");
        /// <summary>delegate generic type constraints</summary>
        internal static string @IDS_FeatureDelegateGenericTypeConstraint => GetResourceString("IDS_FeatureDelegateGenericTypeConstraint");
        /// <summary>unmanaged generic type constraints</summary>
        internal static string @IDS_FeatureUnmanagedGenericTypeConstraint => GetResourceString("IDS_FeatureUnmanagedGenericTypeConstraint");
        /// <summary>The 'new()' constraint cannot be used with the 'unmanaged' constraint</summary>
        internal static string @ERR_NewBoundWithUnmanaged => GetResourceString("ERR_NewBoundWithUnmanaged");
        /// <summary>The type '{2}' must be a non-nullable value type, along with all fields at any level of nesting, in order to use it as parameter '{1}' in the generic type or method '{0}'</summary>
        internal static string @ERR_UnmanagedConstraintNotSatisfied => GetResourceString("ERR_UnmanagedConstraintNotSatisfied");
        /// <summary>Type parameter '{1}' has the 'unmanaged' constraint so '{1}' cannot be used as a constraint for '{0}'</summary>
        internal static string @ERR_ConWithUnmanagedCon => GetResourceString("ERR_ConWithUnmanagedCon");
        /// <summary>stackalloc initializer</summary>
        internal static string @IDS_FeatureStackAllocInitializer => GetResourceString("IDS_FeatureStackAllocInitializer");
        /// <summary>"Invalid rank specifier: expected ']'</summary>
        internal static string @ERR_InvalidStackAllocArray => GetResourceString("ERR_InvalidStackAllocArray");
        /// <summary>declaration of expression variables in member initializers and queries</summary>
        internal static string @IDS_FeatureExpressionVariablesInQueriesAndInitializers => GetResourceString("IDS_FeatureExpressionVariablesInQueriesAndInitializers");
        /// <summary>Pattern missing</summary>
        internal static string @ERR_MissingPattern => GetResourceString("ERR_MissingPattern");
        /// <summary>recursive patterns</summary>
        internal static string @IDS_FeatureRecursivePatterns => GetResourceString("IDS_FeatureRecursivePatterns");
        /// <summary>null pointer constant pattern</summary>
        internal static string @IDS_FeatureNullPointerConstantPattern => GetResourceString("IDS_FeatureNullPointerConstantPattern");
        /// <summary>default type parameter constraints</summary>
        internal static string @IDS_FeatureDefaultTypeParameterConstraint => GetResourceString("IDS_FeatureDefaultTypeParameterConstraint");
        /// <summary>Matching the tuple type '{0}' requires '{1}' subpatterns, but '{2}' subpatterns are present.</summary>
        internal static string @ERR_WrongNumberOfSubpatterns => GetResourceString("ERR_WrongNumberOfSubpatterns");
        /// <summary>A property subpattern requires a reference to the property or field to be matched, e.g. '{{ Name: {0} }}'</summary>
        internal static string @ERR_PropertyPatternNameMissing => GetResourceString("ERR_PropertyPatternNameMissing");
        /// <summary>A default literal 'default' is not valid as a pattern. Use another literal (e.g. '0' or 'null') as appropriate. To match everything, use a discard pattern '_'.</summary>
        internal static string @ERR_DefaultPattern => GetResourceString("ERR_DefaultPattern");
        /// <summary>No best type was found for the switch expression.</summary>
        internal static string @ERR_SwitchExpressionNoBestType => GetResourceString("ERR_SwitchExpressionNoBestType");
        /// <summary>There is no target type for the default literal.</summary>
        internal static string @ERR_DefaultLiteralNoTargetType => GetResourceString("ERR_DefaultLiteralNoTargetType");
        /// <summary>A single-element deconstruct pattern requires some other syntax for disambiguation. It is recommended to add a discard designator '_' after the close paren ')'.</summary>
        internal static string @ERR_SingleElementPositionalPatternRequiresDisambiguation => GetResourceString("ERR_SingleElementPositionalPatternRequiresDisambiguation");
        /// <summary>The syntax 'var' for a pattern is not permitted to refer to a type, but '{0}' is in scope here.</summary>
        internal static string @ERR_VarMayNotBindToType => GetResourceString("ERR_VarMayNotBindToType");
        /// <summary>The switch expression does not handle all possible values of its input type (it is not exhaustive). For example, the pattern '{0}' is not covered.</summary>
        internal static string @WRN_SwitchExpressionNotExhaustive => GetResourceString("WRN_SwitchExpressionNotExhaustive");
        /// <summary>The switch expression does not handle all possible values of its input type (it is not exhaustive).</summary>
        internal static string @WRN_SwitchExpressionNotExhaustive_Title => GetResourceString("WRN_SwitchExpressionNotExhaustive_Title");
        /// <summary>The switch expression does not handle all possible values of its input type (it is not exhaustive). For example, the pattern '{0}' is not covered. However, a pattern with a 'when' clause might successfully match this value.</summary>
        internal static string @WRN_SwitchExpressionNotExhaustiveWithWhen => GetResourceString("WRN_SwitchExpressionNotExhaustiveWithWhen");
        /// <summary>The switch expression does not handle all possible values of its input type (it is not exhaustive).</summary>
        internal static string @WRN_SwitchExpressionNotExhaustiveWithWhen_Title => GetResourceString("WRN_SwitchExpressionNotExhaustiveWithWhen_Title");
        /// <summary>The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value. For example, the pattern '{0}' is not covered.</summary>
        internal static string @WRN_SwitchExpressionNotExhaustiveWithUnnamedEnumValue => GetResourceString("WRN_SwitchExpressionNotExhaustiveWithUnnamedEnumValue");
        /// <summary>The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value.</summary>
        internal static string @WRN_SwitchExpressionNotExhaustiveWithUnnamedEnumValue_Title => GetResourceString("WRN_SwitchExpressionNotExhaustiveWithUnnamedEnumValue_Title");
        /// <summary>The name '_' refers to the constant, not the discard pattern. Use 'var _' to discard the value, or '@_' to refer to a constant by that name.</summary>
        internal static string @WRN_CaseConstantNamedUnderscore => GetResourceString("WRN_CaseConstantNamedUnderscore");
        /// <summary>Do not use '_' for a case constant.</summary>
        internal static string @WRN_CaseConstantNamedUnderscore_Title => GetResourceString("WRN_CaseConstantNamedUnderscore_Title");
        /// <summary>The name '_' refers to the type '{0}', not the discard pattern. Use '@_' for the type, or 'var _' to discard.</summary>
        internal static string @WRN_IsTypeNamedUnderscore => GetResourceString("WRN_IsTypeNamedUnderscore");
        /// <summary>Do not use '_' to refer to the type in an is-type expression.</summary>
        internal static string @WRN_IsTypeNamedUnderscore_Title => GetResourceString("WRN_IsTypeNamedUnderscore_Title");
        /// <summary>An expression tree may not contain a switch expression.</summary>
        internal static string @ERR_ExpressionTreeContainsSwitchExpression => GetResourceString("ERR_ExpressionTreeContainsSwitchExpression");
        /// <summary>Invalid object creation</summary>
        internal static string @ERR_InvalidObjectCreation => GetResourceString("ERR_InvalidObjectCreation");
        /// <summary>indexing movable fixed buffers</summary>
        internal static string @IDS_FeatureIndexingMovableFixedBuffers => GetResourceString("IDS_FeatureIndexingMovableFixedBuffers");
        /// <summary>__arglist cannot have an argument passed by 'in' or 'out'</summary>
        internal static string @ERR_CantUseInOrOutInArglist => GetResourceString("ERR_CantUseInOrOutInArglist");
        /// <summary>SyntaxTree is not part of the compilation</summary>
        internal static string @SyntaxTreeNotFound => GetResourceString("SyntaxTreeNotFound");
        /// <summary>An out variable cannot be declared as a ref local</summary>
        internal static string @ERR_OutVariableCannotBeByRef => GetResourceString("ERR_OutVariableCannotBeByRef");
        /// <summary>Multiple analyzer config files cannot be in the same directory ('{0}').</summary>
        internal static string @ERR_MultipleAnalyzerConfigsInSameDir => GetResourceString("ERR_MultipleAnalyzerConfigsInSameDir");
        /// <summary>coalescing assignment</summary>
        internal static string @IDS_FeatureCoalesceAssignmentExpression => GetResourceString("IDS_FeatureCoalesceAssignmentExpression");
        /// <summary>Cannot create constructed generic type from another constructed generic type.</summary>
        internal static string @CannotCreateConstructedFromConstructed => GetResourceString("CannotCreateConstructedFromConstructed");
        /// <summary>Cannot create constructed generic type from non-generic type.</summary>
        internal static string @CannotCreateConstructedFromNongeneric => GetResourceString("CannotCreateConstructedFromNongeneric");
        /// <summary>unconstrained type parameters in null coalescing operator</summary>
        internal static string @IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator => GetResourceString("IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator");
        /// <summary>Nullability in constraints for type parameter '{0}' of method '{1}' doesn't match the constraints for type parameter '{2}' of interface method '{3}'. Consider using an explicit interface implementation instead.</summary>
        internal static string @WRN_NullabilityMismatchInConstraintsOnImplicitImplementation => GetResourceString("WRN_NullabilityMismatchInConstraintsOnImplicitImplementation");
        /// <summary>Nullability in constraints for type parameter doesn't match the constraints for type parameter in implicitly implemented interface method'.</summary>
        internal static string @WRN_NullabilityMismatchInConstraintsOnImplicitImplementation_Title => GetResourceString("WRN_NullabilityMismatchInConstraintsOnImplicitImplementation_Title");
        /// <summary>The type '{2}' cannot be used as type parameter '{1}' in the generic type or method '{0}'. Nullability of type argument '{2}' doesn't match 'class' constraint.</summary>
        internal static string @WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint => GetResourceString("WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint");
        /// <summary>The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn't match 'class' constraint.</summary>
        internal static string @WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint_Title => GetResourceString("WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint_Title");
        /// <summary>Unexpected character sequence '...'</summary>
        internal static string @ERR_TripleDotNotAllowed => GetResourceString("ERR_TripleDotNotAllowed");
        /// <summary>index operator</summary>
        internal static string @IDS_FeatureIndexOperator => GetResourceString("IDS_FeatureIndexOperator");
        /// <summary>range operator</summary>
        internal static string @IDS_FeatureRangeOperator => GetResourceString("IDS_FeatureRangeOperator");
        /// <summary>static local functions</summary>
        internal static string @IDS_FeatureStaticLocalFunctions => GetResourceString("IDS_FeatureStaticLocalFunctions");
        /// <summary>name shadowing in nested functions</summary>
        internal static string @IDS_FeatureNameShadowingInNestedFunctions => GetResourceString("IDS_FeatureNameShadowingInNestedFunctions");
        /// <summary>lambda discard parameters</summary>
        internal static string @IDS_FeatureLambdaDiscardParameters => GetResourceString("IDS_FeatureLambdaDiscardParameters");
        /// <summary>MemberNotNull attribute</summary>
        internal static string @IDS_FeatureMemberNotNull => GetResourceString("IDS_FeatureMemberNotNull");
        /// <summary>native-sized integers</summary>
        internal static string @IDS_FeatureNativeInt => GetResourceString("IDS_FeatureNativeInt");
        /// <summary>Cannot use a collection of dynamic type in an asynchronous foreach</summary>
        internal static string @ERR_BadDynamicAwaitForEach => GetResourceString("ERR_BadDynamicAwaitForEach");
        /// <summary>Expected 'enable', 'disable', or 'restore'</summary>
        internal static string @ERR_NullableDirectiveQualifierExpected => GetResourceString("ERR_NullableDirectiveQualifierExpected");
        /// <summary>Expected 'warnings', 'annotations', or end of directive</summary>
        internal static string @ERR_NullableDirectiveTargetExpected => GetResourceString("ERR_NullableDirectiveTargetExpected");
        /// <summary>The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.</summary>
        internal static string @WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode => GetResourceString("WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode");
        /// <summary>The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.</summary>
        internal static string @WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode_Title => GetResourceString("WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode_Title");
        /// <summary>Object or collection initializer implicitly dereferences possibly null member '{0}'.</summary>
        internal static string @WRN_NullReferenceInitializer => GetResourceString("WRN_NullReferenceInitializer");
        /// <summary>Object or collection initializer implicitly dereferences possibly null member.</summary>
        internal static string @WRN_NullReferenceInitializer_Title => GetResourceString("WRN_NullReferenceInitializer_Title");
        /// <summary>Expression tree cannot contain value of ref struct or restricted type '{0}'.</summary>
        internal static string @ERR_ExpressionTreeCantContainRefStruct => GetResourceString("ERR_ExpressionTreeCantContainRefStruct");
        /// <summary>'else' cannot start a statement.</summary>
        internal static string @ERR_ElseCannotStartStatement => GetResourceString("ERR_ElseCannotStartStatement");
        /// <summary>An expression tree may not contain a null coalescing assignment</summary>
        internal static string @ERR_ExpressionTreeCantContainNullCoalescingAssignment => GetResourceString("ERR_ExpressionTreeCantContainNullCoalescingAssignment");
        /// <summary>Invalid option '{0}' for /nullable; must be 'disable', 'enable', 'warnings' or 'annotations'</summary>
        internal static string @ERR_BadNullableContextOption => GetResourceString("ERR_BadNullableContextOption");
        /// <summary>Parentheses are required around the switch governing expression.</summary>
        internal static string @ERR_SwitchGoverningExpressionRequiresParens => GetResourceString("ERR_SwitchGoverningExpressionRequiresParens");
        /// <summary>The name '{0}' does not identify tuple element '{1}'.</summary>
        internal static string @ERR_TupleElementNameMismatch => GetResourceString("ERR_TupleElementNameMismatch");
        /// <summary>The name '{0}' does not match the corresponding 'Deconstruct' parameter '{1}'.</summary>
        internal static string @ERR_DeconstructParameterNameMismatch => GetResourceString("ERR_DeconstructParameterNameMismatch");
        /// <summary>An expression of type '{0}' can never match the provided pattern.</summary>
        internal static string @ERR_IsPatternImpossible => GetResourceString("ERR_IsPatternImpossible");
        /// <summary>An expression of type '{0}' always matches the provided pattern.</summary>
        internal static string @WRN_IsPatternAlways => GetResourceString("WRN_IsPatternAlways");
        /// <summary>The input always matches the provided pattern.</summary>
        internal static string @WRN_IsPatternAlways_Title => GetResourceString("WRN_IsPatternAlways_Title");
        /// <summary>The given expression never matches the provided pattern.</summary>
        internal static string @WRN_GivenExpressionNeverMatchesPattern => GetResourceString("WRN_GivenExpressionNeverMatchesPattern");
        /// <summary>The given expression never matches the provided pattern.</summary>
        internal static string @WRN_GivenExpressionNeverMatchesPattern_Title => GetResourceString("WRN_GivenExpressionNeverMatchesPattern_Title");
        /// <summary>The given expression always matches the provided constant.</summary>
        internal static string @WRN_GivenExpressionAlwaysMatchesConstant => GetResourceString("WRN_GivenExpressionAlwaysMatchesConstant");
        /// <summary>The given expression always matches the provided constant.</summary>
        internal static string @WRN_GivenExpressionAlwaysMatchesConstant_Title => GetResourceString("WRN_GivenExpressionAlwaysMatchesConstant_Title");
        /// <summary>The given expression always matches the provided pattern.</summary>
        internal static string @WRN_GivenExpressionAlwaysMatchesPattern => GetResourceString("WRN_GivenExpressionAlwaysMatchesPattern");
        /// <summary>The given expression always matches the provided pattern.</summary>
        internal static string @WRN_GivenExpressionAlwaysMatchesPattern_Title => GetResourceString("WRN_GivenExpressionAlwaysMatchesPattern_Title");
        /// <summary>Feature '{0}' is not available in C# 8.0. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion8_0 => GetResourceString("ERR_FeatureNotAvailableInVersion8_0");
        /// <summary>Pattern-matching is not permitted for pointer types.</summary>
        internal static string @ERR_PointerTypeInPatternMatching => GetResourceString("ERR_PointerTypeInPatternMatching");
        /// <summary>Element names are not permitted when pattern-matching via 'System.Runtime.CompilerServices.ITuple'.</summary>
        internal static string @ERR_ArgumentNameInITuplePattern => GetResourceString("ERR_ArgumentNameInITuplePattern");
        /// <summary>The discard pattern is not permitted as a case label in a switch statement. Use 'case var _:' for a discard pattern, or 'case @_:' for a constant named '_'.</summary>
        internal static string @ERR_DiscardPatternInSwitchStatement => GetResourceString("ERR_DiscardPatternInSwitchStatement");
        /// <summary>Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type.</summary>
        internal static string @WRN_NullabilityMismatchInExplicitlyImplementedInterface => GetResourceString("WRN_NullabilityMismatchInExplicitlyImplementedInterface");
        /// <summary>Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type.</summary>
        internal static string @WRN_NullabilityMismatchInExplicitlyImplementedInterface_Title => GetResourceString("WRN_NullabilityMismatchInExplicitlyImplementedInterface_Title");
        /// <summary>'{0}' does not implement interface member '{1}'. Nullability of reference types in interface implemented by the base type doesn't match.</summary>
        internal static string @WRN_NullabilityMismatchInInterfaceImplementedByBase => GetResourceString("WRN_NullabilityMismatchInInterfaceImplementedByBase");
        /// <summary>Type does not implement interface member. Nullability of reference types in interface implemented by the base type doesn't match.</summary>
        internal static string @WRN_NullabilityMismatchInInterfaceImplementedByBase_Title => GetResourceString("WRN_NullabilityMismatchInInterfaceImplementedByBase_Title");
        /// <summary>'{0}' is already listed in the interface list on type '{1}' with different nullability of reference types.</summary>
        internal static string @WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList => GetResourceString("WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList");
        /// <summary>Interface is already listed in the interface list with different nullability of reference types.</summary>
        internal static string @WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList_Title => GetResourceString("WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList_Title");
        /// <summary>'{0}' is explicitly implemented more than once.</summary>
        internal static string @ERR_DuplicateExplicitImpl => GetResourceString("ERR_DuplicateExplicitImpl");
        /// <summary>A using variable cannot be used directly within a switch section (consider using braces).</summary>
        internal static string @ERR_UsingVarInSwitchCase => GetResourceString("ERR_UsingVarInSwitchCase");
        /// <summary>A goto cannot jump to a location after a using declaration.</summary>
        internal static string @ERR_GoToForwardJumpOverUsingVar => GetResourceString("ERR_GoToForwardJumpOverUsingVar");
        /// <summary>A goto cannot jump to a location before a using declaration within the same block.</summary>
        internal static string @ERR_GoToBackwardJumpOverUsingVar => GetResourceString("ERR_GoToBackwardJumpOverUsingVar");
        /// <summary>using declarations</summary>
        internal static string @IDS_FeatureUsingDeclarations => GetResourceString("IDS_FeatureUsingDeclarations");
        /// <summary>The feature '{0}' is currently in Preview and *unsupported*. To use Preview features, use the 'preview' language version.</summary>
        internal static string @ERR_FeatureInPreview => GetResourceString("ERR_FeatureInPreview");
        /// <summary>default interface implementation</summary>
        internal static string @IDS_DefaultInterfaceImplementation => GetResourceString("IDS_DefaultInterfaceImplementation");
        /// <summary>Target runtime doesn't support default interface implementation.</summary>
        internal static string @ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation => GetResourceString("ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation");
        /// <summary>'{0}' cannot implement interface member '{1}' in type '{2}' because the target runtime doesn't support default interface implementation.</summary>
        internal static string @ERR_RuntimeDoesNotSupportDefaultInterfaceImplementationForMember => GetResourceString("ERR_RuntimeDoesNotSupportDefaultInterfaceImplementationForMember");
        /// <summary>The modifier '{0}' is not valid for this item in C# {1}. Please use language version '{2}' or greater.</summary>
        internal static string @ERR_DefaultInterfaceImplementationModifier => GetResourceString("ERR_DefaultInterfaceImplementationModifier");
        /// <summary>'{0}' does not implement interface member '{1}'. '{2}' cannot implicitly implement a non-public member.</summary>
        internal static string @ERR_ImplicitImplementationOfNonPublicInterfaceMember => GetResourceString("ERR_ImplicitImplementationOfNonPublicInterfaceMember");
        /// <summary>Interface member '{0}' does not have a most specific implementation. Neither '{1}', nor '{2}' are most specific.</summary>
        internal static string @ERR_MostSpecificImplementationIsNotFound => GetResourceString("ERR_MostSpecificImplementationIsNotFound");
        /// <summary>'{0}' cannot implement interface member '{1}' in type '{2}' because feature '{3}' is not available in C# {4}. Please use language version '{5}' or greater.</summary>
        internal static string @ERR_LanguageVersionDoesNotSupportDefaultInterfaceImplementationForMember => GetResourceString("ERR_LanguageVersionDoesNotSupportDefaultInterfaceImplementationForMember");
        /// <summary>Target runtime doesn't support 'protected', 'protected internal', or 'private protected' accessibility for a member of an interface.</summary>
        internal static string @ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember => GetResourceString("ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember");
        /// <summary>Type '{0}' cannot be embedded because it has a non-abstract member. Consider setting the 'Embed Interop Types' property to false.</summary>
        internal static string @ERR_DefaultInterfaceImplementationInNoPIAType => GetResourceString("ERR_DefaultInterfaceImplementationInNoPIAType");
        /// <summary>The switch expression does not handle some null inputs (it is not exhaustive). For example, the pattern '{0}' is not covered.</summary>
        internal static string @WRN_SwitchExpressionNotExhaustiveForNull => GetResourceString("WRN_SwitchExpressionNotExhaustiveForNull");
        /// <summary>The switch expression does not handle some null inputs.</summary>
        internal static string @WRN_SwitchExpressionNotExhaustiveForNull_Title => GetResourceString("WRN_SwitchExpressionNotExhaustiveForNull_Title");
        /// <summary>The switch expression does not handle some null inputs (it is not exhaustive). For example, the pattern '{0}' is not covered. However, a pattern with a 'when' clause might successfully match this value.</summary>
        internal static string @WRN_SwitchExpressionNotExhaustiveForNullWithWhen => GetResourceString("WRN_SwitchExpressionNotExhaustiveForNullWithWhen");
        /// <summary>The switch expression does not handle some null inputs.</summary>
        internal static string @WRN_SwitchExpressionNotExhaustiveForNullWithWhen_Title => GetResourceString("WRN_SwitchExpressionNotExhaustiveForNullWithWhen_Title");
        /// <summary>Attribute '{0}' is not valid on event accessors. It is only valid on '{1}' declarations.</summary>
        internal static string @ERR_AttributeNotOnEventAccessor => GetResourceString("ERR_AttributeNotOnEventAccessor");
        /// <summary>obsolete on property accessor</summary>
        internal static string @IDS_FeatureObsoleteOnPropertyAccessor => GetResourceString("IDS_FeatureObsoleteOnPropertyAccessor");
        /// <summary>The EnumeratorCancellationAttribute applied to parameter '{0}' will have no effect. The attribute is only effective on a parameter of type CancellationToken in an async-iterator method returning IAsyncEnumerable</summary>
        internal static string @WRN_UnconsumedEnumeratorCancellationAttributeUsage => GetResourceString("WRN_UnconsumedEnumeratorCancellationAttributeUsage");
        /// <summary>The EnumeratorCancellationAttribute will have no effect. The attribute is only effective on a parameter of type CancellationToken in an async-iterator method returning IAsyncEnumerable</summary>
        internal static string @WRN_UnconsumedEnumeratorCancellationAttributeUsage_Title => GetResourceString("WRN_UnconsumedEnumeratorCancellationAttributeUsage_Title");
        /// <summary>Async-iterator '{0}' has one or more parameters of type 'CancellationToken' but none of them is decorated with the 'EnumeratorCancellation' attribute, so the cancellation token parameter from the generated 'IAsyncEnumerable&lt;&gt;.GetAsyncEnumerator' will be un ...</summary>
        internal static string @WRN_UndecoratedCancellationTokenParameter => GetResourceString("WRN_UndecoratedCancellationTokenParameter");
        /// <summary>Async-iterator member has one or more parameters of type 'CancellationToken' but none of them is decorated with the 'EnumeratorCancellation' attribute, so the cancellation token parameter from the generated 'IAsyncEnumerable&lt;&gt;.GetAsyncEnumerator' will be u ...</summary>
        internal static string @WRN_UndecoratedCancellationTokenParameter_Title => GetResourceString("WRN_UndecoratedCancellationTokenParameter_Title");
        /// <summary>The attribute [EnumeratorCancellation] cannot be used on multiple parameters</summary>
        internal static string @ERR_MultipleEnumeratorCancellationAttributes => GetResourceString("ERR_MultipleEnumeratorCancellationAttributes");
        /// <summary>Method '{0}' specifies a 'class' constraint for type parameter '{1}', but corresponding type parameter '{2}' of overridden or explicitly implemented method '{3}' is not a reference type.</summary>
        internal static string @ERR_OverrideRefConstraintNotSatisfied => GetResourceString("ERR_OverrideRefConstraintNotSatisfied");
        /// <summary>Method '{0}' specifies a 'struct' constraint for type parameter '{1}', but corresponding type parameter '{2}' of overridden or explicitly implemented method '{3}' is not a non-nullable value type.</summary>
        internal static string @ERR_OverrideValConstraintNotSatisfied => GetResourceString("ERR_OverrideValConstraintNotSatisfied");
        /// <summary>Method '{0}' specifies a 'default' constraint for type parameter '{1}', but corresponding type parameter '{2}' of overridden or explicitly implemented method '{3}' is constrained to a reference type or a value type.</summary>
        internal static string @ERR_OverrideDefaultConstraintNotSatisfied => GetResourceString("ERR_OverrideDefaultConstraintNotSatisfied");
        /// <summary>The 'default' constraint is valid on override and explicit interface implementation methods only.</summary>
        internal static string @ERR_DefaultConstraintOverrideOnly => GetResourceString("ERR_DefaultConstraintOverrideOnly");
        /// <summary>constraints for override and explicit interface implementation methods</summary>
        internal static string @IDS_OverrideWithConstraints => GetResourceString("IDS_OverrideWithConstraints");
        /// <summary>Partial method declarations of '{0}' have inconsistent nullability in constraints for type parameter '{1}'</summary>
        internal static string @WRN_NullabilityMismatchInConstraintsOnPartialImplementation => GetResourceString("WRN_NullabilityMismatchInConstraintsOnPartialImplementation");
        /// <summary>Partial method declarations have inconsistent nullability in constraints for type parameter</summary>
        internal static string @WRN_NullabilityMismatchInConstraintsOnPartialImplementation_Title => GetResourceString("WRN_NullabilityMismatchInConstraintsOnPartialImplementation_Title");
        /// <summary>stackalloc in nested expressions</summary>
        internal static string @IDS_FeatureNestedStackalloc => GetResourceString("IDS_FeatureNestedStackalloc");
        /// <summary>The type '{2}' cannot be used as type parameter '{1}' in the generic type or method '{0}'. Nullability of type argument '{2}' doesn't match 'notnull' constraint.</summary>
        internal static string @WRN_NullabilityMismatchInTypeParameterNotNullConstraint => GetResourceString("WRN_NullabilityMismatchInTypeParameterNotNullConstraint");
        /// <summary>The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn't match 'notnull' constraint.</summary>
        internal static string @WRN_NullabilityMismatchInTypeParameterNotNullConstraint_Title => GetResourceString("WRN_NullabilityMismatchInTypeParameterNotNullConstraint_Title");
        /// <summary>notnull generic type constraint</summary>
        internal static string @IDS_FeatureNotNullGenericTypeConstraint => GetResourceString("IDS_FeatureNotNullGenericTypeConstraint");
        /// <summary>Duplicate null suppression operator ('!')</summary>
        internal static string @ERR_DuplicateNullSuppression => GetResourceString("ERR_DuplicateNullSuppression");
        /// <summary>Type '{0}' cannot be embedded because it has a re-abstraction of a member from base interface. Consider setting the 'Embed Interop Types' property to false.</summary>
        internal static string @ERR_ReAbstractionInNoPIAType => GetResourceString("ERR_ReAbstractionInNoPIAType");
        /// <summary>Command-line syntax error: '{0}' is not a valid value for the '{1}' option. The value must be of the form '{2}'.</summary>
        internal static string @ERR_BadSwitchValue => GetResourceString("ERR_BadSwitchValue");
        /// <summary>function pointers</summary>
        internal static string @IDS_FeatureFunctionPointers => GetResourceString("IDS_FeatureFunctionPointers");
        /// <summary>&amp;method group</summary>
        internal static string @IDS_AddressOfMethodGroup => GetResourceString("IDS_AddressOfMethodGroup");
        /// <summary>'{0}' is not a valid calling convention specifier for a function pointer.</summary>
        internal static string @ERR_InvalidFunctionPointerCallingConvention => GetResourceString("ERR_InvalidFunctionPointerCallingConvention");
        /// <summary>Type '{0}' is not defined.</summary>
        internal static string @ERR_TypeNotFound => GetResourceString("ERR_TypeNotFound");
        /// <summary>Type '{0}' must be public to be used as a calling convention.</summary>
        internal static string @ERR_TypeMustBePublic => GetResourceString("ERR_TypeMustBePublic");
        /// <summary>Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.</summary>
        internal static string @WRN_SyncAndAsyncEntryPoints => GetResourceString("WRN_SyncAndAsyncEntryPoints");
        /// <summary>Internal error in the C# compiler.</summary>
        internal static string @ERR_InternalError => GetResourceString("ERR_InternalError");
        /// <summary>static anonymous function</summary>
        internal static string @IDS_FeatureStaticAnonymousFunction => GetResourceString("IDS_FeatureStaticAnonymousFunction");
        /// <summary>A static anonymous function cannot contain a reference to 'this' or 'base'.</summary>
        internal static string @ERR_StaticAnonymousFunctionCannotCaptureThis => GetResourceString("ERR_StaticAnonymousFunctionCannotCaptureThis");
        /// <summary>A static anonymous function cannot contain a reference to '{0}'.</summary>
        internal static string @ERR_StaticAnonymousFunctionCannotCaptureVariable => GetResourceString("ERR_StaticAnonymousFunctionCannotCaptureVariable");
        /// <summary>asynchronous using</summary>
        internal static string @IDS_FeatureAsyncUsing => GetResourceString("IDS_FeatureAsyncUsing");
        /// <summary>parenthesized pattern</summary>
        internal static string @IDS_FeatureParenthesizedPattern => GetResourceString("IDS_FeatureParenthesizedPattern");
        /// <summary>or pattern</summary>
        internal static string @IDS_FeatureOrPattern => GetResourceString("IDS_FeatureOrPattern");
        /// <summary>and pattern</summary>
        internal static string @IDS_FeatureAndPattern => GetResourceString("IDS_FeatureAndPattern");
        /// <summary>not pattern</summary>
        internal static string @IDS_FeatureNotPattern => GetResourceString("IDS_FeatureNotPattern");
        /// <summary>type pattern</summary>
        internal static string @IDS_FeatureTypePattern => GetResourceString("IDS_FeatureTypePattern");
        /// <summary>relational pattern</summary>
        internal static string @IDS_FeatureRelationalPattern => GetResourceString("IDS_FeatureRelationalPattern");
        /// <summary>Enums, classes, and structures cannot be declared in an interface that has an 'in' or 'out' type parameter.</summary>
        internal static string @ERR_VarianceInterfaceNesting => GetResourceString("ERR_VarianceInterfaceNesting");
        /// <summary>'{0}': extern event cannot have initializer</summary>
        internal static string @ERR_ExternEventInitializer => GetResourceString("ERR_ExternEventInitializer");
        /// <summary>Invocation of implicit Index Indexer cannot name the argument.</summary>
        internal static string @ERR_ImplicitIndexIndexerWithName => GetResourceString("ERR_ImplicitIndexIndexerWithName");
        /// <summary>Invocation of implicit Range Indexer cannot name the argument.</summary>
        internal static string @ERR_ImplicitRangeIndexerWithName => GetResourceString("ERR_ImplicitRangeIndexerWithName");
        /// <summary>The type '{0}' may not be used as the target type of new()</summary>
        internal static string @ERR_TypelessNewIllegalTargetType => GetResourceString("ERR_TypelessNewIllegalTargetType");
        /// <summary>Use of new() is not valid in this context</summary>
        internal static string @ERR_TypelessNewNotValid => GetResourceString("ERR_TypelessNewNotValid");
        /// <summary>There is no target type for '{0}'</summary>
        internal static string @ERR_TypelessNewNoTargetType => GetResourceString("ERR_TypelessNewNoTargetType");
        /// <summary>target-typed object creation</summary>
        internal static string @IDS_FeatureTargetTypedObjectCreation => GetResourceString("IDS_FeatureTargetTypedObjectCreation");
        /// <summary>An expression tree may not contain a pattern System.Index or System.Range indexer access</summary>
        internal static string @ERR_ExpressionTreeContainsPatternIndexOrRangeIndexer => GetResourceString("ERR_ExpressionTreeContainsPatternIndexOrRangeIndexer");
        /// <summary>An expression tree may not contain a from-end index ('^') expression.</summary>
        internal static string @ERR_ExpressionTreeContainsFromEndIndexExpression => GetResourceString("ERR_ExpressionTreeContainsFromEndIndexExpression");
        /// <summary>An expression tree may not contain a range ('..') expression.</summary>
        internal static string @ERR_ExpressionTreeContainsRangeExpression => GetResourceString("ERR_ExpressionTreeContainsRangeExpression");
        /// <summary>Generator '{0}' failed to generate source. It will not contribute to the output and compilation errors may occur as a result. Exception was of type '{1}' with message '{2}'</summary>
        internal static string @WRN_GeneratorFailedDuringGeneration => GetResourceString("WRN_GeneratorFailedDuringGeneration");
        /// <summary>Generator '{0}' failed to initialize. It will not contribute to the output and compilation errors may occur as a result. Exception was of type '{1}' with message '{2}'</summary>
        internal static string @WRN_GeneratorFailedDuringInitialization => GetResourceString("WRN_GeneratorFailedDuringInitialization");
        /// <summary>Generator failed to generate source.</summary>
        internal static string @WRN_GeneratorFailedDuringGeneration_Title => GetResourceString("WRN_GeneratorFailedDuringGeneration_Title");
        /// <summary>Generator failed to initialize.</summary>
        internal static string @WRN_GeneratorFailedDuringInitialization_Title => GetResourceString("WRN_GeneratorFailedDuringInitialization_Title");
        /// <summary>Generator threw the following exception:
        /// '{0}'.</summary>
        internal static string @WRN_GeneratorFailedDuringGeneration_Description => GetResourceString("WRN_GeneratorFailedDuringGeneration_Description");
        /// <summary>Generator threw the following exception:
        /// '{0}'.</summary>
        internal static string @WRN_GeneratorFailedDuringInitialization_Description => GetResourceString("WRN_GeneratorFailedDuringInitialization_Description");
        /// <summary>records</summary>
        internal static string @IDS_FeatureRecords => GetResourceString("IDS_FeatureRecords");
        /// <summary>init-only setters</summary>
        internal static string @IDS_FeatureInitOnlySetters => GetResourceString("IDS_FeatureInitOnlySetters");
        /// <summary>The receiver of a `with` expression must have a non-void type.</summary>
        internal static string @ERR_InvalidWithReceiverType => GetResourceString("ERR_InvalidWithReceiverType");
        /// <summary>The receiver type '{0}' is not a valid record type.</summary>
        internal static string @ERR_NoSingleCloneMethod => GetResourceString("ERR_NoSingleCloneMethod");
        /// <summary>Init-only property or indexer '{0}' can only be assigned in an object initializer, or on 'this' or 'base' in an instance constructor or an 'init' accessor.</summary>
        internal static string @ERR_AssignmentInitOnly => GetResourceString("ERR_AssignmentInitOnly");
        /// <summary>A variable may not be declared within a 'not' or 'or' pattern.</summary>
        internal static string @ERR_DesignatorBeneathPatternCombinator => GetResourceString("ERR_DesignatorBeneathPatternCombinator");
        /// <summary>Relational patterns may not be used for a value of type '{0}'.</summary>
        internal static string @ERR_UnsupportedTypeForRelationalPattern => GetResourceString("ERR_UnsupportedTypeForRelationalPattern");
        /// <summary>Relational patterns may not be used for a floating-point NaN.</summary>
        internal static string @ERR_RelationalPatternWithNaN => GetResourceString("ERR_RelationalPatternWithNaN");
        /// <summary>extended partial methods</summary>
        internal static string @IDS_FeatureExtendedPartialMethods => GetResourceString("IDS_FeatureExtendedPartialMethods");
        /// <summary>Partial method '{0}' must have accessibility modifiers because it has a non-void return type.</summary>
        internal static string @ERR_PartialMethodWithNonVoidReturnMustHaveAccessMods => GetResourceString("ERR_PartialMethodWithNonVoidReturnMustHaveAccessMods");
        /// <summary>Partial method '{0}' must have accessibility modifiers because it has 'out' parameters.</summary>
        internal static string @ERR_PartialMethodWithOutParamMustHaveAccessMods => GetResourceString("ERR_PartialMethodWithOutParamMustHaveAccessMods");
        /// <summary>Partial method '{0}' must have an implementation part because it has accessibility modifiers.</summary>
        internal static string @ERR_PartialMethodWithAccessibilityModsMustHaveImplementation => GetResourceString("ERR_PartialMethodWithAccessibilityModsMustHaveImplementation");
        /// <summary>Partial method '{0}' must have accessibility modifiers because it has a 'virtual', 'override', 'sealed', 'new', or 'extern' modifier.</summary>
        internal static string @ERR_PartialMethodWithExtendedModMustHaveAccessMods => GetResourceString("ERR_PartialMethodWithExtendedModMustHaveAccessMods");
        /// <summary>Both partial method declarations must have identical accessibility modifiers.</summary>
        internal static string @ERR_PartialMethodAccessibilityDifference => GetResourceString("ERR_PartialMethodAccessibilityDifference");
        /// <summary>Both partial method declarations must have identical combinations of 'virtual', 'override', 'sealed', and 'new' modifiers.</summary>
        internal static string @ERR_PartialMethodExtendedModDifference => GetResourceString("ERR_PartialMethodExtendedModDifference");
        /// <summary>Both partial method declarations must have the same return type.</summary>
        internal static string @ERR_PartialMethodReturnTypeDifference => GetResourceString("ERR_PartialMethodReturnTypeDifference");
        /// <summary>Partial method declarations must have matching ref return values.</summary>
        internal static string @ERR_PartialMethodRefReturnDifference => GetResourceString("ERR_PartialMethodRefReturnDifference");
        /// <summary>top-level statements</summary>
        internal static string @IDS_TopLevelStatements => GetResourceString("IDS_TopLevelStatements");
        /// <summary>Cannot use local variable or local function '{0}' declared in a top-level statement in this context.</summary>
        internal static string @ERR_SimpleProgramLocalIsReferencedOutsideOfTopLevelStatement => GetResourceString("ERR_SimpleProgramLocalIsReferencedOutsideOfTopLevelStatement");
        /// <summary>Only one compilation unit can have top-level statements.</summary>
        internal static string @ERR_SimpleProgramMultipleUnitsWithTopLevelStatements => GetResourceString("ERR_SimpleProgramMultipleUnitsWithTopLevelStatements");
        /// <summary>Top-level statements must precede namespace and type declarations.</summary>
        internal static string @ERR_TopLevelStatementAfterNamespaceOrType => GetResourceString("ERR_TopLevelStatementAfterNamespaceOrType");
        /// <summary>Cannot specify /main if there is a compilation unit with top-level statements.</summary>
        internal static string @ERR_SimpleProgramDisallowsMainType => GetResourceString("ERR_SimpleProgramDisallowsMainType");
        /// <summary>Program using top-level statements must be an executable.</summary>
        internal static string @ERR_SimpleProgramNotAnExecutable => GetResourceString("ERR_SimpleProgramNotAnExecutable");
        /// <summary>'{0}' is not a valid function pointer return type modifier. Valid modifiers are 'ref' and 'ref readonly'.</summary>
        internal static string @ERR_InvalidFuncPointerReturnTypeModifier => GetResourceString("ERR_InvalidFuncPointerReturnTypeModifier");
        /// <summary>A return type can only have one '{0}' modifier.</summary>
        internal static string @ERR_DupReturnTypeMod => GetResourceString("ERR_DupReturnTypeMod");
        /// <summary>'{0}' cannot be used as a modifier on a function pointer parameter.</summary>
        internal static string @ERR_BadFuncPointerParamModifier => GetResourceString("ERR_BadFuncPointerParamModifier");
        /// <summary>Function pointer '{0}' does not take {1} arguments</summary>
        internal static string @ERR_BadFuncPointerArgCount => GetResourceString("ERR_BadFuncPointerArgCount");
        /// <summary>No overload for '{0}' matches function pointer '{1}'</summary>
        internal static string @ERR_MethFuncPtrMismatch => GetResourceString("ERR_MethFuncPtrMismatch");
        /// <summary>Ref mismatch between '{0}' and function pointer '{1}'</summary>
        internal static string @ERR_FuncPtrRefMismatch => GetResourceString("ERR_FuncPtrRefMismatch");
        /// <summary>Cannot create a function pointer for '{0}' because it is not a static method</summary>
        internal static string @ERR_FuncPtrMethMustBeStatic => GetResourceString("ERR_FuncPtrMethMustBeStatic");
        /// <summary>'&amp;' on method groups cannot be used in expression trees</summary>
        internal static string @ERR_AddressOfMethodGroupInExpressionTree => GetResourceString("ERR_AddressOfMethodGroupInExpressionTree");
        /// <summary>Calling convention of '{0}' is not compatible with '{1}'.</summary>
        internal static string @ERR_WrongFuncPtrCallingConvention => GetResourceString("ERR_WrongFuncPtrCallingConvention");
        /// <summary>Cannot convert method group to function pointer (Are you missing a '&amp;'?)</summary>
        internal static string @ERR_MissingAddressOf => GetResourceString("ERR_MissingAddressOf");
        /// <summary>Cannot use an extension method with a receiver as the target of a '&amp;' operator.</summary>
        internal static string @ERR_CannotUseReducedExtensionMethodInAddressOf => GetResourceString("ERR_CannotUseReducedExtensionMethodInAddressOf");
        /// <summary>The type of a local declared in a fixed statement cannot be a function pointer type.</summary>
        internal static string @ERR_CannotUseFunctionPointerAsFixedLocal => GetResourceString("ERR_CannotUseFunctionPointerAsFixedLocal");
        /// <summary>The calling convention of '{0}' is not supported by the language.</summary>
        internal static string @ERR_UnsupportedCallingConvention => GetResourceString("ERR_UnsupportedCallingConvention");
        /// <summary>The target runtime doesn't support extensible or runtime-environment default calling conventions.</summary>
        internal static string @ERR_RuntimeDoesNotSupportUnmanagedDefaultCallConv => GetResourceString("ERR_RuntimeDoesNotSupportUnmanagedDefaultCallConv");
        /// <summary>Given {0} parameter types and {1} parameter ref kinds. These arrays must have the same length.</summary>
        internal static string @NotSameNumberParameterTypesAndRefKinds => GetResourceString("NotSameNumberParameterTypesAndRefKinds");
        /// <summary>'RefKind.Out' is not a valid ref kind for a return type.</summary>
        internal static string @OutIsNotValidForReturn => GetResourceString("OutIsNotValidForReturn");
        /// <summary>Passing '{0}' is not valid unless '{1}' is 'SignatureCallingConvention.Unmanaged'.</summary>
        internal static string @CallingConventionTypesRequireUnmanaged => GetResourceString("CallingConventionTypesRequireUnmanaged");
        /// <summary>Cannot use '{0}' as a calling convention modifier.</summary>
        internal static string @CallingConventionTypeIsInvalid => GetResourceString("CallingConventionTypeIsInvalid");
        /// <summary>Cannot convert &amp;method group '{0}' to delegate type '{0}'.</summary>
        internal static string @ERR_CannotConvertAddressOfToDelegate => GetResourceString("ERR_CannotConvertAddressOfToDelegate");
        /// <summary>Cannot convert &amp;method group '{0}' to non-function pointer type '{1}'.</summary>
        internal static string @ERR_AddressOfToNonFunctionPointer => GetResourceString("ERR_AddressOfToNonFunctionPointer");
        /// <summary>'managed' calling convention cannot be combined with unmanaged calling convention specifiers.</summary>
        internal static string @ERR_CannotSpecifyManagedWithUnmanagedSpecifiers => GetResourceString("ERR_CannotSpecifyManagedWithUnmanagedSpecifiers");
        /// <summary>Feature '{0}' is not available in C# 9.0. Please use language version {1} or greater.</summary>
        internal static string @ERR_FeatureNotAvailableInVersion9 => GetResourceString("ERR_FeatureNotAvailableInVersion9");
        /// <summary>Unexpected argument list.</summary>
        internal static string @ERR_UnexpectedArgumentList => GetResourceString("ERR_UnexpectedArgumentList");
        /// <summary>A constructor declared in a record with parameter list must have 'this' constructor initializer.</summary>
        internal static string @ERR_UnexpectedOrMissingConstructorInitializerInRecord => GetResourceString("ERR_UnexpectedOrMissingConstructorInitializerInRecord");
        /// <summary>Only a single record partial declaration may have a parameter list</summary>
        internal static string @ERR_MultipleRecordParameterLists => GetResourceString("ERR_MultipleRecordParameterLists");
        /// <summary>Records may only inherit from object or another record</summary>
        internal static string @ERR_BadRecordBase => GetResourceString("ERR_BadRecordBase");
        /// <summary>Only records may inherit from records.</summary>
        internal static string @ERR_BadInheritanceFromRecord => GetResourceString("ERR_BadInheritanceFromRecord");
        /// <summary>Record member '{0}' must be a readable instance property of type '{1}' to match positional parameter '{2}'.</summary>
        internal static string @ERR_BadRecordMemberForPositionalParameter => GetResourceString("ERR_BadRecordMemberForPositionalParameter");
        /// <summary>No accessible copy constructor found in base type '{0}'.</summary>
        internal static string @ERR_NoCopyConstructorInBaseType => GetResourceString("ERR_NoCopyConstructorInBaseType");
        /// <summary>A copy constructor in a record must call a copy constructor of the base, or a parameterless object constructor if the record inherits from object.</summary>
        internal static string @ERR_CopyConstructorMustInvokeBaseCopyConstructor => GetResourceString("ERR_CopyConstructorMustInvokeBaseCopyConstructor");
        /// <summary>target-typed conditional expression</summary>
        internal static string @IDS_FeatureTargetTypedConditional => GetResourceString("IDS_FeatureTargetTypedConditional");
        /// <summary>'{0}' does not override expected method from 'object'.</summary>
        internal static string @ERR_DoesNotOverrideMethodFromObject => GetResourceString("ERR_DoesNotOverrideMethodFromObject");
        /// <summary>covariant returns</summary>
        internal static string @IDS_FeatureCovariantReturnsForOverrides => GetResourceString("IDS_FeatureCovariantReturnsForOverrides");
        /// <summary>'{0}': Target runtime doesn't support covariant return types in overrides. Return type must be '{2}' to match overridden member '{1}'</summary>
        internal static string @ERR_RuntimeDoesNotSupportCovariantReturnsOfClasses => GetResourceString("ERR_RuntimeDoesNotSupportCovariantReturnsOfClasses");
        /// <summary>'{0}': Target runtime doesn't support covariant types in overrides. Type must be '{2}' to match overridden member '{1}'</summary>
        internal static string @ERR_RuntimeDoesNotSupportCovariantPropertiesOfClasses => GetResourceString("ERR_RuntimeDoesNotSupportCovariantPropertiesOfClasses");
        /// <summary>'{0}' cannot be sealed because containing record is not sealed.</summary>
        internal static string @ERR_SealedAPIInRecord => GetResourceString("ERR_SealedAPIInRecord");
        /// <summary>'{0}' does not override expected method from '{1}'.</summary>
        internal static string @ERR_DoesNotOverrideBaseMethod => GetResourceString("ERR_DoesNotOverrideBaseMethod");
        /// <summary>Constant value '{0}' may overflow '{1}' at runtime (use 'unchecked' syntax to override)</summary>
        internal static string @WRN_ConstOutOfRangeChecked => GetResourceString("WRN_ConstOutOfRangeChecked");
        /// <summary>Constant value may overflow at runtime (use 'unchecked' syntax to override)</summary>
        internal static string @WRN_ConstOutOfRangeChecked_Title => GetResourceString("WRN_ConstOutOfRangeChecked_Title");
        /// <summary>Members named 'Clone' are disallowed in records.</summary>
        internal static string @ERR_CloneDisallowedInRecord => GetResourceString("ERR_CloneDisallowedInRecord");
        /// <summary>Types and aliases should not be named 'record'.</summary>
        internal static string @WRN_RecordNamedDisallowed => GetResourceString("WRN_RecordNamedDisallowed");
        /// <summary>Types and aliases should not be named 'record'.</summary>
        internal static string @WRN_RecordNamedDisallowed_Title => GetResourceString("WRN_RecordNamedDisallowed_Title");
        /// <summary>'{0}' must allow overriding because the containing record is not sealed.</summary>
        internal static string @ERR_NotOverridableAPIInRecord => GetResourceString("ERR_NotOverridableAPIInRecord");
        /// <summary>Record member '{0}' must be public.</summary>
        internal static string @ERR_NonPublicAPIInRecord => GetResourceString("ERR_NonPublicAPIInRecord");
        /// <summary>Record member '{0}' must return '{1}'.</summary>
        internal static string @ERR_SignatureMismatchInRecord => GetResourceString("ERR_SignatureMismatchInRecord");
        /// <summary>Record member '{0}' must be protected.</summary>
        internal static string @ERR_NonProtectedAPIInRecord => GetResourceString("ERR_NonProtectedAPIInRecord");
        /// <summary>'{0}' does not override expected property from '{1}'.</summary>
        internal static string @ERR_DoesNotOverrideBaseEqualityContract => GetResourceString("ERR_DoesNotOverrideBaseEqualityContract");
        /// <summary>Record member '{0}' may not be static.</summary>
        internal static string @ERR_StaticAPIInRecord => GetResourceString("ERR_StaticAPIInRecord");
        /// <summary>A copy constructor '{0}' must be public or protected because the record is not sealed.</summary>
        internal static string @ERR_CopyConstructorWrongAccessibility => GetResourceString("ERR_CopyConstructorWrongAccessibility");
        /// <summary>Record member '{0}' must be private.</summary>
        internal static string @ERR_NonPrivateAPIInRecord => GetResourceString("ERR_NonPrivateAPIInRecord");
        /// <summary>Operator '{0}' cannot be used here due to precedence. Use parentheses to disambiguate.</summary>
        internal static string @WRN_PrecedenceInversion => GetResourceString("WRN_PrecedenceInversion");
        /// <summary>Operator cannot be used here due to precedence.</summary>
        internal static string @WRN_PrecedenceInversion_Title => GetResourceString("WRN_PrecedenceInversion_Title");
        /// <summary>module initializers</summary>
        internal static string @IDS_FeatureModuleInitializers => GetResourceString("IDS_FeatureModuleInitializers");
        /// <summary>Module initializer method '{0}' must be accessible at the module level</summary>
        internal static string @ERR_ModuleInitializerMethodMustBeAccessibleOutsideTopLevelType => GetResourceString("ERR_ModuleInitializerMethodMustBeAccessibleOutsideTopLevelType");
        /// <summary>Module initializer method '{0}' must be static, must have no parameters, and must return 'void'</summary>
        internal static string @ERR_ModuleInitializerMethodMustBeStaticParameterlessVoid => GetResourceString("ERR_ModuleInitializerMethodMustBeStaticParameterlessVoid");
        /// <summary>Module initializer method '{0}' must not be generic and must not be contained in a generic type</summary>
        internal static string @ERR_ModuleInitializerMethodAndContainingTypesMustNotBeGeneric => GetResourceString("ERR_ModuleInitializerMethodAndContainingTypesMustNotBeGeneric");
        /// <summary>A module initializer must be an ordinary member method</summary>
        internal static string @ERR_ModuleInitializerMethodMustBeOrdinary => GetResourceString("ERR_ModuleInitializerMethodMustBeOrdinary");
        /// <summary>extension GetAsyncEnumerator</summary>
        internal static string @IDS_FeatureExtensionGetAsyncEnumerator => GetResourceString("IDS_FeatureExtensionGetAsyncEnumerator");
        /// <summary>extension GetEnumerator</summary>
        internal static string @IDS_FeatureExtensionGetEnumerator => GetResourceString("IDS_FeatureExtensionGetEnumerator");
        /// <summary>'UnmanagedCallersOnly' can only be applied to ordinary static methods or static local functions.</summary>
        internal static string @ERR_UnmanagedCallersOnlyRequiresStatic => GetResourceString("ERR_UnmanagedCallersOnlyRequiresStatic");
        /// <summary>'{0}' is not a valid calling convention type for 'UnmanagedCallersOnly'.</summary>
        internal static string @ERR_InvalidUnmanagedCallersOnlyCallConv => GetResourceString("ERR_InvalidUnmanagedCallersOnlyCallConv");
        /// <summary>Cannot use '{0}' as a {1} type on a method attributed with 'UnmanagedCallersOnly'.</summary>
        internal static string @ERR_CannotUseManagedTypeInUnmanagedCallersOnly => GetResourceString("ERR_CannotUseManagedTypeInUnmanagedCallersOnly");
        /// <summary>Methods attributed with 'UnmanagedCallersOnly' cannot have generic type parameters and cannot be declared in a generic type.</summary>
        internal static string @ERR_UnmanagedCallersOnlyMethodOrTypeCannotBeGeneric => GetResourceString("ERR_UnmanagedCallersOnlyMethodOrTypeCannotBeGeneric");
        /// <summary>'{0}' is attributed with 'UnmanagedCallersOnly' and cannot be called directly. Obtain a function pointer to this method.</summary>
        internal static string @ERR_UnmanagedCallersOnlyMethodsCannotBeCalledDirectly => GetResourceString("ERR_UnmanagedCallersOnlyMethodsCannotBeCalledDirectly");
        /// <summary>'{0}' is attributed with 'UnmanagedCallersOnly' and cannot be converted to a delegate type. Obtain a function pointer to this method.</summary>
        internal static string @ERR_UnmanagedCallersOnlyMethodsCannotBeConvertedToDelegate => GetResourceString("ERR_UnmanagedCallersOnlyMethodsCannotBeConvertedToDelegate");
        /// <summary>Application entry points cannot be attributed with 'UnmanagedCallersOnly'.</summary>
        internal static string @ERR_EntryPointCannotBeUnmanagedCallersOnly => GetResourceString("ERR_EntryPointCannotBeUnmanagedCallersOnly");
        /// <summary>Module initializer cannot be attributed with 'UnmanagedCallersOnly'.</summary>
        internal static string @ERR_ModuleInitializerCannotBeUnmanagedCallersOnly => GetResourceString("ERR_ModuleInitializerCannotBeUnmanagedCallersOnly");
        /// <summary>'{0}' defines 'Equals' but not 'GetHashCode'</summary>
        internal static string @WRN_RecordEqualsWithoutGetHashCode => GetResourceString("WRN_RecordEqualsWithoutGetHashCode");
        /// <summary>Record defines 'Equals' but not 'GetHashCode'.</summary>
        internal static string @WRN_RecordEqualsWithoutGetHashCode_Title => GetResourceString("WRN_RecordEqualsWithoutGetHashCode_Title");
        /// <summary>'init' accessors cannot be marked 'readonly'. Mark '{0}' readonly instead.</summary>
        internal static string @ERR_InitCannotBeReadonly => GetResourceString("ERR_InitCannotBeReadonly");
        /// <summary>discards</summary>
        internal static string @IDS_FeatureDiscards => GetResourceString("IDS_FeatureDiscards");
        /// <summary>variance safety for static interface members</summary>
        internal static string @IDS_FeatureVarianceSafetyForStaticInterfaceMembers => GetResourceString("IDS_FeatureVarianceSafetyForStaticInterfaceMembers");
        /// <summary>The assembly '{0}' containing type '{1}' references .NET Framework, which is not supported.</summary>
        internal static string @WRN_AnalyzerReferencesFramework => GetResourceString("WRN_AnalyzerReferencesFramework");
        /// <summary>The loaded assembly references .NET Framework, which is not supported.</summary>
        internal static string @WRN_AnalyzerReferencesFramework_Title => GetResourceString("WRN_AnalyzerReferencesFramework_Title");

    }
}
