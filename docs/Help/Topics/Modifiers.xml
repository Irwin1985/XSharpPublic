<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" modified="2024-02-08T11:23:49.566+02:00" lasteditedby="cpc" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>Modifiers</title>
  <body>
    <header>
      <para styleclass="Heading1">Modifiers</para>
    </header>
    <para styleclass="Normal">Modifiers are language keywords that are used to modify the visibility of a program element (function, global, class, property etc), or the way they operate within a type hierarchy.</para>
    <para styleclass="Heading2">Access modifiers</para>
    <para styleclass="Normal">Access modifiers restrict the visibility of program elements:</para>
    <para styleclass="Normal"></para>
    <list id="0" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">PUBLIC/EXPORT: A public function, global, type (class, structure, delegate etc) or type member (field, method, property, event etc) is visible to all code withing the same assembly (exe or dll) where it is declared and assemblies references by the declaring assembly. This is the default in X#.</li>
      <li styleclass="Normal">PROTECT/PROTECTED: The PROTECT(ED) keyword can be applied only to type members and restrict their visibility to code within the same type and classes that inherit from that type</li>
      <li styleclass="Normal">INSTANCE: A unique keyword to X# (and Visual Objects), very similar to PROTECT, but applies only to class fields and has different semantics to PROTECT, on the way it is used by code withing the same class (see sample below)</li>
      <li styleclass="Normal">PRIVATE/HIDDEN: Also applies to type members and is more restrictive than PROTECT, as it limits the member visibility to only code within the type where it is declared (not to classes inheriting that type)</li>
      <li styleclass="Normal">INTERNAL: Restricts a visibility of a type or member only to code only from the same assembly (dll or exe). An internal member is not visible to any code outside the defining assembly, not even to classes declared in other assemblies, inheriting from this class. Can be combined with PROTECTED, so that an INTERNAL PROTECTED member can be seen only form within the same class and also from inheriting classes that are defined in the same assembly only (not from inheriting classes that are defined in other assemblies).</li>
    </list>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Note: It is still possible to explicitly specify certain assemblies where internal types and members of an assembly are visible, y using the InternalsVisibleTo attribute. See documentation for System.Runtime.CompilerServices.InternalsVisibleToAttribute for more information.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text style="font-weight:bold;">PROTECTED vs HIDDEN</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">A compatibility feature for code derived from Visual Objects, INSTANCE applies to fields and is similar to PROTECT, but has different semantics when a property (or ACCESS) is defined with the same name. When using a PROTECT field, </para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2">Hierarchy modifiers</para>
    <para styleclass="Normal">Hierarchy modifiers</para>
    <para styleclass="Normal"></para>
  </body>
</topic>
