<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. -->
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--<Import Project="Microsoft.Managed.Core.targets"/> -->

  <PropertyGroup>
    <!-- .NETCoreApp < 3.0, .NETStandard < 2.1, or any other target framework -->
    <_MaxSupportedLangVersion Condition="('$(TargetFrameworkIdentifier)' != '.NETCoreApp' OR '$(_TargetFrameworkVersionWithoutV)' &lt; '3.0') AND
                                         ('$(TargetFrameworkIdentifier)' != '.NETStandard' OR '$(_TargetFrameworkVersionWithoutV)' &lt; '2.1')">7.3</_MaxSupportedLangVersion>
    
    <!-- .NETCoreApp < 5.0, .NETStandard == 2.1 -->
    <_MaxSupportedLangVersion Condition="(('$(TargetFrameworkIdentifier)' == '.NETCoreApp' AND '$(_TargetFrameworkVersionWithoutV)' &lt; '5.0') OR
                                          ('$(TargetFrameworkIdentifier)' == '.NETStandard' AND '$(_TargetFrameworkVersionWithoutV)' == '2.1')) AND
                                          '$(_MaxSupportedLangVersion)' == ''">8.0</_MaxSupportedLangVersion>

    <!-- .NETCoreApp == 5.0 -->
    <_MaxSupportedLangVersion Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' AND '$(_TargetFrameworkVersionWithoutV)' == '5.0' AND
                                         '$(_MaxSupportedLangVersion)' == ''">9.0</_MaxSupportedLangVersion>

    <!-- We need to adjust these langversion later when the compiler is synchronized with the current Roslyn. Our MaxSupportedLangVersion = 9.0 -->
    <!-- .NETCoreApp == 6.0 -->
    <_MaxSupportedLangVersion Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' AND '$(_TargetFrameworkVersionWithoutV)' == '6.0' AND
                                         '$(_MaxSupportedLangVersion)' == ''">9.0</_MaxSupportedLangVersion> <!-- 10.0 -->

    <!-- .NETCoreApp == 7.0 -->
    <_MaxSupportedLangVersion Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' AND '$(_TargetFrameworkVersionWithoutV)' == '7.0' AND
                                         '$(_MaxSupportedLangVersion)' == ''">9.0</_MaxSupportedLangVersion> <!-- 11.0 -->

    <!-- .NETCoreApp == 8.0 -->
    <_MaxSupportedLangVersion Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' AND '$(_TargetFrameworkVersionWithoutV)' == '8.0' AND
                                         '$(_MaxSupportedLangVersion)' == ''">9.0</_MaxSupportedLangVersion> <!-- 12.0 -->

    <MaxSupportedLangVersion>$(_MaxSupportedLangVersion)</MaxSupportedLangVersion>
    <LangVersion Condition="'$(LangVersion)' == '' AND '$(_MaxSupportedLangVersion)' != ''">$(_MaxSupportedLangVersion)</LangVersion>
  </PropertyGroup>

  <Target Name="CoreCompile"
          Inputs="$(MSBuildAllProjects);
                  @(Compile);
                  @(_CoreCompileResourceInputs);
                  $(ApplicationIcon);
                  $(KeyOriginatorFile);
                  @(ReferencePathWithRefAssemblies);
                  @(CompiledLicenseFile);
                  @(LinkResource);
                  @(EmbeddedDocumentation);
                  $(Win32Resource);
                  $(Win32Manifest);
                  @(CustomAdditionalCompileInputs);
                  $(ResolvedCodeAnalysisRuleSet);
                  @(AdditionalFiles);
                  @(EmbeddedFiles);
                  @(Analyzer);
                  @(EditorConfigFiles);
                  $(SourceLink)"
          Outputs="@(DocFileItem);
                   @(IntermediateAssembly);
                   @(IntermediateRefAssembly);
                   @(_DebugSymbolsIntermediatePath);
                   $(NonExistentFile);
                   @(CustomAdditionalCompileOutputs)"
          Returns="@(XscCommandLineArgs)"
          DependsOnTargets="$(CoreCompileDependsOn)">
    <!-- These two compiler warnings are raised when a reference is bound to a different version
             than specified in the assembly reference version number.  MSBuild raises the same warning in this case,
             so the compiler warning would be redundant. -->
    <PropertyGroup Condition="('$(TargetFrameworkVersion)' != 'v1.0') and ('$(TargetFrameworkVersion)' != 'v1.1')">
      <NoWarn>$(NoWarn);1701;1702</NoWarn>
    </PropertyGroup>

    <PropertyGroup>
      <!-- To match historical behavior, when inside VS11+ disable the warning from xsc.exe indicating that no sources were passed in-->
      <NoWarn Condition="'$(BuildingInsideVisualStudio)' == 'true' AND '$(VisualStudioVersion)' != '' AND '$(VisualStudioVersion)' &gt; '10.0'">$(NoWarn);2008</NoWarn>
    </PropertyGroup>

    <PropertyGroup>
      <!-- If the user has specified AppConfigForCompiler, we'll use it. If they have not, but they set UseAppConfigForCompiler,
                 then we'll use AppConfig -->
      <AppConfigForCompiler Condition="'$(AppConfigForCompiler)' == '' AND '$(UseAppConfigForCompiler)' == 'true'">$(AppConfig)</AppConfigForCompiler>

      <!-- If we are targeting winmdobj we want to specifically the pdbFile property since we do not want it to collide with the output of winmdexp-->
      <PdbFile Condition="'$(PdbFile)' == '' AND '$(OutputType)' == 'winmdobj' AND '$(_DebugSymbolsProduced)' == 'true'">$(IntermediateOutputPath)$(TargetName).compile.pdb</PdbFile>
    </PropertyGroup>

    <!-- Condition is to filter out the _CoreCompileResourceInputs so that it doesn't pass in culture resources to the compiler -->
    <Xsc Condition=" '%(_CoreCompileResourceInputs.WithCulture)' != 'true' "
            AdditionalFiles="@(AdditionalFiles)"
            AdditionalLibPaths="$(AdditionalLibPaths)"
            AddModules="@(AddModules)"
            AllowDot="$(AllowDot)"
            AllowOldStyleAssignments="$(AllowOldStyleAssignments)"
            AllowUnsafeBlocks="$(Unsafe)"
         AnalyzerConfigFiles="@(EditorConfigFiles)"
            Analyzers="@(Analyzer)"
            ApplicationConfiguration="$(AppConfigForCompiler)"
            AZ="$(AZ)"
            BaseAddress="$(BaseAddress)"
            CheckForOverflowUnderflow="$(CheckForOverflowUnderflow)"
            ChecksumAlgorithm="$(ChecksumAlgorithm)"
            CodeAnalysisRuleSet="$(ResolvedCodeAnalysisRuleSet)"
            CodePage="$(CodePage)"
            CommandLineOption="$(CommandLineOption)"
            CompilerPath="$(XSharpPath)"
            CS="$(CS)"
            DebugType="$(DebugType)"
            DefineConstants="$(DefineConstants)"
            DelaySign="$(DelaySign)"
            Deterministic="$(Deterministic)"
            Dialect="$(Dialect)"
            DisabledWarnings="$(DisabledWarnings)"
            DocumentationFile="@(DocFileItem)"
            EmbedAllSources="$(EmbedAllSources)"
            EmbeddedFiles="@(EmbeddedFiles)"
            EmitDebugInformation="$(EmitDebugInformation)"
            EnforceOverride="$(EnforceOverride)"
            EnforceSelf="$(EnforceSelf)"
            EnvironmentVariables="$(XscEnvironment)"
            ErrorEndLocation="$(ErrorEndLocation)"
            ErrorLog="$(ErrorLog)"
            ErrorReport="$(ErrorReport)"
            Features="$(Features)"
            FileAlignment="$(FileAlignment)"
            FOX1="$(FOX1)"
            FOX2="$(FOX2)"
            GenerateFullPaths="$(GenerateFullPaths)"
            HighEntropyVA="$(HighEntropyVA)"
            IncludePaths="$(IncludePaths)"
            InitLocals="$(InitLocals)"
            INS="$(INS)"
            KeyContainer="$(KeyContainerName)"
            KeyFile="$(KeyOriginatorFile)"
            LangVersion="$(LangVersion)"
            LB="$(LB)"
            LinkResources="@(LinkResource)"
            MainEntryPoint="$(StartupObject)"
            MemVar="$(MemVar)"
            ModernSyntax="$(ModernSyntax)"
            ModuleAssemblyName="$(ModuleAssemblyName)"
            NamedArgs="$(NamedArgs)"
            NoConfig="true"
            NoInit="$(NoInit)"
            NoLogo="$(NoLogo)"
            NoStandardDefs="$(NoStandardDefs)"
            NoStandardLib="$(NoCompilerStandardLib)"
            NoWin32Manifest="$(NoWin32Manifest)"
            NS="$(NS)"
            Optimize="$(Optimize)"
            OutputAssembly="@(IntermediateAssembly)"
            OutputRefAssembly="@(IntermediateRefAssembly)"
            OVF="$(OVF)"
            PathMap="$(PathMap)"
            PdbFile="$(PdbFile)"
            Platform="$(PlatformTarget)"
            PPO="$(PPO)"
            Prefer32Bit="$(Prefer32Bit)"
            PreferredUILang="$(PreferredUILang)"
            PublicSign="$(PublicSign)"
            References="@(ReferencePathWithRefAssemblies)"
            RefOnly="$(ProduceOnlyReferenceAssembly)"
            ReportAnalyzer="$(ReportAnalyzer)"
            Resources="@(_CoreCompileResourceInputs);@(CompiledLicenseFile)"
            ResponseFiles="$(CompilerResponseFile)"
            RootNamespace="$(RootNamespace)"
            RuntimeMetadataVersion="$(RuntimeMetadataVersion)"
            SharedCompilationId="$(SharedCompilationId)"
           SkipAnalyzers="$(_SkipAnalyzers)"
            SkipCompilerExecution="$(SkipCompilerExecution)"
            SourceLink="$(SourceLink)"
            Sources="@(Compile)"
            StandardDefs="$(StandardDefs)"
            SubsystemVersion="$(SubsystemVersion)"
            TargetType="$(OutputType)"
            ToolExe="$(XscToolExe)"
            ToolPath="$(XscToolPath)"
            TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
            Undeclared="$(Undeclared)"
            UseHostCompilerIfAvailable="$(UseHostCompilerIfAvailable)"
            UseNativeVersion="$(UseNativeVersion)"
            UseSharedCompilation="$(UseSharedCompilation)"
            Utf8Output="$(Utf8Output)"
            VO1="$(VO1)"
            VO2="$(VO2)"
            VO3="$(VO3)"
            VO4="$(VO4)"
            VO5="$(VO5)"
            VO6="$(VO6)"
            VO7="$(VO7)"
            VO8="$(VO8)"
            VO9="$(VO9)"
            VO10="$(VO10)"
            VO11="$(VO11)"
            VO12="$(VO12)"
            VO13="$(VO13)"
            VO14="$(VO14)"
            VO15="$(VO15)"
            VO16="$(VO16)"
            VO17="$(VO17)"
            VsSessionGuid="$(VsSessionGuid)"
            VulcanCompatibleResources="$(VulcanCompatibleResources)"
            WarningLevel="$(WarningLevel)"
            WarningsAsErrors="$(WarningsAsErrors)"
            WarningsNotAsErrors="$(WarningsNotAsErrors)"
            Win32Icon="$(ApplicationIcon)"
            Win32Manifest="$(Win32Manifest)"
            Win32Resource="$(Win32Resource)"
            XPP1="$(XPP1)"
    />

    <ItemGroup>
      <_CoreCompileResourceInputs Remove="@(_CoreCompileResourceInputs)" />
    </ItemGroup>

    <CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition="'$(TargetsTriggeredByCompilation)' != ''" />
  </Target>

  <!-- When we load a project in Visual Studio, the project system first does an evaluation pass of the
       project, and hands the resulting list of <Compile> items to the language service. It then does an
       execution pass executing CoreCompile passing SkipCompilerExecution=true and ProvideCommandLineArgs=true,
       that resulting command line string is where we get our compiler switches. The execution pass is much
       slower than the evaluation pass, so there's a window of time where we have a list of files, but not
       any options yet.

       Because there's a gap, that means there's a time where we are parsing source files with the default
       parse options. We'll then have to reparse them a second time which isn't great. It also means any
       cache lookups we do won't have the right options either, so the cache lookups might miss.

       To help this, we'll have properties for the evaluation pass which is an "approximation" of the
       options that would come out of CoreCompile, but only the ones that are required to be specified
       and we don't expect them to change after evaluation phase or those that matter for parsing.

       It's acceptable for the options that affect parsing to be imperfect: once the execution pass is complete we'll use those options instead,
       so any behaviors here that don't match the real command line generation will only be temporary, and
       probably won't be any worse than having no options at all. -->
  <PropertyGroup>
    <CommandLineArgsForDesignTimeEvaluation>-langversion:$(LangVersion)</CommandLineArgsForDesignTimeEvaluation>
    <CommandLineArgsForDesignTimeEvaluation Condition="'$(ChecksumAlgorithm)' != ''">$(CommandLineArgsForDesignTimeEvaluation) -checksumalgorithm:$(ChecksumAlgorithm)</CommandLineArgsForDesignTimeEvaluation>
    <CommandLineArgsForDesignTimeEvaluation Condition="'$(DefineConstants)' != ''">$(CommandLineArgsForDesignTimeEvaluation) -define:$(DefineConstants)</CommandLineArgsForDesignTimeEvaluation>
  </PropertyGroup>
</Project>
