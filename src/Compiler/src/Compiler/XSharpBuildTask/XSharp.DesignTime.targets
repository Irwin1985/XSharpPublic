<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information. -->
<!--

  This file contains Visual Studio and designer-related properties and items for X# projects.
  It is based on Microsoft.CSharp.DesignTime.targets 
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
  <VSINSTALLDIR>c:\Program Files\Microsoft Visual Studio\2022\Preview</VSINSTALLDIR>
  </PropertyGroup>
  <Import Project="Microsoft.Managed.DesignTime.targets" />

  <!-- Properties -->
  <PropertyGroup>
    <AppDesignerFolder Condition="'$(AppDesignerFolder)' == ''">Properties</AppDesignerFolder>
    <AppDesignerFolderContentsVisibleOnlyInShowAllFiles Condition="'$(AppDesignerFolderContentsVisibleOnlyInShowAllFiles)' == ''">false</AppDesignerFolderContentsVisibleOnlyInShowAllFiles>
    <LanguageServiceName Condition="'$(LanguageServiceName)' == ''">X#</LanguageServiceName>
    <LanguageServiceId Condition="'$(LanguageServiceId)'==''">{694DD9B6-B865-4C5B-AD85-86356E9C88DC}</LanguageServiceId>
    <TemplateLanguage Condition="'$(TemplateLanguage)' == ''">XSharp</TemplateLanguage>
    <AddItemTemplatesGuid Condition="'$(AddItemTemplatesGuid)' == ''">{FAE04EC0-301F-11d3-BF4B-00C04F79EFBC}</AddItemTemplatesGuid>
    <CmdUIContextGuid Condition="'$(CmdUIContextGuid)' == ''">{FAE04EC1-301F-11d3-BF4B-00C04F79EFBC}</CmdUIContextGuid>
    <GeneratorsTypeGuid Condition="'$(GeneratorsTypeGuid)' == ''">{FAE04EC1-301F-11d3-BF4B-00C04F79EFBC}</GeneratorsTypeGuid>
    <DesignerFunctionVisibility Condition="'$(DesignerFunctionVisibility)' == ''">Private</DesignerFunctionVisibility>
    <DesignerVariableNaming Condition="'$(DesignerVariableNaming)' == ''">Camel</DesignerVariableNaming>
    <DesignerHiddenCodeGeneration Condition="'$(DesignerHiddenCodeGeneration)' == ''">Declarations</DesignerHiddenCodeGeneration>
    <!-- Turn off rules and capabilities that are defined in MSBuild so that we can import our own below -->
    <DefineXSharpItemSchemas>false</DefineXSharpItemSchemas>
  </PropertyGroup>

  <ItemGroup>
    <PropertyPageSchema Include="$(XSharpXamlDir)ProjectItemsSchema.XSharp.xaml;" />
    <ProjectCapability Include="
                          XSharp;
                          Managed;
		                  SingleTargetBuildForStartupProjects;
                          ClassDesigner;
                          SharedProjectReferences;
                          ProjectPropertiesEditor;" />
  </ItemGroup>

  <ItemGroup Condition="'$(DefineCommonManagedItemSchemas)' == 'true'">

    <PropertyPageSchema Include="$(XSharpXamlDir)ApplicationPropertyPage.XSharp.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(XSharpXamlDir)LanguagePage.XSharp.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(XSharpXamlDir)DialectPage.XSharp.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(XSharpXamlDir)BuildPropertyPage.XSharp.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(XSharpXamlDir)ReferencesPage.XSharp.xaml">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(XSharpXamlDir)VOBinary.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

   <PropertyPageSchema Include="$(XSharpXamlDir)NativeResource.xaml">
      <Context>File</Context>
    </PropertyPageSchema>
	
   <PropertyPageSchema Include="$(XSharpXamlDir)NativeResource.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(XSharpXamlDir)VOBinary.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

	<PropertyPageSchema Include="$(ManagedXamlNeutralResourcesDirectory)EditorConfigFiles.xaml">
      <Context>File</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="$(ManagedXamlResourcesDirectory)EditorConfigFiles.BrowseObject.xaml">
      <Context>BrowseObject</Context>
    </PropertyPageSchema>

  </ItemGroup>

  <!-- Targets -->

  <!--
    Backwards compatibility workaround for https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1803616/.
    Razor is dependent on RazorSourceGenerator.razorencconfig during design-time build in order to behave correctly.
    The SDK conditionally includes this config file, however with the current global properties that are set,
    the condition is not met and config file will not be included. This workaround ensures the config file is included during design-time build.
    Tracking item to remove the workaround: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1806334.
  -->
  <Target Name="_FixRazorEditorConfigFiles" AfterTargets="_PrepareRazorSourceGenerators">
    <ItemGroup>
      <EditorConfigFiles Remove="$(RazorEncConfigFile)" Condition="'$(DesignTimeBuild)' == 'true'"/>
      <EditorConfigFiles Include="$(RazorEncConfigFile)" Condition="'$(DesignTimeBuild)' == 'true'"/>
    </ItemGroup>
  </Target>

  <!-- Returns Xsc command-line arguments for the language service -->
  <Target Name="CompileDesignTime"
          Returns="@(_CompilerCommandLineArgs)"
          DependsOnTargets="_CheckCompileDesignTimePrerequisite;Compile"
          Condition="'$(IsCrossTargetingBuild)' != 'true'">

    <ItemGroup>
      <_CompilerCommandLineArgs Include="@(XscCommandLineArgs)" />
    </ItemGroup>

  </Target>

</Project>