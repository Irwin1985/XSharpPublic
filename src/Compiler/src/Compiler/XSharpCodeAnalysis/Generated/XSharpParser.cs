//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\XSharp\Dev\src\Compiler\src\Compiler\XSharpCodeAnalysis\Parser\XSharp.g4 by ANTLR 4.6.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class XSharpParser : Parser {
	public const int
		FIRST_KEYWORD=1, ACCESS=2, ALIGN=3, AS=4, ASPEN=5, ASSIGN=6, BEGIN=7, 
		BREAK=8, CALLBACK=9, CASE=10, CAST=11, CLASS=12, CLIPPER=13, DECLARE=14, 
		DEFINE=15, DIM=16, DLL=17, DLLEXPORT=18, DO=19, DOWNTO=20, ELSE=21, ELSEIF=22, 
		END=23, ENDCASE=24, ENDDO=25, ENDIF=26, EXIT=27, EXPORT=28, FASTCALL=29, 
		FIELD=30, FOR=31, FUNCTION=32, GLOBAL=33, HIDDEN=34, IF=35, IIF=36, INHERIT=37, 
		INIT1=38, INIT2=39, INIT3=40, INSTANCE=41, IS=42, IN=43, LOCAL=44, LOOP=45, 
		MEMBER=46, MEMVAR=47, METHOD=48, NAMEOF=49, NEXT=50, OTHERWISE=51, PARAMETERS=52, 
		PASCAL=53, PRIVATE=54, PROCEDURE=55, PROTECTED=56, PUBLIC=57, RECOVER=58, 
		RETURN=59, SELF=60, SEQUENCE=61, SIZEOF=62, STATIC=63, STEP=64, STRICT=65, 
		SUPER=66, THISCALL=67, TO=68, TYPEOF=69, UNION=70, UPTO=71, USING=72, 
		WHILE=73, WINCALL=74, CATCH=75, FINALLY=76, THROW=77, FIRST_POSITIONAL_KEYWORD=78, 
		ABSTRACT=79, AUTO=80, CASTCLASS=81, CONSTRUCTOR=82, CONST=83, DEFAULT=84, 
		DELEGATE=85, DESTRUCTOR=86, ENUM=87, EVENT=88, EXPLICIT=89, FOREACH=90, 
		GET=91, IMPLEMENTS=92, IMPLICIT=93, IMPLIED=94, INITONLY=95, INTERFACE=96, 
		INTERNAL=97, LOCK=98, NAMESPACE=99, NEW=100, OPERATOR=101, OUT=102, PARTIAL=103, 
		PROPERTY=104, REPEAT=105, SCOPE=106, SEALED=107, SET=108, STRUCTURE=109, 
		TRY=110, UNTIL=111, VALUE=112, VIRTUAL=113, VOSTRUCT=114, ADD=115, ARGLIST=116, 
		ASCENDING=117, ASYNC=118, ASTYPE=119, AWAIT=120, BY=121, CHECKED=122, 
		DESCENDING=123, EQUALS=124, EXTERN=125, FIXED=126, FROM=127, GROUP=128, 
		INIT=129, INTO=130, JOIN=131, LET=132, NOP=133, OF=134, ON=135, ORDERBY=136, 
		OVERRIDE=137, PARAMS=138, REMOVE=139, SELECT=140, STACKALLOC=141, SWITCH=142, 
		UNCHECKED=143, UNSAFE=144, VAR=145, VOLATILE=146, WHEN=147, WHERE=148, 
		YIELD=149, WITH=150, LAST_POSITIONAL_KEYWORD=151, FIRST_TYPE=152, ARRAY=153, 
		BYTE=154, CODEBLOCK=155, DATE=156, DWORD=157, FLOAT=158, INT=159, LOGIC=160, 
		LONGINT=161, OBJECT=162, PSZ=163, PTR=164, REAL4=165, REAL8=166, REF=167, 
		SHORTINT=168, STRING=169, SYMBOL=170, USUAL=171, VOID=172, WORD=173, CHAR=174, 
		INT64=175, UINT64=176, DYNAMIC=177, DECIMAL=178, DATETIME=179, CURRENCY=180, 
		BINARY=181, NINT=182, NUINT=183, LAST_TYPE=184, UDC_KEYWORD=185, SCRIPT_REF=186, 
		SCRIPT_LOAD=187, ASSIGNMENT=188, DEFERRED=189, ENDCLASS=190, EXPORTED=191, 
		FREEZE=192, FINAL=193, INLINE=194, INTRODUCE=195, NOSAVE=196, READONLY=197, 
		SHARING=198, SHARED=199, SYNC=200, ENDDEFINE=201, LPARAMETERS=202, OLEPUBLIC=203, 
		EXCLUDE=204, THISACCESS=205, HELPSTRING=206, DIMENSION=207, NOINIT=208, 
		EACH=209, THEN=210, FOX_M=211, LAST_KEYWORD=212, FIRST_NULL=213, NIL=214, 
		NULL=215, NULL_ARRAY=216, NULL_CODEBLOCK=217, NULL_DATE=218, NULL_OBJECT=219, 
		NULL_PSZ=220, NULL_PTR=221, NULL_STRING=222, NULL_SYMBOL=223, NULL_FOX=224, 
		LAST_NULL=225, FIRST_OPERATOR=226, LT=227, LTE=228, GT=229, GTE=230, EQ=231, 
		EEQ=232, SUBSTR=233, NEQ=234, NEQ2=235, INC=236, DEC=237, PLUS=238, MINUS=239, 
		DIV=240, MOD=241, EXP=242, LSHIFT=243, RSHIFT=244, TILDE=245, MULT=246, 
		QQMARK=247, QMARK=248, AND=249, OR=250, NOT=251, BIT_NOT=252, BIT_AND=253, 
		BIT_OR=254, BIT_XOR=255, ASSIGN_OP=256, ASSIGN_ADD=257, ASSIGN_SUB=258, 
		ASSIGN_EXP=259, ASSIGN_MUL=260, ASSIGN_DIV=261, ASSIGN_MOD=262, ASSIGN_BITAND=263, 
		ASSIGN_BITOR=264, ASSIGN_LSHIFT=265, ASSIGN_RSHIFT=266, ASSIGN_XOR=267, 
		ASSIGN_QQMARK=268, LOGIC_AND=269, LOGIC_OR=270, LOGIC_NOT=271, LOGIC_XOR=272, 
		FOX_AND=273, FOX_OR=274, FOX_NOT=275, FOX_XOR=276, LPAREN=277, RPAREN=278, 
		LCURLY=279, RCURLY=280, LBRKT=281, RBRKT=282, COLON=283, COMMA=284, PIPE=285, 
		AMP=286, ADDROF=287, ALIAS=288, DOT=289, COLONCOLON=290, BACKSLASH=291, 
		ELLIPSIS=292, BACKBACKSLASH=293, LAST_OPERATOR=294, FIRST_CONSTANT=295, 
		FALSE_CONST=296, TRUE_CONST=297, HEX_CONST=298, BIN_CONST=299, INT_CONST=300, 
		DATE_CONST=301, DATETIME_CONST=302, REAL_CONST=303, INVALID_NUMBER=304, 
		SYMBOL_CONST=305, CHAR_CONST=306, STRING_CONST=307, ESCAPED_STRING_CONST=308, 
		INTERPOLATED_STRING_CONST=309, INCOMPLETE_STRING_CONST=310, TEXT_STRING_CONST=311, 
		BRACKETED_STRING_CONST=312, BINARY_CONST=313, LAST_CONSTANT=314, PP_FIRST=315, 
		PP_COMMAND=316, PP_DEFINE=317, PP_ELSE=318, PP_ENDIF=319, PP_ENDREGION=320, 
		PP_ERROR=321, PP_IF=322, PP_IFDEF=323, PP_IFNDEF=324, PP_INCLUDE=325, 
		PP_LINE=326, PP_REGION=327, PP_STDOUT=328, PP_TRANSLATE=329, PP_UNDEF=330, 
		PP_WARNING=331, PP_PRAGMA=332, PP_TEXT=333, PP_ENDTEXT=334, PP_LAST=335, 
		MACRO=336, UDCSEP=337, ID=338, DOC_COMMENT=339, SL_COMMENT=340, ML_COMMENT=341, 
		LINE_CONT=342, LINE_CONT_OLD=343, SEMI=344, WS=345, NL=346, EOS=347, UNRECOGNIZED=348, 
		LAST=349;
	public const int
		RULE_script = 0, RULE_scriptEntity = 1, RULE_macroScript = 2, RULE_source = 3, 
		RULE_foxsource = 4, RULE_entity = 5, RULE_eos = 6, RULE_funcproc = 7, 
		RULE_funcproctype = 8, RULE_signature = 9, RULE_vodummyclauses = 10, RULE_callingconvention = 11, 
		RULE_vodll = 12, RULE_dllcallconv = 13, RULE_foxdll = 14, RULE_foxdllparam = 15, 
		RULE_vodllmethod = 16, RULE_parameterList = 17, RULE_parameter = 18, RULE_parameterDeclMods = 19, 
		RULE_statementBlock = 20, RULE_funcprocModifiers = 21, RULE_using_ = 22, 
		RULE_voglobal = 23, RULE_method = 24, RULE_methodtype = 25, RULE_vodefine = 26, 
		RULE_vostruct = 27, RULE_vostructmember = 28, RULE_vounion = 29, RULE_votypeModifiers = 30, 
		RULE_namespace_ = 31, RULE_interface_ = 32, RULE_class_ = 33, RULE_classModifiers = 34, 
		RULE_typeparameters = 35, RULE_typeparameter = 36, RULE_typeparameterconstraintsclause = 37, 
		RULE_typeparameterconstraint = 38, RULE_structure_ = 39, RULE_delegate_ = 40, 
		RULE_enum_ = 41, RULE_enummember = 42, RULE_event_ = 43, RULE_eventLineAccessor = 44, 
		RULE_eventAccessor = 45, RULE_classvars = 46, RULE_classvarModifiers = 47, 
		RULE_classvar = 48, RULE_arraysub = 49, RULE_property = 50, RULE_propertyParameterList = 51, 
		RULE_propertyAutoAccessor = 52, RULE_propertyLineAccessor = 53, RULE_accessorModifiers = 54, 
		RULE_expressionList = 55, RULE_propertyAccessor = 56, RULE_classmember = 57, 
		RULE_constructor = 58, RULE_constructorchain = 59, RULE_constructorModifiers = 60, 
		RULE_vodeclare = 61, RULE_destructor = 62, RULE_destructorModifiers = 63, 
		RULE_overloadedOps = 64, RULE_conversionOps = 65, RULE_operator_ = 66, 
		RULE_operatorModifiers = 67, RULE_memberModifiers = 68, RULE_attributes = 69, 
		RULE_attributeBlock = 70, RULE_attributeTarget = 71, RULE_attribute = 72, 
		RULE_attributeParam = 73, RULE_globalAttributes = 74, RULE_globalAttributeTarget = 75, 
		RULE_filewidememvar = 76, RULE_statement = 77, RULE_blockTokens = 78, 
		RULE_condBlock = 79, RULE_switchBlock = 80, RULE_catchBlock = 81, RULE_recoverBlock = 82, 
		RULE_variableDeclaration = 83, RULE_variableDeclarator = 84, RULE_localdecl = 85, 
		RULE_localvar = 86, RULE_impliedvar = 87, RULE_fielddecl = 88, RULE_memvardecl = 89, 
		RULE_memvar = 90, RULE_foxmemvardecl = 91, RULE_foxlocaldecl = 92, RULE_foxdimvar = 93, 
		RULE_foxclasslib = 94, RULE_foxlparameter = 95, RULE_foxtypedecl = 96, 
		RULE_foxmemvar = 97, RULE_localfuncproc = 98, RULE_localfuncprocModifiers = 99, 
		RULE_assignoperator = 100, RULE_expression = 101, RULE_primary = 102, 
		RULE_boundExpression = 103, RULE_aliasExpression = 104, RULE_objectOrCollectioninitializer = 105, 
		RULE_objectinitializer = 106, RULE_memberinitializer = 107, RULE_initializervalue = 108, 
		RULE_complexInitExpr = 109, RULE_initializerMember = 110, RULE_collectioninitializer = 111, 
		RULE_bracketedArgumentList = 112, RULE_unnamedArgument = 113, RULE_argumentList = 114, 
		RULE_namedArgument = 115, RULE_iif = 116, RULE_nameDot = 117, RULE_name = 118, 
		RULE_aliasedName = 119, RULE_simpleName = 120, RULE_genericArgumentList = 121, 
		RULE_identifierName = 122, RULE_varidentifier = 123, RULE_varidentifierName = 124, 
		RULE_datatype = 125, RULE_arrayRank = 126, RULE_typeName = 127, RULE_usualTypeName = 128, 
		RULE_literalArray = 129, RULE_arrayElement = 130, RULE_anonType = 131, 
		RULE_anonMember = 132, RULE_codeblock = 133, RULE_codeblockCode = 134, 
		RULE_lambdaParameterList = 135, RULE_codeblockParamList = 136, RULE_codeblockExprList = 137, 
		RULE_anonymousMethodExpression = 138, RULE_explicitAnonymousFunctionParamList = 139, 
		RULE_explicitAnonymousFunctionParameter = 140, RULE_linqQuery = 141, RULE_fromClause = 142, 
		RULE_queryBody = 143, RULE_queryBodyClause = 144, RULE_joinIntoClause = 145, 
		RULE_ordering = 146, RULE_selectOrGroupclause = 147, RULE_queryContinuation = 148, 
		RULE_identifier = 149, RULE_identifierString = 150, RULE_xbaseFunc = 151, 
		RULE_xbaseType = 152, RULE_nativeType = 153, RULE_literalValue = 154, 
		RULE_parserLiteralValue = 155, RULE_keywordvo = 156, RULE_keywordxs = 157, 
		RULE_keywordxpp = 158, RULE_xppclass = 159, RULE_xppclassModifiers = 160, 
		RULE_xppclassMember = 161, RULE_xppmethodvis = 162, RULE_xppvisibility = 163, 
		RULE_xppdeclareMethod = 164, RULE_xppdeclmethodparams = 165, RULE_xppisin = 166, 
		RULE_xppmemberModifiers = 167, RULE_xppclassvars = 168, RULE_xppvarassignment = 169, 
		RULE_xppdeclareproperty = 170, RULE_xppaccessors = 171, RULE_xppmethod = 172, 
		RULE_xppinlineMethod = 173, RULE_keywordfox = 174, RULE_foxclass = 175, 
		RULE_foxclassmember = 176, RULE_foxmethod = 177, RULE_foxclassvars = 178, 
		RULE_foxfield = 179, RULE_foxfieldinitializer = 180, RULE_foximplementsclause = 181, 
		RULE_foxaddobjectclause = 182, RULE_foxpemcomattrib = 183;
	public static readonly string[] ruleNames = {
		"script", "scriptEntity", "macroScript", "source", "foxsource", "entity", 
		"eos", "funcproc", "funcproctype", "signature", "vodummyclauses", "callingconvention", 
		"vodll", "dllcallconv", "foxdll", "foxdllparam", "vodllmethod", "parameterList", 
		"parameter", "parameterDeclMods", "statementBlock", "funcprocModifiers", 
		"using_", "voglobal", "method", "methodtype", "vodefine", "vostruct", 
		"vostructmember", "vounion", "votypeModifiers", "namespace_", "interface_", 
		"class_", "classModifiers", "typeparameters", "typeparameter", "typeparameterconstraintsclause", 
		"typeparameterconstraint", "structure_", "delegate_", "enum_", "enummember", 
		"event_", "eventLineAccessor", "eventAccessor", "classvars", "classvarModifiers", 
		"classvar", "arraysub", "property", "propertyParameterList", "propertyAutoAccessor", 
		"propertyLineAccessor", "accessorModifiers", "expressionList", "propertyAccessor", 
		"classmember", "constructor", "constructorchain", "constructorModifiers", 
		"vodeclare", "destructor", "destructorModifiers", "overloadedOps", "conversionOps", 
		"operator_", "operatorModifiers", "memberModifiers", "attributes", "attributeBlock", 
		"attributeTarget", "attribute", "attributeParam", "globalAttributes", 
		"globalAttributeTarget", "filewidememvar", "statement", "blockTokens", 
		"condBlock", "switchBlock", "catchBlock", "recoverBlock", "variableDeclaration", 
		"variableDeclarator", "localdecl", "localvar", "impliedvar", "fielddecl", 
		"memvardecl", "memvar", "foxmemvardecl", "foxlocaldecl", "foxdimvar", 
		"foxclasslib", "foxlparameter", "foxtypedecl", "foxmemvar", "localfuncproc", 
		"localfuncprocModifiers", "assignoperator", "expression", "primary", "boundExpression", 
		"aliasExpression", "objectOrCollectioninitializer", "objectinitializer", 
		"memberinitializer", "initializervalue", "complexInitExpr", "initializerMember", 
		"collectioninitializer", "bracketedArgumentList", "unnamedArgument", "argumentList", 
		"namedArgument", "iif", "nameDot", "name", "aliasedName", "simpleName", 
		"genericArgumentList", "identifierName", "varidentifier", "varidentifierName", 
		"datatype", "arrayRank", "typeName", "usualTypeName", "literalArray", 
		"arrayElement", "anonType", "anonMember", "codeblock", "codeblockCode", 
		"lambdaParameterList", "codeblockParamList", "codeblockExprList", "anonymousMethodExpression", 
		"explicitAnonymousFunctionParamList", "explicitAnonymousFunctionParameter", 
		"linqQuery", "fromClause", "queryBody", "queryBodyClause", "joinIntoClause", 
		"ordering", "selectOrGroupclause", "queryContinuation", "identifier", 
		"identifierString", "xbaseFunc", "xbaseType", "nativeType", "literalValue", 
		"parserLiteralValue", "keywordvo", "keywordxs", "keywordxpp", "xppclass", 
		"xppclassModifiers", "xppclassMember", "xppmethodvis", "xppvisibility", 
		"xppdeclareMethod", "xppdeclmethodparams", "xppisin", "xppmemberModifiers", 
		"xppclassvars", "xppvarassignment", "xppdeclareproperty", "xppaccessors", 
		"xppmethod", "xppinlineMethod", "keywordfox", "foxclass", "foxclassmember", 
		"foxmethod", "foxclassvars", "foxfield", "foxfieldinitializer", "foximplementsclause", 
		"foxaddobjectclause", "foxpemcomattrib"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "FIRST_KEYWORD", "ACCESS", "ALIGN", "AS", "ASPEN", "ASSIGN", "BEGIN", 
		"BREAK", "CALLBACK", "CASE", "CAST", "CLASS", "CLIPPER", "DECLARE", "DEFINE", 
		"DIM", "DLL", "DLLEXPORT", "DO", "DOWNTO", "ELSE", "ELSEIF", "END", "ENDCASE", 
		"ENDDO", "ENDIF", "EXIT", "EXPORT", "FASTCALL", "FIELD", "FOR", "FUNCTION", 
		"GLOBAL", "HIDDEN", "IF", "IIF", "INHERIT", "INIT1", "INIT2", "INIT3", 
		"INSTANCE", "IS", "IN", "LOCAL", "LOOP", "MEMBER", "MEMVAR", "METHOD", 
		"NAMEOF", "NEXT", "OTHERWISE", "PARAMETERS", "PASCAL", "PRIVATE", "PROCEDURE", 
		"PROTECTED", "PUBLIC", "RECOVER", "RETURN", "SELF", "SEQUENCE", "SIZEOF", 
		"STATIC", "STEP", "STRICT", "SUPER", "THISCALL", "TO", "TYPEOF", "UNION", 
		"UPTO", "USING", "WHILE", "WINCALL", "CATCH", "FINALLY", "THROW", "FIRST_POSITIONAL_KEYWORD", 
		"ABSTRACT", "AUTO", "CASTCLASS", "CONSTRUCTOR", "CONST", "DEFAULT", "DELEGATE", 
		"DESTRUCTOR", "ENUM", "EVENT", "EXPLICIT", "FOREACH", "GET", "IMPLEMENTS", 
		"IMPLICIT", "IMPLIED", "INITONLY", "INTERFACE", "INTERNAL", "LOCK", "NAMESPACE", 
		"NEW", "OPERATOR", "OUT", "PARTIAL", "PROPERTY", "REPEAT", "SCOPE", "SEALED", 
		"SET", "STRUCTURE", "TRY", "UNTIL", "VALUE", "VIRTUAL", "VOSTRUCT", "ADD", 
		"ARGLIST", "ASCENDING", "ASYNC", "ASTYPE", "AWAIT", "BY", "CHECKED", "DESCENDING", 
		"EQUALS", "EXTERN", "FIXED", "FROM", "GROUP", "INIT", "INTO", "JOIN", 
		"LET", "NOP", "OF", "ON", "ORDERBY", "OVERRIDE", "PARAMS", "REMOVE", "SELECT", 
		"STACKALLOC", "SWITCH", "UNCHECKED", "UNSAFE", "VAR", "VOLATILE", "WHEN", 
		"WHERE", "YIELD", "WITH", "LAST_POSITIONAL_KEYWORD", "FIRST_TYPE", "ARRAY", 
		"BYTE", "CODEBLOCK", "DATE", "DWORD", "FLOAT", "INT", "LOGIC", "LONGINT", 
		"OBJECT", "PSZ", "PTR", "REAL4", "REAL8", "REF", "SHORTINT", "STRING", 
		"SYMBOL", "USUAL", "VOID", "WORD", "CHAR", "INT64", "UINT64", "DYNAMIC", 
		"DECIMAL", "DATETIME", "CURRENCY", "BINARY", "NINT", "NUINT", "LAST_TYPE", 
		"UDC_KEYWORD", "SCRIPT_REF", "SCRIPT_LOAD", "ASSIGNMENT", "DEFERRED", 
		"ENDCLASS", "EXPORTED", "FREEZE", "FINAL", "INLINE", "INTRODUCE", "NOSAVE", 
		"READONLY", "SHARING", "SHARED", "SYNC", "ENDDEFINE", "LPARAMETERS", "OLEPUBLIC", 
		"EXCLUDE", "THISACCESS", "HELPSTRING", "DIMENSION", "NOINIT", "EACH", 
		"THEN", "FOX_M", "LAST_KEYWORD", "FIRST_NULL", "NIL", "NULL", "NULL_ARRAY", 
		"NULL_CODEBLOCK", "NULL_DATE", "NULL_OBJECT", "NULL_PSZ", "NULL_PTR", 
		"NULL_STRING", "NULL_SYMBOL", "NULL_FOX", "LAST_NULL", "FIRST_OPERATOR", 
		"LT", "LTE", "GT", "GTE", "EQ", "EEQ", "SUBSTR", "NEQ", "NEQ2", "INC", 
		"DEC", "PLUS", "MINUS", "DIV", "MOD", "EXP", "LSHIFT", "RSHIFT", "TILDE", 
		"MULT", "QQMARK", "QMARK", "AND", "OR", "NOT", "BIT_NOT", "BIT_AND", "BIT_OR", 
		"BIT_XOR", "ASSIGN_OP", "ASSIGN_ADD", "ASSIGN_SUB", "ASSIGN_EXP", "ASSIGN_MUL", 
		"ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN_BITAND", "ASSIGN_BITOR", "ASSIGN_LSHIFT", 
		"ASSIGN_RSHIFT", "ASSIGN_XOR", "ASSIGN_QQMARK", "LOGIC_AND", "LOGIC_OR", 
		"LOGIC_NOT", "LOGIC_XOR", "FOX_AND", "FOX_OR", "FOX_NOT", "FOX_XOR", "LPAREN", 
		"RPAREN", "LCURLY", "RCURLY", "LBRKT", "RBRKT", "COLON", "COMMA", "PIPE", 
		"AMP", "ADDROF", "ALIAS", "DOT", "COLONCOLON", "BACKSLASH", "ELLIPSIS", 
		"BACKBACKSLASH", "LAST_OPERATOR", "FIRST_CONSTANT", "FALSE_CONST", "TRUE_CONST", 
		"HEX_CONST", "BIN_CONST", "INT_CONST", "DATE_CONST", "DATETIME_CONST", 
		"REAL_CONST", "INVALID_NUMBER", "SYMBOL_CONST", "CHAR_CONST", "STRING_CONST", 
		"ESCAPED_STRING_CONST", "INTERPOLATED_STRING_CONST", "INCOMPLETE_STRING_CONST", 
		"TEXT_STRING_CONST", "BRACKETED_STRING_CONST", "BINARY_CONST", "LAST_CONSTANT", 
		"PP_FIRST", "PP_COMMAND", "PP_DEFINE", "PP_ELSE", "PP_ENDIF", "PP_ENDREGION", 
		"PP_ERROR", "PP_IF", "PP_IFDEF", "PP_IFNDEF", "PP_INCLUDE", "PP_LINE", 
		"PP_REGION", "PP_STDOUT", "PP_TRANSLATE", "PP_UNDEF", "PP_WARNING", "PP_PRAGMA", 
		"PP_TEXT", "PP_ENDTEXT", "PP_LAST", "MACRO", "UDCSEP", "ID", "DOC_COMMENT", 
		"SL_COMMENT", "ML_COMMENT", "LINE_CONT", "LINE_CONT_OLD", "SEMI", "WS", 
		"NL", "EOS", "UNRECOGNIZED", "LAST"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public XSharpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ScriptContext : XSharpParserRuleContext {
		public IToken _STRING_CONST;
		public IList<IToken> _Includes = new List<IToken>();
		public IList<IToken> _References = new List<IToken>();
		public ScriptEntityContext _scriptEntity;
		public IList<ScriptEntityContext> _Entities = new List<ScriptEntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public ITerminalNode[] SCRIPT_LOAD() { return GetTokens(XSharpParser.SCRIPT_LOAD); }
		public ITerminalNode SCRIPT_LOAD(int i) {
			return GetToken(XSharpParser.SCRIPT_LOAD, i);
		}
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode[] SCRIPT_REF() { return GetTokens(XSharpParser.SCRIPT_REF); }
		public ITerminalNode SCRIPT_REF(int i) {
			return GetToken(XSharpParser.SCRIPT_REF, i);
		}
		public ITerminalNode[] STRING_CONST() { return GetTokens(XSharpParser.STRING_CONST); }
		public ITerminalNode STRING_CONST(int i) {
			return GetToken(XSharpParser.STRING_CONST, i);
		}
		public ScriptEntityContext[] scriptEntity() {
			return GetRuleContexts<ScriptEntityContext>();
		}
		public ScriptEntityContext scriptEntity(int i) {
			return GetRuleContext<ScriptEntityContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 374;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case SCRIPT_LOAD:
						{
						State = 368; Match(SCRIPT_LOAD);
						State = 369; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._Includes.Add(_localctx._STRING_CONST);
						State = 370; Match(EOS);
						}
						break;
					case SCRIPT_REF:
						{
						State = 371; Match(SCRIPT_REF);
						State = 372; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._References.Add(_localctx._STRING_CONST);
						State = 373; Match(EOS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 378;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 382;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 379; _localctx._scriptEntity = scriptEntity();
					_localctx._Entities.Add(_localctx._scriptEntity);
					}
					} 
				}
				State = 384;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			State = 385; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptEntityContext : XSharpParserRuleContext {
		public StatementContext Stmt;
		public EntityContext Entity;
		public ExpressionContext Expr;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptEntity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScriptEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScriptEntity(this);
		}
	}

	[RuleVersion(0)]
	public ScriptEntityContext scriptEntity() {
		ScriptEntityContext _localctx = new ScriptEntityContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_scriptEntity);
		try {
			State = 390;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387; _localctx.Stmt = statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388; _localctx.Entity = entity();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroScriptContext : XSharpParserRuleContext {
		public CodeblockContext CbExpr;
		public CodeblockCodeContext Code;
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public MacroScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroScript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroScript(this);
		}
	}

	[RuleVersion(0)]
	public MacroScriptContext macroScript() {
		MacroScriptContext _localctx = new MacroScriptContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_macroScript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 392; _localctx.CbExpr = codeblock();
				}
				break;

			case 2:
				{
				State = 393; _localctx.Code = codeblockCode();
				}
				break;
			}
			State = 396; Match(EOS);
			State = 397; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : XSharpParserRuleContext {
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSource(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_source);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 399; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 404;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 405; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxsourceContext : XSharpParserRuleContext {
		public FilewidememvarContext _filewidememvar;
		public IList<FilewidememvarContext> _MemVars = new List<FilewidememvarContext>();
		public StatementBlockContext StmtBlk;
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FilewidememvarContext[] filewidememvar() {
			return GetRuleContexts<FilewidememvarContext>();
		}
		public FilewidememvarContext filewidememvar(int i) {
			return GetRuleContext<FilewidememvarContext>(i);
		}
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public FoxsourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxsource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxsource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxsource(this);
		}
	}

	[RuleVersion(0)]
	public FoxsourceContext foxsource() {
		FoxsourceContext _localctx = new FoxsourceContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_foxsource);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 407;
					if (!(HasMemVars)) throw new FailedPredicateException(this, "HasMemVars");
					State = 408; _localctx._filewidememvar = filewidememvar();
					_localctx._MemVars.Add(_localctx._filewidememvar);
					}
					} 
				}
				State = 413;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			State = 414; _localctx.StmtBlk = statementBlock();
			State = 418;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 415; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 420;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 421; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : XSharpParserRuleContext {
		public Namespace_Context namespace_() {
			return GetRuleContext<Namespace_Context>(0);
		}
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public FoxclassContext foxclass() {
			return GetRuleContext<FoxclassContext>(0);
		}
		public XppclassContext xppclass() {
			return GetRuleContext<XppclassContext>(0);
		}
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public GlobalAttributesContext globalAttributes() {
			return GetRuleContext<GlobalAttributesContext>(0);
		}
		public VostructContext vostruct() {
			return GetRuleContext<VostructContext>(0);
		}
		public VounionContext vounion() {
			return GetRuleContext<VounionContext>(0);
		}
		public FuncprocContext funcproc() {
			return GetRuleContext<FuncprocContext>(0);
		}
		public Using_Context using_() {
			return GetRuleContext<Using_Context>(0);
		}
		public VodefineContext vodefine() {
			return GetRuleContext<VodefineContext>(0);
		}
		public VoglobalContext voglobal() {
			return GetRuleContext<VoglobalContext>(0);
		}
		public VodllContext vodll() {
			return GetRuleContext<VodllContext>(0);
		}
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public XppmethodContext xppmethod() {
			return GetRuleContext<XppmethodContext>(0);
		}
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public FilewidememvarContext filewidememvar() {
			return GetRuleContext<FilewidememvarContext>(0);
		}
		public FoxdllContext foxdll() {
			return GetRuleContext<FoxdllContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_entity);
		try {
			State = 455;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 423; namespace_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 424; class_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 425;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 426; foxclass();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 427;
				if (!(IsXPP)) throw new FailedPredicateException(this, "IsXPP");
				State = 428; xppclass();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 429; structure_();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 430; interface_();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 431; delegate_();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 432; event_();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 433; enum_();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 434; globalAttributes();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 435;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 436; vostruct();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 437;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 438; vounion();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 439; funcproc();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 440; using_();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 441; vodefine();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 442; voglobal();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 443; vodll();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 444;
				if (!(!IsXPP)) throw new FailedPredicateException(this, "!IsXPP");
				State = 445; method();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 446;
				if (!(IsXPP)) throw new FailedPredicateException(this, "IsXPP");
				State = 447; xppmethod();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 448; constructor();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 449; destructor();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 450;
				if (!(HasMemVars)) throw new FailedPredicateException(this, "HasMemVars");
				State = 451; filewidememvar();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 452;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 453; foxdll();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 454; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : XSharpParserRuleContext {
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_eos);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 457; Match(EOS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 460;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncprocContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public IToken InitExit;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public FuncproctypeContext T2;
		public VodummyclausesContext vodummyclauses() {
			return GetRuleContext<VodummyclausesContext>(0);
		}
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode INIT1() { return GetToken(XSharpParser.INIT1, 0); }
		public ITerminalNode INIT2() { return GetToken(XSharpParser.INIT2, 0); }
		public ITerminalNode INIT3() { return GetToken(XSharpParser.INIT3, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public FuncprocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcproc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncproc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncproc(this);
		}
	}

	[RuleVersion(0)]
	public FuncprocContext funcproc() {
		FuncprocContext _localctx = new FuncprocContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_funcproc);
		int _la;
		try {
			State = 496;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 463;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 462; _localctx.Attributes = attributes();
					}
				}

				State = 466;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
					{
					State = 465; _localctx.Modifiers = funcprocModifiers();
					}
				}

				State = 468; _localctx.T = funcproctype();
				State = 469; _localctx.Sig = signature();
				State = 471;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) {
					{
					State = 470;
					_localctx.InitExit = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) ) {
						_localctx.InitExit = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 473; vodummyclauses();
				State = 474; _localctx.end = eos();
				State = 475; _localctx.StmtBlk = statementBlock();
				State = 480;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 476; Match(END);
					State = 477; _localctx.T2 = funcproctype();
					State = 478; Match(EOS);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 482; _localctx.Attributes = attributes();
					}
				}

				State = 485;
				_localctx.InitExit = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==EXIT || _la==INIT) ) {
					_localctx.InitExit = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 486; _localctx.T = funcproctype();
				State = 487; _localctx.Sig = signature();
				State = 488; _localctx.end = eos();
				State = 489; _localctx.StmtBlk = statementBlock();
				State = 494;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					State = 490; Match(END);
					State = 491; _localctx.T2 = funcproctype();
					State = 492; Match(EOS);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncproctypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public FuncproctypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcproctype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncproctype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncproctype(this);
		}
	}

	[RuleVersion(0)]
	public FuncproctypeContext funcproctype() {
		FuncproctypeContext _localctx = new FuncproctypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_funcproctype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public ExpressionContext ExpressionBody;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; _localctx.Id = identifier();
			State = 502;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 501; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 505;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 504; _localctx.ParamList = parameterList();
				}
			}

			State = 509;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 507; Match(AS);
				State = 508; _localctx.Type = datatype();
				}
			}

			State = 514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 511; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 516;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 518;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 517; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 522;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 520; Match(UDCSEP);
				State = 521; _localctx.ExpressionBody = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodummyclausesContext : XSharpParserRuleContext {
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public VodummyclausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodummyclauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodummyclauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodummyclauses(this);
		}
	}

	[RuleVersion(0)]
	public VodummyclausesContext vodummyclauses() {
		VodummyclausesContext _localctx = new VodummyclausesContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_vodummyclauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXPORT) {
				{
				State = 524; Match(EXPORT);
				State = 525; Match(LOCAL);
				}
			}

			State = 530;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DLLEXPORT) {
				{
				State = 528; Match(DLLEXPORT);
				State = 529; Match(STRING_CONST);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallingconventionContext : XSharpParserRuleContext {
		public IToken Convention;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public CallingconventionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callingconvention; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCallingconvention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCallingconvention(this);
		}
	}

	[RuleVersion(0)]
	public CallingconventionContext callingconvention() {
		CallingconventionContext _localctx = new CallingconventionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_callingconvention);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			_localctx.Convention = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) ) {
				_localctx.Convention = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodllContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken D;
		public FuncproctypeContext T;
		public IdentifierContext Id;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public DllcallconvContext CallingConvention;
		public IdentifierStringContext Dll;
		public IdentifierStringContext Extension;
		public IToken Ordinal;
		public IdentifierStringContext Entrypoint;
		public IToken Address;
		public IToken Number;
		public IToken CharSet;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public FuncproctypeContext funcproctype() {
			return GetRuleContext<FuncproctypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierStringContext[] identifierString() {
			return GetRuleContexts<IdentifierStringContext>();
		}
		public IdentifierStringContext identifierString(int i) {
			return GetRuleContext<IdentifierStringContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(XSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(XSharpParser.DOT, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public DllcallconvContext dllcallconv() {
			return GetRuleContext<DllcallconvContext>(0);
		}
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode[] INT_CONST() { return GetTokens(XSharpParser.INT_CONST); }
		public ITerminalNode INT_CONST(int i) {
			return GetToken(XSharpParser.INT_CONST, i);
		}
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public VodllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodll(this);
		}
	}

	[RuleVersion(0)]
	public VodllContext vodll() {
		VodllContext _localctx = new VodllContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_vodll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 534; _localctx.Attributes = attributes();
				}
			}

			State = 538;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 537; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 540; _localctx.D = Match(DLL);
			State = 541; _localctx.T = funcproctype();
			State = 542; _localctx.Id = identifier();
			State = 544;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 543; _localctx.ParamList = parameterList();
				}
			}

			State = 548;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 546; Match(AS);
				State = 547; _localctx.Type = datatype();
				}
			}

			State = 551;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 550; _localctx.CallingConvention = dllcallconv();
				}
			}

			State = 553; Match(COLON);
			State = 554; _localctx.Dll = identifierString();
			State = 557;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 555; Match(DOT);
				State = 556; _localctx.Extension = identifierString();
				}
				break;
			}
			State = 572;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case REAL_CONST:
				{
				State = 559; _localctx.Ordinal = Match(REAL_CONST);
				}
				break;
			case DOT:
				{
				State = 560; Match(DOT);
				State = 561; _localctx.Entrypoint = identifierString();
				State = 563;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADDROF) {
					{
					State = 562; _localctx.Address = Match(ADDROF);
					}
				}

				State = 566;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT_CONST) {
					{
					State = 565; _localctx.Number = Match(INT_CONST);
					}
				}

				State = 570;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NEQ2) {
					{
					State = 568; Match(NEQ2);
					State = 569; Match(INT_CONST);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 575;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTO || _la==ID) {
				{
				State = 574;
				_localctx.CharSet = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==ID) ) {
					_localctx.CharSet = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 577; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DllcallconvContext : XSharpParserRuleContext {
		public IToken Cc;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public DllcallconvContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dllcallconv; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDllcallconv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDllcallconv(this);
		}
	}

	[RuleVersion(0)]
	public DllcallconvContext dllcallconv() {
		DllcallconvContext _localctx = new DllcallconvContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_dllcallconv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			_localctx.Cc = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) ) {
				_localctx.Cc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdllContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public DatatypeContext Type;
		public IdentifierContext Id;
		public IdentifierContext Dll;
		public IdentifierStringContext Extension;
		public IdentifierContext Alias;
		public FoxdllparamContext _foxdllparam;
		public IList<FoxdllparamContext> _Params = new List<FoxdllparamContext>();
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public IdentifierStringContext identifierString() {
			return GetRuleContext<IdentifierStringContext>(0);
		}
		public FoxdllparamContext[] foxdllparam() {
			return GetRuleContexts<FoxdllparamContext>();
		}
		public FoxdllparamContext foxdllparam(int i) {
			return GetRuleContext<FoxdllparamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxdllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdll(this);
		}
	}

	[RuleVersion(0)]
	public FoxdllContext foxdll() {
		FoxdllContext _localctx = new FoxdllContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_foxdll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 581; _localctx.Attributes = attributes();
				}
			}

			State = 585;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 584; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 587; Match(DECLARE);
			State = 589;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 588; _localctx.Type = datatype();
				}
				break;
			}
			State = 591; _localctx.Id = identifier();
			State = 592; Match(IN);
			State = 593; _localctx.Dll = identifier();
			State = 596;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 594; Match(DOT);
				State = 595; _localctx.Extension = identifierString();
				}
				break;
			}
			State = 600;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 598; Match(AS);
				State = 599; _localctx.Alias = identifier();
				}
				break;
			}
			State = 610;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 602; _localctx._foxdllparam = foxdllparam();
				_localctx._Params.Add(_localctx._foxdllparam);
				State = 607;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 603; Match(COMMA);
					State = 604; _localctx._foxdllparam = foxdllparam();
					_localctx._Params.Add(_localctx._foxdllparam);
					}
					}
					State = 609;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 612; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdllparamContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DatatypeContext Type;
		public IToken Address;
		public IdentifierContext Name;
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FoxdllparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdllparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdllparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdllparam(this);
		}
	}

	[RuleVersion(0)]
	public FoxdllparamContext foxdllparam() {
		FoxdllparamContext _localctx = new FoxdllparamContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_foxdllparam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 614; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 617; _localctx.Type = datatype();
			State = 619;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 618; _localctx.Address = Match(ADDROF);
				}
				break;
			}
			State = 622;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 621; _localctx.Name = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodllmethodContext : XSharpParserRuleContext {
		public IToken D;
		public IToken T;
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode DESTRUCTOR() { return GetToken(XSharpParser.DESTRUCTOR, 0); }
		public VodllmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodllmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodllmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodllmethod(this);
		}
	}

	[RuleVersion(0)]
	public VodllmethodContext vodllmethod() {
		VodllmethodContext _localctx = new VodllmethodContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_vodllmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624; _localctx.D = Match(DLL);
			State = 625;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0) || _la==CONSTRUCTOR || _la==DESTRUCTOR) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 627;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST_KEYWORD) | (1L << ACCESS) | (1L << ALIGN) | (1L << AS) | (1L << ASPEN) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CALLBACK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLL) | (1L << DLLEXPORT) | (1L << DO) | (1L << DOWNTO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FASTCALL) | (1L << FIELD) | (1L << FOR) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IS) | (1L << IN) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << MEMVAR) | (1L << METHOD) | (1L << NAMEOF) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SEQUENCE) | (1L << SIZEOF) | (1L << STATIC))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (SUPER - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (TYPEOF - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WHILE - 64)) | (1L << (WINCALL - 64)) | (1L << (CATCH - 64)) | (1L << (FINALLY - 64)) | (1L << (THROW - 64)) | (1L << (FIRST_POSITIONAL_KEYWORD - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CASTCLASS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (REPEAT - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (LAST_POSITIONAL_KEYWORD - 128)) | (1L << (FIRST_TYPE - 128)) | (1L << (ARRAY - 128)) | (1L << (BYTE - 128)) | (1L << (CODEBLOCK - 128)) | (1L << (DATE - 128)) | (1L << (DWORD - 128)) | (1L << (FLOAT - 128)) | (1L << (INT - 128)) | (1L << (LOGIC - 128)) | (1L << (LONGINT - 128)) | (1L << (OBJECT - 128)) | (1L << (PSZ - 128)) | (1L << (PTR - 128)) | (1L << (REAL4 - 128)) | (1L << (REAL8 - 128)) | (1L << (REF - 128)) | (1L << (SHORTINT - 128)) | (1L << (STRING - 128)) | (1L << (SYMBOL - 128)) | (1L << (USUAL - 128)) | (1L << (VOID - 128)) | (1L << (WORD - 128)) | (1L << (CHAR - 128)) | (1L << (INT64 - 128)) | (1L << (UINT64 - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (LAST_TYPE - 128)) | (1L << (UDC_KEYWORD - 128)) | (1L << (SCRIPT_REF - 128)) | (1L << (SCRIPT_LOAD - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (DEFERRED - 128)) | (1L << (ENDCLASS - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (FREEZE - 192)) | (1L << (FINAL - 192)) | (1L << (INLINE - 192)) | (1L << (INTRODUCE - 192)) | (1L << (NOSAVE - 192)) | (1L << (READONLY - 192)) | (1L << (SHARING - 192)) | (1L << (SHARED - 192)) | (1L << (SYNC - 192)) | (1L << (ENDDEFINE - 192)) | (1L << (LPARAMETERS - 192)) | (1L << (OLEPUBLIC - 192)) | (1L << (EXCLUDE - 192)) | (1L << (THISACCESS - 192)) | (1L << (HELPSTRING - 192)) | (1L << (DIMENSION - 192)) | (1L << (NOINIT - 192)) | (1L << (EACH - 192)) | (1L << (THEN - 192)) | (1L << (FOX_M - 192)) | (1L << (LAST_KEYWORD - 192)) | (1L << (FIRST_NULL - 192)) | (1L << (NIL - 192)) | (1L << (NULL - 192)) | (1L << (NULL_ARRAY - 192)) | (1L << (NULL_CODEBLOCK - 192)) | (1L << (NULL_DATE - 192)) | (1L << (NULL_OBJECT - 192)) | (1L << (NULL_PSZ - 192)) | (1L << (NULL_PTR - 192)) | (1L << (NULL_STRING - 192)) | (1L << (NULL_SYMBOL - 192)) | (1L << (NULL_FOX - 192)) | (1L << (LAST_NULL - 192)) | (1L << (FIRST_OPERATOR - 192)) | (1L << (LT - 192)) | (1L << (LTE - 192)) | (1L << (GT - 192)) | (1L << (GTE - 192)) | (1L << (EQ - 192)) | (1L << (EEQ - 192)) | (1L << (SUBSTR - 192)) | (1L << (NEQ - 192)) | (1L << (NEQ2 - 192)) | (1L << (INC - 192)) | (1L << (DEC - 192)) | (1L << (PLUS - 192)) | (1L << (MINUS - 192)) | (1L << (DIV - 192)) | (1L << (MOD - 192)) | (1L << (EXP - 192)) | (1L << (LSHIFT - 192)) | (1L << (RSHIFT - 192)) | (1L << (TILDE - 192)) | (1L << (MULT - 192)) | (1L << (QQMARK - 192)) | (1L << (QMARK - 192)) | (1L << (AND - 192)) | (1L << (OR - 192)) | (1L << (NOT - 192)) | (1L << (BIT_NOT - 192)) | (1L << (BIT_AND - 192)) | (1L << (BIT_OR - 192)) | (1L << (BIT_XOR - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (ASSIGN_OP - 256)) | (1L << (ASSIGN_ADD - 256)) | (1L << (ASSIGN_SUB - 256)) | (1L << (ASSIGN_EXP - 256)) | (1L << (ASSIGN_MUL - 256)) | (1L << (ASSIGN_DIV - 256)) | (1L << (ASSIGN_MOD - 256)) | (1L << (ASSIGN_BITAND - 256)) | (1L << (ASSIGN_BITOR - 256)) | (1L << (ASSIGN_LSHIFT - 256)) | (1L << (ASSIGN_RSHIFT - 256)) | (1L << (ASSIGN_XOR - 256)) | (1L << (ASSIGN_QQMARK - 256)) | (1L << (LOGIC_AND - 256)) | (1L << (LOGIC_OR - 256)) | (1L << (LOGIC_NOT - 256)) | (1L << (LOGIC_XOR - 256)) | (1L << (FOX_AND - 256)) | (1L << (FOX_OR - 256)) | (1L << (FOX_NOT - 256)) | (1L << (FOX_XOR - 256)) | (1L << (LPAREN - 256)) | (1L << (RPAREN - 256)) | (1L << (LCURLY - 256)) | (1L << (RCURLY - 256)) | (1L << (LBRKT - 256)) | (1L << (RBRKT - 256)) | (1L << (COLON - 256)) | (1L << (COMMA - 256)) | (1L << (PIPE - 256)) | (1L << (AMP - 256)) | (1L << (ADDROF - 256)) | (1L << (ALIAS - 256)) | (1L << (DOT - 256)) | (1L << (COLONCOLON - 256)) | (1L << (BACKSLASH - 256)) | (1L << (ELLIPSIS - 256)) | (1L << (BACKBACKSLASH - 256)) | (1L << (LAST_OPERATOR - 256)) | (1L << (FIRST_CONSTANT - 256)) | (1L << (FALSE_CONST - 256)) | (1L << (TRUE_CONST - 256)) | (1L << (HEX_CONST - 256)) | (1L << (BIN_CONST - 256)) | (1L << (INT_CONST - 256)) | (1L << (DATE_CONST - 256)) | (1L << (DATETIME_CONST - 256)) | (1L << (REAL_CONST - 256)) | (1L << (INVALID_NUMBER - 256)) | (1L << (SYMBOL_CONST - 256)) | (1L << (CHAR_CONST - 256)) | (1L << (STRING_CONST - 256)) | (1L << (ESCAPED_STRING_CONST - 256)) | (1L << (INTERPOLATED_STRING_CONST - 256)) | (1L << (INCOMPLETE_STRING_CONST - 256)) | (1L << (TEXT_STRING_CONST - 256)) | (1L << (BRACKETED_STRING_CONST - 256)) | (1L << (BINARY_CONST - 256)) | (1L << (LAST_CONSTANT - 256)) | (1L << (PP_FIRST - 256)) | (1L << (PP_COMMAND - 256)) | (1L << (PP_DEFINE - 256)) | (1L << (PP_ELSE - 256)) | (1L << (PP_ENDIF - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PP_ENDREGION - 320)) | (1L << (PP_ERROR - 320)) | (1L << (PP_IF - 320)) | (1L << (PP_IFDEF - 320)) | (1L << (PP_IFNDEF - 320)) | (1L << (PP_INCLUDE - 320)) | (1L << (PP_LINE - 320)) | (1L << (PP_REGION - 320)) | (1L << (PP_STDOUT - 320)) | (1L << (PP_TRANSLATE - 320)) | (1L << (PP_UNDEF - 320)) | (1L << (PP_WARNING - 320)) | (1L << (PP_PRAGMA - 320)) | (1L << (PP_TEXT - 320)) | (1L << (PP_ENDTEXT - 320)) | (1L << (PP_LAST - 320)) | (1L << (MACRO - 320)) | (1L << (UDCSEP - 320)) | (1L << (ID - 320)) | (1L << (DOC_COMMENT - 320)) | (1L << (SL_COMMENT - 320)) | (1L << (ML_COMMENT - 320)) | (1L << (LINE_CONT - 320)) | (1L << (LINE_CONT_OLD - 320)) | (1L << (SEMI - 320)) | (1L << (WS - 320)) | (1L << (NL - 320)) | (1L << (UNRECOGNIZED - 320)) | (1L << (LAST - 320)))) != 0)) {
				{
				State = 626;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EOS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 629; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : XSharpParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631; Match(LPAREN);
			State = 640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				State = 632; _localctx._parameter = parameter();
				_localctx._Params.Add(_localctx._parameter);
				State = 637;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 633; Match(COMMA);
					State = 634; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					}
					}
					State = 639;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 642; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken Self;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Default;
		public ParameterDeclModsContext Modifiers;
		public DatatypeContext Type;
		public IToken Ellipsis;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterDeclModsContext parameterDeclMods() {
			return GetRuleContext<ParameterDeclModsContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode ELLIPSIS() { return GetToken(XSharpParser.ELLIPSIS, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_parameter);
		int _la;
		try {
			State = 662;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 645;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					State = 644; _localctx.Attributes = attributes();
					}
					break;
				}
				State = 648;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					State = 647; _localctx.Self = Match(SELF);
					}
					break;
				}
				State = 650; _localctx.Id = identifier();
				State = 654;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 651; _localctx.Op = assignoperator();
					State = 652; _localctx.Default = expression(0);
					}
				}

				State = 659;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << IS) | (1L << IN))) != 0) || _la==OUT || _la==PARAMS || _la==REF) {
					{
					State = 656; _localctx.Modifiers = parameterDeclMods();
					State = 657; _localctx.Type = datatype();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 661; _localctx.Ellipsis = Match(ELLIPSIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclModsContext : XSharpParserRuleContext {
		public IToken _AS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _REF;
		public IToken _OUT;
		public IToken _IS;
		public IToken _PARAMS;
		public IToken _IN;
		public IToken _tset1011;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ParameterDeclModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclMods; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterDeclMods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterDeclMods(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclModsContext parameterDeclMods() {
		ParameterDeclModsContext _localctx = new ParameterDeclModsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_parameterDeclMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			_localctx._tset1011 = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << IS) | (1L << IN))) != 0) || _la==OUT || _la==PARAMS || _la==REF) ) {
				_localctx._tset1011 = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			_localctx._Tokens.Add(_localctx._tset1011);
			State = 666;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				State = 665; Match(CONST);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : XSharpParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 668; _localctx._statement = statement();
					_localctx._Stmts.Add(_localctx._statement);
					}
					} 
				}
				State = 673;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,55,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncprocModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _INTERNAL;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _ASYNC;
		public IToken _tset1063;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public FuncprocModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcprocModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncprocModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncprocModifiers(this);
		}
	}

	[RuleVersion(0)]
	public FuncprocModifiersContext funcprocModifiers() {
		FuncprocModifiersContext _localctx = new FuncprocModifiersContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_funcprocModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 674;
				_localctx._tset1063 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset1063 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1063);
				}
				}
				State = 677;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_Context : XSharpParserRuleContext {
		public IToken Static;
		public IdentifierNameContext Alias;
		public AssignoperatorContext Op;
		public NameContext Name;
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public Using_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsing_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsing_(this);
		}
	}

	[RuleVersion(0)]
	public Using_Context using_() {
		Using_Context _localctx = new Using_Context(_ctx, State);
		EnterRule(_localctx, 44, RULE_using_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679; Match(USING);
			State = 681;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 680; _localctx.Static = Match(STATIC);
				}
				break;
			}
			State = 686;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 683; _localctx.Alias = identifierName();
				State = 684; _localctx.Op = assignoperator();
				}
				break;
			}
			State = 688; _localctx.Name = name(0);
			State = 689; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoglobalContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken Global;
		public IToken Const;
		public ClassvarContext _classvar;
		public IList<ClassvarContext> _Vars = new List<ClassvarContext>();
		public IToken end;
		public IToken Static;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ClassvarContext[] classvar() {
			return GetRuleContexts<ClassvarContext>();
		}
		public ClassvarContext classvar(int i) {
			return GetRuleContext<ClassvarContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public VoglobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voglobal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoglobal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoglobal(this);
		}
	}

	[RuleVersion(0)]
	public VoglobalContext voglobal() {
		VoglobalContext _localctx = new VoglobalContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_voglobal);
		int _la;
		try {
			State = 728;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 692;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 691; _localctx.Attributes = attributes();
					}
				}

				State = 695;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
					{
					State = 694; _localctx.Modifiers = funcprocModifiers();
					}
				}

				State = 697; _localctx.Global = Match(GLOBAL);
				State = 699;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 698; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 701; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				State = 706;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 702; Match(COMMA);
					State = 703; _localctx._classvar = classvar();
					_localctx._Vars.Add(_localctx._classvar);
					}
					}
					State = 708;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 709; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 712;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 711; _localctx.Attributes = attributes();
					}
				}

				State = 714; _localctx.Static = Match(STATIC);
				State = 716;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					State = 715; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 718; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				State = 723;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 719; Match(COMMA);
					State = 720; _localctx._classvar = classvar();
					_localctx._Vars.Add(_localctx._classvar);
					}
					}
					State = 725;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 726; _localctx.end = Match(EOS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public MethodtypeContext T;
		public NameDotContext ExplicitIface;
		public SignatureContext Sig;
		public IdentifierContext ClassId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public MethodtypeContext T2;
		public IToken End;
		public VodummyclausesContext vodummyclauses() {
			return GetRuleContext<VodummyclausesContext>(0);
		}
		public MethodtypeContext[] methodtype() {
			return GetRuleContexts<MethodtypeContext>();
		}
		public MethodtypeContext methodtype(int i) {
			return GetRuleContext<MethodtypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 730; _localctx.Attributes = attributes();
				}
			}

			State = 734;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 733; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 736; _localctx.T = methodtype();
			State = 738;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 737; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 740; _localctx.Sig = signature();
			State = 743;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 741; Match(CLASS);
				State = 742; _localctx.ClassId = identifier();
				}
			}

			State = 745; vodummyclauses();
			State = 746; _localctx.end = eos();
			State = 747; _localctx.StmtBlk = statementBlock();
			State = 752;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 748; Match(END);
				State = 749; _localctx.T2 = methodtype();
				State = 750; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodtypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public MethodtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodtype(this);
		}
	}

	[RuleVersion(0)]
	public MethodtypeContext methodtype() {
		MethodtypeContext _localctx = new MethodtypeContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_methodtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodefineContext : XSharpParserRuleContext {
		public FuncprocModifiersContext Modifiers;
		public IToken D;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public TypeNameContext DataType;
		public IToken end;
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public VodefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodefine(this);
		}
	}

	[RuleVersion(0)]
	public VodefineContext vodefine() {
		VodefineContext _localctx = new VodefineContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_vodefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 756; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 759; _localctx.D = Match(DEFINE);
			State = 760; _localctx.Id = identifier();
			State = 761; _localctx.Op = assignoperator();
			State = 762; _localctx.Expr = expression(0);
			State = 765;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 763; Match(AS);
				State = 764; _localctx.DataType = typeName();
				}
			}

			State = 767; _localctx.end = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public IToken V;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public IToken Alignment;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public IToken End;
		public ITerminalNode[] VOSTRUCT() { return GetTokens(XSharpParser.VOSTRUCT); }
		public ITerminalNode VOSTRUCT(int i) {
			return GetToken(XSharpParser.VOSTRUCT, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public VostructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostruct(this);
		}
	}

	[RuleVersion(0)]
	public VostructContext vostruct() {
		VostructContext _localctx = new VostructContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_vostruct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 769; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 772; _localctx.V = Match(VOSTRUCT);
			State = 774;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 773; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 776; _localctx.Id = identifier();
			State = 779;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALIGN) {
				{
				State = 777; Match(ALIGN);
				State = 778; _localctx.Alignment = Match(INT_CONST);
				}
			}

			State = 781; _localctx.e = eos();
			State = 783;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 782; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 785;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,77,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 790;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 787; Match(END);
				State = 788; Match(VOSTRUCT);
				State = 789; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructmemberContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public IToken As;
		public DatatypeContext DataType;
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public VostructmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostructmember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostructmember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostructmember(this);
		}
	}

	[RuleVersion(0)]
	public VostructmemberContext vostructmember() {
		VostructmemberContext _localctx = new VostructmemberContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_vostructmember);
		int _la;
		try {
			State = 812;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792; Match(MEMBER);
				State = 793; _localctx.Dim = Match(DIM);
				State = 794; _localctx.Id = identifier();
				State = 795; Match(LBRKT);
				State = 796; _localctx.ArraySub = arraysub();
				State = 797; Match(RBRKT);
				State = 800;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 798;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 799; _localctx.DataType = datatype();
					}
				}

				State = 802; eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 804; Match(MEMBER);
				State = 805; _localctx.Id = identifier();
				State = 808;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 806;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 807; _localctx.DataType = datatype();
					}
				}

				State = 810; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VounionContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public IToken U;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public IToken End;
		public ITerminalNode[] UNION() { return GetTokens(XSharpParser.UNION); }
		public ITerminalNode UNION(int i) {
			return GetToken(XSharpParser.UNION, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public VounionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vounion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVounion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVounion(this);
		}
	}

	[RuleVersion(0)]
	public VounionContext vounion() {
		VounionContext _localctx = new VounionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_vounion);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 814; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 817; _localctx.U = Match(UNION);
			State = 819;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 818; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 821; _localctx.Id = identifier();
			State = 822; _localctx.e = eos();
			State = 824;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 823; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 826;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,84,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 831;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 828; Match(END);
				State = 829; Match(UNION);
				State = 830; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VotypeModifiersContext : XSharpParserRuleContext {
		public IToken _INTERNAL;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _STATIC;
		public IToken _tset1539;
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public VotypeModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_votypeModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVotypeModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVotypeModifiers(this);
		}
	}

	[RuleVersion(0)]
	public VotypeModifiersContext votypeModifiers() {
		VotypeModifiersContext _localctx = new VotypeModifiersContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_votypeModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 833;
				_localctx._tset1539 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) ) {
					_localctx._tset1539 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1539);
				}
				}
				State = 836;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_Context : XSharpParserRuleContext {
		public NameContext Name;
		public EosContext e;
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public IToken End;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] NAMESPACE() { return GetTokens(XSharpParser.NAMESPACE); }
		public ITerminalNode NAMESPACE(int i) {
			return GetToken(XSharpParser.NAMESPACE, i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public Namespace_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamespace_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamespace_(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_Context namespace_() {
		Namespace_Context _localctx = new Namespace_Context(_ctx, State);
		EnterRule(_localctx, 62, RULE_namespace_);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 838; Match(BEGIN);
			State = 839; Match(NAMESPACE);
			State = 840; _localctx.Name = name(0);
			State = 841; _localctx.e = eos();
			State = 845;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,87,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 842; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 847;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,87,_ctx);
			}
			State = 851;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 848; Match(END);
				State = 849; Match(NAMESPACE);
				State = 850; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken I;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Parents = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] INTERFACE() { return GetTokens(XSharpParser.INTERFACE); }
		public ITerminalNode INTERFACE(int i) {
			return GetToken(XSharpParser.INTERFACE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public Interface_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInterface_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInterface_(this);
		}
	}

	[RuleVersion(0)]
	public Interface_Context interface_() {
		Interface_Context _localctx = new Interface_Context(_ctx, State);
		EnterRule(_localctx, 64, RULE_interface_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 853; _localctx.Attributes = attributes();
				}
			}

			State = 857;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 856; _localctx.Modifiers = classModifiers();
				}
			}

			State = 859; _localctx.I = Match(INTERFACE);
			State = 861;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 860; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 863; _localctx.Id = identifier();
			State = 865;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 864; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 869;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT || _la==COLON) {
				{
				State = 867;
				_la = _input.La(1);
				if ( !(_la==INHERIT || _la==COLON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 868; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
			}

			State = 875;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 871; Match(COMMA);
				State = 872; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
				}
				State = 877;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 881;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 878; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 883;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 884; _localctx.e = eos();
			State = 888;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,96,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 885; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 890;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,96,_ctx);
			}
			State = 891; Match(END);
			State = 892; Match(INTERFACE);
			State = 893; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken C;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Class_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClass_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClass_(this);
		}
	}

	[RuleVersion(0)]
	public Class_Context class_() {
		Class_Context _localctx = new Class_Context(_ctx, State);
		EnterRule(_localctx, 66, RULE_class_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 896;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 895; _localctx.Attributes = attributes();
				}
			}

			State = 899;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 898; _localctx.Modifiers = classModifiers();
				}
			}

			State = 901; _localctx.C = Match(CLASS);
			State = 903;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 902; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 905; _localctx.Id = identifier();
			State = 907;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 906; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 911;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT) {
				{
				State = 909; Match(INHERIT);
				State = 910; _localctx.BaseType = datatype();
				}
			}

			State = 922;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 913; Match(IMPLEMENTS);
				State = 914; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 919;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 915; Match(COMMA);
					State = 916; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 921;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 927;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 924; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 929;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 930; _localctx.e = eos();
			State = 934;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,105,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 931; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 936;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,105,_ctx);
			}
			State = 937; Match(END);
			State = 938; Match(CLASS);
			State = 939; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _ABSTRACT;
		public IToken _SEALED;
		public IToken _STATIC;
		public IToken _UNSAFE;
		public IToken _PARTIAL;
		public IToken _tset1808;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] PARTIAL() { return GetTokens(XSharpParser.PARTIAL); }
		public ITerminalNode PARTIAL(int i) {
			return GetToken(XSharpParser.PARTIAL, i);
		}
		public ClassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifiersContext classModifiers() {
		ClassModifiersContext _localctx = new ClassModifiersContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_classModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 941;
				_localctx._tset1808 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset1808 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1808);
				}
				}
				State = 944;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparametersContext : XSharpParserRuleContext {
		public TypeparameterContext _typeparameter;
		public IList<TypeparameterContext> _TypeParams = new List<TypeparameterContext>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public TypeparameterContext[] typeparameter() {
			return GetRuleContexts<TypeparameterContext>();
		}
		public TypeparameterContext typeparameter(int i) {
			return GetRuleContext<TypeparameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public TypeparametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeparametersContext typeparameters() {
		TypeparametersContext _localctx = new TypeparametersContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_typeparameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946; Match(LT);
			State = 947; _localctx._typeparameter = typeparameter();
			_localctx._TypeParams.Add(_localctx._typeparameter);
			State = 955;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 948; Match(COMMA);
				State = 950;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
				case 1:
					{
					State = 949; attributes();
					}
					break;
				}
				State = 952; _localctx._typeparameter = typeparameter();
				_localctx._TypeParams.Add(_localctx._typeparameter);
				}
				}
				State = 957;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 958; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken VarianceKeyword;
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public TypeparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterContext typeparameter() {
		TypeparameterContext _localctx = new TypeparameterContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_typeparameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				State = 960; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 964;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
			case 1:
				{
				State = 963;
				_localctx.VarianceKeyword = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==IN || _la==OUT) ) {
					_localctx.VarianceKeyword = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 966; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintsclauseContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public TypeparameterconstraintContext _typeparameterconstraint;
		public IList<TypeparameterconstraintContext> _Constraints = new List<TypeparameterconstraintContext>();
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public TypeparameterconstraintContext[] typeparameterconstraint() {
			return GetRuleContexts<TypeparameterconstraintContext>();
		}
		public TypeparameterconstraintContext typeparameterconstraint(int i) {
			return GetRuleContext<TypeparameterconstraintContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TypeparameterconstraintsclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraintsclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameterconstraintsclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameterconstraintsclause(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintsclauseContext typeparameterconstraintsclause() {
		TypeparameterconstraintsclauseContext _localctx = new TypeparameterconstraintsclauseContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_typeparameterconstraintsclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968; Match(WHERE);
			State = 969; _localctx.Name = identifierName();
			State = 970; Match(IS);
			State = 971; _localctx._typeparameterconstraint = typeparameterconstraint();
			_localctx._Constraints.Add(_localctx._typeparameterconstraint);
			State = 976;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 972; Match(COMMA);
				State = 973; _localctx._typeparameterconstraint = typeparameterconstraint();
				_localctx._Constraints.Add(_localctx._typeparameterconstraint);
				}
				}
				State = 978;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintContext : XSharpParserRuleContext {
		public TypeparameterconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraint; } }
	 
		public TypeparameterconstraintContext() { }
		public virtual void CopyFrom(TypeparameterconstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassOrStructConstraintContext : TypeparameterconstraintContext {
		public IToken Key;
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ClassOrStructConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassOrStructConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassOrStructConstraint(this);
		}
	}
	public partial class ConstructorConstraintContext : TypeparameterconstraintContext {
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ConstructorConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
	}
	public partial class TypeConstraintContext : TypeparameterconstraintContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintContext typeparameterconstraint() {
		TypeparameterconstraintContext _localctx = new TypeparameterconstraintContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_typeparameterconstraint);
		int _la;
		try {
			State = 984;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
			case 1:
				_localctx = new ClassOrStructConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 979;
				((ClassOrStructConstraintContext)_localctx).Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STRUCTURE) ) {
					((ClassOrStructConstraintContext)_localctx).Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 980; ((TypeConstraintContext)_localctx).Type = typeName();
				}
				break;

			case 3:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 981; Match(NEW);
				State = 982; Match(LPAREN);
				State = 983; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken S;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] STRUCTURE() { return GetTokens(XSharpParser.STRUCTURE); }
		public ITerminalNode STRUCTURE(int i) {
			return GetToken(XSharpParser.STRUCTURE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Structure_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStructure_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStructure_(this);
		}
	}

	[RuleVersion(0)]
	public Structure_Context structure_() {
		Structure_Context _localctx = new Structure_Context(_ctx, State);
		EnterRule(_localctx, 78, RULE_structure_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 987;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 986; _localctx.Attributes = attributes();
				}
			}

			State = 990;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 989; _localctx.Modifiers = classModifiers();
				}
			}

			State = 992; _localctx.S = Match(STRUCTURE);
			State = 994;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				State = 993; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 996; _localctx.Id = identifier();
			State = 998;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 997; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 1009;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1000; Match(IMPLEMENTS);
				State = 1001; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 1006;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1002; Match(COMMA);
					State = 1003; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 1008;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 1014;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 1011; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 1016;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1017; _localctx.e = eos();
			State = 1021;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,120,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1018; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 1023;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,120,_ctx);
			}
			State = 1024; Match(END);
			State = 1025; Match(STRUCTURE);
			State = 1026; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken D;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public IToken e;
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public Delegate_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegate_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegate_(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_Context delegate_() {
		Delegate_Context _localctx = new Delegate_Context(_ctx, State);
		EnterRule(_localctx, 80, RULE_delegate_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1029;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1028; _localctx.Attributes = attributes();
				}
			}

			State = 1032;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1031; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1034; _localctx.D = Match(DELEGATE);
			State = 1036;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1035; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1038; _localctx.Id = identifier();
			State = 1040;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1039; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 1043;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1042; _localctx.ParamList = parameterList();
				}
			}

			State = 1047;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1045; Match(AS);
				State = 1046; _localctx.Type = datatype();
				}
			}

			State = 1052;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 1049; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 1054;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1056;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 1055; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 1058; _localctx.e = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken E;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public EosContext e;
		public EnummemberContext _enummember;
		public IList<EnummemberContext> _Members = new List<EnummemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] ENUM() { return GetTokens(XSharpParser.ENUM); }
		public ITerminalNode ENUM(int i) {
			return GetToken(XSharpParser.ENUM, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EnummemberContext[] enummember() {
			return GetRuleContexts<EnummemberContext>();
		}
		public EnummemberContext enummember(int i) {
			return GetRuleContext<EnummemberContext>(i);
		}
		public Enum_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnum_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnum_(this);
		}
	}

	[RuleVersion(0)]
	public Enum_Context enum_() {
		Enum_Context _localctx = new Enum_Context(_ctx, State);
		EnterRule(_localctx, 82, RULE_enum_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1060; _localctx.Attributes = attributes();
				}
			}

			State = 1064;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1063; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1066; _localctx.E = Match(ENUM);
			State = 1068;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				State = 1067; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1070; _localctx.Id = identifier();
			State = 1073;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==INHERIT) {
				{
				State = 1071;
				_la = _input.La(1);
				if ( !(_la==AS || _la==INHERIT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1072; _localctx.Type = datatype();
				}
			}

			State = 1075; _localctx.e = eos();
			State = 1077;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1076; _localctx._enummember = enummember();
					_localctx._Members.Add(_localctx._enummember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1079;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,133,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1081; Match(END);
			State = 1083;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ENUM) {
				{
				State = 1082; Match(ENUM);
				}
			}

			State = 1085; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnummemberContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnummemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enummember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnummember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnummember(this);
		}
	}

	[RuleVersion(0)]
	public EnummemberContext enummember() {
		EnummemberContext _localctx = new EnummemberContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_enummember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1088;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				State = 1087; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1091;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				State = 1090; Match(MEMBER);
				}
				break;
			}
			State = 1093; _localctx.Id = identifier();
			State = 1097;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 1094; _localctx.Op = assignoperator();
				State = 1095; _localctx.Expr = expression(0);
				}
			}

			State = 1099; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public IToken E;
		public NameDotContext ExplicitIface;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken end;
		public EventLineAccessorContext _eventLineAccessor;
		public IList<EventLineAccessorContext> _LineAccessors = new List<EventLineAccessorContext>();
		public EosContext Multi;
		public EventAccessorContext _eventAccessor;
		public IList<EventAccessorContext> _Accessors = new List<EventAccessorContext>();
		public ITerminalNode[] EVENT() { return GetTokens(XSharpParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(XSharpParser.EVENT, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EventLineAccessorContext[] eventLineAccessor() {
			return GetRuleContexts<EventLineAccessorContext>();
		}
		public EventLineAccessorContext eventLineAccessor(int i) {
			return GetRuleContext<EventLineAccessorContext>(i);
		}
		public EventAccessorContext[] eventAccessor() {
			return GetRuleContexts<EventAccessorContext>();
		}
		public EventAccessorContext eventAccessor(int i) {
			return GetRuleContext<EventAccessorContext>(i);
		}
		public Event_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEvent_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEvent_(this);
		}
	}

	[RuleVersion(0)]
	public Event_Context event_() {
		Event_Context _localctx = new Event_Context(_ctx, State);
		EnterRule(_localctx, 86, RULE_event_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1101; _localctx.Attributes = attributes();
				}
			}

			State = 1105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1104; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 1107; _localctx.E = Match(EVENT);
			State = 1109;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				State = 1108; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 1111; _localctx.Id = identifier();
			State = 1114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				State = 1112; Match(AS);
				State = 1113; _localctx.Type = datatype();
				}
				break;
			}
			State = 1136;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				State = 1116; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				{
				State = 1118;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1117; _localctx._eventLineAccessor = eventLineAccessor();
						_localctx._LineAccessors.Add(_localctx._eventLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1120;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,142,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1122; _localctx.end = Match(EOS);
				}
				break;

			case 3:
				{
				State = 1124; _localctx.Multi = eos();
				State = 1126;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1125; _localctx._eventAccessor = eventAccessor();
					_localctx._Accessors.Add(_localctx._eventAccessor);
					}
					}
					State = 1128;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ADD - 97)) | (1L << (REMOVE - 97)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST );
				State = 1130; Match(END);
				State = 1132;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EVENT) {
					{
					State = 1131; Match(EVENT);
					}
				}

				State = 1134; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionListContext ExprList;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public EventLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventLineAccessorContext eventLineAccessor() {
		EventLineAccessorContext _localctx = new EventLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_eventLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1139;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1138; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1142;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				State = 1141; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1155;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				State = 1144;
				if (!(InputStream.La(2) != REMOVE)) throw new FailedPredicateException(this, "InputStream.La(2) != REMOVE");
				State = 1145; _localctx.Key = Match(ADD);
				State = 1147;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					State = 1146; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1149;
				if (!(InputStream.La(2) != ADD)) throw new FailedPredicateException(this, "InputStream.La(2) != ADD");
				State = 1150; _localctx.Key = Match(REMOVE);
				State = 1152;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					State = 1151; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1154;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ADD || _la==REMOVE) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext ExpressionBody;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] ADD() { return GetTokens(XSharpParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(XSharpParser.ADD, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] REMOVE() { return GetTokens(XSharpParser.REMOVE); }
		public ITerminalNode REMOVE(int i) {
			return GetToken(XSharpParser.REMOVE, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public EventAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventAccessorContext eventAccessor() {
		EventAccessorContext _localctx = new EventAccessorContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_eventAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1158;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1157; _localctx.Attributes = attributes();
				}
			}

			State = 1161;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1160; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1183;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				State = 1163; _localctx.Key = Match(ADD);
				State = 1164; _localctx.end = eos();
				State = 1165; _localctx.StmtBlk = statementBlock();
				State = 1166; Match(END);
				State = 1168;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADD) {
					{
					State = 1167; Match(ADD);
					}
				}

				}
				break;

			case 2:
				{
				State = 1170; _localctx.Key = Match(ADD);
				State = 1171; Match(UDCSEP);
				State = 1172; _localctx.ExpressionBody = expression(0);
				}
				break;

			case 3:
				{
				State = 1173; _localctx.Key = Match(REMOVE);
				State = 1174; _localctx.end = eos();
				State = 1175; _localctx.StmtBlk = statementBlock();
				State = 1176; Match(END);
				State = 1178;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==REMOVE) {
					{
					State = 1177; Match(REMOVE);
					}
				}

				}
				break;

			case 4:
				{
				State = 1180; _localctx.Key = Match(REMOVE);
				State = 1181; Match(UDCSEP);
				State = 1182; _localctx.ExpressionBody = expression(0);
				}
				break;
			}
			State = 1185; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarsContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public ClassvarContext _classvar;
		public IList<ClassvarContext> _Vars = new List<ClassvarContext>();
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ClassvarContext[] classvar() {
			return GetRuleContexts<ClassvarContext>();
		}
		public ClassvarContext classvar(int i) {
			return GetRuleContext<ClassvarContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvars(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarsContext classvars() {
		ClassvarsContext _localctx = new ClassvarsContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_classvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1188;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1187; _localctx.Attributes = attributes();
				}
			}

			State = 1190; _localctx.Modifiers = classvarModifiers();
			State = 1191; _localctx._classvar = classvar();
			_localctx._Vars.Add(_localctx._classvar);
			State = 1196;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1192; Match(COMMA);
				State = 1193; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				}
				}
				State = 1198;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1199; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarModifiersContext : XSharpParserRuleContext {
		public IToken _INSTANCE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _CONST;
		public IToken _INITONLY;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _VOLATILE;
		public IToken _UNSAFE;
		public IToken _FIXED;
		public IToken _NEW;
		public IToken _tset2520;
		public ITerminalNode[] INSTANCE() { return GetTokens(XSharpParser.INSTANCE); }
		public ITerminalNode INSTANCE(int i) {
			return GetToken(XSharpParser.INSTANCE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] CONST() { return GetTokens(XSharpParser.CONST); }
		public ITerminalNode CONST(int i) {
			return GetToken(XSharpParser.CONST, i);
		}
		public ITerminalNode[] INITONLY() { return GetTokens(XSharpParser.INITONLY); }
		public ITerminalNode INITONLY(int i) {
			return GetToken(XSharpParser.INITONLY, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] VOLATILE() { return GetTokens(XSharpParser.VOLATILE); }
		public ITerminalNode VOLATILE(int i) {
			return GetToken(XSharpParser.VOLATILE, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ClassvarModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvarModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvarModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvarModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarModifiersContext classvarModifiers() {
		ClassvarModifiersContext _localctx = new ClassvarModifiersContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_classvarModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1201;
					_localctx._tset2520 = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << INSTANCE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (CONST - 83)) | (1L << (INITONLY - 83)) | (1L << (INTERNAL - 83)) | (1L << (NEW - 83)) | (1L << (FIXED - 83)) | (1L << (UNSAFE - 83)) | (1L << (VOLATILE - 83)))) != 0)) ) {
						_localctx._tset2520 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset2520);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1204;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,158,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Initializer;
		public IToken As;
		public DatatypeContext DataType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ClassvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvar(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarContext classvar() {
		ClassvarContext _localctx = new ClassvarContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_classvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1207;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1206; _localctx.Dim = Match(DIM);
				}
				break;
			}
			State = 1209; _localctx.Id = identifier();
			State = 1214;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1210; Match(LBRKT);
				State = 1211; _localctx.ArraySub = arraysub();
				State = 1212; Match(RBRKT);
				}
			}

			State = 1219;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 1216; _localctx.Op = assignoperator();
				State = 1217; _localctx.Initializer = expression(0);
				}
			}

			State = 1223;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==IS) {
				{
				State = 1221;
				_localctx.As = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AS || _la==IS) ) {
					_localctx.As = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1222; _localctx.DataType = datatype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraysubContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _ArrayIndex = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RBRKT() { return GetTokens(XSharpParser.RBRKT); }
		public ITerminalNode RBRKT(int i) {
			return GetToken(XSharpParser.RBRKT, i);
		}
		public ITerminalNode[] LBRKT() { return GetTokens(XSharpParser.LBRKT); }
		public ITerminalNode LBRKT(int i) {
			return GetToken(XSharpParser.LBRKT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArraysubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraysub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArraysub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArraysub(this);
		}
	}

	[RuleVersion(0)]
	public ArraysubContext arraysub() {
		ArraysubContext _localctx = new ArraysubContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_arraysub);
		int _la;
		try {
			int _alt;
			State = 1241;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1225; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1229;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1226; Match(RBRKT);
						State = 1227; Match(LBRKT);
						State = 1228; _localctx._expression = expression(0);
						_localctx._ArrayIndex.Add(_localctx._expression);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1231;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,163,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1233; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1236;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1234; Match(COMMA);
					State = 1235; _localctx._expression = expression(0);
					_localctx._ArrayIndex.Add(_localctx._expression);
					}
					}
					State = 1238;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COMMA );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1240; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public IToken P;
		public NameDotContext ExplicitIface;
		public IToken Self;
		public IdentifierContext Id;
		public PropertyParameterListContext ParamList;
		public DatatypeContext Type;
		public IToken Auto;
		public PropertyAutoAccessorContext _propertyAutoAccessor;
		public IList<PropertyAutoAccessorContext> _AutoAccessors = new List<PropertyAutoAccessorContext>();
		public AssignoperatorContext Op;
		public ExpressionContext Initializer;
		public IToken end;
		public PropertyLineAccessorContext _propertyLineAccessor;
		public IList<PropertyLineAccessorContext> _LineAccessors = new List<PropertyLineAccessorContext>();
		public EosContext Multi;
		public PropertyAccessorContext _propertyAccessor;
		public IList<PropertyAccessorContext> _Accessors = new List<PropertyAccessorContext>();
		public ITerminalNode[] PROPERTY() { return GetTokens(XSharpParser.PROPERTY); }
		public ITerminalNode PROPERTY(int i) {
			return GetToken(XSharpParser.PROPERTY, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public PropertyParameterListContext propertyParameterList() {
			return GetRuleContext<PropertyParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public PropertyAutoAccessorContext[] propertyAutoAccessor() {
			return GetRuleContexts<PropertyAutoAccessorContext>();
		}
		public PropertyAutoAccessorContext propertyAutoAccessor(int i) {
			return GetRuleContext<PropertyAutoAccessorContext>(i);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyLineAccessorContext[] propertyLineAccessor() {
			return GetRuleContexts<PropertyLineAccessorContext>();
		}
		public PropertyLineAccessorContext propertyLineAccessor(int i) {
			return GetRuleContext<PropertyLineAccessorContext>(i);
		}
		public PropertyAccessorContext[] propertyAccessor() {
			return GetRuleContexts<PropertyAccessorContext>();
		}
		public PropertyAccessorContext propertyAccessor(int i) {
			return GetRuleContext<PropertyAccessorContext>(i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_property);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1244;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1243; _localctx.Attributes = attributes();
				}
			}

			State = 1247;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1246; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 1249; _localctx.P = Match(PROPERTY);
			State = 1251;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 1250; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 1255;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				State = 1253; _localctx.Self = Match(SELF);
				}
				break;

			case 2:
				{
				State = 1254; _localctx.Id = identifier();
				}
				break;
			}
			State = 1258;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 1257; _localctx.ParamList = propertyParameterList();
				}
				break;
			}
			State = 1262;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				State = 1260; Match(AS);
				State = 1261; _localctx.Type = datatype();
				}
				break;
			}
			State = 1296;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				State = 1264; _localctx.Auto = Match(AUTO);
				State = 1268;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (INTERNAL - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					{
					State = 1265; _localctx._propertyAutoAccessor = propertyAutoAccessor();
					_localctx._AutoAccessors.Add(_localctx._propertyAutoAccessor);
					}
					}
					State = 1270;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1274;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 1271; _localctx.Op = assignoperator();
					State = 1272; _localctx.Initializer = expression(0);
					}
				}

				State = 1276; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				{
				State = 1278;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1277; _localctx._propertyLineAccessor = propertyLineAccessor();
						_localctx._LineAccessors.Add(_localctx._propertyLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1280;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,174,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1282; _localctx.end = Match(EOS);
				}
				break;

			case 3:
				{
				State = 1284; _localctx.Multi = eos();
				State = 1286;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1285; _localctx._propertyAccessor = propertyAccessor();
					_localctx._Accessors.Add(_localctx._propertyAccessor);
					}
					}
					State = 1288;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (INTERNAL - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST );
				State = 1290; Match(END);
				State = 1292;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PROPERTY) {
					{
					State = 1291; Match(PROPERTY);
					}
				}

				State = 1294; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyParameterListContext : XSharpParserRuleContext {
		public IToken L;
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public IToken R;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public PropertyParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyParameterList(this);
		}
	}

	[RuleVersion(0)]
	public PropertyParameterListContext propertyParameterList() {
		PropertyParameterListContext _localctx = new PropertyParameterListContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_propertyParameterList);
		int _la;
		try {
			State = 1322;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1298; _localctx.L = Match(LBRKT);
				State = 1307;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
				case 1:
					{
					State = 1299; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1304;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1300; Match(COMMA);
						State = 1301; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1306;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1309; _localctx.R = Match(RBRKT);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1310; _localctx.L = Match(LPAREN);
				State = 1319;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
				case 1:
					{
					State = 1311; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1316;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1312; Match(COMMA);
						State = 1313; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1318;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1321; _localctx.R = Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAutoAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public PropertyAutoAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAutoAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAutoAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAutoAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAutoAccessorContext propertyAutoAccessor() {
		PropertyAutoAccessorContext _localctx = new PropertyAutoAccessorContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_propertyAutoAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1325;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1324; _localctx.Attributes = attributes();
				}
			}

			State = 1328;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1327; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1330;
			_localctx.Key = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0)) ) {
				_localctx.Key = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionContext Expr;
		public ExpressionListContext ExprList;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public PropertyLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLineAccessorContext propertyLineAccessor() {
		PropertyLineAccessorContext _localctx = new PropertyLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_propertyLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1333;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 1332; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1336;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				State = 1335; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1349;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				State = 1338;
				if (!(InputStream.La(2) != SET && InputStream.La(2) != INIT)) throw new FailedPredicateException(this, "InputStream.La(2) != SET && InputStream.La(2) != INIT");
				State = 1339;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==GET || _la==UDCSEP) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1341;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					State = 1340; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1343;
				if (!(InputStream.La(2) != GET && InputStream.La(2) != UDCSEP)) throw new FailedPredicateException(this, "InputStream.La(2) != GET && InputStream.La(2) != UDCSEP");
				State = 1344;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1346;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
				case 1:
					{
					State = 1345; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1348;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0)) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorModifiersContext : XSharpParserRuleContext {
		public IToken _PRIVATE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _tset2972;
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public AccessorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public AccessorModifiersContext accessorModifiers() {
		AccessorModifiersContext _localctx = new AccessorModifiersContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_accessorModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1352;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1351;
					_localctx._tset2972 = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) ) {
						_localctx._tset2972 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset2972);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1354;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,190,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1356; _localctx._expression = expression(0);
			_localctx._Exprs.Add(_localctx._expression);
			State = 1361;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,191,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1357; Match(COMMA);
					State = 1358; _localctx._expression = expression(0);
					_localctx._Exprs.Add(_localctx._expression);
					}
					} 
				}
				State = 1363;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,191,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken Key2;
		public ExpressionContext ExpressionBody;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] GET() { return GetTokens(XSharpParser.GET); }
		public ITerminalNode GET(int i) {
			return GetToken(XSharpParser.GET, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ITerminalNode[] SET() { return GetTokens(XSharpParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(XSharpParser.SET, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(XSharpParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(XSharpParser.INIT, i);
		}
		public PropertyAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAccessorContext propertyAccessor() {
		PropertyAccessorContext _localctx = new PropertyAccessorContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_propertyAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1364; _localctx.Attributes = attributes();
				}
			}

			State = 1368;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1367; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1390;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 1370; _localctx.Key = Match(GET);
				State = 1371; _localctx.end = eos();
				State = 1372; _localctx.StmtBlk = statementBlock();
				State = 1373; Match(END);
				State = 1375;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==GET) {
					{
					State = 1374; _localctx.Key2 = Match(GET);
					}
				}

				}
				break;

			case 2:
				{
				State = 1377; _localctx.Key = Match(GET);
				State = 1378; Match(UDCSEP);
				State = 1379; _localctx.ExpressionBody = expression(0);
				}
				break;

			case 3:
				{
				State = 1380;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1381; _localctx.end = eos();
				State = 1382; _localctx.StmtBlk = statementBlock();
				State = 1383; Match(END);
				State = 1385;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SET || _la==INIT) {
					{
					State = 1384;
					_localctx.Key2 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==SET || _la==INIT) ) {
						_localctx.Key2 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				}
				break;

			case 4:
				{
				State = 1387;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1388; Match(UDCSEP);
				State = 1389; _localctx.ExpressionBody = expression(0);
				}
				break;
			}
			State = 1392; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassmemberContext : XSharpParserRuleContext {
		public ClassmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classmember; } }
	 
		public ClassmemberContext() { }
		public virtual void CopyFrom(ClassmemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassContext : ClassmemberContext {
		public Class_Context Member;
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public NestedClassContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedClass(this);
		}
	}
	public partial class NestedStructureContext : ClassmemberContext {
		public Structure_Context Member;
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public NestedStructureContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedStructure(this);
		}
	}
	public partial class NestedEventContext : ClassmemberContext {
		public Event_Context Member;
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public NestedEventContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEvent(this);
		}
	}
	public partial class ClsmethodContext : ClassmemberContext {
		public MethodContext Member;
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public ClsmethodContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsmethod(this);
		}
	}
	public partial class ClsdtorContext : ClassmemberContext {
		public DestructorContext Member;
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public ClsdtorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdtor(this);
		}
	}
	public partial class ClspropertyContext : ClassmemberContext {
		public PropertyContext Member;
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ClspropertyContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsproperty(this);
		}
	}
	public partial class ClseosContext : ClassmemberContext {
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClseosContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClseos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClseos(this);
		}
	}
	public partial class ClsctorContext : ClassmemberContext {
		public ConstructorContext Member;
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public ClsctorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsctor(this);
		}
	}
	public partial class ClsvarsContext : ClassmemberContext {
		public ClassvarsContext Member;
		public ClassvarsContext classvars() {
			return GetRuleContext<ClassvarsContext>(0);
		}
		public ClsvarsContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsvars(this);
		}
	}
	public partial class NestedDelegateContext : ClassmemberContext {
		public Delegate_Context Member;
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public NestedDelegateContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedDelegate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedDelegate(this);
		}
	}
	public partial class NestedInterfaceContext : ClassmemberContext {
		public Interface_Context Member;
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public NestedInterfaceContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedInterface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedInterface(this);
		}
	}
	public partial class ClsoperatorContext : ClassmemberContext {
		public Operator_Context Member;
		public Operator_Context operator_() {
			return GetRuleContext<Operator_Context>(0);
		}
		public ClsoperatorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsoperator(this);
		}
	}
	public partial class ClsdeclareContext : ClassmemberContext {
		public VodeclareContext decl;
		public VodeclareContext vodeclare() {
			return GetRuleContext<VodeclareContext>(0);
		}
		public ClsdeclareContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdeclare(this);
		}
	}
	public partial class NestedEnumContext : ClassmemberContext {
		public Enum_Context Member;
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public NestedEnumContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEnum(this);
		}
	}
	public partial class ClsvodllmethodContext : ClassmemberContext {
		public VodllmethodContext Member;
		public VodllmethodContext vodllmethod() {
			return GetRuleContext<VodllmethodContext>(0);
		}
		public ClsvodllmethodContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsvodllmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsvodllmethod(this);
		}
	}

	[RuleVersion(0)]
	public ClassmemberContext classmember() {
		ClassmemberContext _localctx = new ClassmemberContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_classmember);
		try {
			State = 1410;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				_localctx = new ClsmethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1394; ((ClsmethodContext)_localctx).Member = method();
				}
				break;

			case 2:
				_localctx = new ClsdeclareContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1395; ((ClsdeclareContext)_localctx).decl = vodeclare();
				}
				break;

			case 3:
				_localctx = new ClsctorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1396; ((ClsctorContext)_localctx).Member = constructor();
				}
				break;

			case 4:
				_localctx = new ClsdtorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1397; ((ClsdtorContext)_localctx).Member = destructor();
				}
				break;

			case 5:
				_localctx = new ClsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1398; ((ClsvarsContext)_localctx).Member = classvars();
				}
				break;

			case 6:
				_localctx = new ClspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1399; ((ClspropertyContext)_localctx).Member = property();
				}
				break;

			case 7:
				_localctx = new ClsoperatorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1400; ((ClsoperatorContext)_localctx).Member = operator_();
				}
				break;

			case 8:
				_localctx = new NestedStructureContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1401; ((NestedStructureContext)_localctx).Member = structure_();
				}
				break;

			case 9:
				_localctx = new NestedClassContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1402; ((NestedClassContext)_localctx).Member = class_();
				}
				break;

			case 10:
				_localctx = new NestedDelegateContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1403; ((NestedDelegateContext)_localctx).Member = delegate_();
				}
				break;

			case 11:
				_localctx = new NestedEnumContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1404; ((NestedEnumContext)_localctx).Member = enum_();
				}
				break;

			case 12:
				_localctx = new NestedEventContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1405; ((NestedEventContext)_localctx).Member = event_();
				}
				break;

			case 13:
				_localctx = new NestedInterfaceContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1406; ((NestedInterfaceContext)_localctx).Member = interface_();
				}
				break;

			case 14:
				_localctx = new ClsvodllmethodContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1407;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 1408; ((ClsvodllmethodContext)_localctx).Member = vodllmethod();
				}
				break;

			case 15:
				_localctx = new ClseosContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1409; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ConstructorModifiersContext Modifiers;
		public IToken c1;
		public ParameterListContext ParamList;
		public CallingconventionContext CallingConvention;
		public IdentifierContext ClassId;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public ConstructorchainContext Chain;
		public StatementBlockContext StmtBlk;
		public IToken c2;
		public IToken End;
		public ITerminalNode[] CONSTRUCTOR() { return GetTokens(XSharpParser.CONSTRUCTOR); }
		public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(XSharpParser.CONSTRUCTOR, i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ConstructorModifiersContext constructorModifiers() {
			return GetRuleContext<ConstructorModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstructorchainContext constructorchain() {
			return GetRuleContext<ConstructorchainContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1413;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1412; _localctx.Attributes = attributes();
				}
			}

			State = 1416;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN) {
				{
				State = 1415; _localctx.Modifiers = constructorModifiers();
				}
			}

			State = 1418; _localctx.c1 = Match(CONSTRUCTOR);
			State = 1420;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1419; _localctx.ParamList = parameterList();
				}
			}

			State = 1424;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1422; Match(AS);
				State = 1423; Match(VOID);
				}
			}

			State = 1427;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 1426; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 1431;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1429; Match(CLASS);
				State = 1430; _localctx.ClassId = identifier();
				}
			}

			State = 1435;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1433; Match(UDCSEP);
				State = 1434; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1437; _localctx.end = eos();
			State = 1439;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				State = 1438; _localctx.Chain = constructorchain();
				}
				break;
			}
			State = 1441; _localctx.StmtBlk = statementBlock();
			State = 1445;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				State = 1442; Match(END);
				State = 1443; _localctx.c2 = Match(CONSTRUCTOR);
				State = 1444; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorchainContext : XSharpParserRuleContext {
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorchainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorchain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorchain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorchain(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorchainContext constructorchain() {
		ConstructorchainContext _localctx = new ConstructorchainContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_constructorchain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447;
			_la = _input.La(1);
			if ( !(_la==SELF || _la==SUPER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1448; Match(LPAREN);
			State = 1449; _localctx.ArgList = argumentList();
			State = 1450; Match(RPAREN);
			State = 1451; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _EXTERN;
		public IToken _STATIC;
		public IToken _tset3399;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ConstructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifiersContext constructorModifiers() {
		ConstructorModifiersContext _localctx = new ConstructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_constructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1453;
				_localctx._tset3399 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN) ) {
					_localctx._tset3399 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3399);
				}
				}
				State = 1456;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodeclareContext : XSharpParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public VodeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodeclare(this);
		}
	}

	[RuleVersion(0)]
	public VodeclareContext vodeclare() {
		VodeclareContext _localctx = new VodeclareContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_vodeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1458; Match(DECLARE);
			State = 1459;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1461;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1460;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EOS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				State = 1463;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST_KEYWORD) | (1L << ACCESS) | (1L << ALIGN) | (1L << AS) | (1L << ASPEN) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CALLBACK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLL) | (1L << DLLEXPORT) | (1L << DO) | (1L << DOWNTO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FASTCALL) | (1L << FIELD) | (1L << FOR) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IS) | (1L << IN) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << MEMVAR) | (1L << METHOD) | (1L << NAMEOF) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SEQUENCE) | (1L << SIZEOF) | (1L << STATIC))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (SUPER - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (TYPEOF - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WHILE - 64)) | (1L << (WINCALL - 64)) | (1L << (CATCH - 64)) | (1L << (FINALLY - 64)) | (1L << (THROW - 64)) | (1L << (FIRST_POSITIONAL_KEYWORD - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CASTCLASS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (REPEAT - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (LAST_POSITIONAL_KEYWORD - 128)) | (1L << (FIRST_TYPE - 128)) | (1L << (ARRAY - 128)) | (1L << (BYTE - 128)) | (1L << (CODEBLOCK - 128)) | (1L << (DATE - 128)) | (1L << (DWORD - 128)) | (1L << (FLOAT - 128)) | (1L << (INT - 128)) | (1L << (LOGIC - 128)) | (1L << (LONGINT - 128)) | (1L << (OBJECT - 128)) | (1L << (PSZ - 128)) | (1L << (PTR - 128)) | (1L << (REAL4 - 128)) | (1L << (REAL8 - 128)) | (1L << (REF - 128)) | (1L << (SHORTINT - 128)) | (1L << (STRING - 128)) | (1L << (SYMBOL - 128)) | (1L << (USUAL - 128)) | (1L << (VOID - 128)) | (1L << (WORD - 128)) | (1L << (CHAR - 128)) | (1L << (INT64 - 128)) | (1L << (UINT64 - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (LAST_TYPE - 128)) | (1L << (UDC_KEYWORD - 128)) | (1L << (SCRIPT_REF - 128)) | (1L << (SCRIPT_LOAD - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (DEFERRED - 128)) | (1L << (ENDCLASS - 128)) | (1L << (EXPORTED - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (FREEZE - 192)) | (1L << (FINAL - 192)) | (1L << (INLINE - 192)) | (1L << (INTRODUCE - 192)) | (1L << (NOSAVE - 192)) | (1L << (READONLY - 192)) | (1L << (SHARING - 192)) | (1L << (SHARED - 192)) | (1L << (SYNC - 192)) | (1L << (ENDDEFINE - 192)) | (1L << (LPARAMETERS - 192)) | (1L << (OLEPUBLIC - 192)) | (1L << (EXCLUDE - 192)) | (1L << (THISACCESS - 192)) | (1L << (HELPSTRING - 192)) | (1L << (DIMENSION - 192)) | (1L << (NOINIT - 192)) | (1L << (EACH - 192)) | (1L << (THEN - 192)) | (1L << (FOX_M - 192)) | (1L << (LAST_KEYWORD - 192)) | (1L << (FIRST_NULL - 192)) | (1L << (NIL - 192)) | (1L << (NULL - 192)) | (1L << (NULL_ARRAY - 192)) | (1L << (NULL_CODEBLOCK - 192)) | (1L << (NULL_DATE - 192)) | (1L << (NULL_OBJECT - 192)) | (1L << (NULL_PSZ - 192)) | (1L << (NULL_PTR - 192)) | (1L << (NULL_STRING - 192)) | (1L << (NULL_SYMBOL - 192)) | (1L << (NULL_FOX - 192)) | (1L << (LAST_NULL - 192)) | (1L << (FIRST_OPERATOR - 192)) | (1L << (LT - 192)) | (1L << (LTE - 192)) | (1L << (GT - 192)) | (1L << (GTE - 192)) | (1L << (EQ - 192)) | (1L << (EEQ - 192)) | (1L << (SUBSTR - 192)) | (1L << (NEQ - 192)) | (1L << (NEQ2 - 192)) | (1L << (INC - 192)) | (1L << (DEC - 192)) | (1L << (PLUS - 192)) | (1L << (MINUS - 192)) | (1L << (DIV - 192)) | (1L << (MOD - 192)) | (1L << (EXP - 192)) | (1L << (LSHIFT - 192)) | (1L << (RSHIFT - 192)) | (1L << (TILDE - 192)) | (1L << (MULT - 192)) | (1L << (QQMARK - 192)) | (1L << (QMARK - 192)) | (1L << (AND - 192)) | (1L << (OR - 192)) | (1L << (NOT - 192)) | (1L << (BIT_NOT - 192)) | (1L << (BIT_AND - 192)) | (1L << (BIT_OR - 192)) | (1L << (BIT_XOR - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (ASSIGN_OP - 256)) | (1L << (ASSIGN_ADD - 256)) | (1L << (ASSIGN_SUB - 256)) | (1L << (ASSIGN_EXP - 256)) | (1L << (ASSIGN_MUL - 256)) | (1L << (ASSIGN_DIV - 256)) | (1L << (ASSIGN_MOD - 256)) | (1L << (ASSIGN_BITAND - 256)) | (1L << (ASSIGN_BITOR - 256)) | (1L << (ASSIGN_LSHIFT - 256)) | (1L << (ASSIGN_RSHIFT - 256)) | (1L << (ASSIGN_XOR - 256)) | (1L << (ASSIGN_QQMARK - 256)) | (1L << (LOGIC_AND - 256)) | (1L << (LOGIC_OR - 256)) | (1L << (LOGIC_NOT - 256)) | (1L << (LOGIC_XOR - 256)) | (1L << (FOX_AND - 256)) | (1L << (FOX_OR - 256)) | (1L << (FOX_NOT - 256)) | (1L << (FOX_XOR - 256)) | (1L << (LPAREN - 256)) | (1L << (RPAREN - 256)) | (1L << (LCURLY - 256)) | (1L << (RCURLY - 256)) | (1L << (LBRKT - 256)) | (1L << (RBRKT - 256)) | (1L << (COLON - 256)) | (1L << (COMMA - 256)) | (1L << (PIPE - 256)) | (1L << (AMP - 256)) | (1L << (ADDROF - 256)) | (1L << (ALIAS - 256)) | (1L << (DOT - 256)) | (1L << (COLONCOLON - 256)) | (1L << (BACKSLASH - 256)) | (1L << (ELLIPSIS - 256)) | (1L << (BACKBACKSLASH - 256)) | (1L << (LAST_OPERATOR - 256)) | (1L << (FIRST_CONSTANT - 256)) | (1L << (FALSE_CONST - 256)) | (1L << (TRUE_CONST - 256)) | (1L << (HEX_CONST - 256)) | (1L << (BIN_CONST - 256)) | (1L << (INT_CONST - 256)) | (1L << (DATE_CONST - 256)) | (1L << (DATETIME_CONST - 256)) | (1L << (REAL_CONST - 256)) | (1L << (INVALID_NUMBER - 256)) | (1L << (SYMBOL_CONST - 256)) | (1L << (CHAR_CONST - 256)) | (1L << (STRING_CONST - 256)) | (1L << (ESCAPED_STRING_CONST - 256)) | (1L << (INTERPOLATED_STRING_CONST - 256)) | (1L << (INCOMPLETE_STRING_CONST - 256)) | (1L << (TEXT_STRING_CONST - 256)) | (1L << (BRACKETED_STRING_CONST - 256)) | (1L << (BINARY_CONST - 256)) | (1L << (LAST_CONSTANT - 256)) | (1L << (PP_FIRST - 256)) | (1L << (PP_COMMAND - 256)) | (1L << (PP_DEFINE - 256)) | (1L << (PP_ELSE - 256)) | (1L << (PP_ENDIF - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PP_ENDREGION - 320)) | (1L << (PP_ERROR - 320)) | (1L << (PP_IF - 320)) | (1L << (PP_IFDEF - 320)) | (1L << (PP_IFNDEF - 320)) | (1L << (PP_INCLUDE - 320)) | (1L << (PP_LINE - 320)) | (1L << (PP_REGION - 320)) | (1L << (PP_STDOUT - 320)) | (1L << (PP_TRANSLATE - 320)) | (1L << (PP_UNDEF - 320)) | (1L << (PP_WARNING - 320)) | (1L << (PP_PRAGMA - 320)) | (1L << (PP_TEXT - 320)) | (1L << (PP_ENDTEXT - 320)) | (1L << (PP_LAST - 320)) | (1L << (MACRO - 320)) | (1L << (UDCSEP - 320)) | (1L << (ID - 320)) | (1L << (DOC_COMMENT - 320)) | (1L << (SL_COMMENT - 320)) | (1L << (ML_COMMENT - 320)) | (1L << (LINE_CONT - 320)) | (1L << (LINE_CONT_OLD - 320)) | (1L << (SEMI - 320)) | (1L << (WS - 320)) | (1L << (NL - 320)) | (1L << (UNRECOGNIZED - 320)) | (1L << (LAST - 320)))) != 0) );
			State = 1465; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DestructorModifiersContext Modifiers;
		public IToken d1;
		public IdentifierContext ClassId;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken d2;
		public IToken End;
		public ITerminalNode[] DESTRUCTOR() { return GetTokens(XSharpParser.DESTRUCTOR); }
		public ITerminalNode DESTRUCTOR(int i) {
			return GetToken(XSharpParser.DESTRUCTOR, i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public DestructorModifiersContext destructorModifiers() {
			return GetRuleContext<DestructorModifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public DestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
	}

	[RuleVersion(0)]
	public DestructorContext destructor() {
		DestructorContext _localctx = new DestructorContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_destructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1468;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1467; _localctx.Attributes = attributes();
				}
			}

			State = 1471;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXTERN) {
				{
				State = 1470; _localctx.Modifiers = destructorModifiers();
				}
			}

			State = 1473; _localctx.d1 = Match(DESTRUCTOR);
			State = 1476;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1474; Match(LPAREN);
				State = 1475; Match(RPAREN);
				}
			}

			State = 1480;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1478; Match(CLASS);
				State = 1479; _localctx.ClassId = identifier();
				}
			}

			State = 1484;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1482; Match(UDCSEP);
				State = 1483; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1486; _localctx.end = eos();
			State = 1487; _localctx.StmtBlk = statementBlock();
			State = 1491;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				State = 1488; Match(END);
				State = 1489; _localctx.d2 = Match(DESTRUCTOR);
				State = 1490; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorModifiersContext : XSharpParserRuleContext {
		public IToken _EXTERN;
		public IList<IToken> _Tokens = new List<IToken>();
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public DestructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public DestructorModifiersContext destructorModifiers() {
		DestructorModifiersContext _localctx = new DestructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_destructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1494;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1493; _localctx._EXTERN = Match(EXTERN);
				_localctx._Tokens.Add(_localctx._EXTERN);
				}
				}
				State = 1496;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadedOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode RSHIFT() { return GetToken(XSharpParser.RSHIFT, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public OverloadedOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadedOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOverloadedOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOverloadedOps(this);
		}
	}

	[RuleVersion(0)]
	public OverloadedOpsContext overloadedOps() {
		OverloadedOpsContext _localctx = new OverloadedOpsContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_overloadedOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (LT - 227)) | (1L << (LTE - 227)) | (1L << (GT - 227)) | (1L << (GTE - 227)) | (1L << (EEQ - 227)) | (1L << (NEQ - 227)) | (1L << (NEQ2 - 227)) | (1L << (INC - 227)) | (1L << (DEC - 227)) | (1L << (PLUS - 227)) | (1L << (MINUS - 227)) | (1L << (DIV - 227)) | (1L << (MOD - 227)) | (1L << (LSHIFT - 227)) | (1L << (RSHIFT - 227)) | (1L << (TILDE - 227)) | (1L << (MULT - 227)) | (1L << (AND - 227)) | (1L << (OR - 227)) | (1L << (NOT - 227)) | (1L << (PIPE - 227)) | (1L << (AMP - 227)))) != 0) || _la==FALSE_CONST || _la==TRUE_CONST) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ConversionOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConversionOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConversionOps(this);
		}
	}

	[RuleVersion(0)]
	public ConversionOpsContext conversionOps() {
		ConversionOpsContext _localctx = new ConversionOpsContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_conversionOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1500;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public OperatorModifiersContext Modifiers;
		public IToken o1;
		public OverloadedOpsContext Operation;
		public ConversionOpsContext Conversion;
		public IToken Gt;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken End;
		public ITerminalNode[] OPERATOR() { return GetTokens(XSharpParser.OPERATOR); }
		public ITerminalNode OPERATOR(int i) {
			return GetToken(XSharpParser.OPERATOR, i);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public OverloadedOpsContext overloadedOps() {
			return GetRuleContext<OverloadedOpsContext>(0);
		}
		public ConversionOpsContext conversionOps() {
			return GetRuleContext<ConversionOpsContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public OperatorModifiersContext operatorModifiers() {
			return GetRuleContext<OperatorModifiersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public Operator_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperator_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperator_(this);
		}
	}

	[RuleVersion(0)]
	public Operator_Context operator_() {
		Operator_Context _localctx = new Operator_Context(_ctx, State);
		EnterRule(_localctx, 132, RULE_operator_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1503;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1502; _localctx.Attributes = attributes();
				}
			}

			State = 1506;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PUBLIC || _la==STATIC || _la==EXTERN) {
				{
				State = 1505; _localctx.Modifiers = operatorModifiers();
				}
			}

			State = 1508; _localctx.o1 = Match(OPERATOR);
			State = 1511;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LT:
			case LTE:
			case GT:
			case GTE:
			case EEQ:
			case NEQ:
			case NEQ2:
			case INC:
			case DEC:
			case PLUS:
			case MINUS:
			case DIV:
			case MOD:
			case LSHIFT:
			case RSHIFT:
			case TILDE:
			case MULT:
			case AND:
			case OR:
			case NOT:
			case PIPE:
			case AMP:
			case FALSE_CONST:
			case TRUE_CONST:
				{
				State = 1509; _localctx.Operation = overloadedOps();
				}
				break;
			case EXPLICIT:
			case IMPLICIT:
				{
				State = 1510; _localctx.Conversion = conversionOps();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==GT) {
				{
				State = 1513; _localctx.Gt = Match(GT);
				}
			}

			State = 1516; _localctx.ParamList = parameterList();
			State = 1519;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1517; Match(AS);
				State = 1518; _localctx.Type = datatype();
				}
			}

			State = 1523;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1521; Match(UDCSEP);
				State = 1522; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1525; _localctx.end = eos();
			State = 1526; _localctx.StmtBlk = statementBlock();
			State = 1530;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				State = 1527; Match(END);
				State = 1528; _localctx.o1 = Match(OPERATOR);
				State = 1529; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _EXTERN;
		public IToken _tset3776;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public OperatorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperatorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperatorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public OperatorModifiersContext operatorModifiers() {
		OperatorModifiersContext _localctx = new OperatorModifiersContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_operatorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1532;
				_localctx._tset3776 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PUBLIC || _la==STATIC || _la==EXTERN) ) {
					_localctx._tset3776 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3776);
				}
				}
				State = 1535;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==PUBLIC || _la==STATIC || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _STATIC;
		public IToken _VIRTUAL;
		public IToken _SEALED;
		public IToken _ABSTRACT;
		public IToken _ASYNC;
		public IToken _UNSAFE;
		public IToken _EXTERN;
		public IToken _OVERRIDE;
		public IToken _tset3803;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] VIRTUAL() { return GetTokens(XSharpParser.VIRTUAL); }
		public ITerminalNode VIRTUAL(int i) {
			return GetToken(XSharpParser.VIRTUAL, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public MemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifiersContext memberModifiers() {
		MemberModifiersContext _localctx = new MemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_memberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1538;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1537;
				_localctx._tset3803 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset3803 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3803);
				}
				}
				State = 1540;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : XSharpParserRuleContext {
		public AttributeBlockContext _attributeBlock;
		public IList<AttributeBlockContext> _AttrBlk = new List<AttributeBlockContext>();
		public AttributeBlockContext[] attributeBlock() {
			return GetRuleContexts<AttributeBlockContext>();
		}
		public AttributeBlockContext attributeBlock(int i) {
			return GetRuleContext<AttributeBlockContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1543;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1542; _localctx._attributeBlock = attributeBlock();
					_localctx._AttrBlk.Add(_localctx._attributeBlock);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1545;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,225,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeBlockContext : XSharpParserRuleContext {
		public AttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public IToken String;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeTargetContext attributeTarget() {
			return GetRuleContext<AttributeTargetContext>(0);
		}
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public AttributeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeBlock(this);
		}
	}

	[RuleVersion(0)]
	public AttributeBlockContext attributeBlock() {
		AttributeBlockContext _localctx = new AttributeBlockContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_attributeBlock);
		int _la;
		try {
			State = 1562;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1547; Match(LBRKT);
				State = 1549;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
				case 1:
					{
					State = 1548; _localctx.Target = attributeTarget();
					}
					break;
				}
				State = 1551; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				State = 1556;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1552; Match(COMMA);
					State = 1553; _localctx._attribute = attribute();
					_localctx._Attributes.Add(_localctx._attribute);
					}
					}
					State = 1558;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1559; Match(RBRKT);
				}
				break;
			case BRACKETED_STRING_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1561; _localctx.String = Match(BRACKETED_STRING_CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeTargetContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public ITerminalNode ENUM() { return GetToken(XSharpParser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(XSharpParser.EVENT, 0); }
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode INTERFACE() { return GetToken(XSharpParser.INTERFACE, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode PROPERTY() { return GetToken(XSharpParser.PROPERTY, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public AttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public AttributeTargetContext attributeTarget() {
		AttributeTargetContext _localctx = new AttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_attributeTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1564;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << FIELD) | (1L << METHOD) | (1L << RETURN))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (CONSTRUCTOR - 82)) | (1L << (DELEGATE - 82)) | (1L << (ENUM - 82)) | (1L << (EVENT - 82)) | (1L << (INTERFACE - 82)) | (1L << (PROPERTY - 82)) | (1L << (STRUCTURE - 82)))) != 0) || _la==ID) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1565; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : XSharpParserRuleContext {
		public NameContext Name;
		public AttributeParamContext _attributeParam;
		public IList<AttributeParamContext> _Params = new List<AttributeParamContext>();
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AttributeParamContext[] attributeParam() {
			return GetRuleContexts<AttributeParamContext>();
		}
		public AttributeParamContext attributeParam(int i) {
			return GetRuleContext<AttributeParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1567; _localctx.Name = name(0);
			State = 1580;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1568; Match(LPAREN);
				State = 1577;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
				case 1:
					{
					State = 1569; _localctx._attributeParam = attributeParam();
					_localctx._Params.Add(_localctx._attributeParam);
					State = 1574;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1570; Match(COMMA);
						State = 1571; _localctx._attributeParam = attributeParam();
						_localctx._Params.Add(_localctx._attributeParam);
						}
						}
						State = 1576;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1579; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeParamContext : XSharpParserRuleContext {
		public AttributeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeParam; } }
	 
		public AttributeParamContext() { }
		public virtual void CopyFrom(AttributeParamContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprAttributeParamContext : AttributeParamContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExprAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExprAttributeParam(this);
		}
	}
	public partial class PropertyAttributeParamContext : AttributeParamContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAttributeParam(this);
		}
	}

	[RuleVersion(0)]
	public AttributeParamContext attributeParam() {
		AttributeParamContext _localctx = new AttributeParamContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_attributeParam);
		try {
			State = 1587;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
			case 1:
				_localctx = new PropertyAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1582; ((PropertyAttributeParamContext)_localctx).Name = identifierName();
				State = 1583; ((PropertyAttributeParamContext)_localctx).Op = assignoperator();
				State = 1584; ((PropertyAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;

			case 2:
				_localctx = new ExprAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1586; ((ExprAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributesContext : XSharpParserRuleContext {
		public GlobalAttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public GlobalAttributeTargetContext globalAttributeTarget() {
			return GetRuleContext<GlobalAttributeTargetContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GlobalAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributes(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributesContext globalAttributes() {
		GlobalAttributesContext _localctx = new GlobalAttributesContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_globalAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1589; Match(LBRKT);
			State = 1590; _localctx.Target = globalAttributeTarget();
			State = 1591; _localctx._attribute = attribute();
			_localctx._Attributes.Add(_localctx._attribute);
			State = 1596;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1592; Match(COMMA);
				State = 1593; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				}
				}
				State = 1598;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1599; Match(RBRKT);
			State = 1600; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributeTargetContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public GlobalAttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributeTargetContext globalAttributeTarget() {
		GlobalAttributeTargetContext _localctx = new GlobalAttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_globalAttributeTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602; _localctx.Token = Match(ID);
			State = 1603; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilewidememvarContext : XSharpParserRuleContext {
		public IToken Token;
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Vars = new List<IdentifierNameContext>();
		public IToken end;
		public MemvarContext _memvar;
		public IList<MemvarContext> _XVars = new List<MemvarContext>();
		public FoxmemvarContext _foxmemvar;
		public IList<FoxmemvarContext> _FoxVars = new List<FoxmemvarContext>();
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public MemvarContext[] memvar() {
			return GetRuleContexts<MemvarContext>();
		}
		public MemvarContext memvar(int i) {
			return GetRuleContext<MemvarContext>(i);
		}
		public FoxmemvarContext[] foxmemvar() {
			return GetRuleContexts<FoxmemvarContext>();
		}
		public FoxmemvarContext foxmemvar(int i) {
			return GetRuleContext<FoxmemvarContext>(i);
		}
		public FilewidememvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filewidememvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFilewidememvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFilewidememvar(this);
		}
	}

	[RuleVersion(0)]
	public FilewidememvarContext filewidememvar() {
		FilewidememvarContext _localctx = new FilewidememvarContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_filewidememvar);
		int _la;
		try {
			State = 1640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,237,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1605; _localctx.Token = Match(MEMVAR);
				State = 1606; _localctx._identifierName = identifierName();
				_localctx._Vars.Add(_localctx._identifierName);
				State = 1611;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1607; Match(COMMA);
					State = 1608; _localctx._identifierName = identifierName();
					_localctx._Vars.Add(_localctx._identifierName);
					}
					}
					State = 1613;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1614; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1616;
				if (!(!IsFox )) throw new FailedPredicateException(this, "!IsFox ");
				State = 1617; _localctx.Token = Match(PUBLIC);
				State = 1618; _localctx._memvar = memvar();
				_localctx._XVars.Add(_localctx._memvar);
				State = 1623;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1619; Match(COMMA);
					State = 1620; _localctx._memvar = memvar();
					_localctx._XVars.Add(_localctx._memvar);
					}
					}
					State = 1625;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1626; _localctx.end = Match(EOS);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1628;
				if (!(IsFox  )) throw new FailedPredicateException(this, "IsFox  ");
				State = 1629; _localctx.Token = Match(PUBLIC);
				State = 1630; _localctx._foxmemvar = foxmemvar();
				_localctx._FoxVars.Add(_localctx._foxmemvar);
				State = 1635;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1631; Match(COMMA);
					State = 1632; _localctx._foxmemvar = foxmemvar();
					_localctx._FoxVars.Add(_localctx._foxmemvar);
					}
					}
					State = 1637;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1638; _localctx.end = Match(EOS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : XSharpParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FoxmemvardeclStmtContext : StatementContext {
		public FoxmemvardeclContext Decl;
		public FoxmemvardeclContext foxmemvardecl() {
			return GetRuleContext<FoxmemvardeclContext>(0);
		}
		public FoxmemvardeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvardeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvardeclStmt(this);
		}
	}
	public partial class TryStmtContext : StatementContext {
		public IToken T;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public CatchBlockContext _catchBlock;
		public IList<CatchBlockContext> _CatchBlock = new List<CatchBlockContext>();
		public IToken F;
		public StatementBlockContext FinBlock;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] TRY() { return GetTokens(XSharpParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(XSharpParser.TRY, i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] CATCH() { return GetTokens(XSharpParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(XSharpParser.CATCH, i);
		}
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public CatchBlockContext[] catchBlock() {
			return GetRuleContexts<CatchBlockContext>();
		}
		public CatchBlockContext catchBlock(int i) {
			return GetRuleContext<CatchBlockContext>(i);
		}
		public TryStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTryStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTryStmt(this);
		}
	}
	public partial class YieldStmtContext : StatementContext {
		public IToken Y;
		public IToken R;
		public ExpressionContext Expr;
		public EosContext end;
		public IToken Break;
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public YieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterYieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitYieldStmt(this);
		}
	}
	public partial class MemvardeclStmtContext : StatementContext {
		public MemvardeclContext Decl;
		public MemvardeclContext memvardecl() {
			return GetRuleContext<MemvardeclContext>(0);
		}
		public MemvardeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvardeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvardeclStmt(this);
		}
	}
	public partial class FieldStmtContext : StatementContext {
		public FielddeclContext Decl;
		public FielddeclContext fielddecl() {
			return GetRuleContext<FielddeclContext>(0);
		}
		public FieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFieldStmt(this);
		}
	}
	public partial class LocalFunctionStmtContext : StatementContext {
		public LocalfuncprocContext Decl;
		public LocalfuncprocContext localfuncproc() {
			return GetRuleContext<LocalfuncprocContext>(0);
		}
		public LocalFunctionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalFunctionStmt(this);
		}
	}
	public partial class QoutStmtContext : StatementContext {
		public IToken Q;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public ITerminalNode QQMARK() { return GetToken(XSharpParser.QQMARK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public QoutStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQoutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQoutStmt(this);
		}
	}
	public partial class SwitchStmtContext : StatementContext {
		public IToken S;
		public ExpressionContext Expr;
		public EosContext end;
		public SwitchBlockContext _switchBlock;
		public IList<SwitchBlockContext> _SwitchBlock = new List<SwitchBlockContext>();
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] SWITCH() { return GetTokens(XSharpParser.SWITCH); }
		public ITerminalNode SWITCH(int i) {
			return GetToken(XSharpParser.SWITCH, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public SwitchBlockContext[] switchBlock() {
			return GetRuleContexts<SwitchBlockContext>();
		}
		public SwitchBlockContext switchBlock(int i) {
			return GetRuleContext<SwitchBlockContext>(i);
		}
		public SwitchStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
	}
	public partial class DeclarationStmtContext : StatementContext {
		public LocaldeclContext Decl;
		public LocaldeclContext localdecl() {
			return GetRuleContext<LocaldeclContext>(0);
		}
		public DeclarationStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDeclarationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDeclarationStmt(this);
		}
	}
	public partial class JumpStmtContext : StatementContext {
		public IToken Key;
		public EosContext end;
		public ExpressionContext Expr;
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LOOP() { return GetToken(XSharpParser.LOOP, 0); }
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THROW() { return GetToken(XSharpParser.THROW, 0); }
		public JumpStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJumpStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJumpStmt(this);
		}
	}
	public partial class FoxtextoutStmtContext : StatementContext {
		public IToken B;
		public IToken String;
		public IToken end;
		public ITerminalNode TEXT_STRING_CONST() { return GetToken(XSharpParser.TEXT_STRING_CONST, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode BACKSLASH() { return GetToken(XSharpParser.BACKSLASH, 0); }
		public ITerminalNode BACKBACKSLASH() { return GetToken(XSharpParser.BACKBACKSLASH, 0); }
		public FoxtextoutStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxtextoutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxtextoutStmt(this);
		}
	}
	public partial class DoStmtContext : StatementContext {
		public IToken D;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ArgumentListContext ArgList;
		public EosContext end;
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public DoStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDoStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDoStmt(this);
		}
	}
	public partial class CaseStmtContext : StatementContext {
		public EosContext end;
		public IToken c;
		public CondBlockContext _condBlock;
		public IList<CondBlockContext> _CaseBlocks = new List<CondBlockContext>();
		public IToken oth;
		public StatementBlockContext OtherwiseStmtBlk;
		public IToken e;
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public ITerminalNode[] CASE() { return GetTokens(XSharpParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(XSharpParser.CASE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDCASE() { return GetToken(XSharpParser.ENDCASE, 0); }
		public CondBlockContext[] condBlock() {
			return GetRuleContexts<CondBlockContext>();
		}
		public CondBlockContext condBlock(int i) {
			return GetRuleContext<CondBlockContext>(i);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCaseStmt(this);
		}
	}
	public partial class NopStmtContext : StatementContext {
		public EosContext end;
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NopStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNopStmt(this);
		}
	}
	public partial class RepeatStmtContext : StatementContext {
		public IToken r;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext Expr;
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode REPEAT() { return GetToken(XSharpParser.REPEAT, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRepeatStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRepeatStmt(this);
		}
	}
	public partial class FoxexpressionStmtContext : StatementContext {
		public IToken Eq;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public FoxexpressionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxexpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxexpressionStmt(this);
		}
	}
	public partial class ForStmtContext : StatementContext {
		public IToken f;
		public ExpressionContext AssignExpr;
		public IToken ForDecl;
		public IdentifierContext ForIter;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public DatatypeContext Type;
		public IToken Dir;
		public ExpressionContext FinalExpr;
		public ExpressionContext Step;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] FOR() { return GetTokens(XSharpParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(XSharpParser.FOR, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ForStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
	}
	public partial class SeqStmtContext : StatementContext {
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public RecoverBlockContext RecoverBlock;
		public IToken F;
		public StatementBlockContext FinBlock;
		public IToken e;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] SEQUENCE() { return GetTokens(XSharpParser.SEQUENCE); }
		public ITerminalNode SEQUENCE(int i) {
			return GetToken(XSharpParser.SEQUENCE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode RECOVER() { return GetToken(XSharpParser.RECOVER, 0); }
		public RecoverBlockContext recoverBlock() {
			return GetRuleContext<RecoverBlockContext>(0);
		}
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public SeqStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSeqStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSeqStmt(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		public IToken w;
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] WHILE() { return GetTokens(XSharpParser.WHILE); }
		public ITerminalNode WHILE(int i) {
			return GetToken(XSharpParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode[] DO() { return GetTokens(XSharpParser.DO); }
		public ITerminalNode DO(int i) {
			return GetToken(XSharpParser.DO, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDDO() { return GetToken(XSharpParser.ENDDO, 0); }
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
	}
	public partial class ForeachStmtContext : StatementContext {
		public IToken f;
		public IToken V;
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public ExpressionContext Container;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode EACH() { return GetToken(XSharpParser.EACH, 0); }
		public ITerminalNode[] FOR() { return GetTokens(XSharpParser.FOR); }
		public ITerminalNode FOR(int i) {
			return GetToken(XSharpParser.FOR, i);
		}
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ForeachStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForeachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForeachStmt(this);
		}
	}
	public partial class ExpressionStmtContext : StatementContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionStmt(this);
		}
	}
	public partial class ReturnStmtContext : StatementContext {
		public IToken R;
		public IToken Void;
		public ExpressionContext Expr;
		public EosContext end;
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}
	public partial class WithBlockContext : StatementContext {
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode[] WITH() { return GetTokens(XSharpParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(XSharpParser.WITH, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public WithBlockContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWithBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWithBlock(this);
		}
	}
	public partial class FoxlocaldeclStmtContext : StatementContext {
		public FoxlocaldeclContext Decl;
		public FoxlocaldeclContext foxlocaldecl() {
			return GetRuleContext<FoxlocaldeclContext>(0);
		}
		public FoxlocaldeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlocaldeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlocaldeclStmt(this);
		}
	}
	public partial class IfStmtContext : StatementContext {
		public IToken i;
		public CondBlockContext _condBlock;
		public IList<CondBlockContext> _IfBlocks = new List<CondBlockContext>();
		public IToken e;
		public IToken el;
		public StatementBlockContext ElseStmtBlk;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] IF() { return GetTokens(XSharpParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(XSharpParser.IF, i);
		}
		public CondBlockContext[] condBlock() {
			return GetRuleContexts<CondBlockContext>();
		}
		public CondBlockContext condBlock(int i) {
			return GetRuleContext<CondBlockContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDIF() { return GetToken(XSharpParser.ENDIF, 0); }
		public ITerminalNode[] ELSEIF() { return GetTokens(XSharpParser.ELSEIF); }
		public ITerminalNode ELSEIF(int i) {
			return GetToken(XSharpParser.ELSEIF, i);
		}
		public ITerminalNode ELSE() { return GetToken(XSharpParser.ELSE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}
	public partial class BlockStmtContext : StatementContext {
		public IToken Key;
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public VariableDeclarationContext VarDecl;
		public BlockTokensContext Key1;
		public BlockTokensContext Key2;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] LOCK() { return GetTokens(XSharpParser.LOCK); }
		public ITerminalNode LOCK(int i) {
			return GetToken(XSharpParser.LOCK, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] USING() { return GetTokens(XSharpParser.USING); }
		public ITerminalNode USING(int i) {
			return GetToken(XSharpParser.USING, i);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public BlockTokensContext[] blockTokens() {
			return GetRuleContexts<BlockTokensContext>();
		}
		public BlockTokensContext blockTokens(int i) {
			return GetRuleContext<BlockTokensContext>(i);
		}
		public BlockStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_statement);
		int _la;
		try {
			State = 1982;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
			case 1:
				_localctx = new DeclarationStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1642; ((DeclarationStmtContext)_localctx).Decl = localdecl();
				}
				break;

			case 2:
				_localctx = new FoxlocaldeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1643;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 1644; ((FoxlocaldeclStmtContext)_localctx).Decl = foxlocaldecl();
				}
				break;

			case 3:
				_localctx = new LocalFunctionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1645; ((LocalFunctionStmtContext)_localctx).Decl = localfuncproc();
				}
				break;

			case 4:
				_localctx = new MemvardeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1646;
				if (!(!IsFox && HasMemVars)) throw new FailedPredicateException(this, "!IsFox && HasMemVars");
				State = 1647; ((MemvardeclStmtContext)_localctx).Decl = memvardecl();
				}
				break;

			case 5:
				_localctx = new FieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1648; ((FieldStmtContext)_localctx).Decl = fielddecl();
				}
				break;

			case 6:
				_localctx = new FoxmemvardeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1649;
				if (!(IsFox && HasMemVars)) throw new FailedPredicateException(this, "IsFox && HasMemVars");
				State = 1650; ((FoxmemvardeclStmtContext)_localctx).Decl = foxmemvardecl();
				}
				break;

			case 7:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1652;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==DO) {
					{
					State = 1651; Match(DO);
					}
				}

				State = 1654; ((WhileStmtContext)_localctx).w = Match(WHILE);
				State = 1655; ((WhileStmtContext)_localctx).Expr = expression(0);
				State = 1656; ((WhileStmtContext)_localctx).end = eos();
				State = 1657; ((WhileStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1663;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1658; ((WhileStmtContext)_localctx).e = Match(END);
					State = 1660;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==DO || _la==WHILE) {
						{
						State = 1659;
						_la = _input.La(1);
						if ( !(_la==DO || _la==WHILE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
					}

					}
					break;
				case ENDDO:
					{
					State = 1662; ((WhileStmtContext)_localctx).e = Match(ENDDO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1665; eos();
				}
				break;

			case 8:
				_localctx = new NopStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1667; Match(NOP);
				State = 1670;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LPAREN) {
					{
					State = 1668; Match(LPAREN);
					State = 1669; Match(RPAREN);
					}
				}

				State = 1672; ((NopStmtContext)_localctx).end = eos();
				}
				break;

			case 9:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1673; ((ForStmtContext)_localctx).f = Match(FOR);
				State = 1694;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					State = 1674; ((ForStmtContext)_localctx).AssignExpr = expression(0);
					}
					break;

				case 2:
					{
					State = 1680;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case LOCAL:
					case IMPLIED:
						{
						State = 1676;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==LOCAL) {
							{
							State = 1675; Match(LOCAL);
							}
						}

						State = 1678; ((ForStmtContext)_localctx).ForDecl = Match(IMPLIED);
						}
						break;
					case VAR:
						{
						State = 1679; ((ForStmtContext)_localctx).ForDecl = Match(VAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1682; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1683; ((ForStmtContext)_localctx).Op = assignoperator();
					State = 1684; ((ForStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 3:
					{
					State = 1686; ((ForStmtContext)_localctx).ForDecl = Match(LOCAL);
					State = 1687; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1688; ((ForStmtContext)_localctx).Op = assignoperator();
					State = 1689; ((ForStmtContext)_localctx).Expr = expression(0);
					State = 1692;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1690; Match(AS);
						State = 1691; ((ForStmtContext)_localctx).Type = datatype();
						}
					}

					}
					break;
				}
				State = 1696;
				((ForStmtContext)_localctx).Dir = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & ((1L << (DOWNTO - 20)) | (1L << (TO - 20)) | (1L << (UPTO - 20)))) != 0)) ) {
					((ForStmtContext)_localctx).Dir = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1697; ((ForStmtContext)_localctx).FinalExpr = expression(0);
				State = 1700;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STEP) {
					{
					State = 1698; Match(STEP);
					State = 1699; ((ForStmtContext)_localctx).Step = expression(0);
					}
				}

				State = 1702; ((ForStmtContext)_localctx).end = eos();
				State = 1703; ((ForStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1707;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1704; ((ForStmtContext)_localctx).e = Match(NEXT);
					}
					break;
				case END:
					{
					State = 1705; ((ForStmtContext)_localctx).e = Match(END);
					State = 1706; Match(FOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1709; eos();
				}
				break;

			case 10:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1711; ((IfStmtContext)_localctx).i = Match(IF);
				State = 1712; ((IfStmtContext)_localctx)._condBlock = condBlock(((IfStmtContext)_localctx).i);
				((IfStmtContext)_localctx)._IfBlocks.Add(((IfStmtContext)_localctx)._condBlock);
				State = 1717;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 1713; ((IfStmtContext)_localctx).e = Match(ELSEIF);
					State = 1714; ((IfStmtContext)_localctx)._condBlock = condBlock(((IfStmtContext)_localctx).e);
					((IfStmtContext)_localctx)._IfBlocks.Add(((IfStmtContext)_localctx)._condBlock);
					}
					}
					State = 1719;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1724;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 1720; ((IfStmtContext)_localctx).el = Match(ELSE);
					State = 1721; eos();
					State = 1722; ((IfStmtContext)_localctx).ElseStmtBlk = statementBlock();
					}
				}

				State = 1731;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1726; ((IfStmtContext)_localctx).e = Match(END);
					State = 1728;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==IF) {
						{
						State = 1727; Match(IF);
						}
					}

					}
					break;
				case ENDIF:
					{
					State = 1730; ((IfStmtContext)_localctx).e = Match(ENDIF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1733; eos();
				}
				break;

			case 11:
				_localctx = new CaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1735; Match(DO);
				State = 1736; Match(CASE);
				State = 1737; ((CaseStmtContext)_localctx).end = eos();
				State = 1742;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CASE) {
					{
					{
					State = 1738; ((CaseStmtContext)_localctx).c = Match(CASE);
					State = 1739; ((CaseStmtContext)_localctx)._condBlock = condBlock(((CaseStmtContext)_localctx).c);
					((CaseStmtContext)_localctx)._CaseBlocks.Add(((CaseStmtContext)_localctx)._condBlock);
					}
					}
					State = 1744;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1749;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OTHERWISE) {
					{
					State = 1745; ((CaseStmtContext)_localctx).oth = Match(OTHERWISE);
					State = 1746; ((CaseStmtContext)_localctx).end = eos();
					State = 1747; ((CaseStmtContext)_localctx).OtherwiseStmtBlk = statementBlock();
					}
				}

				State = 1756;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1751; ((CaseStmtContext)_localctx).e = Match(END);
					State = 1753;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==CASE) {
						{
						State = 1752; Match(CASE);
						}
					}

					}
					break;
				case ENDCASE:
					{
					State = 1755; ((CaseStmtContext)_localctx).e = Match(ENDCASE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1758; eos();
				}
				break;

			case 12:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1760; ((JumpStmtContext)_localctx).Key = Match(EXIT);
				State = 1761; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 13:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1762; ((JumpStmtContext)_localctx).Key = Match(LOOP);
				State = 1763; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 14:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1764; ((JumpStmtContext)_localctx).Key = Match(BREAK);
				State = 1766;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					State = 1765; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1768; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 15:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1769; ((ReturnStmtContext)_localctx).R = Match(RETURN);
				State = 1772;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					State = 1770; ((ReturnStmtContext)_localctx).Void = Match(VOID);
					}
					break;

				case 2:
					{
					State = 1771; ((ReturnStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1774; ((ReturnStmtContext)_localctx).end = eos();
				}
				break;

			case 16:
				_localctx = new QoutStmtContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1775;
				((QoutStmtContext)_localctx).Q = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==QQMARK || _la==QMARK) ) {
					((QoutStmtContext)_localctx).Q = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1784;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					State = 1776; ((QoutStmtContext)_localctx)._expression = expression(0);
					((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
					State = 1781;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1777; Match(COMMA);
						State = 1778; ((QoutStmtContext)_localctx)._expression = expression(0);
						((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
						}
						}
						State = 1783;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1786; ((QoutStmtContext)_localctx).end = eos();
				}
				break;

			case 17:
				_localctx = new SeqStmtContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1787; Match(BEGIN);
				State = 1788; Match(SEQUENCE);
				State = 1789; ((SeqStmtContext)_localctx).end = eos();
				State = 1790; ((SeqStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1793;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==RECOVER) {
					{
					State = 1791; Match(RECOVER);
					State = 1792; ((SeqStmtContext)_localctx).RecoverBlock = recoverBlock();
					}
				}

				State = 1799;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FINALLY) {
					{
					State = 1795; ((SeqStmtContext)_localctx).F = Match(FINALLY);
					State = 1796; eos();
					State = 1797; ((SeqStmtContext)_localctx).FinBlock = statementBlock();
					}
				}

				State = 1801; ((SeqStmtContext)_localctx).e = Match(END);
				State = 1803;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SEQUENCE) {
					{
					State = 1802; Match(SEQUENCE);
					}
				}

				State = 1805; eos();
				}
				break;

			case 18:
				_localctx = new RepeatStmtContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1807; ((RepeatStmtContext)_localctx).r = Match(REPEAT);
				State = 1808; ((RepeatStmtContext)_localctx).end = eos();
				State = 1809; ((RepeatStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1810; Match(UNTIL);
				State = 1811; ((RepeatStmtContext)_localctx).Expr = expression(0);
				State = 1812; eos();
				}
				break;

			case 19:
				_localctx = new ForeachStmtContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1817;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOREACH:
					{
					State = 1814; ((ForeachStmtContext)_localctx).f = Match(FOREACH);
					}
					break;
				case FOR:
					{
					State = 1815; ((ForeachStmtContext)_localctx).f = Match(FOR);
					State = 1816; Match(EACH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1828;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,265,_ctx) ) {
				case 1:
					{
					State = 1819; ((ForeachStmtContext)_localctx).V = Match(IMPLIED);
					State = 1820; ((ForeachStmtContext)_localctx).Id = varidentifier();
					}
					break;

				case 2:
					{
					State = 1821; ((ForeachStmtContext)_localctx).Id = varidentifier();
					State = 1824;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1822; Match(AS);
						State = 1823; ((ForeachStmtContext)_localctx).Type = datatype();
						}
					}

					}
					break;

				case 3:
					{
					State = 1826; ((ForeachStmtContext)_localctx).V = Match(VAR);
					State = 1827; ((ForeachStmtContext)_localctx).Id = varidentifier();
					}
					break;
				}
				State = 1830; Match(IN);
				State = 1831; ((ForeachStmtContext)_localctx).Container = expression(0);
				State = 1832; ((ForeachStmtContext)_localctx).end = eos();
				State = 1833; ((ForeachStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1837;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1834; ((ForeachStmtContext)_localctx).e = Match(NEXT);
					}
					break;
				case END:
					{
					State = 1835; ((ForeachStmtContext)_localctx).e = Match(END);
					State = 1836; Match(FOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1839; eos();
				}
				break;

			case 20:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1841; ((JumpStmtContext)_localctx).Key = Match(THROW);
				State = 1843;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					State = 1842; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1845; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 21:
				_localctx = new TryStmtContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1846; ((TryStmtContext)_localctx).T = Match(TRY);
				State = 1847; ((TryStmtContext)_localctx).end = eos();
				State = 1848; ((TryStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1855;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CATCH) {
					{
					{
					State = 1849; Match(CATCH);
					State = 1851;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
					case 1:
						{
						State = 1850; ((TryStmtContext)_localctx)._catchBlock = catchBlock();
						((TryStmtContext)_localctx)._CatchBlock.Add(((TryStmtContext)_localctx)._catchBlock);
						}
						break;
					}
					}
					}
					State = 1857;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1862;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FINALLY) {
					{
					State = 1858; ((TryStmtContext)_localctx).F = Match(FINALLY);
					State = 1859; eos();
					State = 1860; ((TryStmtContext)_localctx).FinBlock = statementBlock();
					}
				}

				State = 1864; ((TryStmtContext)_localctx).e = Match(END);
				State = 1866;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==TRY) {
					{
					State = 1865; Match(TRY);
					}
				}

				State = 1868; eos();
				}
				break;

			case 22:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1870; Match(BEGIN);
				State = 1871; ((BlockStmtContext)_localctx).Key = Match(LOCK);
				State = 1872; ((BlockStmtContext)_localctx).Expr = expression(0);
				State = 1873; ((BlockStmtContext)_localctx).end = eos();
				State = 1874; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1875; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1877;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCK) {
					{
					State = 1876; Match(LOCK);
					}
				}

				State = 1879; eos();
				}
				break;

			case 23:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1881; ((YieldStmtContext)_localctx).Y = Match(YIELD);
				State = 1882; ((YieldStmtContext)_localctx).R = Match(RETURN);
				State = 1885;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,273,_ctx) ) {
				case 1:
					{
					State = 1883; Match(VOID);
					}
					break;

				case 2:
					{
					State = 1884; ((YieldStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1887; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 24:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1888; ((YieldStmtContext)_localctx).Y = Match(YIELD);
				State = 1889;
				((YieldStmtContext)_localctx).Break = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BREAK || _la==EXIT) ) {
					((YieldStmtContext)_localctx).Break = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1890; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 25:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1892;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BEGIN || _la==DO) {
					{
					State = 1891;
					_la = _input.La(1);
					if ( !(_la==BEGIN || _la==DO) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 1894; ((SwitchStmtContext)_localctx).S = Match(SWITCH);
				State = 1895; ((SwitchStmtContext)_localctx).Expr = expression(0);
				State = 1896; ((SwitchStmtContext)_localctx).end = eos();
				State = 1898;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1897; ((SwitchStmtContext)_localctx)._switchBlock = switchBlock();
					((SwitchStmtContext)_localctx)._SwitchBlock.Add(((SwitchStmtContext)_localctx)._switchBlock);
					}
					}
					State = 1900;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==CASE || _la==OTHERWISE );
				State = 1902; ((SwitchStmtContext)_localctx).e = Match(END);
				State = 1904;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SWITCH) {
					{
					State = 1903; Match(SWITCH);
					}
				}

				State = 1906; eos();
				}
				break;

			case 26:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1908; Match(BEGIN);
				State = 1909; ((BlockStmtContext)_localctx).Key = Match(USING);
				State = 1912;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					State = 1910; ((BlockStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 2:
					{
					State = 1911; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
					}
					break;
				}
				State = 1914; ((BlockStmtContext)_localctx).end = eos();
				State = 1915; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1916; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1918;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==USING) {
					{
					State = 1917; Match(USING);
					}
				}

				State = 1920; eos();
				}
				break;

			case 27:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1922; Match(BEGIN);
				State = 1923; ((BlockStmtContext)_localctx).Key = Match(FIXED);
				{
				State = 1924; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
				}
				State = 1925; ((BlockStmtContext)_localctx).end = eos();
				State = 1926; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1927; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1929;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FIXED) {
					{
					State = 1928; Match(FIXED);
					}
				}

				State = 1931; eos();
				}
				break;

			case 28:
				_localctx = new WithBlockContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 1933; Match(WITH);
				State = 1934; ((WithBlockContext)_localctx).Expr = expression(0);
				State = 1935; ((WithBlockContext)_localctx).end = eos();
				State = 1936; ((WithBlockContext)_localctx).StmtBlk = statementBlock();
				State = 1937; ((WithBlockContext)_localctx).e = Match(END);
				State = 1939;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 1938; Match(WITH);
					}
				}

				State = 1941; eos();
				}
				break;

			case 29:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 1943; Match(BEGIN);
				State = 1944; ((BlockStmtContext)_localctx).Key1 = blockTokens();
				State = 1945; ((BlockStmtContext)_localctx).end = eos();
				State = 1946; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1947; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1949;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (SCOPE - 106)) | (1L << (CHECKED - 106)) | (1L << (UNCHECKED - 106)) | (1L << (UNSAFE - 106)))) != 0)) {
					{
					State = 1948; ((BlockStmtContext)_localctx).Key2 = blockTokens();
					}
				}

				State = 1951; eos();
				}
				break;

			case 30:
				_localctx = new FoxexpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 1953; ((FoxexpressionStmtContext)_localctx).Eq = Match(EQ);
				State = 1954; ((FoxexpressionStmtContext)_localctx)._expression = expression(0);
				((FoxexpressionStmtContext)_localctx)._Exprs.Add(((FoxexpressionStmtContext)_localctx)._expression);
				State = 1955; ((FoxexpressionStmtContext)_localctx).end = eos();
				}
				break;

			case 31:
				_localctx = new FoxtextoutStmtContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 1957;
				((FoxtextoutStmtContext)_localctx).B = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BACKSLASH || _la==BACKBACKSLASH) ) {
					((FoxtextoutStmtContext)_localctx).B = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1958; ((FoxtextoutStmtContext)_localctx).String = Match(TEXT_STRING_CONST);
				State = 1959; ((FoxtextoutStmtContext)_localctx).end = Match(EOS);
				}
				break;

			case 32:
				_localctx = new DoStmtContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 1960; ((DoStmtContext)_localctx).D = Match(DO);
				State = 1962;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					State = 1961; ((DoStmtContext)_localctx).Amp = Match(AMP);
					}
					break;
				}
				State = 1964; ((DoStmtContext)_localctx).Id = varidentifierName();
				State = 1967;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 1965; Match(WITH);
					State = 1966; ((DoStmtContext)_localctx).ArgList = argumentList();
					}
				}

				State = 1969; ((DoStmtContext)_localctx).end = eos();
				}
				break;

			case 33:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 1971;
				if (!(validExpressionStmt())) throw new FailedPredicateException(this, "validExpressionStmt()");
				State = 1972; ((ExpressionStmtContext)_localctx)._expression = expression(0);
				((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
				State = 1977;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1973; Match(COMMA);
					State = 1974; ((ExpressionStmtContext)_localctx)._expression = expression(0);
					((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
					}
					}
					State = 1979;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1980; ((ExpressionStmtContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTokensContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode SCOPE() { return GetToken(XSharpParser.SCOPE, 0); }
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(XSharpParser.UNSAFE, 0); }
		public BlockTokensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockTokens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBlockTokens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBlockTokens(this);
		}
	}

	[RuleVersion(0)]
	public BlockTokensContext blockTokens() {
		BlockTokensContext _localctx = new BlockTokensContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_blockTokens);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1984;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (SCOPE - 106)) | (1L << (CHECKED - 106)) | (1L << (UNCHECKED - 106)) | (1L << (UNSAFE - 106)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondBlockContext : XSharpParserRuleContext {
		public IToken st;
		public ExpressionContext Cond;
		public IToken Then;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(XSharpParser.THEN, 0); }
		public CondBlockContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public CondBlockContext(ParserRuleContext parent, int invokingState, IToken st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_condBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCondBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCondBlock(this);
		}
	}

	[RuleVersion(0)]
	public CondBlockContext condBlock(IToken st) {
		CondBlockContext _localctx = new CondBlockContext(_ctx, State, st);
		EnterRule(_localctx, 158, RULE_condBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1986; _localctx.Cond = expression(0);
			State = 1988;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==THEN) {
				{
				State = 1987; _localctx.Then = Match(THEN);
				}
			}

			State = 1990; _localctx.end = eos();
			State = 1991; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : XSharpParserRuleContext {
		public IToken Key;
		public ExpressionContext Const;
		public IToken W;
		public ExpressionContext whenexpr;
		public VaridentifierContext Id;
		public DatatypeContext DataType;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2008;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
			case 1:
				{
				State = 1993; _localctx.Key = Match(CASE);
				State = 1994; _localctx.Const = expression(0);
				State = 1997;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 1995; _localctx.W = Match(WHEN);
					State = 1996; _localctx.whenexpr = expression(0);
					}
				}

				}
				break;

			case 2:
				{
				State = 1999; _localctx.Key = Match(CASE);
				State = 2000; _localctx.Id = varidentifier();
				State = 2001; Match(AS);
				State = 2002; _localctx.DataType = datatype();
				State = 2005;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 2003; _localctx.W = Match(WHEN);
					State = 2004; _localctx.whenexpr = expression(0);
					}
				}

				}
				break;

			case 3:
				{
				State = 2007; _localctx.Key = Match(OTHERWISE);
				}
				break;
			}
			State = 2010; _localctx.end = eos();
			State = 2011; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchBlockContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public IToken W;
		public ExpressionContext whenexpr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CatchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCatchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCatchBlock(this);
		}
	}

	[RuleVersion(0)]
	public CatchBlockContext catchBlock() {
		CatchBlockContext _localctx = new CatchBlockContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_catchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2014;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				State = 2013; Match(TO);
				}
				break;
			}
			State = 2017;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
			case 1:
				{
				State = 2016; _localctx.Id = varidentifier();
				}
				break;
			}
			State = 2021;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2019; Match(AS);
				State = 2020; _localctx.Type = datatype();
				}
			}

			State = 2025;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHEN) {
				{
				State = 2023; _localctx.W = Match(WHEN);
				State = 2024; _localctx.whenexpr = expression(0);
				}
			}

			State = 2027; _localctx.end = eos();
			State = 2028; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecoverBlockContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public EosContext end;
		public StatementBlockContext StmtBlock;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public RecoverBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recoverBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRecoverBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRecoverBlock(this);
		}
	}

	[RuleVersion(0)]
	public RecoverBlockContext recoverBlock() {
		RecoverBlockContext _localctx = new RecoverBlockContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_recoverBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2032;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 2030; Match(USING);
				State = 2031; _localctx.Id = varidentifier();
				}
			}

			State = 2034; _localctx.end = eos();
			State = 2035; _localctx.StmtBlock = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : XSharpParserRuleContext {
		public IToken Var;
		public VariableDeclaratorContext _variableDeclarator;
		public IList<VariableDeclaratorContext> _Decl = new List<VariableDeclaratorContext>();
		public DatatypeContext Type;
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_variableDeclaration);
		int _la;
		try {
			State = 2065;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,300,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2042;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LOCAL:
				case IMPLIED:
					{
					State = 2038;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LOCAL) {
						{
						State = 2037; Match(LOCAL);
						}
					}

					State = 2040; _localctx.Var = Match(IMPLIED);
					}
					break;
				case VAR:
					{
					State = 2041; _localctx.Var = Match(VAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2044; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 2049;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2045; Match(COMMA);
					State = 2046; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 2051;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2052; Match(LOCAL);
				State = 2053; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 2058;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2054; Match(COMMA);
					State = 2055; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 2060;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2063;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2061; Match(AS);
					State = 2062; _localctx.Type = datatype();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_variableDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2067; _localctx.Id = varidentifier();
			State = 2068; _localctx.Op = assignoperator();
			State = 2069; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocaldeclContext : XSharpParserRuleContext {
		public LocaldeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localdecl; } }
	 
		public LocaldeclContext() { }
		public virtual void CopyFrom(LocaldeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommonLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public LocalvarContext _localvar;
		public IList<LocalvarContext> _LocalVars = new List<LocalvarContext>();
		public EosContext end;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public LocalvarContext[] localvar() {
			return GetRuleContexts<LocalvarContext>();
		}
		public LocalvarContext localvar(int i) {
			return GetRuleContext<LocalvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public CommonLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCommonLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCommonLocalDecl(this);
		}
	}
	public partial class VarLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public ImpliedvarContext _impliedvar;
		public IList<ImpliedvarContext> _ImpliedVars = new List<ImpliedvarContext>();
		public EosContext end;
		public IToken Using;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ImpliedvarContext[] impliedvar() {
			return GetRuleContexts<ImpliedvarContext>();
		}
		public ImpliedvarContext impliedvar(int i) {
			return GetRuleContext<ImpliedvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public VarLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVarLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVarLocalDecl(this);
		}
	}

	[RuleVersion(0)]
	public LocaldeclContext localdecl() {
		LocaldeclContext _localctx = new LocaldeclContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_localdecl);
		int _la;
		try {
			State = 2186;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,316,_ctx) ) {
			case 1:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2071; Match(LOCAL);
				State = 2073;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,301,_ctx) ) {
				case 1:
					{
					State = 2072; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
					}
					break;
				}
				State = 2075; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2080;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2076; Match(COMMA);
					State = 2077; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2082;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2083; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 2:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2085; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2086; Match(LOCAL);
				State = 2087; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2092;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2088; Match(COMMA);
					State = 2089; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2094;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2095; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 3:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2097;
				if (!(!XSharpLexer.IsKeyword(InputStream.La(2)))) throw new FailedPredicateException(this, "!XSharpLexer.IsKeyword(InputStream.La(2))");
				State = 2098; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2099; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2104;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2100; Match(COMMA);
					State = 2101; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2106;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2107; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 4:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2110;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2109; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2112; Match(VAR);
				State = 2113; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2118;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2114; Match(COMMA);
					State = 2115; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2120;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2121; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 5:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2123; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2125;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCAL) {
					{
					State = 2124; Match(LOCAL);
					}
				}

				State = 2127; Match(IMPLIED);
				State = 2128; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2133;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2129; Match(COMMA);
					State = 2130; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2135;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2136; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 6:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2138; Match(LOCAL);
				State = 2140;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2139; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2142; Match(IMPLIED);
				State = 2143; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2148;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2144; Match(COMMA);
					State = 2145; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2150;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2151; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 7:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2153; ((VarLocalDeclContext)_localctx).Using = Match(USING);
				State = 2155;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2154; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2157; Match(VAR);
				State = 2158; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2163;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2159; Match(COMMA);
					State = 2160; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2165;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2166; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 8:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2168; ((VarLocalDeclContext)_localctx).Using = Match(USING);
				State = 2170;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2169; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2173;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCAL) {
					{
					State = 2172; Match(LOCAL);
					}
				}

				State = 2175; Match(IMPLIED);
				State = 2176; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2181;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2177; Match(COMMA);
					State = 2178; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2183;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2184; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalvarContext : XSharpParserRuleContext {
		public IToken Const;
		public IToken Dim;
		public VaridentifierContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public IToken As;
		public DatatypeContext DataType;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public LocalvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalvar(this);
		}
	}

	[RuleVersion(0)]
	public LocalvarContext localvar() {
		LocalvarContext _localctx = new LocalvarContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_localvar);
		int _la;
		try {
			State = 2230;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2189;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,317,_ctx) ) {
				case 1:
					{
					State = 2188; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 2192;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,318,_ctx) ) {
				case 1:
					{
					State = 2191; _localctx.Dim = Match(DIM);
					}
					break;
				}
				State = 2194; _localctx.Id = varidentifier();
				State = 2199;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT) {
					{
					State = 2195; Match(LBRKT);
					State = 2196; _localctx.ArraySub = arraysub();
					State = 2197; Match(RBRKT);
					}
				}

				State = 2204;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 2201; _localctx.Op = assignoperator();
					State = 2202; _localctx.Expression = expression(0);
					}
				}

				State = 2211;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 2206;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2207; _localctx.DataType = datatype();
					State = 2209;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OF) {
						{
						State = 2208; foxclasslib();
						}
					}

					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2213;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 2214; _localctx.Id = varidentifier();
				State = 2215; Match(LPAREN);
				State = 2216; _localctx.ArraySub = arraysub();
				State = 2217; Match(RPAREN);
				State = 2221;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 2218; _localctx.Op = assignoperator();
					State = 2219; _localctx.Expression = expression(0);
					}
				}

				State = 2228;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 2223;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2224; _localctx.DataType = datatype();
					State = 2226;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OF) {
						{
						State = 2225; foxclasslib();
						}
					}

					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpliedvarContext : XSharpParserRuleContext {
		public IToken Const;
		public VaridentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ImpliedvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impliedvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterImpliedvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitImpliedvar(this);
		}
	}

	[RuleVersion(0)]
	public ImpliedvarContext impliedvar() {
		ImpliedvarContext _localctx = new ImpliedvarContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_impliedvar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2233;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				State = 2232; _localctx.Const = Match(CONST);
				}
				break;
			}
			State = 2235; _localctx.Id = varidentifier();
			State = 2236; _localctx.Op = assignoperator();
			State = 2237; _localctx.Expression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FielddeclContext : XSharpParserRuleContext {
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Fields = new List<IdentifierNameContext>();
		public IdentifierNameContext Alias;
		public EosContext end;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public FielddeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFielddecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFielddecl(this);
		}
	}

	[RuleVersion(0)]
	public FielddeclContext fielddecl() {
		FielddeclContext _localctx = new FielddeclContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_fielddecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2239; Match(FIELD);
			State = 2240; _localctx._identifierName = identifierName();
			_localctx._Fields.Add(_localctx._identifierName);
			State = 2245;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2241; Match(COMMA);
				State = 2242; _localctx._identifierName = identifierName();
				_localctx._Fields.Add(_localctx._identifierName);
				}
				}
				State = 2247;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2250;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 2248; Match(IN);
				State = 2249; _localctx.Alias = identifierName();
				}
			}

			State = 2252; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemvardeclContext : XSharpParserRuleContext {
		public IToken T;
		public VaridentifierNameContext _varidentifierName;
		public IList<VaridentifierNameContext> _Vars = new List<VaridentifierNameContext>();
		public EosContext end;
		public MemvarContext _memvar;
		public IList<MemvarContext> _XVars = new List<MemvarContext>();
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public VaridentifierNameContext[] varidentifierName() {
			return GetRuleContexts<VaridentifierNameContext>();
		}
		public VaridentifierNameContext varidentifierName(int i) {
			return GetRuleContext<VaridentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public MemvarContext[] memvar() {
			return GetRuleContexts<MemvarContext>();
		}
		public MemvarContext memvar(int i) {
			return GetRuleContext<MemvarContext>(i);
		}
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public MemvardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memvardecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvardecl(this);
		}
	}

	[RuleVersion(0)]
	public MemvardeclContext memvardecl() {
		MemvardeclContext _localctx = new MemvardeclContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_memvardecl);
		int _la;
		try {
			State = 2298;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case MEMVAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2254; _localctx.T = Match(MEMVAR);
				State = 2255; _localctx._varidentifierName = varidentifierName();
				_localctx._Vars.Add(_localctx._varidentifierName);
				State = 2260;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2256; Match(COMMA);
					State = 2257; _localctx._varidentifierName = varidentifierName();
					_localctx._Vars.Add(_localctx._varidentifierName);
					}
					}
					State = 2262;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2263; _localctx.end = eos();
				}
				break;
			case PARAMETERS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2265; _localctx.T = Match(PARAMETERS);
				State = 2266; _localctx._varidentifierName = varidentifierName();
				_localctx._Vars.Add(_localctx._varidentifierName);
				State = 2271;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2267; Match(COMMA);
					State = 2268; _localctx._varidentifierName = varidentifierName();
					_localctx._Vars.Add(_localctx._varidentifierName);
					}
					}
					State = 2273;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2274; _localctx.end = eos();
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2276; _localctx.T = Match(PRIVATE);
				State = 2277; _localctx._memvar = memvar();
				_localctx._XVars.Add(_localctx._memvar);
				State = 2282;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2278; Match(COMMA);
					State = 2279; _localctx._memvar = memvar();
					_localctx._XVars.Add(_localctx._memvar);
					}
					}
					State = 2284;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2285; _localctx.end = eos();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2287; _localctx.T = Match(PUBLIC);
				State = 2288; _localctx._memvar = memvar();
				_localctx._XVars.Add(_localctx._memvar);
				State = 2293;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2289; Match(COMMA);
					State = 2290; _localctx._memvar = memvar();
					_localctx._XVars.Add(_localctx._memvar);
					}
					}
					State = 2295;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2296; _localctx.end = eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemvarContext : XSharpParserRuleContext {
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvar(this);
		}
	}

	[RuleVersion(0)]
	public MemvarContext memvar() {
		MemvarContext _localctx = new MemvarContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_memvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2301;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				State = 2300; _localctx.Amp = Match(AMP);
				}
				break;
			}
			State = 2303; _localctx.Id = varidentifierName();
			State = 2308;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 2304; Match(LBRKT);
				State = 2305; _localctx.ArraySub = arraysub();
				State = 2306; Match(RBRKT);
				}
			}

			State = 2313;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 2310; _localctx.Op = assignoperator();
				State = 2311; _localctx.Expression = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmemvardeclContext : XSharpParserRuleContext {
		public IToken T;
		public FoxdimvarContext _foxdimvar;
		public IList<FoxdimvarContext> _DimVars = new List<FoxdimvarContext>();
		public EosContext end;
		public VaridentifierNameContext _varidentifierName;
		public IList<VaridentifierNameContext> _Vars = new List<VaridentifierNameContext>();
		public FoxtypedeclContext XT;
		public FoxmemvarContext _foxmemvar;
		public IList<FoxmemvarContext> _FoxVars = new List<FoxmemvarContext>();
		public ITerminalNode DIMENSION() { return GetToken(XSharpParser.DIMENSION, 0); }
		public FoxdimvarContext[] foxdimvar() {
			return GetRuleContexts<FoxdimvarContext>();
		}
		public FoxdimvarContext foxdimvar(int i) {
			return GetRuleContext<FoxdimvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public VaridentifierNameContext[] varidentifierName() {
			return GetRuleContexts<VaridentifierNameContext>();
		}
		public VaridentifierNameContext varidentifierName(int i) {
			return GetRuleContext<VaridentifierNameContext>(i);
		}
		public FoxtypedeclContext[] foxtypedecl() {
			return GetRuleContexts<FoxtypedeclContext>();
		}
		public FoxtypedeclContext foxtypedecl(int i) {
			return GetRuleContext<FoxtypedeclContext>(i);
		}
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public FoxmemvarContext[] foxmemvar() {
			return GetRuleContexts<FoxmemvarContext>();
		}
		public FoxmemvarContext foxmemvar(int i) {
			return GetRuleContext<FoxmemvarContext>(i);
		}
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public FoxmemvardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxmemvardecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvardecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxmemvardeclContext foxmemvardecl() {
		FoxmemvardeclContext _localctx = new FoxmemvardeclContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_foxmemvardecl);
		int _la;
		try {
			State = 2404;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,349,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2315; _localctx.T = Match(DIMENSION);
				State = 2316; _localctx._foxdimvar = foxdimvar();
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2321;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2317; Match(COMMA);
					State = 2318; _localctx._foxdimvar = foxdimvar();
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2323;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2324; _localctx.end = eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2326; _localctx.T = Match(DECLARE);
				State = 2327; _localctx._foxdimvar = foxdimvar();
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2332;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2328; Match(COMMA);
					State = 2329; _localctx._foxdimvar = foxdimvar();
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2334;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2335; _localctx.end = eos();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2337; _localctx.T = Match(MEMVAR);
				State = 2338; _localctx._varidentifierName = varidentifierName();
				_localctx._Vars.Add(_localctx._varidentifierName);
				State = 2340;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2339; _localctx.XT = foxtypedecl();
					}
				}

				State = 2349;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2342; Match(COMMA);
					State = 2343; _localctx._varidentifierName = varidentifierName();
					_localctx._Vars.Add(_localctx._varidentifierName);
					State = 2345;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 2344; _localctx.XT = foxtypedecl();
						}
					}

					}
					}
					State = 2351;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2352; _localctx.end = eos();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2354; _localctx.T = Match(PARAMETERS);
				State = 2355; _localctx._varidentifierName = varidentifierName();
				_localctx._Vars.Add(_localctx._varidentifierName);
				State = 2363;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2356; Match(COMMA);
					State = 2357; _localctx._varidentifierName = varidentifierName();
					_localctx._Vars.Add(_localctx._varidentifierName);
					State = 2359;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 2358; _localctx.XT = foxtypedecl();
						}
					}

					}
					}
					State = 2365;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2366; _localctx.end = eos();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2368; _localctx.T = Match(PRIVATE);
				State = 2369; _localctx._foxmemvar = foxmemvar();
				_localctx._FoxVars.Add(_localctx._foxmemvar);
				State = 2374;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2370; Match(COMMA);
					State = 2371; _localctx._foxmemvar = foxmemvar();
					_localctx._FoxVars.Add(_localctx._foxmemvar);
					}
					}
					State = 2376;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2377; _localctx.end = eos();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2379; _localctx.T = Match(PUBLIC);
				State = 2380; _localctx._foxmemvar = foxmemvar();
				_localctx._FoxVars.Add(_localctx._foxmemvar);
				State = 2385;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2381; Match(COMMA);
					State = 2382; _localctx._foxmemvar = foxmemvar();
					_localctx._FoxVars.Add(_localctx._foxmemvar);
					}
					}
					State = 2387;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2388; _localctx.end = eos();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2390; _localctx.T = Match(PUBLIC);
				State = 2392;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					State = 2391; Match(ARRAY);
					}
					break;
				}
				State = 2394; _localctx._foxdimvar = foxdimvar();
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2399;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2395; Match(COMMA);
					State = 2396; _localctx._foxdimvar = foxdimvar();
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2401;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2402; _localctx.end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxlocaldeclContext : XSharpParserRuleContext {
		public IToken T;
		public FoxlparameterContext _foxlparameter;
		public IList<FoxlparameterContext> _LParameters = new List<FoxlparameterContext>();
		public EosContext end;
		public FoxdimvarContext _foxdimvar;
		public IList<FoxdimvarContext> _DimVars = new List<FoxdimvarContext>();
		public ITerminalNode LPARAMETERS() { return GetToken(XSharpParser.LPARAMETERS, 0); }
		public FoxlparameterContext[] foxlparameter() {
			return GetRuleContexts<FoxlparameterContext>();
		}
		public FoxlparameterContext foxlparameter(int i) {
			return GetRuleContext<FoxlparameterContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public FoxdimvarContext[] foxdimvar() {
			return GetRuleContexts<FoxdimvarContext>();
		}
		public FoxdimvarContext foxdimvar(int i) {
			return GetRuleContext<FoxdimvarContext>(i);
		}
		public FoxlocaldeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxlocaldecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlocaldecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlocaldecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxlocaldeclContext foxlocaldecl() {
		FoxlocaldeclContext _localctx = new FoxlocaldeclContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_foxlocaldecl);
		int _la;
		try {
			State = 2429;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPARAMETERS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2406; _localctx.T = Match(LPARAMETERS);
				State = 2407; _localctx._foxlparameter = foxlparameter();
				_localctx._LParameters.Add(_localctx._foxlparameter);
				State = 2412;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2408; Match(COMMA);
					State = 2409; _localctx._foxlparameter = foxlparameter();
					_localctx._LParameters.Add(_localctx._foxlparameter);
					}
					}
					State = 2414;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2415; _localctx.end = eos();
				}
				break;
			case LOCAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2417; _localctx.T = Match(LOCAL);
				State = 2418; Match(ARRAY);
				State = 2419; _localctx._foxdimvar = foxdimvar();
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2424;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2420; Match(COMMA);
					State = 2421; _localctx._foxdimvar = foxdimvar();
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2426;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2427; _localctx.end = eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdimvarContext : XSharpParserRuleContext {
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Dims = new List<ExpressionContext>();
		public FoxtypedeclContext XT;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxdimvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdimvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdimvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdimvar(this);
		}
	}

	[RuleVersion(0)]
	public FoxdimvarContext foxdimvar() {
		FoxdimvarContext _localctx = new FoxdimvarContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_foxdimvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2432;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,353,_ctx) ) {
			case 1:
				{
				State = 2431; _localctx.Amp = Match(AMP);
				}
				break;
			}
			State = 2434; _localctx.Id = varidentifierName();
			State = 2457;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				{
				State = 2435; Match(LBRKT);
				State = 2436; _localctx._expression = expression(0);
				_localctx._Dims.Add(_localctx._expression);
				State = 2441;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2437; Match(COMMA);
					State = 2438; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					}
					}
					State = 2443;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2444; Match(RBRKT);
				}
				break;
			case LPAREN:
				{
				State = 2446; Match(LPAREN);
				State = 2447; _localctx._expression = expression(0);
				_localctx._Dims.Add(_localctx._expression);
				State = 2452;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2448; Match(COMMA);
					State = 2449; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					}
					}
					State = 2454;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2455; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2460;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2459; _localctx.XT = foxtypedecl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclasslibContext : XSharpParserRuleContext {
		public IToken Of;
		public IdentifierNameContext ClassLib;
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public FoxclasslibContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclasslib; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclasslib(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclasslib(this);
		}
	}

	[RuleVersion(0)]
	public FoxclasslibContext foxclasslib() {
		FoxclasslibContext _localctx = new FoxclasslibContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_foxclasslib);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2462; _localctx.Of = Match(OF);
			State = 2463; _localctx.ClassLib = identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxlparameterContext : XSharpParserRuleContext {
		public VaridentifierNameContext Name;
		public FoxtypedeclContext XT;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public FoxlparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxlparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlparameter(this);
		}
	}

	[RuleVersion(0)]
	public FoxlparameterContext foxlparameter() {
		FoxlparameterContext _localctx = new FoxlparameterContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_foxlparameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2465; _localctx.Name = varidentifierName();
			State = 2467;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2466; _localctx.XT = foxtypedecl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxtypedeclContext : XSharpParserRuleContext {
		public IToken As;
		public DatatypeContext Type;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public FoxtypedeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxtypedecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxtypedecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxtypedecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxtypedeclContext foxtypedecl() {
		FoxtypedeclContext _localctx = new FoxtypedeclContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_foxtypedecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2469; _localctx.As = Match(AS);
			State = 2470; _localctx.Type = datatype();
			State = 2472;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OF) {
				{
				State = 2471; foxclasslib();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmemvarContext : XSharpParserRuleContext {
		public IToken Amp;
		public VaridentifierNameContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public FoxtypedeclContext XT;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public FoxmemvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxmemvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvar(this);
		}
	}

	[RuleVersion(0)]
	public FoxmemvarContext foxmemvar() {
		FoxmemvarContext _localctx = new FoxmemvarContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_foxmemvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2475;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
			case 1:
				{
				State = 2474; _localctx.Amp = Match(AMP);
				}
				break;
			}
			State = 2477; _localctx.Id = varidentifierName();
			State = 2481;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 2478; _localctx.Op = assignoperator();
				State = 2479; _localctx.Expression = expression(0);
				}
			}

			State = 2484;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2483; _localctx.XT = foxtypedecl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalfuncprocContext : XSharpParserRuleContext {
		public LocalfuncprocModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public FuncproctypeContext T2;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public LocalfuncprocModifiersContext localfuncprocModifiers() {
			return GetRuleContext<LocalfuncprocModifiersContext>(0);
		}
		public LocalfuncprocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localfuncproc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalfuncproc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalfuncproc(this);
		}
	}

	[RuleVersion(0)]
	public LocalfuncprocContext localfuncproc() {
		LocalfuncprocContext _localctx = new LocalfuncprocContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_localfuncproc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2487;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASYNC || _la==UNSAFE) {
				{
				State = 2486; _localctx.Modifiers = localfuncprocModifiers();
				}
			}

			State = 2489; Match(LOCAL);
			State = 2490; _localctx.T = funcproctype();
			State = 2491; _localctx.Sig = signature();
			State = 2492; _localctx.end = eos();
			State = 2493; _localctx.StmtBlk = statementBlock();
			State = 2494; Match(END);
			State = 2495; _localctx.T2 = funcproctype();
			State = 2496; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalfuncprocModifiersContext : XSharpParserRuleContext {
		public IToken _UNSAFE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _ASYNC;
		public IToken _tset6597;
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public LocalfuncprocModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localfuncprocModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalfuncprocModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalfuncprocModifiers(this);
		}
	}

	[RuleVersion(0)]
	public LocalfuncprocModifiersContext localfuncprocModifiers() {
		LocalfuncprocModifiersContext _localctx = new LocalfuncprocModifiersContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_localfuncprocModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2498;
				_localctx._tset6597 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASYNC || _la==UNSAFE) ) {
					_localctx._tset6597 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset6597);
				}
				}
				State = 2501;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ASYNC || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignoperatorContext : XSharpParserRuleContext {
		public IToken Op;
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public AssignoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAssignoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAssignoperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignoperatorContext assignoperator() {
		AssignoperatorContext _localctx = new AssignoperatorContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_assignoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2503;
			_localctx.Op = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EQ || _la==ASSIGN_OP) ) {
				_localctx.Op = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : XSharpParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public PrimaryContext Expr;
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}
	public partial class CondAccessExprContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public CondAccessExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCondAccessExpr(this);
		}
	}
	public partial class AwaitExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
	}
	public partial class XFunctionExpressionContext : ExpressionContext {
		public XbaseFuncContext XFunc;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public XbaseFuncContext xbaseFunc() {
			return GetRuleContext<XbaseFuncContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public XFunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXFunctionExpression(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode ASSIGN_ADD() { return GetToken(XSharpParser.ASSIGN_ADD, 0); }
		public ITerminalNode ASSIGN_SUB() { return GetToken(XSharpParser.ASSIGN_SUB, 0); }
		public ITerminalNode ASSIGN_EXP() { return GetToken(XSharpParser.ASSIGN_EXP, 0); }
		public ITerminalNode ASSIGN_MUL() { return GetToken(XSharpParser.ASSIGN_MUL, 0); }
		public ITerminalNode ASSIGN_DIV() { return GetToken(XSharpParser.ASSIGN_DIV, 0); }
		public ITerminalNode ASSIGN_MOD() { return GetToken(XSharpParser.ASSIGN_MOD, 0); }
		public ITerminalNode ASSIGN_BITAND() { return GetToken(XSharpParser.ASSIGN_BITAND, 0); }
		public ITerminalNode ASSIGN_BITOR() { return GetToken(XSharpParser.ASSIGN_BITOR, 0); }
		public ITerminalNode ASSIGN_LSHIFT() { return GetToken(XSharpParser.ASSIGN_LSHIFT, 0); }
		public ITerminalNode ASSIGN_RSHIFT() { return GetToken(XSharpParser.ASSIGN_RSHIFT, 0); }
		public ITerminalNode ASSIGN_XOR() { return GetToken(XSharpParser.ASSIGN_XOR, 0); }
		public ITerminalNode ASSIGN_QQMARK() { return GetToken(XSharpParser.ASSIGN_QQMARK, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}
	public partial class StackAllocExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ITerminalNode STACKALLOC() { return GetToken(XSharpParser.STACKALLOC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StackAllocExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStackAllocExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStackAllocExpression(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public IToken Gt;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode[] GT() { return GetTokens(XSharpParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(XSharpParser.GT, i);
		}
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode SUBSTR() { return GetToken(XSharpParser.SUBSTR, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LOGIC_AND() { return GetToken(XSharpParser.LOGIC_AND, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode FOX_AND() { return GetToken(XSharpParser.FOX_AND, 0); }
		public ITerminalNode LOGIC_XOR() { return GetToken(XSharpParser.LOGIC_XOR, 0); }
		public ITerminalNode FOX_XOR() { return GetToken(XSharpParser.FOX_XOR, 0); }
		public ITerminalNode LOGIC_OR() { return GetToken(XSharpParser.LOGIC_OR, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public ITerminalNode FOX_OR() { return GetToken(XSharpParser.FOX_OR, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode QQMARK() { return GetToken(XSharpParser.QQMARK, 0); }
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
	}
	public partial class TypeCastContext : ExpressionContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeCastContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCast(this);
		}
	}
	public partial class PrefixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(XSharpParser.LOGIC_NOT, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public PrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrefixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrefixExpression(this);
		}
	}
	public partial class TypeCheckExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public DatatypeContext Type;
		public VaridentifierContext Id;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public TypeCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCheckExpression(this);
		}
	}
	public partial class AccessMemberLateContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public IdentifierNameContext Name;
		public ExpressionContext Right;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public AccessMemberLateContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMemberLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMemberLate(this);
		}
	}
	public partial class ArrayAccessContext : ExpressionContext {
		public ExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public ArrayAccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}
	public partial class AccessMemberContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public AccessMemberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMember(this);
		}
	}
	public partial class PostfixExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public PostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}
	public partial class MethodCallContext : ExpressionContext {
		public ExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 202;
		EnterRecursionRule(_localctx, 202, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2538;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				_localctx = new AccessMemberContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2506;
				((AccessMemberContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 283)) & ~0x3f) == 0 && ((1L << (_la - 283)) & ((1L << (COLON - 283)) | (1L << (DOT - 283)) | (1L << (COLONCOLON - 283)))) != 0)) ) {
					((AccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2507; ((AccessMemberContext)_localctx).Name = simpleName();
				}
				break;

			case 2:
				{
				_localctx = new AccessMemberLateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2508;
				((AccessMemberLateContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 283)) & ~0x3f) == 0 && ((1L << (_la - 283)) & ((1L << (COLON - 283)) | (1L << (DOT - 283)) | (1L << (COLONCOLON - 283)))) != 0)) ) {
					((AccessMemberLateContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2509; Match(AMP);
				State = 2515;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					State = 2510; ((AccessMemberLateContext)_localctx).Name = identifierName();
					}
					break;

				case 2:
					{
					State = 2511; Match(LPAREN);
					State = 2512; ((AccessMemberLateContext)_localctx).Right = expression(0);
					State = 2513; Match(RPAREN);
					}
					break;
				}
				}
				break;

			case 3:
				{
				_localctx = new XFunctionExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2517; ((XFunctionExpressionContext)_localctx).XFunc = xbaseFunc();
				State = 2518; Match(LPAREN);
				State = 2519; ((XFunctionExpressionContext)_localctx).ArgList = argumentList();
				State = 2520; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new TypeCastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2522;
				if (!(IsTypeCastAllowed() )) throw new FailedPredicateException(this, "IsTypeCastAllowed() ");
				State = 2523; Match(LPAREN);
				State = 2524; ((TypeCastContext)_localctx).Type = datatype();
				State = 2525; Match(RPAREN);
				State = 2526; ((TypeCastContext)_localctx).Expr = expression(23);
				}
				break;

			case 5:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2528; ((AwaitExpressionContext)_localctx).Op = Match(AWAIT);
				State = 2529; ((AwaitExpressionContext)_localctx).Expr = expression(21);
				}
				break;

			case 6:
				{
				_localctx = new StackAllocExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2530;
				if (!(InputStream.La(2) != LPAREN )) throw new FailedPredicateException(this, "InputStream.La(2) != LPAREN ");
				State = 2531; ((StackAllocExpressionContext)_localctx).Op = Match(STACKALLOC);
				State = 2532; ((StackAllocExpressionContext)_localctx).Expr = expression(20);
				}
				break;

			case 7:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2533;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (INC - 236)) | (1L << (DEC - 236)) | (1L << (PLUS - 236)) | (1L << (MINUS - 236)) | (1L << (TILDE - 236)) | (1L << (ADDROF - 236)))) != 0)) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2534; ((PrefixExpressionContext)_localctx).Expr = expression(19);
				}
				break;

			case 8:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2535;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 251)) & ~0x3f) == 0 && ((1L << (_la - 251)) & ((1L << (NOT - 251)) | (1L << (LOGIC_NOT - 251)) | (1L << (FOX_NOT - 251)))) != 0)) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2536; ((PrefixExpressionContext)_localctx).Expr = expression(7);
				}
				break;

			case 9:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2537; ((PrimaryExpressionContext)_localctx).Expr = primary();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2623;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2621;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2540;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2541; ((BinaryExpressionContext)_localctx).Op = Match(EXP);
						State = 2542; ((BinaryExpressionContext)_localctx).Right = expression(17);
						}
						break;

					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2543;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2544;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (DIV - 240)) | (1L << (MOD - 240)) | (1L << (MULT - 240)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2545; ((BinaryExpressionContext)_localctx).Right = expression(16);
						}
						break;

					case 3:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2546;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 2547;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2548; ((BinaryExpressionContext)_localctx).Right = expression(15);
						}
						break;

					case 4:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2549;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 2550; ((BinaryExpressionContext)_localctx).Op = Match(LSHIFT);
						State = 2551; ((BinaryExpressionContext)_localctx).Right = expression(14);
						}
						break;

					case 5:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2552;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2553; ((BinaryExpressionContext)_localctx).Op = Match(GT);
						State = 2554; ((BinaryExpressionContext)_localctx).Gt = Match(GT);
						State = 2555; ((BinaryExpressionContext)_localctx).Right = expression(13);
						}
						break;

					case 6:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2556;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2557;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (LT - 227)) | (1L << (LTE - 227)) | (1L << (GT - 227)) | (1L << (GTE - 227)) | (1L << (EQ - 227)) | (1L << (EEQ - 227)) | (1L << (SUBSTR - 227)) | (1L << (NEQ - 227)) | (1L << (NEQ2 - 227)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2558; ((BinaryExpressionContext)_localctx).Right = expression(12);
						}
						break;

					case 7:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2559;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2560; ((BinaryExpressionContext)_localctx).Op = Match(AMP);
						State = 2561; ((BinaryExpressionContext)_localctx).Right = expression(11);
						}
						break;

					case 8:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2562;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 2563; ((BinaryExpressionContext)_localctx).Op = Match(TILDE);
						State = 2564; ((BinaryExpressionContext)_localctx).Right = expression(10);
						}
						break;

					case 9:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2565;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2566; ((BinaryExpressionContext)_localctx).Op = Match(PIPE);
						State = 2567; ((BinaryExpressionContext)_localctx).Right = expression(9);
						}
						break;

					case 10:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2568;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2569;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (AND - 249)) | (1L << (LOGIC_AND - 249)) | (1L << (FOX_AND - 249)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2570; ((BinaryExpressionContext)_localctx).Right = expression(7);
						}
						break;

					case 11:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2571;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2572;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==LOGIC_XOR || _la==FOX_XOR) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2573; ((BinaryExpressionContext)_localctx).Right = expression(6);
						}
						break;

					case 12:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2574;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2575;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 250)) & ~0x3f) == 0 && ((1L << (_la - 250)) & ((1L << (OR - 250)) | (1L << (LOGIC_OR - 250)) | (1L << (FOX_OR - 250)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2576; ((BinaryExpressionContext)_localctx).Right = expression(5);
						}
						break;

					case 13:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2577;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2578;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==DEFAULT || _la==QQMARK) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2579; ((BinaryExpressionContext)_localctx).Right = expression(4);
						}
						break;

					case 14:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2580;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2581;
						((AssignmentExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (ASSIGN_OP - 256)) | (1L << (ASSIGN_ADD - 256)) | (1L << (ASSIGN_SUB - 256)) | (1L << (ASSIGN_EXP - 256)) | (1L << (ASSIGN_MUL - 256)) | (1L << (ASSIGN_DIV - 256)) | (1L << (ASSIGN_MOD - 256)) | (1L << (ASSIGN_BITAND - 256)) | (1L << (ASSIGN_BITOR - 256)) | (1L << (ASSIGN_LSHIFT - 256)) | (1L << (ASSIGN_RSHIFT - 256)) | (1L << (ASSIGN_XOR - 256)) | (1L << (ASSIGN_QQMARK - 256)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2582; ((AssignmentExpressionContext)_localctx).Right = expression(2);
						}
						break;

					case 15:
						{
						_localctx = new AccessMemberContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2583;
						if (!(Precpred(_ctx, 31))) throw new FailedPredicateException(this, "Precpred(_ctx, 31)");
						State = 2584;
						((AccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2585; ((AccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 16:
						{
						_localctx = new AccessMemberLateContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberLateContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2586;
						if (!(Precpred(_ctx, 29))) throw new FailedPredicateException(this, "Precpred(_ctx, 29)");
						State = 2587;
						((AccessMemberLateContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberLateContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2588; Match(AMP);
						State = 2594;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,367,_ctx) ) {
						case 1:
							{
							State = 2589; ((AccessMemberLateContext)_localctx).Name = identifierName();
							}
							break;

						case 2:
							{
							State = 2590; Match(LPAREN);
							State = 2591; ((AccessMemberLateContext)_localctx).Right = expression(0);
							State = 2592; Match(RPAREN);
							}
							break;
						}
						}
						break;

					case 17:
						{
						_localctx = new MethodCallContext(new ExpressionContext(_parentctx, _parentState));
						((MethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2596;
						if (!(Precpred(_ctx, 27))) throw new FailedPredicateException(this, "Precpred(_ctx, 27)");
						State = 2597; Match(LPAREN);
						State = 2598; ((MethodCallContext)_localctx).ArgList = argumentList();
						State = 2599; Match(RPAREN);
						}
						break;

					case 18:
						{
						_localctx = new ArrayAccessContext(new ExpressionContext(_parentctx, _parentState));
						((ArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2601;
						if (!(Precpred(_ctx, 25))) throw new FailedPredicateException(this, "Precpred(_ctx, 25)");
						State = 2602; Match(LBRKT);
						State = 2603; ((ArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2604; Match(RBRKT);
						}
						break;

					case 19:
						{
						_localctx = new CondAccessExprContext(new ExpressionContext(_parentctx, _parentState));
						((CondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2606;
						if (!(Precpred(_ctx, 24))) throw new FailedPredicateException(this, "Precpred(_ctx, 24)");
						State = 2607; ((CondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2608; ((CondAccessExprContext)_localctx).Right = boundExpression(0);
						}
						break;

					case 20:
						{
						_localctx = new PostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostfixExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2609;
						if (!(Precpred(_ctx, 22))) throw new FailedPredicateException(this, "Precpred(_ctx, 22)");
						State = 2610;
						((PostfixExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==INC || _la==DEC) ) {
							((PostfixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 21:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2611;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2612; ((TypeCheckExpressionContext)_localctx).Op = Match(IS);
						State = 2613; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						State = 2616;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
						case 1:
							{
							State = 2614; Match(VAR);
							State = 2615; ((TypeCheckExpressionContext)_localctx).Id = varidentifier();
							}
							break;
						}
						}
						break;

					case 22:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2618;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2619; ((TypeCheckExpressionContext)_localctx).Op = Match(ASTYPE);
						State = 2620; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						}
						break;
					}
					} 
				}
				State = 2625;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,370,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : XSharpParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VoConversionExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public VoConversionExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoConversionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoConversionExpression(this);
		}
	}
	public partial class VoCastPtrExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VoCastPtrExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastPtrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastPtrExpression(this);
		}
	}
	public partial class ParenExpressionContext : PrimaryContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParenExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
	}
	public partial class SuperExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public SuperExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
	}
	public partial class SizeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode SIZEOF() { return GetToken(XSharpParser.SIZEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public SizeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSizeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSizeOfExpression(this);
		}
	}
	public partial class CheckedExpressionContext : PrimaryContext {
		public IToken ch;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public CheckedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
	}
	public partial class VoCastExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode CAST() { return GetToken(XSharpParser.CAST, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public ITerminalNode CASTCLASS() { return GetToken(XSharpParser.CASTCLASS, 0); }
		public VoCastExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastExpression(this);
		}
	}
	public partial class NameExpressionContext : PrimaryContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
	}
	public partial class TypeExpressionContext : PrimaryContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
	}
	public partial class AnonTypeExpressionContext : PrimaryContext {
		public AnonTypeContext AnonType;
		public AnonTypeContext anonType() {
			return GetRuleContext<AnonTypeContext>(0);
		}
		public AnonTypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonTypeExpression(this);
		}
	}
	public partial class MacroContext : PrimaryContext {
		public ExpressionContext Expr;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MacroContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
	}
	public partial class AliasedExpressionContext : PrimaryContext {
		public AliasExpressionContext Expr;
		public AliasExpressionContext aliasExpression() {
			return GetRuleContext<AliasExpressionContext>(0);
		}
		public AliasedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedExpression(this);
		}
	}
	public partial class CtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ArgumentListContext ArgList;
		public ObjectOrCollectioninitializerContext Init;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public CtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCtorCall(this);
		}
	}
	public partial class DefaultExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public DefaultExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDefaultExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDefaultExpression(this);
		}
	}
	public partial class ArgListExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ArgListExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgListExpression(this);
		}
	}
	public partial class QueryExpressionContext : PrimaryContext {
		public LinqQueryContext Query;
		public LinqQueryContext linqQuery() {
			return GetRuleContext<LinqQueryContext>(0);
		}
		public QueryExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
	}
	public partial class TypeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode TYPEOF() { return GetToken(XSharpParser.TYPEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeOfExpression(this);
		}
	}
	public partial class MacroNameContext : PrimaryContext {
		public IdentifierNameContext Name;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public MacroNameContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroName(this);
		}
	}
	public partial class SelfExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public SelfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
	}
	public partial class ParserLiteralExpressionContext : PrimaryContext {
		public ParserLiteralValueContext Literal;
		public ParserLiteralValueContext parserLiteralValue() {
			return GetRuleContext<ParserLiteralValueContext>(0);
		}
		public ParserLiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParserLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParserLiteralExpression(this);
		}
	}
	public partial class LiteralArrayExpressionContext : PrimaryContext {
		public LiteralArrayContext LiteralArray;
		public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public LiteralArrayExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArrayExpression(this);
		}
	}
	public partial class UsualTypeNameExpressionContext : PrimaryContext {
		public UsualTypeNameContext Name;
		public UsualTypeNameContext usualTypeName() {
			return GetRuleContext<UsualTypeNameContext>(0);
		}
		public UsualTypeNameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeNameExpression(this);
		}
	}
	public partial class IifExpressionContext : PrimaryContext {
		public IifContext Expr;
		public IifContext iif() {
			return GetRuleContext<IifContext>(0);
		}
		public IifExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIifExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIifExpression(this);
		}
	}
	public partial class CodeblockExpressionContext : PrimaryContext {
		public CodeblockContext CbExpr;
		public AnonymousMethodExpressionContext AnoExpr;
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public AnonymousMethodExpressionContext anonymousMethodExpression() {
			return GetRuleContext<AnonymousMethodExpressionContext>(0);
		}
		public CodeblockExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExpression(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryContext {
		public LiteralValueContext Literal;
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public LiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class IntrinsicExpressionContext : PrimaryContext {
		public IToken Op;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BIT_AND() { return GetToken(XSharpParser.BIT_AND, 0); }
		public ITerminalNode BIT_OR() { return GetToken(XSharpParser.BIT_OR, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(XSharpParser.BIT_XOR, 0); }
		public ITerminalNode BIT_NOT() { return GetToken(XSharpParser.BIT_NOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public IntrinsicExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIntrinsicExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIntrinsicExpression(this);
		}
	}
	public partial class DelegateCtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Obj;
		public NameContext Func;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DelegateCtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegateCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegateCtorCall(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_primary);
		int _la;
		try {
			State = 2760;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
			case 1:
				_localctx = new SelfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2626; ((SelfExpressionContext)_localctx).Key = Match(SELF);
				}
				break;

			case 2:
				_localctx = new SuperExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2627; ((SuperExpressionContext)_localctx).Key = Match(SUPER);
				}
				break;

			case 3:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2628; ((LiteralExpressionContext)_localctx).Literal = literalValue();
				}
				break;

			case 4:
				_localctx = new ParserLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2629; ((ParserLiteralExpressionContext)_localctx).Literal = parserLiteralValue();
				}
				break;

			case 5:
				_localctx = new LiteralArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2630; ((LiteralArrayExpressionContext)_localctx).LiteralArray = literalArray();
				}
				break;

			case 6:
				_localctx = new AnonTypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2631; ((AnonTypeExpressionContext)_localctx).AnonType = anonType();
				}
				break;

			case 7:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2632; ((CodeblockExpressionContext)_localctx).CbExpr = codeblock();
				}
				break;

			case 8:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2633; ((CodeblockExpressionContext)_localctx).AnoExpr = anonymousMethodExpression();
				}
				break;

			case 9:
				_localctx = new QueryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2634; ((QueryExpressionContext)_localctx).Query = linqQuery();
				}
				break;

			case 10:
				_localctx = new DelegateCtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2635;
				if (!(ExpectToken(LCURLY))) throw new FailedPredicateException(this, "ExpectToken(LCURLY)");
				State = 2636; ((DelegateCtorCallContext)_localctx).Type = datatype();
				State = 2637; Match(LCURLY);
				State = 2638; ((DelegateCtorCallContext)_localctx).Obj = expression(0);
				State = 2639; Match(COMMA);
				State = 2640; Match(ADDROF);
				State = 2641; ((DelegateCtorCallContext)_localctx).Func = name(0);
				State = 2642; Match(LPAREN);
				State = 2643; Match(RPAREN);
				State = 2644; Match(RCURLY);
				}
				break;

			case 11:
				_localctx = new CtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2646;
				if (!(ExpectToken(LCURLY))) throw new FailedPredicateException(this, "ExpectToken(LCURLY)");
				State = 2647; ((CtorCallContext)_localctx).Type = datatype();
				State = 2648; Match(LCURLY);
				State = 2649; ((CtorCallContext)_localctx).ArgList = argumentList();
				State = 2650; Match(RCURLY);
				State = 2652;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					State = 2651; ((CtorCallContext)_localctx).Init = objectOrCollectioninitializer();
					}
					break;
				}
				}
				break;

			case 12:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2654;
				((CheckedExpressionContext)_localctx).ch = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CHECKED || _la==UNCHECKED) ) {
					((CheckedExpressionContext)_localctx).ch = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2655; Match(LPAREN);
				State = 2656; ((CheckedExpressionContext)_localctx).Expr = expression(0);
				State = 2657; Match(RPAREN);
				}
				break;

			case 13:
				_localctx = new TypeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2659; Match(TYPEOF);
				State = 2660; Match(LPAREN);
				State = 2661; ((TypeOfExpressionContext)_localctx).Type = datatype();
				State = 2662; Match(RPAREN);
				}
				break;

			case 14:
				_localctx = new SizeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2664; Match(SIZEOF);
				State = 2665; Match(LPAREN);
				State = 2666; ((SizeOfExpressionContext)_localctx).Type = datatype();
				State = 2667; Match(RPAREN);
				}
				break;

			case 15:
				_localctx = new DefaultExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2669; Match(DEFAULT);
				State = 2670; Match(LPAREN);
				State = 2671; ((DefaultExpressionContext)_localctx).Type = datatype();
				State = 2672; Match(RPAREN);
				}
				break;

			case 16:
				_localctx = new NameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2674; ((NameExpressionContext)_localctx).Name = simpleName();
				}
				break;

			case 17:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2675;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2676; ((VoConversionExpressionContext)_localctx).Type = nativeType();
				State = 2677; Match(LPAREN);
				State = 2678; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2679; Match(RPAREN);
				}
				break;

			case 18:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2681;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2682; ((VoConversionExpressionContext)_localctx).XType = xbaseType();
				State = 2683; Match(LPAREN);
				State = 2684; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2685; Match(RPAREN);
				}
				break;

			case 19:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2687;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2688; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2689; Match(LPAREN);
				State = 2690; Match(CAST);
				State = 2691; Match(COMMA);
				State = 2692; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2693; Match(RPAREN);
				}
				break;

			case 20:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2695;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2696; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2697; Match(LPAREN);
				State = 2698; Match(CAST);
				State = 2699; Match(COMMA);
				State = 2700; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2701; Match(RPAREN);
				}
				break;

			case 21:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2703; Match(CASTCLASS);
				State = 2704; Match(LPAREN);
				State = 2705; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2706; Match(COMMA);
				State = 2707; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2708; Match(RPAREN);
				}
				break;

			case 22:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2710; Match(CASTCLASS);
				State = 2711; Match(LPAREN);
				State = 2712; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2713; Match(COMMA);
				State = 2714; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2715; Match(RPAREN);
				}
				break;

			case 23:
				_localctx = new VoCastPtrExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2717; Match(PTR);
				State = 2718; Match(LPAREN);
				State = 2719; ((VoCastPtrExpressionContext)_localctx).Type = datatype();
				State = 2720; Match(COMMA);
				State = 2721; ((VoCastPtrExpressionContext)_localctx).Expr = expression(0);
				State = 2722; Match(RPAREN);
				}
				break;

			case 24:
				_localctx = new UsualTypeNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2724; ((UsualTypeNameExpressionContext)_localctx).Name = usualTypeName();
				}
				break;

			case 25:
				_localctx = new TypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2725; ((TypeExpressionContext)_localctx).Type = typeName();
				}
				break;

			case 26:
				_localctx = new IifExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2726; ((IifExpressionContext)_localctx).Expr = iif();
				}
				break;

			case 27:
				_localctx = new IntrinsicExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2727;
				((IntrinsicExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (BIT_NOT - 252)) | (1L << (BIT_AND - 252)) | (1L << (BIT_OR - 252)) | (1L << (BIT_XOR - 252)))) != 0)) ) {
					((IntrinsicExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2728; Match(LPAREN);
				State = 2729; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
				((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
				State = 2734;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2730; Match(COMMA);
					State = 2731; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
					((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
					}
					}
					State = 2736;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2737; Match(RPAREN);
				}
				break;

			case 28:
				_localctx = new AliasedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2739;
				if (!(ExpectToken(ALIAS))) throw new FailedPredicateException(this, "ExpectToken(ALIAS)");
				State = 2740; ((AliasedExpressionContext)_localctx).Expr = aliasExpression();
				}
				break;

			case 29:
				_localctx = new MacroContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2741; Match(AMP);
				State = 2742; Match(LPAREN);
				State = 2743; ((MacroContext)_localctx).Expr = expression(0);
				State = 2744; Match(RPAREN);
				}
				break;

			case 30:
				_localctx = new MacroNameContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2746; Match(AMP);
				State = 2747; ((MacroNameContext)_localctx).Name = identifierName();
				}
				break;

			case 31:
				_localctx = new ParenExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2748; Match(LPAREN);
				State = 2749; ((ParenExpressionContext)_localctx)._expression = expression(0);
				((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
				State = 2754;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2750; Match(COMMA);
					State = 2751; ((ParenExpressionContext)_localctx)._expression = expression(0);
					((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
					}
					}
					State = 2756;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2757; Match(RPAREN);
				}
				break;

			case 32:
				_localctx = new ArgListExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2759; ((ArgListExpressionContext)_localctx).Key = Match(ARGLIST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundExpressionContext : XSharpParserRuleContext {
		public BoundExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundExpression; } }
	 
		public BoundExpressionContext() { }
		public virtual void CopyFrom(BoundExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BindMemberAccessContext : BoundExpressionContext {
		public IToken Op;
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BindMemberAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindMemberAccess(this);
		}
	}
	public partial class BoundMethodCallContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BoundMethodCallContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundMethodCall(this);
		}
	}
	public partial class BoundCondAccessExprContext : BoundExpressionContext {
		public BoundExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public BoundExpressionContext[] boundExpression() {
			return GetRuleContexts<BoundExpressionContext>();
		}
		public BoundExpressionContext boundExpression(int i) {
			return GetRuleContext<BoundExpressionContext>(i);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundCondAccessExprContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundCondAccessExpr(this);
		}
	}
	public partial class BoundArrayAccessContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BoundArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundArrayAccess(this);
		}
	}
	public partial class BindArrayAccessContext : BoundExpressionContext {
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BindArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindArrayAccess(this);
		}
	}
	public partial class BoundAccessMemberContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BoundAccessMemberContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundAccessMember(this);
		}
	}

	[RuleVersion(0)]
	public BoundExpressionContext boundExpression() {
		return boundExpression(0);
	}

	private BoundExpressionContext boundExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		BoundExpressionContext _localctx = new BoundExpressionContext(_ctx, _parentState);
		BoundExpressionContext _prevctx = _localctx;
		int _startState = 206;
		EnterRecursionRule(_localctx, 206, RULE_boundExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2769;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COLON:
			case DOT:
				{
				_localctx = new BindMemberAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2763;
				((BindMemberAccessContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==COLON || _la==DOT) ) {
					((BindMemberAccessContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2764; ((BindMemberAccessContext)_localctx).Name = simpleName();
				}
				break;
			case LBRKT:
				{
				_localctx = new BindArrayAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2765; Match(LBRKT);
				State = 2766; ((BindArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
				State = 2767; Match(RBRKT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2789;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,377,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2787;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
					case 1:
						{
						_localctx = new BoundCondAccessExprContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundCondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2771;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2772; ((BoundCondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2773; ((BoundCondAccessExprContext)_localctx).Right = boundExpression(3);
						}
						break;

					case 2:
						{
						_localctx = new BoundAccessMemberContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundAccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2774;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2775;
						((BoundAccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((BoundAccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2776; ((BoundAccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 3:
						{
						_localctx = new BoundMethodCallContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundMethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2777;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2778; Match(LPAREN);
						State = 2779; ((BoundMethodCallContext)_localctx).ArgList = argumentList();
						State = 2780; Match(RPAREN);
						}
						break;

					case 4:
						{
						_localctx = new BoundArrayAccessContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2782;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2783; Match(LBRKT);
						State = 2784; ((BoundArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2785; Match(RBRKT);
						}
						break;
					}
					} 
				}
				State = 2791;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,377,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AliasExpressionContext : XSharpParserRuleContext {
		public AliasExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasExpression; } }
	 
		public AliasExpressionContext() { }
		public virtual void CopyFrom(AliasExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AliasedMemvarContext : AliasExpressionContext {
		public IdentifierContext VarName;
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasedMemvarContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedMemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedMemvar(this);
		}
	}
	public partial class AliasedFieldLateContext : AliasExpressionContext {
		public IdentifierContext Alias;
		public ExpressionContext Field;
		public IdentifierContext Area;
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AliasedFieldLateContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedFieldLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedFieldLate(this);
		}
	}
	public partial class AliasedExprContext : AliasExpressionContext {
		public IdentifierContext Id;
		public ExpressionContext Alias;
		public ExpressionContext Expr;
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public ITerminalNode[] LPAREN() { return GetTokens(XSharpParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(XSharpParser.LPAREN, i);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(XSharpParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(XSharpParser.RPAREN, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AliasedExprContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedExpr(this);
		}
	}
	public partial class AliasedFieldContext : AliasExpressionContext {
		public IdentifierContext Alias;
		public IdentifierContext Field;
		public IdentifierContext Area;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AliasedFieldContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedField(this);
		}
	}

	[RuleVersion(0)]
	public AliasExpressionContext aliasExpression() {
		AliasExpressionContext _localctx = new AliasExpressionContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_aliasExpression);
		try {
			State = 2852;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,382,_ctx) ) {
			case 1:
				_localctx = new AliasedMemvarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2792;
				if (!(HasMemVars)) throw new FailedPredicateException(this, "HasMemVars");
				State = 2793; Match(MEMVAR);
				State = 2794; Match(ALIAS);
				State = 2795; ((AliasedMemvarContext)_localctx).VarName = identifier();
				}
				break;

			case 2:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2796; Match(FIELD);
				State = 2797; Match(ALIAS);
				State = 2801;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					State = 2798; ((AliasedFieldContext)_localctx).Alias = identifier();
					State = 2799; Match(ALIAS);
					}
					break;
				}
				State = 2803; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 3:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2804;
				if (!(InputStream.La(4) != LPAREN)) throw new FailedPredicateException(this, "InputStream.La(4) != LPAREN");
				State = 2805; ((AliasedFieldContext)_localctx).Alias = identifier();
				State = 2806; Match(ALIAS);
				State = 2807; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 4:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2809;
				if (!(InputStream.La(6) != LPAREN)) throw new FailedPredicateException(this, "InputStream.La(6) != LPAREN");
				State = 2810; Match(LPAREN);
				State = 2811; ((AliasedFieldContext)_localctx).Area = identifier();
				State = 2812; Match(RPAREN);
				State = 2813; Match(ALIAS);
				State = 2814; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 5:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2816; ((AliasedFieldLateContext)_localctx).Alias = identifier();
				State = 2817; Match(ALIAS);
				State = 2818; Match(AMP);
				State = 2819; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 6:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2821; Match(FIELD);
				State = 2822; Match(ALIAS);
				State = 2826;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					State = 2823; ((AliasedFieldLateContext)_localctx).Alias = identifier();
					State = 2824; Match(ALIAS);
					}
					break;
				}
				State = 2828; Match(AMP);
				State = 2829; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 7:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2830; Match(LPAREN);
				State = 2831; ((AliasedFieldLateContext)_localctx).Area = identifier();
				State = 2832; Match(RPAREN);
				State = 2833; Match(ALIAS);
				State = 2834; Match(AMP);
				State = 2835; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 8:
				_localctx = new AliasedExprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2842;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					State = 2837; ((AliasedExprContext)_localctx).Id = identifier();
					}
					break;

				case 2:
					{
					State = 2838; Match(LPAREN);
					State = 2839; ((AliasedExprContext)_localctx).Alias = expression(0);
					State = 2840; Match(RPAREN);
					}
					break;
				}
				State = 2844; Match(ALIAS);
				State = 2850;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
				case 1:
					{
					{
					State = 2845; Match(LPAREN);
					State = 2846; ((AliasedExprContext)_localctx).Expr = expression(0);
					State = 2847; Match(RPAREN);
					}
					}
					break;

				case 2:
					{
					State = 2849; ((AliasedExprContext)_localctx).Expr = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectOrCollectioninitializerContext : XSharpParserRuleContext {
		public ObjectinitializerContext ObjInit;
		public CollectioninitializerContext CollInit;
		public ObjectinitializerContext objectinitializer() {
			return GetRuleContext<ObjectinitializerContext>(0);
		}
		public CollectioninitializerContext collectioninitializer() {
			return GetRuleContext<CollectioninitializerContext>(0);
		}
		public ObjectOrCollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectOrCollectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectOrCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectOrCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
		ObjectOrCollectioninitializerContext _localctx = new ObjectOrCollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_objectOrCollectioninitializer);
		try {
			State = 2856;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2854; _localctx.ObjInit = objectinitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2855; _localctx.CollInit = collectioninitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectinitializerContext : XSharpParserRuleContext {
		public MemberinitializerContext _memberinitializer;
		public IList<MemberinitializerContext> _Members = new List<MemberinitializerContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public MemberinitializerContext[] memberinitializer() {
			return GetRuleContexts<MemberinitializerContext>();
		}
		public MemberinitializerContext memberinitializer(int i) {
			return GetRuleContext<MemberinitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ObjectinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectinitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectinitializerContext objectinitializer() {
		ObjectinitializerContext _localctx = new ObjectinitializerContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_objectinitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2858; Match(LCURLY);
			State = 2867;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				State = 2859; _localctx._memberinitializer = memberinitializer();
				_localctx._Members.Add(_localctx._memberinitializer);
				State = 2864;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2860; Match(COMMA);
					State = 2861; _localctx._memberinitializer = memberinitializer();
					_localctx._Members.Add(_localctx._memberinitializer);
					}
					}
					State = 2866;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 2869; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberinitializerContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public InitializervalueContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public InitializervalueContext initializervalue() {
			return GetRuleContext<InitializervalueContext>(0);
		}
		public MemberinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberinitializer(this);
		}
	}

	[RuleVersion(0)]
	public MemberinitializerContext memberinitializer() {
		MemberinitializerContext _localctx = new MemberinitializerContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_memberinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2871; _localctx.Name = identifierName();
			State = 2872; _localctx.Op = assignoperator();
			State = 2873; _localctx.Expr = initializervalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializervalueContext : XSharpParserRuleContext {
		public ObjectOrCollectioninitializerContext Init;
		public ExpressionContext Expr;
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializervalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializervalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInitializervalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInitializervalue(this);
		}
	}

	[RuleVersion(0)]
	public InitializervalueContext initializervalue() {
		InitializervalueContext _localctx = new InitializervalueContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_initializervalue);
		try {
			State = 2877;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2875; _localctx.Init = objectOrCollectioninitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2876; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexInitExprContext : XSharpParserRuleContext {
		public InitializerMemberContext _initializerMember;
		public IList<InitializerMemberContext> _Members = new List<InitializerMemberContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public InitializerMemberContext[] initializerMember() {
			return GetRuleContexts<InitializerMemberContext>();
		}
		public InitializerMemberContext initializerMember(int i) {
			return GetRuleContext<InitializerMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ComplexInitExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexInitExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterComplexInitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitComplexInitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ComplexInitExprContext complexInitExpr() {
		ComplexInitExprContext _localctx = new ComplexInitExprContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_complexInitExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2879; Match(LCURLY);
			State = 2880; _localctx._initializerMember = initializerMember();
			_localctx._Members.Add(_localctx._initializerMember);
			State = 2885;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2881; Match(COMMA);
				State = 2882; _localctx._initializerMember = initializerMember();
				_localctx._Members.Add(_localctx._initializerMember);
				}
				}
				State = 2887;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2888; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerMemberContext : XSharpParserRuleContext {
		public ComplexInitExprContext Init;
		public ExpressionContext Expr;
		public ComplexInitExprContext complexInitExpr() {
			return GetRuleContext<ComplexInitExprContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInitializerMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInitializerMember(this);
		}
	}

	[RuleVersion(0)]
	public InitializerMemberContext initializerMember() {
		InitializerMemberContext _localctx = new InitializerMemberContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_initializerMember);
		try {
			State = 2892;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2890; _localctx.Init = complexInitExpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2891; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectioninitializerContext : XSharpParserRuleContext {
		public InitializerMemberContext _initializerMember;
		public IList<InitializerMemberContext> _Members = new List<InitializerMemberContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public InitializerMemberContext[] initializerMember() {
			return GetRuleContexts<InitializerMemberContext>();
		}
		public InitializerMemberContext initializerMember(int i) {
			return GetRuleContext<InitializerMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public CollectioninitializerContext collectioninitializer() {
		CollectioninitializerContext _localctx = new CollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_collectioninitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2894; Match(LCURLY);
			State = 2895; _localctx._initializerMember = initializerMember();
			_localctx._Members.Add(_localctx._initializerMember);
			State = 2900;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2896; Match(COMMA);
				State = 2897; _localctx._initializerMember = initializerMember();
				_localctx._Members.Add(_localctx._initializerMember);
				}
				}
				State = 2902;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2903; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketedArgumentListContext : XSharpParserRuleContext {
		public UnnamedArgumentContext _unnamedArgument;
		public IList<UnnamedArgumentContext> _Args = new List<UnnamedArgumentContext>();
		public UnnamedArgumentContext[] unnamedArgument() {
			return GetRuleContexts<UnnamedArgumentContext>();
		}
		public UnnamedArgumentContext unnamedArgument(int i) {
			return GetRuleContext<UnnamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public BracketedArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBracketedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBracketedArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public BracketedArgumentListContext bracketedArgumentList() {
		BracketedArgumentListContext _localctx = new BracketedArgumentListContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_bracketedArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2905; _localctx._unnamedArgument = unnamedArgument();
			_localctx._Args.Add(_localctx._unnamedArgument);
			State = 2910;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2906; Match(COMMA);
				State = 2907; _localctx._unnamedArgument = unnamedArgument();
				_localctx._Args.Add(_localctx._unnamedArgument);
				}
				}
				State = 2912;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnnamedArgumentContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnnamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnamedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUnnamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUnnamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public UnnamedArgumentContext unnamedArgument() {
		UnnamedArgumentContext _localctx = new UnnamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_unnamedArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2913; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : XSharpParserRuleContext {
		public NamedArgumentContext _namedArgument;
		public IList<NamedArgumentContext> _Args = new List<NamedArgumentContext>();
		public NamedArgumentContext[] namedArgument() {
			return GetRuleContexts<NamedArgumentContext>();
		}
		public NamedArgumentContext namedArgument(int i) {
			return GetRuleContext<NamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2915; _localctx._namedArgument = namedArgument();
			_localctx._Args.Add(_localctx._namedArgument);
			State = 2920;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2916; Match(COMMA);
				State = 2917; _localctx._namedArgument = namedArgument();
				_localctx._Args.Add(_localctx._namedArgument);
				}
				}
				State = 2922;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public IToken Op;
		public IToken RefOut;
		public ExpressionContext Expr;
		public IToken Var;
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public IToken Null;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_namedArgument);
		int _la;
		try {
			State = 2948;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2923;
				if (!(AllowNamedArgs)) throw new FailedPredicateException(this, "AllowNamedArgs");
				State = 2924; _localctx.Name = identifierName();
				State = 2925; _localctx.Op = Match(ASSIGN_OP);
				State = 2927;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
				case 1:
					{
					State = 2926;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2930;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					State = 2929; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2932; _localctx.RefOut = Match(OUT);
				State = 2933; _localctx.Var = Match(VAR);
				State = 2934; _localctx.Id = varidentifier();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2935; _localctx.RefOut = Match(OUT);
				State = 2936; _localctx.Id = varidentifier();
				State = 2937; Match(AS);
				State = 2938; _localctx.Type = datatype();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2940; _localctx.RefOut = Match(OUT);
				State = 2941; _localctx.Null = Match(NULL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2943;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					State = 2942;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2946;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					State = 2945; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IifContext : XSharpParserRuleContext {
		public ExpressionContext Cond;
		public ExpressionContext TrueExpr;
		public ExpressionContext FalseExpr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode IIF() { return GetToken(XSharpParser.IIF, 0); }
		public ITerminalNode IF() { return GetToken(XSharpParser.IF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIif(this);
		}
	}

	[RuleVersion(0)]
	public IifContext iif() {
		IifContext _localctx = new IifContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_iif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2950;
			_la = _input.La(1);
			if ( !(_la==IF || _la==IIF) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2951; Match(LPAREN);
			State = 2952; _localctx.Cond = expression(0);
			State = 2953; Match(COMMA);
			State = 2955;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				State = 2954; _localctx.TrueExpr = expression(0);
				}
				break;
			}
			State = 2957; Match(COMMA);
			State = 2959;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				State = 2958; _localctx.FalseExpr = expression(0);
				}
				break;
			}
			State = 2961; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDotContext : XSharpParserRuleContext {
		public NameDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDot; } }
	 
		public NameDotContext() { }
		public virtual void CopyFrom(NameDotContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleOrAliasedNameDotContext : NameDotContext {
		public AliasedNameContext Name;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedNameDot(this);
		}
	}
	public partial class QualifiedNameDotContext : NameDotContext {
		public NameDotContext Left;
		public SimpleNameContext Right;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedNameDot(this);
		}
	}

	[RuleVersion(0)]
	public NameDotContext nameDot() {
		return nameDot(0);
	}

	private NameDotContext nameDot(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameDotContext _localctx = new NameDotContext(_ctx, _parentState);
		NameDotContext _prevctx = _localctx;
		int _startState = 234;
		EnterRecursionRule(_localctx, 234, RULE_nameDot, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameDotContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 2964; ((SimpleOrAliasedNameDotContext)_localctx).Name = aliasedName();
			State = 2965; Match(DOT);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2973;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,399,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameDotContext(new NameDotContext(_parentctx, _parentState));
					((QualifiedNameDotContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nameDot);
					State = 2967;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 2968; ((QualifiedNameDotContext)_localctx).Right = simpleName();
					State = 2969; Match(DOT);
					}
					} 
				}
				State = 2975;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,399,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NameContext : XSharpParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext Left;
		public IToken Op;
		public SimpleNameContext Right;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}
	public partial class SimpleOrAliasedNameContext : NameContext {
		public AliasedNameContext Name;
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameContext _localctx = new NameContext(_ctx, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 236;
		EnterRecursionRule(_localctx, 236, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 2977; ((SimpleOrAliasedNameContext)_localctx).Name = aliasedName();
			}
			_ctx.stop = _input.Lt(-1);
			State = 2984;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,400,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 2979;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 2980; ((QualifiedNameContext)_localctx).Op = Match(DOT);
					State = 2981; ((QualifiedNameContext)_localctx).Right = simpleName();
					}
					} 
				}
				State = 2986;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,400,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AliasedNameContext : XSharpParserRuleContext {
		public AliasedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasedName; } }
	 
		public AliasedNameContext() { }
		public virtual void CopyFrom(AliasedNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierOrGenericNameContext : AliasedNameContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public IdentifierOrGenericNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierOrGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierOrGenericName(this);
		}
	}
	public partial class AliasQualifiedNameContext : AliasedNameContext {
		public IdentifierNameContext Alias;
		public IToken Op;
		public SimpleNameContext Right;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public AliasQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasQualifiedName(this);
		}
	}
	public partial class GlobalQualifiedNameContext : AliasedNameContext {
		public IToken Global;
		public IToken Op;
		public SimpleNameContext Right;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public GlobalQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public AliasedNameContext aliasedName() {
		AliasedNameContext _localctx = new AliasedNameContext(_ctx, State);
		EnterRule(_localctx, 238, RULE_aliasedName);
		try {
			State = 2995;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
			case 1:
				_localctx = new GlobalQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2987; ((GlobalQualifiedNameContext)_localctx).Global = Match(GLOBAL);
				State = 2988; ((GlobalQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 2989; ((GlobalQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 2:
				_localctx = new AliasQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2990; ((AliasQualifiedNameContext)_localctx).Alias = identifierName();
				State = 2991; ((AliasQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 2992; ((AliasQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 3:
				_localctx = new IdentifierOrGenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2994; ((IdentifierOrGenericNameContext)_localctx).Name = simpleName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public GenericArgumentListContext GenericArgList;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GenericArgumentListContext genericArgumentList() {
			return GetRuleContext<GenericArgumentListContext>(0);
		}
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleName(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_simpleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2997; _localctx.Id = identifier();
			State = 2999;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				State = 2998; _localctx.GenericArgList = genericArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgumentListContext : XSharpParserRuleContext {
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _GenericArgs = new List<DatatypeContext>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GenericArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGenericArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGenericArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgumentListContext genericArgumentList() {
		GenericArgumentListContext _localctx = new GenericArgumentListContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_genericArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3001; Match(LT);
			State = 3002; _localctx._datatype = datatype();
			_localctx._GenericArgs.Add(_localctx._datatype);
			State = 3007;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3003; Match(COMMA);
				State = 3004; _localctx._datatype = datatype();
				_localctx._GenericArgs.Add(_localctx._datatype);
				}
				}
				State = 3009;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3010; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_identifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3012; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridentifierContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public VaridentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varidentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVaridentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVaridentifier(this);
		}
	}

	[RuleVersion(0)]
	public VaridentifierContext varidentifier() {
		VaridentifierContext _localctx = new VaridentifierContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_varidentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3016;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				State = 3014; Match(FOX_M);
				State = 3015; Match(DOT);
				}
				break;
			}
			State = 3018; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridentifierNameContext : XSharpParserRuleContext {
		public IdentifierNameContext Id;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public VaridentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varidentifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVaridentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVaridentifierName(this);
		}
	}

	[RuleVersion(0)]
	public VaridentifierNameContext varidentifierName() {
		VaridentifierNameContext _localctx = new VaridentifierNameContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_varidentifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3022;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				State = 3020; Match(FOX_M);
				State = 3021; Match(DOT);
				}
				break;
			}
			State = 3024; _localctx.Id = identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : XSharpParserRuleContext {
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
	 
		public DatatypeContext() { }
		public virtual void CopyFrom(DatatypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullableDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NullableDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNullableDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNullableDatatype(this);
		}
	}
	public partial class ArrayOfTypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayOfTypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayOfType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayOfType(this);
		}
	}
	public partial class PtrDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PtrDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPtrDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPtrDatatype(this);
		}
	}
	public partial class ArrayDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ArrayRankContext _arrayRank;
		public IList<ArrayRankContext> _Ranks = new List<ArrayRankContext>();
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayRankContext[] arrayRank() {
			return GetRuleContexts<ArrayRankContext>();
		}
		public ArrayRankContext arrayRank(int i) {
			return GetRuleContext<ArrayRankContext>(i);
		}
		public ArrayDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayDatatype(this);
		}
	}
	public partial class SimpleDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SimpleDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleDatatype(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_datatype);
		try {
			int _alt;
			State = 3042;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				_localctx = new ArrayOfTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3026; Match(ARRAY);
				State = 3027; Match(OF);
				State = 3028; ((ArrayOfTypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 2:
				_localctx = new PtrDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3029; ((PtrDatatypeContext)_localctx).TypeName = typeName();
				State = 3030; Match(PTR);
				}
				break;

			case 3:
				_localctx = new ArrayDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3032; ((ArrayDatatypeContext)_localctx).TypeName = typeName();
				State = 3034;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3033; ((ArrayDatatypeContext)_localctx)._arrayRank = arrayRank();
						((ArrayDatatypeContext)_localctx)._Ranks.Add(((ArrayDatatypeContext)_localctx)._arrayRank);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3036;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,406,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 4:
				_localctx = new SimpleDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3038; ((SimpleDatatypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 5:
				_localctx = new NullableDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3039; ((NullableDatatypeContext)_localctx).TypeName = typeName();
				State = 3040; Match(QMARK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRankContext : XSharpParserRuleContext {
		public IToken _COMMA;
		public IList<IToken> _Commas = new List<IToken>();
		public IToken String;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public ArrayRankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRank; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayRank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayRank(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRankContext arrayRank() {
		ArrayRankContext _localctx = new ArrayRankContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_arrayRank);
		int _la;
		try {
			State = 3053;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3044; Match(LBRKT);
				State = 3048;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3045; _localctx._COMMA = Match(COMMA);
					_localctx._Commas.Add(_localctx._COMMA);
					}
					}
					State = 3050;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3051; Match(RBRKT);
				}
				break;
			case BRACKETED_STRING_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3052; _localctx.String = Match(BRACKETED_STRING_CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NameContext Name;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_typeName);
		try {
			State = 3058;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3055; _localctx.NativeType = nativeType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3056; _localctx.XType = xbaseType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3057; _localctx.Name = name(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsualTypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public UsualTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usualTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeName(this);
		}
	}

	[RuleVersion(0)]
	public UsualTypeNameContext usualTypeName() {
		UsualTypeNameContext _localctx = new UsualTypeNameContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_usualTypeName);
		try {
			State = 3062;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BYTE:
			case DWORD:
			case INT:
			case LOGIC:
			case LONGINT:
			case OBJECT:
			case PTR:
			case REAL4:
			case REAL8:
			case SHORTINT:
			case STRING:
			case VOID:
			case WORD:
			case CHAR:
			case INT64:
			case UINT64:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
			case NINT:
			case NUINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3060; _localctx.NativeType = nativeType();
				}
				break;
			case ARRAY:
			case CODEBLOCK:
			case DATE:
			case FLOAT:
			case PSZ:
			case SYMBOL:
			case USUAL:
			case CURRENCY:
			case BINARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3061; _localctx.XType = xbaseType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public ArrayElementContext _arrayElement;
		public IList<ArrayElementContext> _Elements = new List<ArrayElementContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_literalArray);
		int _la;
		try {
			State = 3089;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3068;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 3064; Match(LT);
					State = 3065; _localctx.Type = datatype();
					State = 3066; Match(GT);
					}
				}

				State = 3070; Match(LCURLY);
				State = 3071; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3076;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 3072; Match(LT);
					State = 3073; _localctx.Type = datatype();
					State = 3074; Match(GT);
					}
				}

				State = 3078; Match(LCURLY);
				State = 3079; _localctx._arrayElement = arrayElement();
				_localctx._Elements.Add(_localctx._arrayElement);
				State = 3084;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3080; Match(COMMA);
					State = 3081; _localctx._arrayElement = arrayElement();
					_localctx._Elements.Add(_localctx._arrayElement);
					}
					}
					State = 3086;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3087; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_arrayElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3092;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				State = 3091; _localctx.Expr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonTypeContext : XSharpParserRuleContext {
		public AnonMemberContext _anonMember;
		public IList<AnonMemberContext> _Members = new List<AnonMemberContext>();
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public AnonMemberContext[] anonMember() {
			return GetRuleContexts<AnonMemberContext>();
		}
		public AnonMemberContext anonMember(int i) {
			return GetRuleContext<AnonMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AnonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonType(this);
		}
	}

	[RuleVersion(0)]
	public AnonTypeContext anonType() {
		AnonTypeContext _localctx = new AnonTypeContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_anonType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3094; Match(CLASS);
			State = 3095; Match(LCURLY);
			State = 3104;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				State = 3096; _localctx._anonMember = anonMember();
				_localctx._Members.Add(_localctx._anonMember);
				State = 3101;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3097; Match(COMMA);
					State = 3098; _localctx._anonMember = anonMember();
					_localctx._Members.Add(_localctx._anonMember);
					}
					}
					State = 3103;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3106; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonMemberContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnonMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonMember(this);
		}
	}

	[RuleVersion(0)]
	public AnonMemberContext anonMember() {
		AnonMemberContext _localctx = new AnonMemberContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_anonMember);
		try {
			State = 3113;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,419,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3108; _localctx.Name = identifierName();
				State = 3109; _localctx.Op = assignoperator();
				State = 3110; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3112; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockContext : XSharpParserRuleContext {
		public IToken Or;
		public IToken lambda;
		public CodeblockCodeContext Code;
		public IToken P1;
		public LambdaParameterListContext LambdaParamList;
		public IToken P2;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] PIPE() { return GetTokens(XSharpParser.PIPE); }
		public ITerminalNode PIPE(int i) {
			return GetToken(XSharpParser.PIPE, i);
		}
		public LambdaParameterListContext lambdaParameterList() {
			return GetRuleContext<LambdaParameterListContext>(0);
		}
		public CodeblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblock(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockContext codeblock() {
		CodeblockContext _localctx = new CodeblockContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_codeblock);
		try {
			State = 3143;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3115; Match(LCURLY);
				State = 3116; _localctx.Or = Match(OR);
				State = 3118;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					State = 3117; _localctx.lambda = Match(UDCSEP);
					}
					break;
				}
				State = 3120; _localctx.Code = codeblockCode();
				State = 3121; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3123; Match(LCURLY);
				State = 3124; _localctx.P1 = Match(PIPE);
				State = 3126;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
				case 1:
					{
					State = 3125; _localctx.LambdaParamList = lambdaParameterList();
					}
					break;
				}
				State = 3128; _localctx.P2 = Match(PIPE);
				State = 3130;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,422,_ctx) ) {
				case 1:
					{
					State = 3129; _localctx.lambda = Match(UDCSEP);
					}
					break;
				}
				State = 3132; _localctx.Code = codeblockCode();
				State = 3133; Match(RCURLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3135; Match(LCURLY);
				State = 3137;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					State = 3136; _localctx.LambdaParamList = lambdaParameterList();
					}
					break;
				}
				State = 3139; _localctx.lambda = Match(UDCSEP);
				State = 3140; _localctx.Code = codeblockCode();
				State = 3141; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockCodeContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public StatementBlockContext StmtBlk;
		public CodeblockExprListContext ExprList;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CodeblockExprListContext codeblockExprList() {
			return GetRuleContext<CodeblockExprListContext>(0);
		}
		public CodeblockCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockCodeContext codeblockCode() {
		CodeblockCodeContext _localctx = new CodeblockCodeContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_codeblockCode);
		try {
			State = 3152;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,426,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3146;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					State = 3145; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3148; eos();
				State = 3149; _localctx.StmtBlk = statementBlock();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3151; _localctx.ExprList = codeblockExprList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParameterListContext : XSharpParserRuleContext {
		public CodeblockParamListContext ImplicitParams;
		public ExplicitAnonymousFunctionParamListContext ExplicitParams;
		public CodeblockParamListContext codeblockParamList() {
			return GetRuleContext<CodeblockParamListContext>(0);
		}
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public LambdaParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLambdaParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLambdaParameterList(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParameterListContext lambdaParameterList() {
		LambdaParameterListContext _localctx = new LambdaParameterListContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_lambdaParameterList);
		try {
			State = 3156;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3154; _localctx.ImplicitParams = codeblockParamList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3155; _localctx.ExplicitParams = explicitAnonymousFunctionParamList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockParamListContext : XSharpParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Ids = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockParamList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockParamListContext codeblockParamList() {
		CodeblockParamListContext _localctx = new CodeblockParamListContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_codeblockParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3158; _localctx._identifier = identifier();
			_localctx._Ids.Add(_localctx._identifier);
			State = 3163;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3159; Match(COMMA);
				State = 3160; _localctx._identifier = identifier();
				_localctx._Ids.Add(_localctx._identifier);
				}
				}
				State = 3165;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockExprListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext ReturnExpr;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockExprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExprList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockExprListContext codeblockExprList() {
		CodeblockExprListContext _localctx = new CodeblockExprListContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_codeblockExprList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3170;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3167;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
					case 1:
						{
						State = 3166; _localctx._expression = expression(0);
						_localctx._Exprs.Add(_localctx._expression);
						}
						break;
					}
					State = 3169; Match(COMMA);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3172;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,430,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3174; _localctx.ReturnExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousMethodExpressionContext : XSharpParserRuleContext {
		public IToken Async;
		public IToken Delegate;
		public ExplicitAnonymousFunctionParamListContext ParamList;
		public CodeblockCodeContext Code;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public AnonymousMethodExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousMethodExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousMethodExpressionContext anonymousMethodExpression() {
		AnonymousMethodExpressionContext _localctx = new AnonymousMethodExpressionContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_anonymousMethodExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3177;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASYNC) {
				{
				State = 3176; _localctx.Async = Match(ASYNC);
				}
			}

			State = 3179; _localctx.Delegate = Match(DELEGATE);
			State = 3185;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3180; Match(LPAREN);
				State = 3182;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					State = 3181; _localctx.ParamList = explicitAnonymousFunctionParamList();
					}
					break;
				}
				State = 3184; Match(RPAREN);
				}
			}

			State = 3187; Match(LCURLY);
			State = 3188; _localctx.Code = codeblockCode();
			State = 3189; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParamListContext : XSharpParserRuleContext {
		public ExplicitAnonymousFunctionParameterContext _explicitAnonymousFunctionParameter;
		public IList<ExplicitAnonymousFunctionParameterContext> _Params = new List<ExplicitAnonymousFunctionParameterContext>();
		public ExplicitAnonymousFunctionParameterContext[] explicitAnonymousFunctionParameter() {
			return GetRuleContexts<ExplicitAnonymousFunctionParameterContext>();
		}
		public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter(int i) {
			return GetRuleContext<ExplicitAnonymousFunctionParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExplicitAnonymousFunctionParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParamList(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
		ExplicitAnonymousFunctionParamListContext _localctx = new ExplicitAnonymousFunctionParamListContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_explicitAnonymousFunctionParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3191; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
			_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
			State = 3196;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3192; Match(COMMA);
				State = 3193; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
				_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
				}
				}
				State = 3198;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public ParameterDeclModsContext Mod;
		public DatatypeContext Type;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterDeclModsContext parameterDeclMods() {
			return GetRuleContext<ParameterDeclModsContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExplicitAnonymousFunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter() {
		ExplicitAnonymousFunctionParameterContext _localctx = new ExplicitAnonymousFunctionParameterContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_explicitAnonymousFunctionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3199; _localctx.Id = identifier();
			State = 3200; _localctx.Mod = parameterDeclMods();
			State = 3201; _localctx.Type = datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinqQueryContext : XSharpParserRuleContext {
		public FromClauseContext From;
		public QueryBodyContext Body;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public LinqQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linqQuery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLinqQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLinqQuery(this);
		}
	}

	[RuleVersion(0)]
	public LinqQueryContext linqQuery() {
		LinqQueryContext _localctx = new LinqQueryContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_linqQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3203; _localctx.From = fromClause();
			State = 3204; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public TypeNameContext Type;
		public ExpressionContext Expr;
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3206; Match(FROM);
			State = 3207; _localctx.Id = identifier();
			State = 3210;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3208; Match(AS);
				State = 3209; _localctx.Type = typeName();
				}
			}

			State = 3212; Match(IN);
			State = 3213; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyContext : XSharpParserRuleContext {
		public QueryBodyClauseContext _queryBodyClause;
		public IList<QueryBodyClauseContext> _Bodyclauses = new List<QueryBodyClauseContext>();
		public SelectOrGroupclauseContext SorG;
		public QueryContinuationContext Continuation;
		public SelectOrGroupclauseContext selectOrGroupclause() {
			return GetRuleContext<SelectOrGroupclauseContext>(0);
		}
		public QueryBodyClauseContext[] queryBodyClause() {
			return GetRuleContexts<QueryBodyClauseContext>();
		}
		public QueryBodyClauseContext queryBodyClause(int i) {
			return GetRuleContext<QueryBodyClauseContext>(i);
		}
		public QueryContinuationContext queryContinuation() {
			return GetRuleContext<QueryContinuationContext>(0);
		}
		public QueryBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryBody(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyContext queryBody() {
		QueryBodyContext _localctx = new QueryBodyContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_queryBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3218;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (FROM - 127)) | (1L << (JOIN - 127)) | (1L << (LET - 127)) | (1L << (ORDERBY - 127)) | (1L << (WHERE - 127)))) != 0)) {
				{
				{
				State = 3215; _localctx._queryBodyClause = queryBodyClause();
				_localctx._Bodyclauses.Add(_localctx._queryBodyClause);
				}
				}
				State = 3220;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3221; _localctx.SorG = selectOrGroupclause();
			State = 3223;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				State = 3222; _localctx.Continuation = queryContinuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyClauseContext : XSharpParserRuleContext {
		public QueryBodyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBodyClause; } }
	 
		public QueryBodyClauseContext() { }
		public virtual void CopyFrom(QueryBodyClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhereClauseContext : QueryBodyClauseContext {
		public IToken W;
		public ExpressionContext Expr;
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhereClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
	}
	public partial class LetClauseContext : QueryBodyClauseContext {
		public IToken L;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLetClause(this);
		}
	}
	public partial class OrderbyClauseContext : QueryBodyClauseContext {
		public IToken O;
		public OrderingContext _ordering;
		public IList<OrderingContext> _Orders = new List<OrderingContext>();
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public OrderbyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrderbyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrderbyClause(this);
		}
	}
	public partial class JoinClauseContext : QueryBodyClauseContext {
		public IToken J;
		public IdentifierContext Id;
		public TypeNameContext Type;
		public IToken I;
		public ExpressionContext Expr;
		public IToken O;
		public ExpressionContext OnExpr;
		public IToken E;
		public ExpressionContext EqExpr;
		public JoinIntoClauseContext Into;
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public JoinIntoClauseContext joinIntoClause() {
			return GetRuleContext<JoinIntoClauseContext>(0);
		}
		public JoinClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinClause(this);
		}
	}
	public partial class FromBodyClauseContext : QueryBodyClauseContext {
		public FromClauseContext From;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public FromBodyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromBodyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromBodyClause(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyClauseContext queryBodyClause() {
		QueryBodyClauseContext _localctx = new QueryBodyClauseContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_queryBodyClause);
		int _la;
		try {
			State = 3257;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FROM:
				_localctx = new FromBodyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3225; ((FromBodyClauseContext)_localctx).From = fromClause();
				}
				break;
			case LET:
				_localctx = new LetClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3226; ((LetClauseContext)_localctx).L = Match(LET);
				State = 3227; ((LetClauseContext)_localctx).Id = identifier();
				State = 3228; ((LetClauseContext)_localctx).Op = assignoperator();
				State = 3229; ((LetClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case WHERE:
				_localctx = new WhereClauseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3231; ((WhereClauseContext)_localctx).W = Match(WHERE);
				State = 3232; ((WhereClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case JOIN:
				_localctx = new JoinClauseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3233; ((JoinClauseContext)_localctx).J = Match(JOIN);
				State = 3234; ((JoinClauseContext)_localctx).Id = identifier();
				State = 3237;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 3235; Match(AS);
					State = 3236; ((JoinClauseContext)_localctx).Type = typeName();
					}
				}

				State = 3239; ((JoinClauseContext)_localctx).I = Match(IN);
				State = 3240; ((JoinClauseContext)_localctx).Expr = expression(0);
				State = 3241; ((JoinClauseContext)_localctx).O = Match(ON);
				State = 3242; ((JoinClauseContext)_localctx).OnExpr = expression(0);
				State = 3243; ((JoinClauseContext)_localctx).E = Match(EQUALS);
				State = 3244; ((JoinClauseContext)_localctx).EqExpr = expression(0);
				State = 3246;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INTO) {
					{
					State = 3245; ((JoinClauseContext)_localctx).Into = joinIntoClause();
					}
				}

				}
				break;
			case ORDERBY:
				_localctx = new OrderbyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3248; ((OrderbyClauseContext)_localctx).O = Match(ORDERBY);
				State = 3249; ((OrderbyClauseContext)_localctx)._ordering = ordering();
				((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
				State = 3254;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3250; Match(COMMA);
					State = 3251; ((OrderbyClauseContext)_localctx)._ordering = ordering();
					((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
					}
					}
					State = 3256;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinIntoClauseContext : XSharpParserRuleContext {
		public IToken I;
		public IdentifierContext Id;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public JoinIntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinIntoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinIntoClause(this);
		}
	}

	[RuleVersion(0)]
	public JoinIntoClauseContext joinIntoClause() {
		JoinIntoClauseContext _localctx = new JoinIntoClauseContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_joinIntoClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3259; _localctx.I = Match(INTO);
			State = 3260; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public IToken Direction;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3262; _localctx.Expr = expression(0);
			State = 3264;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 3263;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrGroupclauseContext : XSharpParserRuleContext {
		public SelectOrGroupclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrGroupclause; } }
	 
		public SelectOrGroupclauseContext() { }
		public virtual void CopyFrom(SelectOrGroupclauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupClauseContext : SelectOrGroupclauseContext {
		public IToken G;
		public ExpressionContext Expr;
		public IToken B;
		public ExpressionContext ByExpr;
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public GroupClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGroupClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGroupClause(this);
		}
	}
	public partial class SelectClauseContext : SelectOrGroupclauseContext {
		public IToken S;
		public ExpressionContext Expr;
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrGroupclauseContext selectOrGroupclause() {
		SelectOrGroupclauseContext _localctx = new SelectOrGroupclauseContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_selectOrGroupclause);
		try {
			State = 3273;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SELECT:
				_localctx = new SelectClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3266; ((SelectClauseContext)_localctx).S = Match(SELECT);
				State = 3267; ((SelectClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case GROUP:
				_localctx = new GroupClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3268; ((GroupClauseContext)_localctx).G = Match(GROUP);
				State = 3269; ((GroupClauseContext)_localctx).Expr = expression(0);
				State = 3270; ((GroupClauseContext)_localctx).B = Match(BY);
				State = 3271; ((GroupClauseContext)_localctx).ByExpr = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContinuationContext : XSharpParserRuleContext {
		public IToken I;
		public IdentifierContext Id;
		public QueryBodyContext Body;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public QueryContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryContinuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryContinuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryContinuation(this);
		}
	}

	[RuleVersion(0)]
	public QueryContinuationContext queryContinuation() {
		QueryContinuationContext _localctx = new QueryContinuationContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_queryContinuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3275; _localctx.I = Match(INTO);
			State = 3276; _localctx.Id = identifier();
			State = 3277; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : XSharpParserRuleContext {
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public KeywordxsContext keywordxs() {
			return GetRuleContext<KeywordxsContext>(0);
		}
		public KeywordxppContext keywordxpp() {
			return GetRuleContext<KeywordxppContext>(0);
		}
		public KeywordfoxContext keywordfox() {
			return GetRuleContext<KeywordfoxContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_identifier);
		try {
			State = 3287;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3279; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3280; keywordxs();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3281; keywordxpp();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3282; keywordfox();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3283;
				if (!(!IsCoreVO)) throw new FailedPredicateException(this, "!IsCoreVO");
				State = 3284; xbaseType();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3285;
				if (!(!IsCoreVO)) throw new FailedPredicateException(this, "!IsCoreVO");
				State = 3286; nativeType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStringContext : XSharpParserRuleContext {
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public KeywordxsContext keywordxs() {
			return GetRuleContext<KeywordxsContext>(0);
		}
		public KeywordxppContext keywordxpp() {
			return GetRuleContext<KeywordxppContext>(0);
		}
		public KeywordfoxContext keywordfox() {
			return GetRuleContext<KeywordfoxContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public IdentifierStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierString(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStringContext identifierString() {
		IdentifierStringContext _localctx = new IdentifierStringContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_identifierString);
		try {
			State = 3296;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,445,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3289; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3290; Match(STRING_CONST);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3291; keywordxs();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3292; keywordxpp();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3293; keywordfox();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3294; xbaseType();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3295; nativeType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbaseFuncContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode DATE() { return GetToken(XSharpParser.DATE, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public XbaseFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbaseFunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbaseFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbaseFunc(this);
		}
	}

	[RuleVersion(0)]
	public XbaseFuncContext xbaseFunc() {
		XbaseFuncContext _localctx = new XbaseFuncContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_xbaseFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3298;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (ARRAY - 153)) | (1L << (DATE - 153)) | (1L << (DATETIME - 153)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbaseTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode BINARY() { return GetToken(XSharpParser.BINARY, 0); }
		public ITerminalNode CODEBLOCK() { return GetToken(XSharpParser.CODEBLOCK, 0); }
		public ITerminalNode CURRENCY() { return GetToken(XSharpParser.CURRENCY, 0); }
		public ITerminalNode DATE() { return GetToken(XSharpParser.DATE, 0); }
		public ITerminalNode FLOAT() { return GetToken(XSharpParser.FLOAT, 0); }
		public ITerminalNode PSZ() { return GetToken(XSharpParser.PSZ, 0); }
		public ITerminalNode SYMBOL() { return GetToken(XSharpParser.SYMBOL, 0); }
		public ITerminalNode USUAL() { return GetToken(XSharpParser.USUAL, 0); }
		public XbaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbaseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbaseType(this);
		}
	}

	[RuleVersion(0)]
	public XbaseTypeContext xbaseType() {
		XbaseTypeContext _localctx = new XbaseTypeContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_xbaseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3300;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & ((1L << (ARRAY - 153)) | (1L << (CODEBLOCK - 153)) | (1L << (DATE - 153)) | (1L << (FLOAT - 153)) | (1L << (PSZ - 153)) | (1L << (SYMBOL - 153)) | (1L << (USUAL - 153)) | (1L << (CURRENCY - 153)) | (1L << (BINARY - 153)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode BYTE() { return GetToken(XSharpParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DWORD() { return GetToken(XSharpParser.DWORD, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode INT() { return GetToken(XSharpParser.INT, 0); }
		public ITerminalNode INT64() { return GetToken(XSharpParser.INT64, 0); }
		public ITerminalNode LOGIC() { return GetToken(XSharpParser.LOGIC, 0); }
		public ITerminalNode LONGINT() { return GetToken(XSharpParser.LONGINT, 0); }
		public ITerminalNode OBJECT() { return GetToken(XSharpParser.OBJECT, 0); }
		public ITerminalNode NINT() { return GetToken(XSharpParser.NINT, 0); }
		public ITerminalNode NUINT() { return GetToken(XSharpParser.NUINT, 0); }
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode REAL4() { return GetToken(XSharpParser.REAL4, 0); }
		public ITerminalNode REAL8() { return GetToken(XSharpParser.REAL8, 0); }
		public ITerminalNode SHORTINT() { return GetToken(XSharpParser.SHORTINT, 0); }
		public ITerminalNode STRING() { return GetToken(XSharpParser.STRING, 0); }
		public ITerminalNode UINT64() { return GetToken(XSharpParser.UINT64, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode WORD() { return GetToken(XSharpParser.WORD, 0); }
		public NativeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}

	[RuleVersion(0)]
	public NativeTypeContext nativeType() {
		NativeTypeContext _localctx = new NativeTypeContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_nativeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3302;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (BYTE - 154)) | (1L << (DWORD - 154)) | (1L << (INT - 154)) | (1L << (LOGIC - 154)) | (1L << (LONGINT - 154)) | (1L << (OBJECT - 154)) | (1L << (PTR - 154)) | (1L << (REAL4 - 154)) | (1L << (REAL8 - 154)) | (1L << (SHORTINT - 154)) | (1L << (STRING - 154)) | (1L << (VOID - 154)) | (1L << (WORD - 154)) | (1L << (CHAR - 154)) | (1L << (INT64 - 154)) | (1L << (UINT64 - 154)) | (1L << (DYNAMIC - 154)) | (1L << (DECIMAL - 154)) | (1L << (DATETIME - 154)) | (1L << (NINT - 154)) | (1L << (NUINT - 154)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode CHAR_CONST() { return GetToken(XSharpParser.CHAR_CONST, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public ITerminalNode ESCAPED_STRING_CONST() { return GetToken(XSharpParser.ESCAPED_STRING_CONST, 0); }
		public ITerminalNode INTERPOLATED_STRING_CONST() { return GetToken(XSharpParser.INTERPOLATED_STRING_CONST, 0); }
		public ITerminalNode INCOMPLETE_STRING_CONST() { return GetToken(XSharpParser.INCOMPLETE_STRING_CONST, 0); }
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public ITerminalNode SYMBOL_CONST() { return GetToken(XSharpParser.SYMBOL_CONST, 0); }
		public ITerminalNode HEX_CONST() { return GetToken(XSharpParser.HEX_CONST, 0); }
		public ITerminalNode BIN_CONST() { return GetToken(XSharpParser.BIN_CONST, 0); }
		public ITerminalNode BINARY_CONST() { return GetToken(XSharpParser.BINARY_CONST, 0); }
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public ITerminalNode INVALID_NUMBER() { return GetToken(XSharpParser.INVALID_NUMBER, 0); }
		public ITerminalNode DATE_CONST() { return GetToken(XSharpParser.DATE_CONST, 0); }
		public ITerminalNode DATETIME_CONST() { return GetToken(XSharpParser.DATETIME_CONST, 0); }
		public ITerminalNode NIL() { return GetToken(XSharpParser.NIL, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public ITerminalNode NULL_ARRAY() { return GetToken(XSharpParser.NULL_ARRAY, 0); }
		public ITerminalNode NULL_CODEBLOCK() { return GetToken(XSharpParser.NULL_CODEBLOCK, 0); }
		public ITerminalNode NULL_DATE() { return GetToken(XSharpParser.NULL_DATE, 0); }
		public ITerminalNode NULL_OBJECT() { return GetToken(XSharpParser.NULL_OBJECT, 0); }
		public ITerminalNode NULL_PSZ() { return GetToken(XSharpParser.NULL_PSZ, 0); }
		public ITerminalNode NULL_PTR() { return GetToken(XSharpParser.NULL_PTR, 0); }
		public ITerminalNode NULL_STRING() { return GetToken(XSharpParser.NULL_STRING, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(XSharpParser.NULL_SYMBOL, 0); }
		public ITerminalNode NULL_FOX() { return GetToken(XSharpParser.NULL_FOX, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3304;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (NIL - 214)) | (1L << (NULL - 214)) | (1L << (NULL_ARRAY - 214)) | (1L << (NULL_CODEBLOCK - 214)) | (1L << (NULL_DATE - 214)) | (1L << (NULL_OBJECT - 214)) | (1L << (NULL_PSZ - 214)) | (1L << (NULL_PTR - 214)) | (1L << (NULL_STRING - 214)) | (1L << (NULL_SYMBOL - 214)) | (1L << (NULL_FOX - 214)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (FALSE_CONST - 296)) | (1L << (TRUE_CONST - 296)) | (1L << (HEX_CONST - 296)) | (1L << (BIN_CONST - 296)) | (1L << (INT_CONST - 296)) | (1L << (DATE_CONST - 296)) | (1L << (DATETIME_CONST - 296)) | (1L << (REAL_CONST - 296)) | (1L << (INVALID_NUMBER - 296)) | (1L << (SYMBOL_CONST - 296)) | (1L << (CHAR_CONST - 296)) | (1L << (STRING_CONST - 296)) | (1L << (ESCAPED_STRING_CONST - 296)) | (1L << (INTERPOLATED_STRING_CONST - 296)) | (1L << (INCOMPLETE_STRING_CONST - 296)) | (1L << (BRACKETED_STRING_CONST - 296)) | (1L << (BINARY_CONST - 296)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserLiteralValueContext : XSharpParserRuleContext {
		public IToken Year;
		public IToken Month;
		public IToken Day;
		public IToken Hours;
		public IToken Minutes;
		public IToken Seconds;
		public ITerminalNode[] DOT() { return GetTokens(XSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(XSharpParser.DOT, i);
		}
		public ITerminalNode[] INT_CONST() { return GetTokens(XSharpParser.INT_CONST); }
		public ITerminalNode INT_CONST(int i) {
			return GetToken(XSharpParser.INT_CONST, i);
		}
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode[] MINUS() { return GetTokens(XSharpParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(XSharpParser.MINUS, i);
		}
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode[] COLON() { return GetTokens(XSharpParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(XSharpParser.COLON, i);
		}
		public ParserLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserLiteralValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParserLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParserLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public ParserLiteralValueContext parserLiteralValue() {
		ParserLiteralValueContext _localctx = new ParserLiteralValueContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_parserLiteralValue);
		try {
			int _alt;
			State = 3336;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3306; _localctx.Year = Match(INT_CONST);
				State = 3307; Match(DOT);
				State = 3308; _localctx.Month = Match(INT_CONST);
				State = 3309; Match(DOT);
				State = 3310; _localctx.Day = Match(INT_CONST);
				}
				break;
			case LCURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3311; Match(LCURLY);
				State = 3312; Match(EXP);
				State = 3313; _localctx.Year = Match(INT_CONST);
				State = 3314; Match(MINUS);
				State = 3315; _localctx.Month = Match(INT_CONST);
				State = 3316; Match(MINUS);
				State = 3317; _localctx.Day = Match(INT_CONST);
				State = 3327;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,448,_ctx) ) {
				case 1:
					{
					State = 3318; _localctx.Hours = Match(INT_CONST);
					State = 3325;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,447,_ctx) ) {
					case 1:
						{
						State = 3319; Match(COLON);
						State = 3320; _localctx.Minutes = Match(INT_CONST);
						State = 3323;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,446,_ctx) ) {
						case 1:
							{
							State = 3321; Match(COLON);
							State = 3322; _localctx.Seconds = Match(INT_CONST);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 3332;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,449,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 3329;
						MatchWildcard();
						}
						} 
					}
					State = 3334;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,449,_ctx);
				}
				State = 3335; Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordvoContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ITerminalNode CAST() { return GetToken(XSharpParser.CAST, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public ITerminalNode ELSE() { return GetToken(XSharpParser.ELSE, 0); }
		public ITerminalNode ELSEIF() { return GetToken(XSharpParser.ELSEIF, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDCASE() { return GetToken(XSharpParser.ENDCASE, 0); }
		public ITerminalNode ENDDO() { return GetToken(XSharpParser.ENDDO, 0); }
		public ITerminalNode ENDIF() { return GetToken(XSharpParser.ENDIF, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode HIDDEN() { return GetToken(XSharpParser.HIDDEN, 0); }
		public ITerminalNode IF() { return GetToken(XSharpParser.IF, 0); }
		public ITerminalNode IIF() { return GetToken(XSharpParser.IIF, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode LOOP() { return GetToken(XSharpParser.LOOP, 0); }
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(XSharpParser.PROTECTED, 0); }
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode RECOVER() { return GetToken(XSharpParser.RECOVER, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode SIZEOF() { return GetToken(XSharpParser.SIZEOF, 0); }
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public ITerminalNode TYPEOF() { return GetToken(XSharpParser.TYPEOF, 0); }
		public ITerminalNode WHILE() { return GetToken(XSharpParser.WHILE, 0); }
		public ITerminalNode TRY() { return GetToken(XSharpParser.TRY, 0); }
		public ITerminalNode BIT_AND() { return GetToken(XSharpParser.BIT_AND, 0); }
		public ITerminalNode BIT_NOT() { return GetToken(XSharpParser.BIT_NOT, 0); }
		public ITerminalNode BIT_OR() { return GetToken(XSharpParser.BIT_OR, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(XSharpParser.BIT_XOR, 0); }
		public ITerminalNode REPEAT() { return GetToken(XSharpParser.REPEAT, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode CATCH() { return GetToken(XSharpParser.CATCH, 0); }
		public ITerminalNode DESTRUCTOR() { return GetToken(XSharpParser.DESTRUCTOR, 0); }
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public KeywordvoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordvo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordvo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordvo(this);
		}
	}

	[RuleVersion(0)]
	public KeywordvoContext keywordvo() {
		KeywordvoContext _localctx = new KeywordvoContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_keywordvo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3338;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << AS) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << DLL) | (1L << DO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FOR) | (1L << FUNCTION) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << IS) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << METHOD) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (SUPER - 66)) | (1L << (TYPEOF - 66)) | (1L << (WHILE - 66)) | (1L << (CATCH - 66)) | (1L << (FINALLY - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (DESTRUCTOR - 66)) | (1L << (REPEAT - 66)) | (1L << (TRY - 66)))) != 0) || _la==PTR || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (BIT_NOT - 252)) | (1L << (BIT_AND - 252)) | (1L << (BIT_OR - 252)) | (1L << (BIT_XOR - 252)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordxsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode VALUE() { return GetToken(XSharpParser.VALUE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(XSharpParser.VIRTUAL, 0); }
		public ITerminalNode INTERNAL() { return GetToken(XSharpParser.INTERNAL, 0); }
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public ITerminalNode EXTERN() { return GetToken(XSharpParser.EXTERN, 0); }
		public ITerminalNode FIXED() { return GetToken(XSharpParser.FIXED, 0); }
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public ITerminalNode NAMEOF() { return GetToken(XSharpParser.NAMEOF, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(XSharpParser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(XSharpParser.STACKALLOC, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode VOLATILE() { return GetToken(XSharpParser.VOLATILE, 0); }
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode BINARY() { return GetToken(XSharpParser.BINARY, 0); }
		public ITerminalNode CURRENCY() { return GetToken(XSharpParser.CURRENCY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode NINT() { return GetToken(XSharpParser.NINT, 0); }
		public ITerminalNode NUINT() { return GetToken(XSharpParser.NUINT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public ITerminalNode ENUM() { return GetToken(XSharpParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode INIT1() { return GetToken(XSharpParser.INIT1, 0); }
		public ITerminalNode INIT2() { return GetToken(XSharpParser.INIT2, 0); }
		public ITerminalNode INIT3() { return GetToken(XSharpParser.INIT3, 0); }
		public ITerminalNode INSTANCE() { return GetToken(XSharpParser.INSTANCE, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(XSharpParser.SEQUENCE, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public ITerminalNode TRY() { return GetToken(XSharpParser.TRY, 0); }
		public ITerminalNode SWITCH() { return GetToken(XSharpParser.SWITCH, 0); }
		public ITerminalNode EVENT() { return GetToken(XSharpParser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public ITerminalNode PARTIAL() { return GetToken(XSharpParser.PARTIAL, 0); }
		public ITerminalNode SEALED() { return GetToken(XSharpParser.SEALED, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(XSharpParser.ABSTRACT, 0); }
		public ITerminalNode UNSAFE() { return GetToken(XSharpParser.UNSAFE, 0); }
		public ITerminalNode SCOPE() { return GetToken(XSharpParser.SCOPE, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(XSharpParser.NAMESPACE, 0); }
		public ITerminalNode LOCK() { return GetToken(XSharpParser.LOCK, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode INITONLY() { return GetToken(XSharpParser.INITONLY, 0); }
		public ITerminalNode PROPERTY() { return GetToken(XSharpParser.PROPERTY, 0); }
		public ITerminalNode INTERFACE() { return GetToken(XSharpParser.INTERFACE, 0); }
		public ITerminalNode VOSTRUCT() { return GetToken(XSharpParser.VOSTRUCT, 0); }
		public ITerminalNode UNION() { return GetToken(XSharpParser.UNION, 0); }
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode OPERATOR() { return GetToken(XSharpParser.OPERATOR, 0); }
		public KeywordxsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordxs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordxs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordxs(this);
		}
	}

	[RuleVersion(0)]
	public KeywordxsContext keywordxs() {
		KeywordxsContext _localctx = new KeywordxsContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_keywordxs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3340;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)) | (1L << (FROM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordxppContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public KeywordxppContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordxpp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordxpp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordxpp(this);
		}
	}

	[RuleVersion(0)]
	public KeywordxppContext keywordxpp() {
		KeywordxppContext _localctx = new KeywordxppContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_keywordxpp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3342;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & ((1L << (ASSIGNMENT - 188)) | (1L << (EXPORTED - 188)) | (1L << (NOSAVE - 188)) | (1L << (READONLY - 188)) | (1L << (SHARING - 188)) | (1L << (SHARED - 188)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppclassModifiersContext Modifiers;
		public IToken C;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public IToken From;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _BaseTypes = new List<DatatypeContext>();
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public XppclassMemberContext _xppclassMember;
		public IList<XppclassMemberContext> _Members = new List<XppclassMemberContext>();
		public ITerminalNode ENDCLASS() { return GetToken(XSharpParser.ENDCLASS, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppclassModifiersContext xppclassModifiers() {
			return GetRuleContext<XppclassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public XppclassMemberContext[] xppclassMember() {
			return GetRuleContexts<XppclassMemberContext>();
		}
		public XppclassMemberContext xppclassMember(int i) {
			return GetRuleContext<XppclassMemberContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclass(this);
		}
	}

	[RuleVersion(0)]
	public XppclassContext xppclass() {
		XppclassContext _localctx = new XppclassContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_xppclass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3345;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3344; _localctx.Attributes = attributes();
				}
			}

			State = 3348;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL) {
				{
				State = 3347; _localctx.Modifiers = xppclassModifiers();
				}
			}

			State = 3350; _localctx.C = Match(CLASS);
			State = 3352;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,453,_ctx) ) {
			case 1:
				{
				State = 3351; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 3354; _localctx.Id = identifier();
			State = 3356;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3355; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 3367;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM || _la==SHARING) {
				{
				State = 3358;
				_localctx.From = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==FROM || _la==SHARING) ) {
					_localctx.From = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 3359; _localctx._datatype = datatype();
				_localctx._BaseTypes.Add(_localctx._datatype);
				State = 3364;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3360; Match(COMMA);
					State = 3361; _localctx._datatype = datatype();
					_localctx._BaseTypes.Add(_localctx._datatype);
					}
					}
					State = 3366;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3378;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 3369; Match(IMPLEMENTS);
				State = 3370; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 3375;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3371; Match(COMMA);
					State = 3372; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 3377;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3383;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 3380; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 3385;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3386; _localctx.e = eos();
			State = 3390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << CLASS) | (1L << HIDDEN) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (INTERNAL - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (UNSAFE - 144)) | (1L << (VAR - 144)) | (1L << (DEFERRED - 144)) | (1L << (EXPORTED - 144)) | (1L << (FINAL - 144)) | (1L << (INLINE - 144)) | (1L << (INTRODUCE - 144)) | (1L << (SYNC - 144)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				{
				State = 3387; _localctx._xppclassMember = xppclassMember();
				_localctx._Members.Add(_localctx._xppclassMember);
				}
				}
				State = 3392;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3393; Match(ENDCLASS);
			State = 3394; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FREEZE;
		public IToken _FINAL;
		public IToken _SEALED;
		public IToken _ABSTRACT;
		public IToken _tset10916;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] FREEZE() { return GetTokens(XSharpParser.FREEZE); }
		public ITerminalNode FREEZE(int i) {
			return GetToken(XSharpParser.FREEZE, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public XppclassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppclassModifiersContext xppclassModifiers() {
		XppclassModifiersContext _localctx = new XppclassModifiersContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_xppclassModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3397;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3396;
				_localctx._tset10916 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL) ) {
					_localctx._tset10916 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset10916);
				}
				}
				State = 3399;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassMemberContext : XSharpParserRuleContext {
		public XppclassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassMember; } }
	 
		public XppclassMemberContext() { }
		public virtual void CopyFrom(XppclassMemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class XppclsvisibilityContext : XppclassMemberContext {
		public XppmethodvisContext Member;
		public XppmethodvisContext xppmethodvis() {
			return GetRuleContext<XppmethodvisContext>(0);
		}
		public XppclsvisibilityContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvisibility(this);
		}
	}
	public partial class XppclsdeclaremethodContext : XppclassMemberContext {
		public XppdeclareMethodContext Member;
		public XppdeclareMethodContext xppdeclareMethod() {
			return GetRuleContext<XppdeclareMethodContext>(0);
		}
		public XppclsdeclaremethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsdeclaremethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsdeclaremethod(this);
		}
	}
	public partial class XppclsinlinemethodContext : XppclassMemberContext {
		public XppinlineMethodContext Member;
		public XppinlineMethodContext xppinlineMethod() {
			return GetRuleContext<XppinlineMethodContext>(0);
		}
		public XppclsinlinemethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsinlinemethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsinlinemethod(this);
		}
	}
	public partial class XppclspropertyContext : XppclassMemberContext {
		public XppdeclarepropertyContext Member;
		public XppdeclarepropertyContext xppdeclareproperty() {
			return GetRuleContext<XppdeclarepropertyContext>(0);
		}
		public XppclspropertyContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsproperty(this);
		}
	}
	public partial class XppclsvarsContext : XppclassMemberContext {
		public XppclassvarsContext Member;
		public XppclassvarsContext xppclassvars() {
			return GetRuleContext<XppclassvarsContext>(0);
		}
		public XppclsvarsContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassMemberContext xppclassMember() {
		XppclassMemberContext _localctx = new XppclassMemberContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_xppclassMember);
		try {
			State = 3406;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,462,_ctx) ) {
			case 1:
				_localctx = new XppclsvisibilityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3401; ((XppclsvisibilityContext)_localctx).Member = xppmethodvis();
				}
				break;

			case 2:
				_localctx = new XppclsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3402; ((XppclsvarsContext)_localctx).Member = xppclassvars();
				}
				break;

			case 3:
				_localctx = new XppclsinlinemethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3403; ((XppclsinlinemethodContext)_localctx).Member = xppinlineMethod();
				}
				break;

			case 4:
				_localctx = new XppclsdeclaremethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3404; ((XppclsdeclaremethodContext)_localctx).Member = xppdeclareMethod();
				}
				break;

			case 5:
				_localctx = new XppclspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3405; ((XppclspropertyContext)_localctx).Member = xppdeclareproperty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodvisContext : XSharpParserRuleContext {
		public XppvisibilityContext Vis;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppmethodvisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethodvis; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethodvis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethodvis(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodvisContext xppmethodvis() {
		XppmethodvisContext _localctx = new XppmethodvisContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_xppmethodvis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3408; _localctx.Vis = xppvisibility();
			State = 3409; Match(COLON);
			State = 3410; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvisibilityContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode HIDDEN() { return GetToken(XSharpParser.HIDDEN, 0); }
		public ITerminalNode PROTECTED() { return GetToken(XSharpParser.PROTECTED, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(XSharpParser.INTERNAL, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public XppvisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvisibility(this);
		}
	}

	[RuleVersion(0)]
	public XppvisibilityContext xppvisibility() {
		XppvisibilityContext _localctx = new XppvisibilityContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_xppvisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3412;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (HIDDEN - 34)) | (1L << (PRIVATE - 34)) | (1L << (PROTECTED - 34)) | (1L << (PUBLIC - 34)) | (1L << (INTERNAL - 34)))) != 0) || _la==EXPORTED) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclareMethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Methods = new List<IdentifierContext>();
		public XppisinContext Is;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppdeclmethodparamsContext[] xppdeclmethodparams() {
			return GetRuleContexts<XppdeclmethodparamsContext>();
		}
		public XppdeclmethodparamsContext xppdeclmethodparams(int i) {
			return GetRuleContext<XppdeclmethodparamsContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppdeclareMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclareMethodContext xppdeclareMethod() {
		XppdeclareMethodContext _localctx = new XppdeclareMethodContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_xppdeclareMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3415;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3414; _localctx.Attributes = attributes();
				}
			}

			State = 3418;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (UNSAFE - 144)) | (1L << (DEFERRED - 144)) | (1L << (FINAL - 144)) | (1L << (INTRODUCE - 144)) | (1L << (SYNC - 144)))) != 0)) {
				{
				State = 3417; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3420; Match(METHOD);
			State = 3421; _localctx._identifier = identifier();
			_localctx._Methods.Add(_localctx._identifier);
			State = 3423;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3422; xppdeclmethodparams();
				}
			}

			State = 3436;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				State = 3425; _localctx.Is = xppisin();
				}
				break;

			case 2:
				{
				State = 3433;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3426; Match(COMMA);
					State = 3427; _localctx._identifier = identifier();
					_localctx._Methods.Add(_localctx._identifier);
					State = 3429;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LPAREN) {
						{
						State = 3428; xppdeclmethodparams();
						}
					}

					}
					}
					State = 3435;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3438; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclmethodparamsContext : XSharpParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppdeclmethodparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclmethodparams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclmethodparams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclmethodparams(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclmethodparamsContext xppdeclmethodparams() {
		XppdeclmethodparamsContext _localctx = new XppdeclmethodparamsContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_xppdeclmethodparams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3440; Match(LPAREN);
			State = 3449;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				State = 3441; identifier();
				State = 3446;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3442; Match(COMMA);
					State = 3443; identifier();
					}
					}
					State = 3448;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3451; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppisinContext : XSharpParserRuleContext {
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public XppisinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppisin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppisin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppisin(this);
		}
	}

	[RuleVersion(0)]
	public XppisinContext xppisin() {
		XppisinContext _localctx = new XppisinContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_xppisin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3455;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IS) {
				{
				State = 3453; Match(IS);
				State = 3454; identifier();
				}
			}

			State = 3459;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 3457; Match(IN);
				State = 3458; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmemberModifiersContext : XSharpParserRuleContext {
		public IToken _DEFERRED;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FINAL;
		public IToken _INTRODUCE;
		public IToken _OVERRIDE;
		public IToken _CLASS;
		public IToken _SYNC;
		public IToken _STATIC;
		public IToken _ABSTRACT;
		public IToken _NEW;
		public IToken _ASYNC;
		public IToken _UNSAFE;
		public IToken _EXTERN;
		public IToken _VIRTUAL;
		public IToken _tset11154;
		public ITerminalNode[] DEFERRED() { return GetTokens(XSharpParser.DEFERRED); }
		public ITerminalNode DEFERRED(int i) {
			return GetToken(XSharpParser.DEFERRED, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public ITerminalNode[] INTRODUCE() { return GetTokens(XSharpParser.INTRODUCE); }
		public ITerminalNode INTRODUCE(int i) {
			return GetToken(XSharpParser.INTRODUCE, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public ITerminalNode[] SYNC() { return GetTokens(XSharpParser.SYNC); }
		public ITerminalNode SYNC(int i) {
			return GetToken(XSharpParser.SYNC, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] VIRTUAL() { return GetTokens(XSharpParser.VIRTUAL); }
		public ITerminalNode VIRTUAL(int i) {
			return GetToken(XSharpParser.VIRTUAL, i);
		}
		public XppmemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmemberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppmemberModifiersContext xppmemberModifiers() {
		XppmemberModifiersContext _localctx = new XppmemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_xppmemberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3462;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3461;
				_localctx._tset11154 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (UNSAFE - 144)) | (1L << (DEFERRED - 144)) | (1L << (FINAL - 144)) | (1L << (INTRODUCE - 144)) | (1L << (SYNC - 144)))) != 0)) ) {
					_localctx._tset11154 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11154);
				}
				}
				State = 3464;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (UNSAFE - 144)) | (1L << (DEFERRED - 144)) | (1L << (FINAL - 144)) | (1L << (INTRODUCE - 144)) | (1L << (SYNC - 144)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassvarsContext : XSharpParserRuleContext {
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Vars = new List<IdentifierContext>();
		public XppisinContext Is;
		public DatatypeContext DataType;
		public IToken Shared;
		public IToken ReadOnly;
		public XppvarassignmentContext Assignment;
		public IToken Nosave;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public XppvarassignmentContext xppvarassignment() {
			return GetRuleContext<XppvarassignmentContext>(0);
		}
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XppclassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassvarsContext xppclassvars() {
		XppclassvarsContext _localctx = new XppclassvarsContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_xppclassvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3467;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (UNSAFE - 144)) | (1L << (DEFERRED - 144)) | (1L << (FINAL - 144)) | (1L << (INTRODUCE - 144)) | (1L << (SYNC - 144)))) != 0)) {
				{
				State = 3466; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3469; Match(VAR);
			State = 3470; _localctx._identifier = identifier();
			_localctx._Vars.Add(_localctx._identifier);
			State = 3483;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				State = 3471; _localctx.Is = xppisin();
				}
				break;

			case 2:
				{
				{
				State = 3476;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3472; Match(COMMA);
					State = 3473; _localctx._identifier = identifier();
					_localctx._Vars.Add(_localctx._identifier);
					}
					}
					State = 3478;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3481;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 3479; Match(AS);
					State = 3480; _localctx.DataType = datatype();
					}
				}

				}
				}
				break;
			}
			State = 3486;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SHARED) {
				{
				State = 3485; _localctx.Shared = Match(SHARED);
				}
			}

			State = 3489;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==READONLY) {
				{
				State = 3488; _localctx.ReadOnly = Match(READONLY);
				}
			}

			State = 3492;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 3491; _localctx.Assignment = xppvarassignment();
				}
			}

			State = 3495;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOSAVE) {
				{
				State = 3494; _localctx.Nosave = Match(NOSAVE);
				}
			}

			State = 3497; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvarassignmentContext : XSharpParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppvarassignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvarassignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvarassignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvarassignment(this);
		}
	}

	[RuleVersion(0)]
	public XppvarassignmentContext xppvarassignment() {
		XppvarassignmentContext _localctx = new XppvarassignmentContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_xppvarassignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3499; Match(ASSIGNMENT);
			State = 3500; xppvisibility();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclarepropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public IToken M;
		public IdentifierContext Id;
		public IdentifierContext VarName;
		public DatatypeContext Type;
		public EosContext end;
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XppdeclarepropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareproperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareproperty(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclarepropertyContext xppdeclareproperty() {
		XppdeclarepropertyContext _localctx = new XppdeclarepropertyContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_xppdeclareproperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3503;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3502; _localctx.Attributes = attributes();
				}
			}

			State = 3505; _localctx.Accessors = xppaccessors();
			State = 3507;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (UNSAFE - 144)) | (1L << (DEFERRED - 144)) | (1L << (FINAL - 144)) | (1L << (INTRODUCE - 144)) | (1L << (SYNC - 144)))) != 0)) {
				{
				State = 3506; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3509; _localctx.M = Match(METHOD);
			State = 3510; _localctx.Id = identifier();
			State = 3513;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VAR) {
				{
				State = 3511; Match(VAR);
				State = 3512; _localctx.VarName = identifier();
				}
			}

			State = 3517;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3515; Match(AS);
				State = 3516; _localctx.Type = datatype();
				}
			}

			State = 3519; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppaccessorsContext : XSharpParserRuleContext {
		public IToken _ACCESS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _ASSIGN;
		public IToken _tset11388;
		public ITerminalNode[] ACCESS() { return GetTokens(XSharpParser.ACCESS); }
		public ITerminalNode ACCESS(int i) {
			return GetToken(XSharpParser.ACCESS, i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(XSharpParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(XSharpParser.ASSIGN, i);
		}
		public XppaccessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppaccessors; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppaccessors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppaccessors(this);
		}
	}

	[RuleVersion(0)]
	public XppaccessorsContext xppaccessors() {
		XppaccessorsContext _localctx = new XppaccessorsContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_xppaccessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3522;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3521;
				_localctx._tset11388 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ACCESS || _la==ASSIGN) ) {
					_localctx._tset11388 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11388);
				}
				}
				State = 3524;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ACCESS || _la==ASSIGN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public IToken M;
		public IdentifierContext ClassId;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode[] METHOD() { return GetTokens(XSharpParser.METHOD); }
		public ITerminalNode METHOD(int i) {
			return GetToken(XSharpParser.METHOD, i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public XppmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethod(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodContext xppmethod() {
		XppmethodContext _localctx = new XppmethodContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_xppmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3527;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3526; _localctx.Attributes = attributes();
				}
			}

			State = 3530;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ACCESS || _la==ASSIGN) {
				{
				State = 3529; _localctx.Accessors = xppaccessors();
				}
			}

			State = 3533;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (UNSAFE - 144)) | (1L << (DEFERRED - 144)) | (1L << (FINAL - 144)) | (1L << (INTRODUCE - 144)) | (1L << (SYNC - 144)))) != 0)) {
				{
				State = 3532; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3535; _localctx.M = Match(METHOD);
			State = 3539;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				State = 3536; _localctx.ClassId = identifier();
				State = 3537; Match(COLON);
				}
				break;
			}
			State = 3541; _localctx.Sig = signature();
			State = 3542; _localctx.end = eos();
			State = 3543; _localctx.StmtBlk = statementBlock();
			State = 3547;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				State = 3544; Match(END);
				State = 3545; Match(METHOD);
				State = 3546; eos();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppinlineMethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken I;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode[] METHOD() { return GetTokens(XSharpParser.METHOD); }
		public ITerminalNode METHOD(int i) {
			return GetToken(XSharpParser.METHOD, i);
		}
		public ITerminalNode INLINE() { return GetToken(XSharpParser.INLINE, 0); }
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public XppinlineMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppinlineMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppinlineMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppinlineMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppinlineMethodContext xppinlineMethod() {
		XppinlineMethodContext _localctx = new XppinlineMethodContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_xppinlineMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3550;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3549; _localctx.Attributes = attributes();
				}
			}

			State = 3552; _localctx.I = Match(INLINE);
			State = 3554;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ACCESS || _la==ASSIGN) {
				{
				State = 3553; _localctx.Accessors = xppaccessors();
				}
			}

			State = 3557;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (UNSAFE - 144)) | (1L << (DEFERRED - 144)) | (1L << (FINAL - 144)) | (1L << (INTRODUCE - 144)) | (1L << (SYNC - 144)))) != 0)) {
				{
				State = 3556; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3559; Match(METHOD);
			State = 3560; _localctx.Sig = signature();
			State = 3561; _localctx.end = eos();
			State = 3562; _localctx.StmtBlk = statementBlock();
			State = 3566;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==END) {
				{
				State = 3563; Match(END);
				State = 3564; Match(METHOD);
				State = 3565; eos();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordfoxContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode OLEPUBLIC() { return GetToken(XSharpParser.OLEPUBLIC, 0); }
		public ITerminalNode EACH() { return GetToken(XSharpParser.EACH, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(XSharpParser.EXCLUDE, 0); }
		public ITerminalNode THISACCESS() { return GetToken(XSharpParser.THISACCESS, 0); }
		public ITerminalNode HELPSTRING() { return GetToken(XSharpParser.HELPSTRING, 0); }
		public ITerminalNode NOINIT() { return GetToken(XSharpParser.NOINIT, 0); }
		public ITerminalNode FOX_AND() { return GetToken(XSharpParser.FOX_AND, 0); }
		public ITerminalNode FOX_OR() { return GetToken(XSharpParser.FOX_OR, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public ITerminalNode FOX_XOR() { return GetToken(XSharpParser.FOX_XOR, 0); }
		public ITerminalNode THEN() { return GetToken(XSharpParser.THEN, 0); }
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public KeywordfoxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordfox; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordfox(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordfox(this);
		}
	}

	[RuleVersion(0)]
	public KeywordfoxContext keywordfox() {
		KeywordfoxContext _localctx = new KeywordfoxContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_keywordfox);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3568;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & ((1L << (OLEPUBLIC - 203)) | (1L << (EXCLUDE - 203)) | (1L << (THISACCESS - 203)) | (1L << (HELPSTRING - 203)) | (1L << (NOINIT - 203)) | (1L << (EACH - 203)) | (1L << (THEN - 203)) | (1L << (FOX_M - 203)))) != 0) || ((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & ((1L << (FOX_AND - 273)) | (1L << (FOX_OR - 273)) | (1L << (FOX_NOT - 273)) | (1L << (FOX_XOR - 273)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken D;
		public ClassModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public FoxclassmemberContext _foxclassmember;
		public IList<FoxclassmemberContext> _Members = new List<FoxclassmemberContext>();
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] DEFINE() { return GetTokens(XSharpParser.DEFINE); }
		public ITerminalNode DEFINE(int i) {
			return GetToken(XSharpParser.DEFINE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ENDDEFINE() { return GetToken(XSharpParser.ENDDEFINE, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public ITerminalNode OLEPUBLIC() { return GetToken(XSharpParser.OLEPUBLIC, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public FoxclassmemberContext[] foxclassmember() {
			return GetRuleContexts<FoxclassmemberContext>();
		}
		public FoxclassmemberContext foxclassmember(int i) {
			return GetRuleContext<FoxclassmemberContext>(i);
		}
		public FoxclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclass(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassContext foxclass() {
		FoxclassContext _localctx = new FoxclassContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_foxclass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3571;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3570; _localctx.Attributes = attributes();
				}
			}

			State = 3573; _localctx.D = Match(DEFINE);
			State = 3575;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 3574; _localctx.Modifiers = classModifiers();
				}
			}

			State = 3577; Match(CLASS);
			State = 3579;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				State = 3578; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 3581; _localctx.Id = identifier();
			State = 3583;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3582; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 3587;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3585; Match(AS);
				State = 3586; _localctx.BaseType = datatype();
				}
			}

			State = 3590;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OF) {
				{
				State = 3589; foxclasslib();
				}
			}

			State = 3595;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 3592; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 3597;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3599;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OLEPUBLIC) {
				{
				State = 3598; Match(OLEPUBLIC);
				}
			}

			State = 3601; _localctx.e = eos();
			State = 3605;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,504,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3602; _localctx._foxclassmember = foxclassmember();
					_localctx._Members.Add(_localctx._foxclassmember);
					}
					} 
				}
				State = 3607;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,504,_ctx);
			}
			State = 3611;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENDDEFINE:
				{
				State = 3608; Match(ENDDEFINE);
				}
				break;
			case END:
				{
				State = 3609; Match(END);
				State = 3610; Match(DEFINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3613; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassmemberContext : XSharpParserRuleContext {
		public FoxclassmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclassmember; } }
	 
		public FoxclassmemberContext() { }
		public virtual void CopyFrom(FoxclassmemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FoximplementsContext : FoxclassmemberContext {
		public FoximplementsclauseContext Member;
		public FoximplementsclauseContext foximplementsclause() {
			return GetRuleContext<FoximplementsclauseContext>(0);
		}
		public FoximplementsContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoximplements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoximplements(this);
		}
	}
	public partial class FoxaddobjectContext : FoxclassmemberContext {
		public FoxaddobjectclauseContext Member;
		public FoxaddobjectclauseContext foxaddobjectclause() {
			return GetRuleContext<FoxaddobjectclauseContext>(0);
		}
		public FoxaddobjectContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxaddobject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxaddobject(this);
		}
	}
	public partial class FoxclsvarinitContext : FoxclassmemberContext {
		public FoxfieldContext Member;
		public FoxfieldContext foxfield() {
			return GetRuleContext<FoxfieldContext>(0);
		}
		public FoxclsvarinitContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsvarinit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsvarinit(this);
		}
	}
	public partial class FoxclsmethodContext : FoxclassmemberContext {
		public FoxmethodContext Member;
		public FoxmethodContext foxmethod() {
			return GetRuleContext<FoxmethodContext>(0);
		}
		public FoxclsmethodContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsmethod(this);
		}
	}
	public partial class FoxclsdtorContext : FoxclassmemberContext {
		public DestructorContext Member;
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public FoxclsdtorContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsdtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsdtor(this);
		}
	}
	public partial class FoxclsvarsContext : FoxclassmemberContext {
		public FoxclassvarsContext Member;
		public FoxclassvarsContext foxclassvars() {
			return GetRuleContext<FoxclassvarsContext>(0);
		}
		public FoxclsvarsContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsvars(this);
		}
	}
	public partial class FoxpemcomContext : FoxclassmemberContext {
		public FoxpemcomattribContext Member;
		public FoxpemcomattribContext foxpemcomattrib() {
			return GetRuleContext<FoxpemcomattribContext>(0);
		}
		public FoxpemcomContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxpemcom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxpemcom(this);
		}
	}
	public partial class FoxclsctorContext : FoxclassmemberContext {
		public ConstructorContext Member;
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public FoxclsctorContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsctor(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassmemberContext foxclassmember() {
		FoxclassmemberContext _localctx = new FoxclassmemberContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_foxclassmember);
		try {
			State = 3623;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,506,_ctx) ) {
			case 1:
				_localctx = new FoxclsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3615; ((FoxclsvarsContext)_localctx).Member = foxclassvars();
				}
				break;

			case 2:
				_localctx = new FoxclsvarinitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3616; ((FoxclsvarinitContext)_localctx).Member = foxfield();
				}
				break;

			case 3:
				_localctx = new FoxclsmethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3617; ((FoxclsmethodContext)_localctx).Member = foxmethod();
				}
				break;

			case 4:
				_localctx = new FoximplementsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3618; ((FoximplementsContext)_localctx).Member = foximplementsclause();
				}
				break;

			case 5:
				_localctx = new FoxaddobjectContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3619; ((FoxaddobjectContext)_localctx).Member = foxaddobjectclause();
				}
				break;

			case 6:
				_localctx = new FoxpemcomContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 3620; ((FoxpemcomContext)_localctx).Member = foxpemcomattrib();
				}
				break;

			case 7:
				_localctx = new FoxclsctorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 3621; ((FoxclsctorContext)_localctx).Member = constructor();
				}
				break;

			case 8:
				_localctx = new FoxclsdtorContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 3622; ((FoxclsdtorContext)_localctx).Member = destructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public IToken HelpString;
		public ExpressionContext HelpText;
		public IToken ThisAccess;
		public IdentifierContext MemberId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public FuncproctypeContext T2;
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public ITerminalNode HELPSTRING() { return GetToken(XSharpParser.HELPSTRING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THISACCESS() { return GetToken(XSharpParser.THISACCESS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FoxmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmethod(this);
		}
	}

	[RuleVersion(0)]
	public FoxmethodContext foxmethod() {
		FoxmethodContext _localctx = new FoxmethodContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_foxmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3626;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3625; _localctx.Attributes = attributes();
				}
			}

			State = 3629;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 3628; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 3631; _localctx.T = funcproctype();
			State = 3632; _localctx.Sig = signature();
			State = 3635;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==HELPSTRING) {
				{
				State = 3633; _localctx.HelpString = Match(HELPSTRING);
				State = 3634; _localctx.HelpText = expression(0);
				}
			}

			State = 3642;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==THISACCESS) {
				{
				State = 3637; _localctx.ThisAccess = Match(THISACCESS);
				State = 3638; Match(LPAREN);
				State = 3639; _localctx.MemberId = identifier();
				State = 3640; Match(RPAREN);
				}
			}

			State = 3644; _localctx.end = eos();
			State = 3645; _localctx.StmtBlk = statementBlock();
			State = 3650;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				State = 3646; Match(END);
				State = 3647; _localctx.T2 = funcproctype();
				State = 3648; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassvarsContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public IToken Fld;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Vars = new List<IdentifierContext>();
		public DatatypeContext DataType;
		public EosContext end;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclassvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclassvars(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassvarsContext foxclassvars() {
		FoxclassvarsContext _localctx = new FoxclassvarsContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_foxclassvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3653;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,512,_ctx) ) {
			case 1:
				{
				State = 3652; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 3656;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,513,_ctx) ) {
			case 1:
				{
				State = 3655; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3659;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				State = 3658; _localctx.Fld = Match(FIELD);
				}
				break;
			}
			State = 3661; _localctx._identifier = identifier();
			_localctx._Vars.Add(_localctx._identifier);
			State = 3666;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3662; Match(COMMA);
				State = 3663; _localctx._identifier = identifier();
				_localctx._Vars.Add(_localctx._identifier);
				}
				}
				State = 3668;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3671;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3669; Match(AS);
				State = 3670; _localctx.DataType = datatype();
				}
			}

			State = 3673; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxfieldContext : XSharpParserRuleContext {
		public ClassvarModifiersContext Modifiers;
		public IToken Fld;
		public FoxfieldinitializerContext F;
		public EosContext end;
		public FoxfieldinitializerContext foxfieldinitializer() {
			return GetRuleContext<FoxfieldinitializerContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public FoxfieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxfield; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxfield(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxfield(this);
		}
	}

	[RuleVersion(0)]
	public FoxfieldContext foxfield() {
		FoxfieldContext _localctx = new FoxfieldContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_foxfield);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3676;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				State = 3675; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3679;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,518,_ctx) ) {
			case 1:
				{
				State = 3678; _localctx.Fld = Match(FIELD);
				}
				break;
			}
			State = 3681; _localctx.F = foxfieldinitializer();
			State = 3682; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxfieldinitializerContext : XSharpParserRuleContext {
		public NameContext Name;
		public ExpressionContext Expr;
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoxfieldinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxfieldinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxfieldinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxfieldinitializer(this);
		}
	}

	[RuleVersion(0)]
	public FoxfieldinitializerContext foxfieldinitializer() {
		FoxfieldinitializerContext _localctx = new FoxfieldinitializerContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_foxfieldinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3684; _localctx.Name = name(0);
			State = 3685; assignoperator();
			State = 3686; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoximplementsclauseContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public IToken Excl;
		public ExpressionContext Library;
		public EosContext end;
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(XSharpParser.EXCLUDE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoximplementsclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foximplementsclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoximplementsclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoximplementsclause(this);
		}
	}

	[RuleVersion(0)]
	public FoximplementsclauseContext foximplementsclause() {
		FoximplementsclauseContext _localctx = new FoximplementsclauseContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_foximplementsclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3688; Match(IMPLEMENTS);
			State = 3689; _localctx.Type = datatype();
			State = 3691;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXCLUDE) {
				{
				State = 3690; _localctx.Excl = Match(EXCLUDE);
				}
			}

			State = 3695;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 3693; Match(IN);
				State = 3694; _localctx.Library = expression(0);
				}
			}

			State = 3697; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxaddobjectclauseContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken NoInit;
		public FoxfieldinitializerContext _foxfieldinitializer;
		public IList<FoxfieldinitializerContext> _FieldsInits = new List<FoxfieldinitializerContext>();
		public EosContext end;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode OBJECT() { return GetToken(XSharpParser.OBJECT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode NOINIT() { return GetToken(XSharpParser.NOINIT, 0); }
		public FoxfieldinitializerContext[] foxfieldinitializer() {
			return GetRuleContexts<FoxfieldinitializerContext>();
		}
		public FoxfieldinitializerContext foxfieldinitializer(int i) {
			return GetRuleContext<FoxfieldinitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxaddobjectclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxaddobjectclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxaddobjectclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxaddobjectclause(this);
		}
	}

	[RuleVersion(0)]
	public FoxaddobjectclauseContext foxaddobjectclause() {
		FoxaddobjectclauseContext _localctx = new FoxaddobjectclauseContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_foxaddobjectclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3700;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3699; _localctx.Attributes = attributes();
				}
			}

			State = 3702; Match(ADD);
			State = 3703; Match(OBJECT);
			State = 3705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,522,_ctx) ) {
			case 1:
				{
				State = 3704; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3707; _localctx.Id = identifier();
			State = 3708; Match(AS);
			State = 3709; _localctx.Type = datatype();
			State = 3711;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOINIT) {
				{
				State = 3710; _localctx.NoInit = Match(NOINIT);
				}
			}

			State = 3722;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 3713; Match(WITH);
				State = 3714; _localctx._foxfieldinitializer = foxfieldinitializer();
				_localctx._FieldsInits.Add(_localctx._foxfieldinitializer);
				State = 3719;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3715; Match(COMMA);
					State = 3716; _localctx._foxfieldinitializer = foxfieldinitializer();
					_localctx._FieldsInits.Add(_localctx._foxfieldinitializer);
					}
					}
					State = 3721;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3724; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxpemcomattribContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public EosContext end;
		public ITerminalNode DIMENSION() { return GetToken(XSharpParser.DIMENSION, 0); }
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public FoxpemcomattribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxpemcomattrib; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxpemcomattrib(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxpemcomattrib(this);
		}
	}

	[RuleVersion(0)]
	public FoxpemcomattribContext foxpemcomattrib() {
		FoxpemcomattribContext _localctx = new FoxpemcomattribContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_foxpemcomattrib);
		int _la;
		try {
			State = 3756;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,528,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3726; Match(DIMENSION);
				State = 3727; _localctx.Id = identifier();
				State = 3728; Match(LBRKT);
				State = 3729; expression(0);
				State = 3732;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3730; Match(COMMA);
					State = 3731; expression(0);
					}
				}

				State = 3734; Match(RBRKT);
				State = 3735; _localctx.end = eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3737; Match(DIMENSION);
				State = 3738; _localctx.Id = identifier();
				State = 3739; Match(LPAREN);
				State = 3740; expression(0);
				State = 3743;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3741; Match(COMMA);
					State = 3742; expression(0);
					}
				}

				State = 3745; Match(RPAREN);
				State = 3746; _localctx.end = eos();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3748; _localctx.Id = identifier();
				State = 3749; Match(LBRKT);
				State = 3750; expression(0);
				State = 3751; Match(RBRKT);
				State = 3752; assignoperator();
				State = 3753; expression(0);
				State = 3754; _localctx.end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return foxsource_sempred((FoxsourceContext)_localctx, predIndex);

		case 5: return entity_sempred((EntityContext)_localctx, predIndex);

		case 44: return eventLineAccessor_sempred((EventLineAccessorContext)_localctx, predIndex);

		case 53: return propertyLineAccessor_sempred((PropertyLineAccessorContext)_localctx, predIndex);

		case 57: return classmember_sempred((ClassmemberContext)_localctx, predIndex);

		case 76: return filewidememvar_sempred((FilewidememvarContext)_localctx, predIndex);

		case 77: return statement_sempred((StatementContext)_localctx, predIndex);

		case 85: return localdecl_sempred((LocaldeclContext)_localctx, predIndex);

		case 86: return localvar_sempred((LocalvarContext)_localctx, predIndex);

		case 101: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 102: return primary_sempred((PrimaryContext)_localctx, predIndex);

		case 103: return boundExpression_sempred((BoundExpressionContext)_localctx, predIndex);

		case 104: return aliasExpression_sempred((AliasExpressionContext)_localctx, predIndex);

		case 115: return namedArgument_sempred((NamedArgumentContext)_localctx, predIndex);

		case 117: return nameDot_sempred((NameDotContext)_localctx, predIndex);

		case 118: return name_sempred((NameContext)_localctx, predIndex);

		case 149: return identifier_sempred((IdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool foxsource_sempred(FoxsourceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return HasMemVars;
		}
		return true;
	}
	private bool entity_sempred(EntityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return IsFox;

		case 2: return IsXPP;

		case 3: return IsVO;

		case 4: return IsVO;

		case 5: return !IsXPP;

		case 6: return IsXPP;

		case 7: return HasMemVars;

		case 8: return IsFox;
		}
		return true;
	}
	private bool eventLineAccessor_sempred(EventLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return InputStream.La(2) != REMOVE;

		case 10: return InputStream.La(2) != ADD;
		}
		return true;
	}
	private bool propertyLineAccessor_sempred(PropertyLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return InputStream.La(2) != SET && InputStream.La(2) != INIT;

		case 12: return InputStream.La(2) != GET && InputStream.La(2) != UDCSEP;
		}
		return true;
	}
	private bool classmember_sempred(ClassmemberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return IsVO;
		}
		return true;
	}
	private bool filewidememvar_sempred(FilewidememvarContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return !IsFox ;

		case 15: return IsFox  ;
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return IsFox;

		case 17: return !IsFox && HasMemVars;

		case 18: return IsFox && HasMemVars;

		case 19: return validExpressionStmt();
		}
		return true;
	}
	private bool localdecl_sempred(LocaldeclContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return !XSharpLexer.IsKeyword(InputStream.La(2));
		}
		return true;
	}
	private bool localvar_sempred(LocalvarContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return IsFox;
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return IsTypeCastAllowed() ;

		case 23: return InputStream.La(2) != LPAREN ;

		case 24: return Precpred(_ctx, 16);

		case 25: return Precpred(_ctx, 15);

		case 26: return Precpred(_ctx, 14);

		case 27: return Precpred(_ctx, 13);

		case 28: return Precpred(_ctx, 12);

		case 29: return Precpred(_ctx, 11);

		case 30: return Precpred(_ctx, 10);

		case 31: return Precpred(_ctx, 9);

		case 32: return Precpred(_ctx, 8);

		case 33: return Precpred(_ctx, 6);

		case 34: return Precpred(_ctx, 5);

		case 35: return Precpred(_ctx, 4);

		case 36: return Precpred(_ctx, 3);

		case 37: return Precpred(_ctx, 2);

		case 38: return Precpred(_ctx, 31);

		case 39: return Precpred(_ctx, 29);

		case 40: return Precpred(_ctx, 27);

		case 41: return Precpred(_ctx, 25);

		case 42: return Precpred(_ctx, 24);

		case 43: return Precpred(_ctx, 22);

		case 44: return Precpred(_ctx, 18);

		case 45: return Precpred(_ctx, 17);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 46: return ExpectToken(LCURLY);

		case 47: return ExpectToken(LCURLY);

		case 48: return ExpectToken(LPAREN);

		case 49: return ExpectToken(LPAREN);

		case 50: return ExpectToken(LPAREN);

		case 51: return ExpectToken(LPAREN);

		case 52: return ExpectToken(ALIAS);
		}
		return true;
	}
	private bool boundExpression_sempred(BoundExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(_ctx, 3);

		case 54: return Precpred(_ctx, 6);

		case 55: return Precpred(_ctx, 5);

		case 56: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool aliasExpression_sempred(AliasExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return HasMemVars;

		case 58: return InputStream.La(4) != LPAREN;

		case 59: return InputStream.La(6) != LPAREN;
		}
		return true;
	}
	private bool namedArgument_sempred(NamedArgumentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return AllowNamedArgs;
		}
		return true;
	}
	private bool nameDot_sempred(NameDotContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return !IsCoreVO;

		case 64: return !IsCoreVO;
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x15F\xEB1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x179\n\x2\f\x2\xE\x2\x17C"+
		"\v\x2\x3\x2\a\x2\x17F\n\x2\f\x2\xE\x2\x182\v\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x3\x5\x3\x189\n\x3\x3\x4\x3\x4\x5\x4\x18D\n\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\a\x5\x193\n\x5\f\x5\xE\x5\x196\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x19C"+
		"\n\x6\f\x6\xE\x6\x19F\v\x6\x3\x6\x3\x6\a\x6\x1A3\n\x6\f\x6\xE\x6\x1A6"+
		"\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1CA\n\a\x3\b\x6\b\x1CD\n\b"+
		"\r\b\xE\b\x1CE\x3\t\x5\t\x1D2\n\t\x3\t\x5\t\x1D5\n\t\x3\t\x3\t\x3\t\x5"+
		"\t\x1DA\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x1E3\n\t\x3\t\x5\t"+
		"\x1E6\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x1F1\n\t\x5"+
		"\t\x1F3\n\t\x3\n\x3\n\x3\v\x3\v\x5\v\x1F9\n\v\x3\v\x5\v\x1FC\n\v\x3\v"+
		"\x3\v\x5\v\x200\n\v\x3\v\a\v\x203\n\v\f\v\xE\v\x206\v\v\x3\v\x5\v\x209"+
		"\n\v\x3\v\x3\v\x5\v\x20D\n\v\x3\f\x3\f\x5\f\x211\n\f\x3\f\x3\f\x5\f\x215"+
		"\n\f\x3\r\x3\r\x3\xE\x5\xE\x21A\n\xE\x3\xE\x5\xE\x21D\n\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x5\xE\x223\n\xE\x3\xE\x3\xE\x5\xE\x227\n\xE\x3\xE\x5\xE\x22A"+
		"\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x230\n\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x5\xE\x236\n\xE\x3\xE\x5\xE\x239\n\xE\x3\xE\x3\xE\x5\xE\x23D\n\xE\x5"+
		"\xE\x23F\n\xE\x3\xE\x5\xE\x242\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x5"+
		"\x10\x249\n\x10\x3\x10\x5\x10\x24C\n\x10\x3\x10\x3\x10\x5\x10\x250\n\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x257\n\x10\x3\x10\x3\x10\x5"+
		"\x10\x25B\n\x10\x3\x10\x3\x10\x3\x10\a\x10\x260\n\x10\f\x10\xE\x10\x263"+
		"\v\x10\x5\x10\x265\n\x10\x3\x10\x3\x10\x3\x11\x5\x11\x26A\n\x11\x3\x11"+
		"\x3\x11\x5\x11\x26E\n\x11\x3\x11\x5\x11\x271\n\x11\x3\x12\x3\x12\x3\x12"+
		"\x5\x12\x276\n\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\x27E"+
		"\n\x13\f\x13\xE\x13\x281\v\x13\x5\x13\x283\n\x13\x3\x13\x3\x13\x3\x14"+
		"\x5\x14\x288\n\x14\x3\x14\x5\x14\x28B\n\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x5\x14\x291\n\x14\x3\x14\x3\x14\x3\x14\x5\x14\x296\n\x14\x3\x14\x5\x14"+
		"\x299\n\x14\x3\x15\x3\x15\x5\x15\x29D\n\x15\x3\x16\a\x16\x2A0\n\x16\f"+
		"\x16\xE\x16\x2A3\v\x16\x3\x17\x6\x17\x2A6\n\x17\r\x17\xE\x17\x2A7\x3\x18"+
		"\x3\x18\x5\x18\x2AC\n\x18\x3\x18\x3\x18\x3\x18\x5\x18\x2B1\n\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x19\x5\x19\x2B7\n\x19\x3\x19\x5\x19\x2BA\n\x19\x3\x19"+
		"\x3\x19\x5\x19\x2BE\n\x19\x3\x19\x3\x19\x3\x19\a\x19\x2C3\n\x19\f\x19"+
		"\xE\x19\x2C6\v\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2CB\n\x19\x3\x19\x3\x19"+
		"\x5\x19\x2CF\n\x19\x3\x19\x3\x19\x3\x19\a\x19\x2D4\n\x19\f\x19\xE\x19"+
		"\x2D7\v\x19\x3\x19\x3\x19\x5\x19\x2DB\n\x19\x3\x1A\x5\x1A\x2DE\n\x1A\x3"+
		"\x1A\x5\x1A\x2E1\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2E5\n\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x5\x1A\x2EA\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x5\x1A\x2F3\n\x1A\x3\x1B\x3\x1B\x3\x1C\x5\x1C\x2F8\n\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x300\n\x1C\x3\x1C\x3\x1C\x3\x1D\x5"+
		"\x1D\x305\n\x1D\x3\x1D\x3\x1D\x5\x1D\x309\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5"+
		"\x1D\x30E\n\x1D\x3\x1D\x3\x1D\x6\x1D\x312\n\x1D\r\x1D\xE\x1D\x313\x3\x1D"+
		"\x3\x1D\x3\x1D\x5\x1D\x319\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x5\x1E\x323\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x5\x1E\x32B\n\x1E\x3\x1E\x3\x1E\x5\x1E\x32F\n\x1E\x3\x1F\x5\x1F"+
		"\x332\n\x1F\x3\x1F\x3\x1F\x5\x1F\x336\n\x1F\x3\x1F\x3\x1F\x3\x1F\x6\x1F"+
		"\x33B\n\x1F\r\x1F\xE\x1F\x33C\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x342\n\x1F\x3"+
		" \x6 \x345\n \r \xE \x346\x3!\x3!\x3!\x3!\x3!\a!\x34E\n!\f!\xE!\x351\v"+
		"!\x3!\x3!\x3!\x5!\x356\n!\x3\"\x5\"\x359\n\"\x3\"\x5\"\x35C\n\"\x3\"\x3"+
		"\"\x5\"\x360\n\"\x3\"\x3\"\x5\"\x364\n\"\x3\"\x3\"\x5\"\x368\n\"\x3\""+
		"\x3\"\a\"\x36C\n\"\f\"\xE\"\x36F\v\"\x3\"\a\"\x372\n\"\f\"\xE\"\x375\v"+
		"\"\x3\"\x3\"\a\"\x379\n\"\f\"\xE\"\x37C\v\"\x3\"\x3\"\x3\"\x3\"\x3#\x5"+
		"#\x383\n#\x3#\x5#\x386\n#\x3#\x3#\x5#\x38A\n#\x3#\x3#\x5#\x38E\n#\x3#"+
		"\x3#\x5#\x392\n#\x3#\x3#\x3#\x3#\a#\x398\n#\f#\xE#\x39B\v#\x5#\x39D\n"+
		"#\x3#\a#\x3A0\n#\f#\xE#\x3A3\v#\x3#\x3#\a#\x3A7\n#\f#\xE#\x3AA\v#\x3#"+
		"\x3#\x3#\x3#\x3$\x6$\x3B1\n$\r$\xE$\x3B2\x3%\x3%\x3%\x3%\x5%\x3B9\n%\x3"+
		"%\a%\x3BC\n%\f%\xE%\x3BF\v%\x3%\x3%\x3&\x5&\x3C4\n&\x3&\x5&\x3C7\n&\x3"+
		"&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\a\'\x3D1\n\'\f\'\xE\'\x3D4\v\'\x3"+
		"(\x3(\x3(\x3(\x3(\x5(\x3DB\n(\x3)\x5)\x3DE\n)\x3)\x5)\x3E1\n)\x3)\x3)"+
		"\x5)\x3E5\n)\x3)\x3)\x5)\x3E9\n)\x3)\x3)\x3)\x3)\a)\x3EF\n)\f)\xE)\x3F2"+
		"\v)\x5)\x3F4\n)\x3)\a)\x3F7\n)\f)\xE)\x3FA\v)\x3)\x3)\a)\x3FE\n)\f)\xE"+
		")\x401\v)\x3)\x3)\x3)\x3)\x3*\x5*\x408\n*\x3*\x5*\x40B\n*\x3*\x3*\x5*"+
		"\x40F\n*\x3*\x3*\x5*\x413\n*\x3*\x5*\x416\n*\x3*\x3*\x5*\x41A\n*\x3*\a"+
		"*\x41D\n*\f*\xE*\x420\v*\x3*\x5*\x423\n*\x3*\x3*\x3+\x5+\x428\n+\x3+\x5"+
		"+\x42B\n+\x3+\x3+\x5+\x42F\n+\x3+\x3+\x3+\x5+\x434\n+\x3+\x3+\x6+\x438"+
		"\n+\r+\xE+\x439\x3+\x3+\x5+\x43E\n+\x3+\x3+\x3,\x5,\x443\n,\x3,\x5,\x446"+
		"\n,\x3,\x3,\x3,\x3,\x5,\x44C\n,\x3,\x3,\x3-\x5-\x451\n-\x3-\x5-\x454\n"+
		"-\x3-\x3-\x5-\x458\n-\x3-\x3-\x3-\x5-\x45D\n-\x3-\x3-\x6-\x461\n-\r-\xE"+
		"-\x462\x3-\x3-\x3-\x3-\x6-\x469\n-\r-\xE-\x46A\x3-\x3-\x5-\x46F\n-\x3"+
		"-\x3-\x5-\x473\n-\x3.\x5.\x476\n.\x3.\x5.\x479\n.\x3.\x3.\x3.\x5.\x47E"+
		"\n.\x3.\x3.\x3.\x5.\x483\n.\x3.\x5.\x486\n.\x3/\x5/\x489\n/\x3/\x5/\x48C"+
		"\n/\x3/\x3/\x3/\x3/\x3/\x5/\x493\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5"+
		"/\x49D\n/\x3/\x3/\x3/\x5/\x4A2\n/\x3/\x3/\x3\x30\x5\x30\x4A7\n\x30\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\a\x30\x4AD\n\x30\f\x30\xE\x30\x4B0\v\x30\x3"+
		"\x30\x3\x30\x3\x31\x6\x31\x4B5\n\x31\r\x31\xE\x31\x4B6\x3\x32\x5\x32\x4BA"+
		"\n\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x4C1\n\x32\x3\x32\x3"+
		"\x32\x3\x32\x5\x32\x4C6\n\x32\x3\x32\x3\x32\x5\x32\x4CA\n\x32\x3\x33\x3"+
		"\x33\x3\x33\x3\x33\x6\x33\x4D0\n\x33\r\x33\xE\x33\x4D1\x3\x33\x3\x33\x3"+
		"\x33\x6\x33\x4D7\n\x33\r\x33\xE\x33\x4D8\x3\x33\x5\x33\x4DC\n\x33\x3\x34"+
		"\x5\x34\x4DF\n\x34\x3\x34\x5\x34\x4E2\n\x34\x3\x34\x3\x34\x5\x34\x4E6"+
		"\n\x34\x3\x34\x3\x34\x5\x34\x4EA\n\x34\x3\x34\x5\x34\x4ED\n\x34\x3\x34"+
		"\x3\x34\x5\x34\x4F1\n\x34\x3\x34\x3\x34\a\x34\x4F5\n\x34\f\x34\xE\x34"+
		"\x4F8\v\x34\x3\x34\x3\x34\x3\x34\x5\x34\x4FD\n\x34\x3\x34\x3\x34\x6\x34"+
		"\x501\n\x34\r\x34\xE\x34\x502\x3\x34\x3\x34\x3\x34\x3\x34\x6\x34\x509"+
		"\n\x34\r\x34\xE\x34\x50A\x3\x34\x3\x34\x5\x34\x50F\n\x34\x3\x34\x3\x34"+
		"\x5\x34\x513\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\a\x35\x519\n\x35\f\x35"+
		"\xE\x35\x51C\v\x35\x5\x35\x51E\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\a\x35\x525\n\x35\f\x35\xE\x35\x528\v\x35\x5\x35\x52A\n\x35\x3\x35\x5"+
		"\x35\x52D\n\x35\x3\x36\x5\x36\x530\n\x36\x3\x36\x5\x36\x533\n\x36\x3\x36"+
		"\x3\x36\x3\x37\x5\x37\x538\n\x37\x3\x37\x5\x37\x53B\n\x37\x3\x37\x3\x37"+
		"\x3\x37\x5\x37\x540\n\x37\x3\x37\x3\x37\x3\x37\x5\x37\x545\n\x37\x3\x37"+
		"\x5\x37\x548\n\x37\x3\x38\x6\x38\x54B\n\x38\r\x38\xE\x38\x54C\x3\x39\x3"+
		"\x39\x3\x39\a\x39\x552\n\x39\f\x39\xE\x39\x555\v\x39\x3:\x5:\x558\n:\x3"+
		":\x5:\x55B\n:\x3:\x3:\x3:\x3:\x3:\x5:\x562\n:\x3:\x3:\x3:\x3:\x3:\x3:"+
		"\x3:\x3:\x5:\x56C\n:\x3:\x3:\x3:\x5:\x571\n:\x3:\x3:\x3;\x3;\x3;\x3;\x3"+
		";\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x5;\x585\n;\x3<\x5<\x588"+
		"\n<\x3<\x5<\x58B\n<\x3<\x3<\x5<\x58F\n<\x3<\x3<\x5<\x593\n<\x3<\x5<\x596"+
		"\n<\x3<\x3<\x5<\x59A\n<\x3<\x3<\x5<\x59E\n<\x3<\x3<\x5<\x5A2\n<\x3<\x3"+
		"<\x3<\x3<\x5<\x5A8\n<\x3=\x3=\x3=\x3=\x3=\x3=\x3>\x6>\x5B1\n>\r>\xE>\x5B2"+
		"\x3?\x3?\x3?\x6?\x5B8\n?\r?\xE?\x5B9\x3?\x3?\x3@\x5@\x5BF\n@\x3@\x5@\x5C2"+
		"\n@\x3@\x3@\x3@\x5@\x5C7\n@\x3@\x3@\x5@\x5CB\n@\x3@\x3@\x5@\x5CF\n@\x3"+
		"@\x3@\x3@\x3@\x3@\x5@\x5D6\n@\x3\x41\x6\x41\x5D9\n\x41\r\x41\xE\x41\x5DA"+
		"\x3\x42\x3\x42\x3\x43\x3\x43\x3\x44\x5\x44\x5E2\n\x44\x3\x44\x5\x44\x5E5"+
		"\n\x44\x3\x44\x3\x44\x3\x44\x5\x44\x5EA\n\x44\x3\x44\x5\x44\x5ED\n\x44"+
		"\x3\x44\x3\x44\x3\x44\x5\x44\x5F2\n\x44\x3\x44\x3\x44\x5\x44\x5F6\n\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x5FD\n\x44\x3\x45\x6\x45\x600"+
		"\n\x45\r\x45\xE\x45\x601\x3\x46\x6\x46\x605\n\x46\r\x46\xE\x46\x606\x3"+
		"G\x6G\x60A\nG\rG\xEG\x60B\x3H\x3H\x5H\x610\nH\x3H\x3H\x3H\aH\x615\nH\f"+
		"H\xEH\x618\vH\x3H\x3H\x3H\x5H\x61D\nH\x3I\x3I\x3I\x3J\x3J\x3J\x3J\x3J"+
		"\aJ\x627\nJ\fJ\xEJ\x62A\vJ\x5J\x62C\nJ\x3J\x5J\x62F\nJ\x3K\x3K\x3K\x3"+
		"K\x3K\x5K\x636\nK\x3L\x3L\x3L\x3L\x3L\aL\x63D\nL\fL\xEL\x640\vL\x3L\x3"+
		"L\x3L\x3M\x3M\x3M\x3N\x3N\x3N\x3N\aN\x64C\nN\fN\xEN\x64F\vN\x3N\x3N\x3"+
		"N\x3N\x3N\x3N\x3N\aN\x658\nN\fN\xEN\x65B\vN\x3N\x3N\x3N\x3N\x3N\x3N\x3"+
		"N\aN\x664\nN\fN\xEN\x667\vN\x3N\x3N\x5N\x66B\nN\x3O\x3O\x3O\x3O\x3O\x3"+
		"O\x3O\x3O\x3O\x3O\x5O\x677\nO\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x67F\nO\x3O"+
		"\x5O\x682\nO\x3O\x3O\x3O\x3O\x3O\x5O\x689\nO\x3O\x3O\x3O\x3O\x5O\x68F"+
		"\nO\x3O\x3O\x5O\x693\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x69F"+
		"\nO\x5O\x6A1\nO\x3O\x3O\x3O\x3O\x5O\x6A7\nO\x3O\x3O\x3O\x3O\x3O\x5O\x6AE"+
		"\nO\x3O\x3O\x3O\x3O\x3O\x3O\aO\x6B6\nO\fO\xEO\x6B9\vO\x3O\x3O\x3O\x3O"+
		"\x5O\x6BF\nO\x3O\x3O\x5O\x6C3\nO\x3O\x5O\x6C6\nO\x3O\x3O\x3O\x3O\x3O\x3"+
		"O\x3O\aO\x6CF\nO\fO\xEO\x6D2\vO\x3O\x3O\x3O\x3O\x5O\x6D8\nO\x3O\x3O\x5"+
		"O\x6DC\nO\x3O\x5O\x6DF\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x6E9\nO"+
		"\x3O\x3O\x3O\x3O\x5O\x6EF\nO\x3O\x3O\x3O\x3O\x3O\aO\x6F6\nO\fO\xEO\x6F9"+
		"\vO\x5O\x6FB\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x704\nO\x3O\x3O\x3O\x3"+
		"O\x5O\x70A\nO\x3O\x3O\x5O\x70E\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O"+
		"\x3O\x3O\x3O\x5O\x71C\nO\x3O\x3O\x3O\x3O\x3O\x5O\x723\nO\x3O\x3O\x5O\x727"+
		"\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x730\nO\x3O\x3O\x3O\x3O\x5O\x736\n"+
		"O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x73E\nO\aO\x740\nO\fO\xEO\x743\vO\x3O\x3"+
		"O\x3O\x3O\x5O\x749\nO\x3O\x3O\x5O\x74D\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O"+
		"\x3O\x3O\x5O\x758\nO\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x760\nO\x3O\x3O\x3O\x3"+
		"O\x3O\x5O\x767\nO\x3O\x3O\x3O\x3O\x6O\x76D\nO\rO\xEO\x76E\x3O\x3O\x5O"+
		"\x773\nO\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x77B\nO\x3O\x3O\x3O\x3O\x5O\x781"+
		"\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x78C\nO\x3O\x3O\x3O\x3O\x3"+
		"O\x3O\x3O\x3O\x5O\x796\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x7A0\nO"+
		"\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x7AD\nO\x3O\x3O\x3O\x5"+
		"O\x7B2\nO\x3O\x3O\x3O\x3O\x3O\x3O\aO\x7BA\nO\fO\xEO\x7BD\vO\x3O\x3O\x5"+
		"O\x7C1\nO\x3P\x3P\x3Q\x3Q\x5Q\x7C7\nQ\x3Q\x3Q\x3Q\x3R\x3R\x3R\x3R\x5R"+
		"\x7D0\nR\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x7D8\nR\x3R\x5R\x7DB\nR\x3R\x3R\x3"+
		"R\x3S\x5S\x7E1\nS\x3S\x5S\x7E4\nS\x3S\x3S\x5S\x7E8\nS\x3S\x3S\x5S\x7EC"+
		"\nS\x3S\x3S\x3S\x3T\x3T\x5T\x7F3\nT\x3T\x3T\x3T\x3U\x5U\x7F9\nU\x3U\x3"+
		"U\x5U\x7FD\nU\x3U\x3U\x3U\aU\x802\nU\fU\xEU\x805\vU\x3U\x3U\x3U\x3U\a"+
		"U\x80B\nU\fU\xEU\x80E\vU\x3U\x3U\x5U\x812\nU\x5U\x814\nU\x3V\x3V\x3V\x3"+
		"V\x3W\x3W\x5W\x81C\nW\x3W\x3W\x3W\aW\x821\nW\fW\xEW\x824\vW\x3W\x3W\x3"+
		"W\x3W\x3W\x3W\x3W\aW\x82D\nW\fW\xEW\x830\vW\x3W\x3W\x3W\x3W\x3W\x3W\x3"+
		"W\aW\x839\nW\fW\xEW\x83C\vW\x3W\x3W\x3W\x5W\x841\nW\x3W\x3W\x3W\x3W\a"+
		"W\x847\nW\fW\xEW\x84A\vW\x3W\x3W\x3W\x3W\x5W\x850\nW\x3W\x3W\x3W\x3W\a"+
		"W\x856\nW\fW\xEW\x859\vW\x3W\x3W\x3W\x3W\x5W\x85F\nW\x3W\x3W\x3W\x3W\a"+
		"W\x865\nW\fW\xEW\x868\vW\x3W\x3W\x3W\x3W\x5W\x86E\nW\x3W\x3W\x3W\x3W\a"+
		"W\x874\nW\fW\xEW\x877\vW\x3W\x3W\x3W\x3W\x5W\x87D\nW\x3W\x5W\x880\nW\x3"+
		"W\x3W\x3W\x3W\aW\x886\nW\fW\xEW\x889\vW\x3W\x3W\x5W\x88D\nW\x3X\x5X\x890"+
		"\nX\x3X\x5X\x893\nX\x3X\x3X\x3X\x3X\x3X\x5X\x89A\nX\x3X\x3X\x3X\x5X\x89F"+
		"\nX\x3X\x3X\x3X\x5X\x8A4\nX\x5X\x8A6\nX\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3"+
		"X\x5X\x8B0\nX\x3X\x3X\x3X\x5X\x8B5\nX\x5X\x8B7\nX\x5X\x8B9\nX\x3Y\x5Y"+
		"\x8BC\nY\x3Y\x3Y\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\aZ\x8C6\nZ\fZ\xEZ\x8C9\vZ\x3"+
		"Z\x3Z\x5Z\x8CD\nZ\x3Z\x3Z\x3[\x3[\x3[\x3[\a[\x8D5\n[\f[\xE[\x8D8\v[\x3"+
		"[\x3[\x3[\x3[\x3[\x3[\a[\x8E0\n[\f[\xE[\x8E3\v[\x3[\x3[\x3[\x3[\x3[\x3"+
		"[\a[\x8EB\n[\f[\xE[\x8EE\v[\x3[\x3[\x3[\x3[\x3[\x3[\a[\x8F6\n[\f[\xE["+
		"\x8F9\v[\x3[\x3[\x5[\x8FD\n[\x3\\\x5\\\x900\n\\\x3\\\x3\\\x3\\\x3\\\x3"+
		"\\\x5\\\x907\n\\\x3\\\x3\\\x3\\\x5\\\x90C\n\\\x3]\x3]\x3]\x3]\a]\x912"+
		"\n]\f]\xE]\x915\v]\x3]\x3]\x3]\x3]\x3]\x3]\a]\x91D\n]\f]\xE]\x920\v]\x3"+
		"]\x3]\x3]\x3]\x3]\x5]\x927\n]\x3]\x3]\x3]\x5]\x92C\n]\a]\x92E\n]\f]\xE"+
		"]\x931\v]\x3]\x3]\x3]\x3]\x3]\x3]\x3]\x5]\x93A\n]\a]\x93C\n]\f]\xE]\x93F"+
		"\v]\x3]\x3]\x3]\x3]\x3]\x3]\a]\x947\n]\f]\xE]\x94A\v]\x3]\x3]\x3]\x3]"+
		"\x3]\x3]\a]\x952\n]\f]\xE]\x955\v]\x3]\x3]\x3]\x3]\x5]\x95B\n]\x3]\x3"+
		"]\x3]\a]\x960\n]\f]\xE]\x963\v]\x3]\x3]\x5]\x967\n]\x3^\x3^\x3^\x3^\a"+
		"^\x96D\n^\f^\xE^\x970\v^\x3^\x3^\x3^\x3^\x3^\x3^\x3^\a^\x979\n^\f^\xE"+
		"^\x97C\v^\x3^\x3^\x5^\x980\n^\x3_\x5_\x983\n_\x3_\x3_\x3_\x3_\x3_\a_\x98A"+
		"\n_\f_\xE_\x98D\v_\x3_\x3_\x3_\x3_\x3_\x3_\a_\x995\n_\f_\xE_\x998\v_\x3"+
		"_\x3_\x5_\x99C\n_\x3_\x5_\x99F\n_\x3`\x3`\x3`\x3\x61\x3\x61\x5\x61\x9A6"+
		"\n\x61\x3\x62\x3\x62\x3\x62\x5\x62\x9AB\n\x62\x3\x63\x5\x63\x9AE\n\x63"+
		"\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x9B4\n\x63\x3\x63\x5\x63\x9B7\n\x63"+
		"\x3\x64\x5\x64\x9BA\n\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x3"+
		"\x64\x3\x64\x3\x64\x3\x65\x6\x65\x9C6\n\x65\r\x65\xE\x65\x9C7\x3\x66\x3"+
		"\x66\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x5g\x9D6\ng\x3g\x3g\x3g\x3"+
		"g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g"+
		"\x5g\x9ED\ng\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3"+
		"g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g"+
		"\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3"+
		"g\x3g\x3g\x3g\x3g\x5g\xA25\ng\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g"+
		"\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x3g\x5g\xA3B\ng\x3g\x3g\x3g\ag\xA40"+
		"\ng\fg\xEg\xA43\vg\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5h\xA5F\nh\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x3h\ah\xAAF\nh\fh\xEh\xAB2\vh\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\ah\xAC3\nh\fh\xEh\xAC6\v"+
		"h\x3h\x3h\x3h\x5h\xACB\nh\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x5i\xAD4\ni\x3i"+
		"\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\ai\xAE6\n"+
		"i\fi\xEi\xAE9\vi\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x5j\xAF4\nj\x3j\x3"+
		"j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j"+
		"\x3j\x3j\x3j\x3j\x5j\xB0D\nj\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3"+
		"j\x3j\x3j\x3j\x5j\xB1D\nj\x3j\x3j\x3j\x3j\x3j\x3j\x5j\xB25\nj\x5j\xB27"+
		"\nj\x3k\x3k\x5k\xB2B\nk\x3l\x3l\x3l\x3l\al\xB31\nl\fl\xEl\xB34\vl\x5l"+
		"\xB36\nl\x3l\x3l\x3m\x3m\x3m\x3m\x3n\x3n\x5n\xB40\nn\x3o\x3o\x3o\x3o\a"+
		"o\xB46\no\fo\xEo\xB49\vo\x3o\x3o\x3p\x3p\x5p\xB4F\np\x3q\x3q\x3q\x3q\a"+
		"q\xB55\nq\fq\xEq\xB58\vq\x3q\x3q\x3r\x3r\x3r\ar\xB5F\nr\fr\xEr\xB62\v"+
		"r\x3s\x3s\x3t\x3t\x3t\at\xB69\nt\ft\xEt\xB6C\vt\x3u\x3u\x3u\x3u\x5u\xB72"+
		"\nu\x3u\x5u\xB75\nu\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x5u\xB82"+
		"\nu\x3u\x5u\xB85\nu\x5u\xB87\nu\x3v\x3v\x3v\x3v\x3v\x5v\xB8E\nv\x3v\x3"+
		"v\x5v\xB92\nv\x3v\x3v\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\aw\xB9E\nw\fw\xE"+
		"w\xBA1\vw\x3x\x3x\x3x\x3x\x3x\x3x\ax\xBA9\nx\fx\xEx\xBAC\vx\x3y\x3y\x3"+
		"y\x3y\x3y\x3y\x3y\x3y\x5y\xBB6\ny\x3z\x3z\x5z\xBBA\nz\x3{\x3{\x3{\x3{"+
		"\a{\xBC0\n{\f{\xE{\xBC3\v{\x3{\x3{\x3|\x3|\x3}\x3}\x5}\xBCB\n}\x3}\x3"+
		"}\x3~\x3~\x5~\xBD1\n~\x3~\x3~\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F\x3\x7F"+
		"\x3\x7F\x3\x7F\x6\x7F\xBDD\n\x7F\r\x7F\xE\x7F\xBDE\x3\x7F\x3\x7F\x3\x7F"+
		"\x3\x7F\x5\x7F\xBE5\n\x7F\x3\x80\x3\x80\a\x80\xBE9\n\x80\f\x80\xE\x80"+
		"\xBEC\v\x80\x3\x80\x3\x80\x5\x80\xBF0\n\x80\x3\x81\x3\x81\x3\x81\x5\x81"+
		"\xBF5\n\x81\x3\x82\x3\x82\x5\x82\xBF9\n\x82\x3\x83\x3\x83\x3\x83\x3\x83"+
		"\x5\x83\xBFF\n\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x3\x83\x5\x83\xC07"+
		"\n\x83\x3\x83\x3\x83\x3\x83\x3\x83\a\x83\xC0D\n\x83\f\x83\xE\x83\xC10"+
		"\v\x83\x3\x83\x3\x83\x5\x83\xC14\n\x83\x3\x84\x5\x84\xC17\n\x84\x3\x85"+
		"\x3\x85\x3\x85\x3\x85\x3\x85\a\x85\xC1E\n\x85\f\x85\xE\x85\xC21\v\x85"+
		"\x5\x85\xC23\n\x85\x3\x85\x3\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x5"+
		"\x86\xC2C\n\x86\x3\x87\x3\x87\x3\x87\x5\x87\xC31\n\x87\x3\x87\x3\x87\x3"+
		"\x87\x3\x87\x3\x87\x3\x87\x5\x87\xC39\n\x87\x3\x87\x3\x87\x5\x87\xC3D"+
		"\n\x87\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\x5\x87\xC44\n\x87\x3\x87\x3"+
		"\x87\x3\x87\x3\x87\x5\x87\xC4A\n\x87\x3\x88\x5\x88\xC4D\n\x88\x3\x88\x3"+
		"\x88\x3\x88\x3\x88\x5\x88\xC53\n\x88\x3\x89\x3\x89\x5\x89\xC57\n\x89\x3"+
		"\x8A\x3\x8A\x3\x8A\a\x8A\xC5C\n\x8A\f\x8A\xE\x8A\xC5F\v\x8A\x3\x8B\x5"+
		"\x8B\xC62\n\x8B\x3\x8B\x6\x8B\xC65\n\x8B\r\x8B\xE\x8B\xC66\x3\x8B\x3\x8B"+
		"\x3\x8C\x5\x8C\xC6C\n\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\xC71\n\x8C\x3\x8C"+
		"\x5\x8C\xC74\n\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x3\x8D\a"+
		"\x8D\xC7D\n\x8D\f\x8D\xE\x8D\xC80\v\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3"+
		"\x8F\x3\x8F\x3\x8F\x3\x90\x3\x90\x3\x90\x3\x90\x5\x90\xC8D\n\x90\x3\x90"+
		"\x3\x90\x3\x90\x3\x91\a\x91\xC93\n\x91\f\x91\xE\x91\xC96\v\x91\x3\x91"+
		"\x3\x91\x5\x91\xC9A\n\x91\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3"+
		"\x92\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xCA8\n\x92\x3\x92\x3\x92"+
		"\x3\x92\x3\x92\x3\x92\x3\x92\x3\x92\x5\x92\xCB1\n\x92\x3\x92\x3\x92\x3"+
		"\x92\x3\x92\a\x92\xCB7\n\x92\f\x92\xE\x92\xCBA\v\x92\x5\x92\xCBC\n\x92"+
		"\x3\x93\x3\x93\x3\x93\x3\x94\x3\x94\x5\x94\xCC3\n\x94\x3\x95\x3\x95\x3"+
		"\x95\x3\x95\x3\x95\x3\x95\x3\x95\x5\x95\xCCC\n\x95\x3\x96\x3\x96\x3\x96"+
		"\x3\x96\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x3\x97\x5\x97"+
		"\xCDA\n\x97\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\xCE3"+
		"\n\x98\x3\x99\x3\x99\x3\x9A\x3\x9A\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x3\x9D"+
		"\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D"+
		"\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xCFE\n\x9D\x5\x9D\xD00"+
		"\n\x9D\x5\x9D\xD02\n\x9D\x3\x9D\a\x9D\xD05\n\x9D\f\x9D\xE\x9D\xD08\v\x9D"+
		"\x3\x9D\x5\x9D\xD0B\n\x9D\x3\x9E\x3\x9E\x3\x9F\x3\x9F\x3\xA0\x3\xA0\x3"+
		"\xA1\x5\xA1\xD14\n\xA1\x3\xA1\x5\xA1\xD17\n\xA1\x3\xA1\x3\xA1\x5\xA1\xD1B"+
		"\n\xA1\x3\xA1\x3\xA1\x5\xA1\xD1F\n\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA1\a\xA1"+
		"\xD25\n\xA1\f\xA1\xE\xA1\xD28\v\xA1\x5\xA1\xD2A\n\xA1\x3\xA1\x3\xA1\x3"+
		"\xA1\x3\xA1\a\xA1\xD30\n\xA1\f\xA1\xE\xA1\xD33\v\xA1\x5\xA1\xD35\n\xA1"+
		"\x3\xA1\a\xA1\xD38\n\xA1\f\xA1\xE\xA1\xD3B\v\xA1\x3\xA1\x3\xA1\a\xA1\xD3F"+
		"\n\xA1\f\xA1\xE\xA1\xD42\v\xA1\x3\xA1\x3\xA1\x3\xA1\x3\xA2\x6\xA2\xD48"+
		"\n\xA2\r\xA2\xE\xA2\xD49\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x5\xA3\xD51"+
		"\n\xA3\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA5\x3\xA5\x3\xA6\x5\xA6\xD5A\n"+
		"\xA6\x3\xA6\x5\xA6\xD5D\n\xA6\x3\xA6\x3\xA6\x3\xA6\x5\xA6\xD62\n\xA6\x3"+
		"\xA6\x3\xA6\x3\xA6\x3\xA6\x5\xA6\xD68\n\xA6\a\xA6\xD6A\n\xA6\f\xA6\xE"+
		"\xA6\xD6D\v\xA6\x5\xA6\xD6F\n\xA6\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA7\x3"+
		"\xA7\a\xA7\xD77\n\xA7\f\xA7\xE\xA7\xD7A\v\xA7\x5\xA7\xD7C\n\xA7\x3\xA7"+
		"\x3\xA7\x3\xA8\x3\xA8\x5\xA8\xD82\n\xA8\x3\xA8\x3\xA8\x5\xA8\xD86\n\xA8"+
		"\x3\xA9\x6\xA9\xD89\n\xA9\r\xA9\xE\xA9\xD8A\x3\xAA\x5\xAA\xD8E\n\xAA\x3"+
		"\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\a\xAA\xD95\n\xAA\f\xAA\xE\xAA\xD98\v"+
		"\xAA\x3\xAA\x3\xAA\x5\xAA\xD9C\n\xAA\x5\xAA\xD9E\n\xAA\x3\xAA\x5\xAA\xDA1"+
		"\n\xAA\x3\xAA\x5\xAA\xDA4\n\xAA\x3\xAA\x5\xAA\xDA7\n\xAA\x3\xAA\x5\xAA"+
		"\xDAA\n\xAA\x3\xAA\x3\xAA\x3\xAB\x3\xAB\x3\xAB\x3\xAC\x5\xAC\xDB2\n\xAC"+
		"\x3\xAC\x3\xAC\x5\xAC\xDB6\n\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x5\xAC\xDBC"+
		"\n\xAC\x3\xAC\x3\xAC\x5\xAC\xDC0\n\xAC\x3\xAC\x3\xAC\x3\xAD\x6\xAD\xDC5"+
		"\n\xAD\r\xAD\xE\xAD\xDC6\x3\xAE\x5\xAE\xDCA\n\xAE\x3\xAE\x5\xAE\xDCD\n"+
		"\xAE\x3\xAE\x5\xAE\xDD0\n\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\xDD6"+
		"\n\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\xDDE\n\xAE\x3"+
		"\xAF\x5\xAF\xDE1\n\xAF\x3\xAF\x3\xAF\x5\xAF\xDE5\n\xAF\x3\xAF\x5\xAF\xDE8"+
		"\n\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x3\xAF\x5\xAF\xDF1\n"+
		"\xAF\x3\xB0\x3\xB0\x3\xB1\x5\xB1\xDF6\n\xB1\x3\xB1\x3\xB1\x5\xB1\xDFA"+
		"\n\xB1\x3\xB1\x3\xB1\x5\xB1\xDFE\n\xB1\x3\xB1\x3\xB1\x5\xB1\xE02\n\xB1"+
		"\x3\xB1\x3\xB1\x5\xB1\xE06\n\xB1\x3\xB1\x5\xB1\xE09\n\xB1\x3\xB1\a\xB1"+
		"\xE0C\n\xB1\f\xB1\xE\xB1\xE0F\v\xB1\x3\xB1\x5\xB1\xE12\n\xB1\x3\xB1\x3"+
		"\xB1\a\xB1\xE16\n\xB1\f\xB1\xE\xB1\xE19\v\xB1\x3\xB1\x3\xB1\x3\xB1\x5"+
		"\xB1\xE1E\n\xB1\x3\xB1\x3\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2"+
		"\x3\xB2\x3\xB2\x5\xB2\xE2A\n\xB2\x3\xB3\x5\xB3\xE2D\n\xB3\x3\xB3\x5\xB3"+
		"\xE30\n\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x5\xB3\xE36\n\xB3\x3\xB3\x3\xB3"+
		"\x3\xB3\x3\xB3\x3\xB3\x5\xB3\xE3D\n\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3"+
		"\xB3\x3\xB3\x5\xB3\xE45\n\xB3\x3\xB4\x5\xB4\xE48\n\xB4\x3\xB4\x5\xB4\xE4B"+
		"\n\xB4\x3\xB4\x5\xB4\xE4E\n\xB4\x3\xB4\x3\xB4\x3\xB4\a\xB4\xE53\n\xB4"+
		"\f\xB4\xE\xB4\xE56\v\xB4\x3\xB4\x3\xB4\x5\xB4\xE5A\n\xB4\x3\xB4\x3\xB4"+
		"\x3\xB5\x5\xB5\xE5F\n\xB5\x3\xB5\x5\xB5\xE62\n\xB5\x3\xB5\x3\xB5\x3\xB5"+
		"\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB7\x3\xB7\x3\xB7\x5\xB7\xE6E\n\xB7\x3"+
		"\xB7\x3\xB7\x5\xB7\xE72\n\xB7\x3\xB7\x3\xB7\x3\xB8\x5\xB8\xE77\n\xB8\x3"+
		"\xB8\x3\xB8\x3\xB8\x5\xB8\xE7C\n\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x5\xB8"+
		"\xE82\n\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\a\xB8\xE88\n\xB8\f\xB8\xE\xB8"+
		"\xE8B\v\xB8\x5\xB8\xE8D\n\xB8\x3\xB8\x3\xB8\x3\xB9\x3\xB9\x3\xB9\x3\xB9"+
		"\x3\xB9\x3\xB9\x5\xB9\xE97\n\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3"+
		"\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\xEA2\n\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9"+
		"\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\xEAF\n\xB9\x3"+
		"\xB9\x3\xD06\x2\x6\xCC\xD0\xEC\xEE\xBA\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2"+
		"^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2"+
		"|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2"+
		"\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2"+
		"\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2"+
		"\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2"+
		"\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2"+
		"\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2"+
		"\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108"+
		"\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A"+
		"\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C"+
		"\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E"+
		"\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C\x2\x14E\x2\x150"+
		"\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E\x2\x160\x2\x162"+
		"\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170\x2\x2H\x4\x2"+
		"\x1D\x1D(*\x4\x2\x1D\x1D\x83\x83\x4\x2\"\"\x39\x39\n\x2\a\a\v\v\xF\xF"+
		"\x1F\x1F\x37\x37\x43\x43\x45\x45LL\x4\x2RR\x154\x154\a\x2\x4\x4\b\b\x32"+
		"\x32TTXX\x3\x2\x15D\x15D\a\x2\x6\x6,-hh\x8C\x8C\xA9\xA9\b\x2\x1E\x1E;"+
		";\x41\x41\x63\x63xx\x92\x92\x5\x2\x4\x4\b\b\x32\x32\x4\x2\x6\x6,,\a\x2"+
		"\x1E\x1E;;\x41\x41\x63\x63\x92\x92\x4\x2\'\'\x11D\x11D\r\x2\x1E\x1E$$"+
		"\x38\x38:;\x41\x41QQ\x63\x63\x66\x66iimm\x92\x92\x4\x2--hh\x4\x2\xE\xE"+
		"oo\x4\x2\x6\x6\'\'\x4\x2uu\x8D\x8D\xF\x2\x1E\x1E$$++\x38\x38:;\x41\x41"+
		"UU\x61\x61\x63\x63\x66\x66\x80\x80\x92\x92\x94\x94\x5\x2]]nn\x83\x83\x4"+
		"\x2]]\x153\x153\x4\x2nn\x83\x83\a\x2\x1E\x1E$$\x38\x38:;\x63\x63\x4\x2"+
		">>\x44\x44\t\x2\x1E\x1E$$\x38\x38:;\x41\x41\x63\x63\x7F\x7F\t\x2\xE5\xE8"+
		"\xEA\xEA\xEC\xF3\xF5\xF8\xFB\xFD\x11F\x120\x12A\x12B\x4\x2[[__\x5\x2;"+
		";\x41\x41\x7F\x7F\x10\x2\x1E\x1E$$\x38\x38:;\x41\x41QQ\x63\x63\x66\x66"+
		"mmssxx\x7F\x7F\x8B\x8B\x92\x92\r\x2\xE\xE  \x32\x32==TTWWYZ\x62\x62jj"+
		"oo\x154\x154\x4\x2\x15\x15KK\x5\x2\x16\x16\x46\x46II\x3\x2\xF9\xFA\x4"+
		"\x2\n\n\x1D\x1D\x4\x2\t\t\x15\x15\x4\x2\x125\x125\x127\x127\x5\x2ll||"+
		"\x91\x92\x4\x2xx\x92\x92\x4\x2\xE9\xE9\x102\x102\x4\x2\x11D\x11D\x123"+
		"\x124\x5\x2\xEE\xF1\xF7\xF7\x121\x121\x5\x2\xFD\xFD\x111\x111\x115\x115"+
		"\x4\x2\xF2\xF3\xF8\xF8\x3\x2\xF0\xF1\x3\x2\xE5\xED\x5\x2\xFB\xFB\x10F"+
		"\x10F\x113\x113\x4\x2\x112\x112\x116\x116\x5\x2\xFC\xFC\x110\x110\x114"+
		"\x114\x4\x2VV\xF9\xF9\x3\x2\x102\x10E\x4\x2\x11D\x11D\x123\x123\x3\x2"+
		"\xEE\xEF\x4\x2||\x91\x91\x3\x2\xFE\x101\x4\x2hh\xA9\xA9\x3\x2%&\x4\x2"+
		"ww}}\x5\x2\x9B\x9B\x9E\x9E\xB5\xB5\b\x2\x9B\x9B\x9D\x9E\xA0\xA0\xA5\xA5"+
		"\xAC\xAD\xB6\xB7\t\x2\x9C\x9C\x9F\x9F\xA1\xA4\xA6\xA8\xAA\xAB\xAE\xB5"+
		"\xB8\xB9\x5\x2\xD8\xE2\x12A\x138\x13A\x13B\x1B\x2\x4\x4\x6\x6\b\n\f\xE"+
		"\x13\x13\x15\x15\x17\x1E!\"$&,,.\x30\x32\x32\x34\x35\x38>@@\x44\x44GG"+
		"KKMNTTXXkkpp\xA6\xA6\xFE\x101\x1A\x2\x5\x5\v\v\xF\x12\x14\x14\x16\x16"+
		"\x1F ##\'+--\x31\x31\x33\x33\x36\x37??\x42\x43\x45\x46HJLLQRUWYjl\x97"+
		"\xA9\xA9\xB0\xB0\xB3\xB9\x5\x2\xBE\xBE\xC1\xC1\xC6\xC9\x4\x2\x81\x81\xC8"+
		"\xC8\x6\x2\x41\x41QQmm\xC2\xC3\a\x2$$\x38\x38:;\x63\x63\xC1\xC1\xF\x2"+
		"\xE\xE\x41\x41QQ\x66\x66ssxx\x7F\x7F\x8B\x8B\x92\x92\xBF\xBF\xC3\xC3\xC5"+
		"\xC5\xCA\xCA\x4\x2\x4\x4\b\b\x5\x2\xCD\xD0\xD2\xD5\x113\x116\x10CA\x2"+
		"\x17A\x3\x2\x2\x2\x4\x188\x3\x2\x2\x2\x6\x18C\x3\x2\x2\x2\b\x194\x3\x2"+
		"\x2\x2\n\x19D\x3\x2\x2\x2\f\x1C9\x3\x2\x2\x2\xE\x1CC\x3\x2\x2\x2\x10\x1F2"+
		"\x3\x2\x2\x2\x12\x1F4\x3\x2\x2\x2\x14\x1F6\x3\x2\x2\x2\x16\x210\x3\x2"+
		"\x2\x2\x18\x216\x3\x2\x2\x2\x1A\x219\x3\x2\x2\x2\x1C\x245\x3\x2\x2\x2"+
		"\x1E\x248\x3\x2\x2\x2 \x269\x3\x2\x2\x2\"\x272\x3\x2\x2\x2$\x279\x3\x2"+
		"\x2\x2&\x298\x3\x2\x2\x2(\x29A\x3\x2\x2\x2*\x2A1\x3\x2\x2\x2,\x2A5\x3"+
		"\x2\x2\x2.\x2A9\x3\x2\x2\x2\x30\x2DA\x3\x2\x2\x2\x32\x2DD\x3\x2\x2\x2"+
		"\x34\x2F4\x3\x2\x2\x2\x36\x2F7\x3\x2\x2\x2\x38\x304\x3\x2\x2\x2:\x32E"+
		"\x3\x2\x2\x2<\x331\x3\x2\x2\x2>\x344\x3\x2\x2\x2@\x348\x3\x2\x2\x2\x42"+
		"\x358\x3\x2\x2\x2\x44\x382\x3\x2\x2\x2\x46\x3B0\x3\x2\x2\x2H\x3B4\x3\x2"+
		"\x2\x2J\x3C3\x3\x2\x2\x2L\x3CA\x3\x2\x2\x2N\x3DA\x3\x2\x2\x2P\x3DD\x3"+
		"\x2\x2\x2R\x407\x3\x2\x2\x2T\x427\x3\x2\x2\x2V\x442\x3\x2\x2\x2X\x450"+
		"\x3\x2\x2\x2Z\x475\x3\x2\x2\x2\\\x488\x3\x2\x2\x2^\x4A6\x3\x2\x2\x2`\x4B4"+
		"\x3\x2\x2\x2\x62\x4B9\x3\x2\x2\x2\x64\x4DB\x3\x2\x2\x2\x66\x4DE\x3\x2"+
		"\x2\x2h\x52C\x3\x2\x2\x2j\x52F\x3\x2\x2\x2l\x537\x3\x2\x2\x2n\x54A\x3"+
		"\x2\x2\x2p\x54E\x3\x2\x2\x2r\x557\x3\x2\x2\x2t\x584\x3\x2\x2\x2v\x587"+
		"\x3\x2\x2\x2x\x5A9\x3\x2\x2\x2z\x5B0\x3\x2\x2\x2|\x5B4\x3\x2\x2\x2~\x5BE"+
		"\x3\x2\x2\x2\x80\x5D8\x3\x2\x2\x2\x82\x5DC\x3\x2\x2\x2\x84\x5DE\x3\x2"+
		"\x2\x2\x86\x5E1\x3\x2\x2\x2\x88\x5FF\x3\x2\x2\x2\x8A\x604\x3\x2\x2\x2"+
		"\x8C\x609\x3\x2\x2\x2\x8E\x61C\x3\x2\x2\x2\x90\x61E\x3\x2\x2\x2\x92\x621"+
		"\x3\x2\x2\x2\x94\x635\x3\x2\x2\x2\x96\x637\x3\x2\x2\x2\x98\x644\x3\x2"+
		"\x2\x2\x9A\x66A\x3\x2\x2\x2\x9C\x7C0\x3\x2\x2\x2\x9E\x7C2\x3\x2\x2\x2"+
		"\xA0\x7C4\x3\x2\x2\x2\xA2\x7DA\x3\x2\x2\x2\xA4\x7E0\x3\x2\x2\x2\xA6\x7F2"+
		"\x3\x2\x2\x2\xA8\x813\x3\x2\x2\x2\xAA\x815\x3\x2\x2\x2\xAC\x88C\x3\x2"+
		"\x2\x2\xAE\x8B8\x3\x2\x2\x2\xB0\x8BB\x3\x2\x2\x2\xB2\x8C1\x3\x2\x2\x2"+
		"\xB4\x8FC\x3\x2\x2\x2\xB6\x8FF\x3\x2\x2\x2\xB8\x966\x3\x2\x2\x2\xBA\x97F"+
		"\x3\x2\x2\x2\xBC\x982\x3\x2\x2\x2\xBE\x9A0\x3\x2\x2\x2\xC0\x9A3\x3\x2"+
		"\x2\x2\xC2\x9A7\x3\x2\x2\x2\xC4\x9AD\x3\x2\x2\x2\xC6\x9B9\x3\x2\x2\x2"+
		"\xC8\x9C5\x3\x2\x2\x2\xCA\x9C9\x3\x2\x2\x2\xCC\x9EC\x3\x2\x2\x2\xCE\xACA"+
		"\x3\x2\x2\x2\xD0\xAD3\x3\x2\x2\x2\xD2\xB26\x3\x2\x2\x2\xD4\xB2A\x3\x2"+
		"\x2\x2\xD6\xB2C\x3\x2\x2\x2\xD8\xB39\x3\x2\x2\x2\xDA\xB3F\x3\x2\x2\x2"+
		"\xDC\xB41\x3\x2\x2\x2\xDE\xB4E\x3\x2\x2\x2\xE0\xB50\x3\x2\x2\x2\xE2\xB5B"+
		"\x3\x2\x2\x2\xE4\xB63\x3\x2\x2\x2\xE6\xB65\x3\x2\x2\x2\xE8\xB86\x3\x2"+
		"\x2\x2\xEA\xB88\x3\x2\x2\x2\xEC\xB95\x3\x2\x2\x2\xEE\xBA2\x3\x2\x2\x2"+
		"\xF0\xBB5\x3\x2\x2\x2\xF2\xBB7\x3\x2\x2\x2\xF4\xBBB\x3\x2\x2\x2\xF6\xBC6"+
		"\x3\x2\x2\x2\xF8\xBCA\x3\x2\x2\x2\xFA\xBD0\x3\x2\x2\x2\xFC\xBE4\x3\x2"+
		"\x2\x2\xFE\xBEF\x3\x2\x2\x2\x100\xBF4\x3\x2\x2\x2\x102\xBF8\x3\x2\x2\x2"+
		"\x104\xC13\x3\x2\x2\x2\x106\xC16\x3\x2\x2\x2\x108\xC18\x3\x2\x2\x2\x10A"+
		"\xC2B\x3\x2\x2\x2\x10C\xC49\x3\x2\x2\x2\x10E\xC52\x3\x2\x2\x2\x110\xC56"+
		"\x3\x2\x2\x2\x112\xC58\x3\x2\x2\x2\x114\xC64\x3\x2\x2\x2\x116\xC6B\x3"+
		"\x2\x2\x2\x118\xC79\x3\x2\x2\x2\x11A\xC81\x3\x2\x2\x2\x11C\xC85\x3\x2"+
		"\x2\x2\x11E\xC88\x3\x2\x2\x2\x120\xC94\x3\x2\x2\x2\x122\xCBB\x3\x2\x2"+
		"\x2\x124\xCBD\x3\x2\x2\x2\x126\xCC0\x3\x2\x2\x2\x128\xCCB\x3\x2\x2\x2"+
		"\x12A\xCCD\x3\x2\x2\x2\x12C\xCD9\x3\x2\x2\x2\x12E\xCE2\x3\x2\x2\x2\x130"+
		"\xCE4\x3\x2\x2\x2\x132\xCE6\x3\x2\x2\x2\x134\xCE8\x3\x2\x2\x2\x136\xCEA"+
		"\x3\x2\x2\x2\x138\xD0A\x3\x2\x2\x2\x13A\xD0C\x3\x2\x2\x2\x13C\xD0E\x3"+
		"\x2\x2\x2\x13E\xD10\x3\x2\x2\x2\x140\xD13\x3\x2\x2\x2\x142\xD47\x3\x2"+
		"\x2\x2\x144\xD50\x3\x2\x2\x2\x146\xD52\x3\x2\x2\x2\x148\xD56\x3\x2\x2"+
		"\x2\x14A\xD59\x3\x2\x2\x2\x14C\xD72\x3\x2\x2\x2\x14E\xD81\x3\x2\x2\x2"+
		"\x150\xD88\x3\x2\x2\x2\x152\xD8D\x3\x2\x2\x2\x154\xDAD\x3\x2\x2\x2\x156"+
		"\xDB1\x3\x2\x2\x2\x158\xDC4\x3\x2\x2\x2\x15A\xDC9\x3\x2\x2\x2\x15C\xDE0"+
		"\x3\x2\x2\x2\x15E\xDF2\x3\x2\x2\x2\x160\xDF5\x3\x2\x2\x2\x162\xE29\x3"+
		"\x2\x2\x2\x164\xE2C\x3\x2\x2\x2\x166\xE47\x3\x2\x2\x2\x168\xE5E\x3\x2"+
		"\x2\x2\x16A\xE66\x3\x2\x2\x2\x16C\xE6A\x3\x2\x2\x2\x16E\xE76\x3\x2\x2"+
		"\x2\x170\xEAE\x3\x2\x2\x2\x172\x173\a\xBD\x2\x2\x173\x174\a\x135\x2\x2"+
		"\x174\x179\a\x15D\x2\x2\x175\x176\a\xBC\x2\x2\x176\x177\a\x135\x2\x2\x177"+
		"\x179\a\x15D\x2\x2\x178\x172\x3\x2\x2\x2\x178\x175\x3\x2\x2\x2\x179\x17C"+
		"\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x180\x3"+
		"\x2\x2\x2\x17C\x17A\x3\x2\x2\x2\x17D\x17F\x5\x4\x3\x2\x17E\x17D\x3\x2"+
		"\x2\x2\x17F\x182\x3\x2\x2\x2\x180\x17E\x3\x2\x2\x2\x180\x181\x3\x2\x2"+
		"\x2\x181\x183\x3\x2\x2\x2\x182\x180\x3\x2\x2\x2\x183\x184\a\x2\x2\x3\x184"+
		"\x3\x3\x2\x2\x2\x185\x189\x5\x9CO\x2\x186\x189\x5\f\a\x2\x187\x189\x5"+
		"\xCCg\x2\x188\x185\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x188\x187\x3\x2\x2"+
		"\x2\x189\x5\x3\x2\x2\x2\x18A\x18D\x5\x10C\x87\x2\x18B\x18D\x5\x10E\x88"+
		"\x2\x18C\x18A\x3\x2\x2\x2\x18C\x18B\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2"+
		"\x18E\x18F\a\x15D\x2\x2\x18F\x190\a\x2\x2\x3\x190\a\x3\x2\x2\x2\x191\x193"+
		"\x5\f\a\x2\x192\x191\x3\x2\x2\x2\x193\x196\x3\x2\x2\x2\x194\x192\x3\x2"+
		"\x2\x2\x194\x195\x3\x2\x2\x2\x195\x197\x3\x2\x2\x2\x196\x194\x3\x2\x2"+
		"\x2\x197\x198\a\x2\x2\x3\x198\t\x3\x2\x2\x2\x199\x19A\x6\x6\x2\x2\x19A"+
		"\x19C\x5\x9AN\x2\x19B\x199\x3\x2\x2\x2\x19C\x19F\x3\x2\x2\x2\x19D\x19B"+
		"\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E\x1A0\x3\x2\x2\x2\x19F\x19D\x3"+
		"\x2\x2\x2\x1A0\x1A4\x5*\x16\x2\x1A1\x1A3\x5\f\a\x2\x1A2\x1A1\x3\x2\x2"+
		"\x2\x1A3\x1A6\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2"+
		"\x1A5\x1A7\x3\x2\x2\x2\x1A6\x1A4\x3\x2\x2\x2\x1A7\x1A8\a\x2\x2\x3\x1A8"+
		"\v\x3\x2\x2\x2\x1A9\x1CA\x5@!\x2\x1AA\x1CA\x5\x44#\x2\x1AB\x1AC\x6\a\x3"+
		"\x2\x1AC\x1CA\x5\x160\xB1\x2\x1AD\x1AE\x6\a\x4\x2\x1AE\x1CA\x5\x140\xA1"+
		"\x2\x1AF\x1CA\x5P)\x2\x1B0\x1CA\x5\x42\"\x2\x1B1\x1CA\x5R*\x2\x1B2\x1CA"+
		"\x5X-\x2\x1B3\x1CA\x5T+\x2\x1B4\x1CA\x5\x96L\x2\x1B5\x1B6\x6\a\x5\x2\x1B6"+
		"\x1CA\x5\x38\x1D\x2\x1B7\x1B8\x6\a\x6\x2\x1B8\x1CA\x5<\x1F\x2\x1B9\x1CA"+
		"\x5\x10\t\x2\x1BA\x1CA\x5.\x18\x2\x1BB\x1CA\x5\x36\x1C\x2\x1BC\x1CA\x5"+
		"\x30\x19\x2\x1BD\x1CA\x5\x1A\xE\x2\x1BE\x1BF\x6\a\a\x2\x1BF\x1CA\x5\x32"+
		"\x1A\x2\x1C0\x1C1\x6\a\b\x2\x1C1\x1CA\x5\x15A\xAE\x2\x1C2\x1CA\x5v<\x2"+
		"\x1C3\x1CA\x5~@\x2\x1C4\x1C5\x6\a\t\x2\x1C5\x1CA\x5\x9AN\x2\x1C6\x1C7"+
		"\x6\a\n\x2\x1C7\x1CA\x5\x1E\x10\x2\x1C8\x1CA\x5\xE\b\x2\x1C9\x1A9\x3\x2"+
		"\x2\x2\x1C9\x1AA\x3\x2\x2\x2\x1C9\x1AB\x3\x2\x2\x2\x1C9\x1AD\x3\x2\x2"+
		"\x2\x1C9\x1AF\x3\x2\x2\x2\x1C9\x1B0\x3\x2\x2\x2\x1C9\x1B1\x3\x2\x2\x2"+
		"\x1C9\x1B2\x3\x2\x2\x2\x1C9\x1B3\x3\x2\x2\x2\x1C9\x1B4\x3\x2\x2\x2\x1C9"+
		"\x1B5\x3\x2\x2\x2\x1C9\x1B7\x3\x2\x2\x2\x1C9\x1B9\x3\x2\x2\x2\x1C9\x1BA"+
		"\x3\x2\x2\x2\x1C9\x1BB\x3\x2\x2\x2\x1C9\x1BC\x3\x2\x2\x2\x1C9\x1BD\x3"+
		"\x2\x2\x2\x1C9\x1BE\x3\x2\x2\x2\x1C9\x1C0\x3\x2\x2\x2\x1C9\x1C2\x3\x2"+
		"\x2\x2\x1C9\x1C3\x3\x2\x2\x2\x1C9\x1C4\x3\x2\x2\x2\x1C9\x1C6\x3\x2\x2"+
		"\x2\x1C9\x1C8\x3\x2\x2\x2\x1CA\r\x3\x2\x2\x2\x1CB\x1CD\a\x15D\x2\x2\x1CC"+
		"\x1CB\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CC\x3\x2\x2\x2\x1CE\x1CF"+
		"\x3\x2\x2\x2\x1CF\xF\x3\x2\x2\x2\x1D0\x1D2\x5\x8CG\x2\x1D1\x1D0\x3\x2"+
		"\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2\x1D4\x3\x2\x2\x2\x1D3\x1D5\x5,\x17\x2"+
		"\x1D4\x1D3\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2\x2\x1D5\x1D6\x3\x2\x2\x2\x1D6"+
		"\x1D7\x5\x12\n\x2\x1D7\x1D9\x5\x14\v\x2\x1D8\x1DA\t\x2\x2\x2\x1D9\x1D8"+
		"\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1DC\x5"+
		"\x16\f\x2\x1DC\x1DD\x5\xE\b\x2\x1DD\x1E2\x5*\x16\x2\x1DE\x1DF\a\x19\x2"+
		"\x2\x1DF\x1E0\x5\x12\n\x2\x1E0\x1E1\a\x15D\x2\x2\x1E1\x1E3\x3\x2\x2\x2"+
		"\x1E2\x1DE\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1F3\x3\x2\x2\x2\x1E4"+
		"\x1E6\x5\x8CG\x2\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1E7"+
		"\x3\x2\x2\x2\x1E7\x1E8\t\x3\x2\x2\x1E8\x1E9\x5\x12\n\x2\x1E9\x1EA\x5\x14"+
		"\v\x2\x1EA\x1EB\x5\xE\b\x2\x1EB\x1F0\x5*\x16\x2\x1EC\x1ED\a\x19\x2\x2"+
		"\x1ED\x1EE\x5\x12\n\x2\x1EE\x1EF\a\x15D\x2\x2\x1EF\x1F1\x3\x2\x2\x2\x1F0"+
		"\x1EC\x3\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F3\x3\x2\x2\x2\x1F2\x1D1"+
		"\x3\x2\x2\x2\x1F2\x1E5\x3\x2\x2\x2\x1F3\x11\x3\x2\x2\x2\x1F4\x1F5\t\x4"+
		"\x2\x2\x1F5\x13\x3\x2\x2\x2\x1F6\x1F8\x5\x12C\x97\x2\x1F7\x1F9\x5H%\x2"+
		"\x1F8\x1F7\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1FB\x3\x2\x2\x2\x1FA"+
		"\x1FC\x5$\x13\x2\x1FB\x1FA\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FF"+
		"\x3\x2\x2\x2\x1FD\x1FE\a\x6\x2\x2\x1FE\x200\x5\xFC\x7F\x2\x1FF\x1FD\x3"+
		"\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200\x204\x3\x2\x2\x2\x201\x203\x5L\'"+
		"\x2\x202\x201\x3\x2\x2\x2\x203\x206\x3\x2\x2\x2\x204\x202\x3\x2\x2\x2"+
		"\x204\x205\x3\x2\x2\x2\x205\x208\x3\x2\x2\x2\x206\x204\x3\x2\x2\x2\x207"+
		"\x209\x5\x18\r\x2\x208\x207\x3\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209\x20C"+
		"\x3\x2\x2\x2\x20A\x20B\a\x153\x2\x2\x20B\x20D\x5\xCCg\x2\x20C\x20A\x3"+
		"\x2\x2\x2\x20C\x20D\x3\x2\x2\x2\x20D\x15\x3\x2\x2\x2\x20E\x20F\a\x1E\x2"+
		"\x2\x20F\x211\a.\x2\x2\x210\x20E\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211"+
		"\x214\x3\x2\x2\x2\x212\x213\a\x14\x2\x2\x213\x215\a\x135\x2\x2\x214\x212"+
		"\x3\x2\x2\x2\x214\x215\x3\x2\x2\x2\x215\x17\x3\x2\x2\x2\x216\x217\t\x5"+
		"\x2\x2\x217\x19\x3\x2\x2\x2\x218\x21A\x5\x8CG\x2\x219\x218\x3\x2\x2\x2"+
		"\x219\x21A\x3\x2\x2\x2\x21A\x21C\x3\x2\x2\x2\x21B\x21D\x5,\x17\x2\x21C"+
		"\x21B\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x21F"+
		"\a\x13\x2\x2\x21F\x220\x5\x12\n\x2\x220\x222\x5\x12C\x97\x2\x221\x223"+
		"\x5$\x13\x2\x222\x221\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2\x223\x226\x3\x2"+
		"\x2\x2\x224\x225\a\x6\x2\x2\x225\x227\x5\xFC\x7F\x2\x226\x224\x3\x2\x2"+
		"\x2\x226\x227\x3\x2\x2\x2\x227\x229\x3\x2\x2\x2\x228\x22A\x5\x1C\xF\x2"+
		"\x229\x228\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B"+
		"\x22C\a\x11D\x2\x2\x22C\x22F\x5\x12E\x98\x2\x22D\x22E\a\x123\x2\x2\x22E"+
		"\x230\x5\x12E\x98\x2\x22F\x22D\x3\x2\x2\x2\x22F\x230\x3\x2\x2\x2\x230"+
		"\x23E\x3\x2\x2\x2\x231\x23F\a\x131\x2\x2\x232\x233\a\x123\x2\x2\x233\x235"+
		"\x5\x12E\x98\x2\x234\x236\a\x121\x2\x2\x235\x234\x3\x2\x2\x2\x235\x236"+
		"\x3\x2\x2\x2\x236\x238\x3\x2\x2\x2\x237\x239\a\x12E\x2\x2\x238\x237\x3"+
		"\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x23C\x3\x2\x2\x2\x23A\x23B\a\xED"+
		"\x2\x2\x23B\x23D\a\x12E\x2\x2\x23C\x23A\x3\x2\x2\x2\x23C\x23D\x3\x2\x2"+
		"\x2\x23D\x23F\x3\x2\x2\x2\x23E\x231\x3\x2\x2\x2\x23E\x232\x3\x2\x2\x2"+
		"\x23F\x241\x3\x2\x2\x2\x240\x242\t\x6\x2\x2\x241\x240\x3\x2\x2\x2\x241"+
		"\x242\x3\x2\x2\x2\x242\x243\x3\x2\x2\x2\x243\x244\a\x15D\x2\x2\x244\x1B"+
		"\x3\x2\x2\x2\x245\x246\t\x5\x2\x2\x246\x1D\x3\x2\x2\x2\x247\x249\x5\x8C"+
		"G\x2\x248\x247\x3\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24B\x3\x2\x2\x2"+
		"\x24A\x24C\x5,\x17\x2\x24B\x24A\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2\x24C"+
		"\x24D\x3\x2\x2\x2\x24D\x24F\a\x10\x2\x2\x24E\x250\x5\xFC\x7F\x2\x24F\x24E"+
		"\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2\x251\x252\x5"+
		"\x12C\x97\x2\x252\x253\a-\x2\x2\x253\x256\x5\x12C\x97\x2\x254\x255\a\x123"+
		"\x2\x2\x255\x257\x5\x12E\x98\x2\x256\x254\x3\x2\x2\x2\x256\x257\x3\x2"+
		"\x2\x2\x257\x25A\x3\x2\x2\x2\x258\x259\a\x6\x2\x2\x259\x25B\x5\x12C\x97"+
		"\x2\x25A\x258\x3\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B\x264\x3\x2\x2\x2"+
		"\x25C\x261\x5 \x11\x2\x25D\x25E\a\x11E\x2\x2\x25E\x260\x5 \x11\x2\x25F"+
		"\x25D\x3\x2\x2\x2\x260\x263\x3\x2\x2\x2\x261\x25F\x3\x2\x2\x2\x261\x262"+
		"\x3\x2\x2\x2\x262\x265\x3\x2\x2\x2\x263\x261\x3\x2\x2\x2\x264\x25C\x3"+
		"\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266\x267\a\x15D"+
		"\x2\x2\x267\x1F\x3\x2\x2\x2\x268\x26A\x5\x8CG\x2\x269\x268\x3\x2\x2\x2"+
		"\x269\x26A\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26D\x5\xFC\x7F\x2\x26C"+
		"\x26E\a\x121\x2\x2\x26D\x26C\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x270"+
		"\x3\x2\x2\x2\x26F\x271\x5\x12C\x97\x2\x270\x26F\x3\x2\x2\x2\x270\x271"+
		"\x3\x2\x2\x2\x271!\x3\x2\x2\x2\x272\x273\a\x13\x2\x2\x273\x275\t\a\x2"+
		"\x2\x274\x276\n\b\x2\x2\x275\x274\x3\x2\x2\x2\x275\x276\x3\x2\x2\x2\x276"+
		"\x277\x3\x2\x2\x2\x277\x278\a\x15D\x2\x2\x278#\x3\x2\x2\x2\x279\x282\a"+
		"\x117\x2\x2\x27A\x27F\x5&\x14\x2\x27B\x27C\a\x11E\x2\x2\x27C\x27E\x5&"+
		"\x14\x2\x27D\x27B\x3\x2\x2\x2\x27E\x281\x3\x2\x2\x2\x27F\x27D\x3\x2\x2"+
		"\x2\x27F\x280\x3\x2\x2\x2\x280\x283\x3\x2\x2\x2\x281\x27F\x3\x2\x2\x2"+
		"\x282\x27A\x3\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284"+
		"\x285\a\x118\x2\x2\x285%\x3\x2\x2\x2\x286\x288\x5\x8CG\x2\x287\x286\x3"+
		"\x2\x2\x2\x287\x288\x3\x2\x2\x2\x288\x28A\x3\x2\x2\x2\x289\x28B\a>\x2"+
		"\x2\x28A\x289\x3\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28B\x28C\x3\x2\x2\x2"+
		"\x28C\x290\x5\x12C\x97\x2\x28D\x28E\x5\xCA\x66\x2\x28E\x28F\x5\xCCg\x2"+
		"\x28F\x291\x3\x2\x2\x2\x290\x28D\x3\x2\x2\x2\x290\x291\x3\x2\x2\x2\x291"+
		"\x295\x3\x2\x2\x2\x292\x293\x5(\x15\x2\x293\x294\x5\xFC\x7F\x2\x294\x296"+
		"\x3\x2\x2\x2\x295\x292\x3\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296\x299\x3"+
		"\x2\x2\x2\x297\x299\a\x126\x2\x2\x298\x287\x3\x2\x2\x2\x298\x297\x3\x2"+
		"\x2\x2\x299\'\x3\x2\x2\x2\x29A\x29C\t\t\x2\x2\x29B\x29D\aU\x2\x2\x29C"+
		"\x29B\x3\x2\x2\x2\x29C\x29D\x3\x2\x2\x2\x29D)\x3\x2\x2\x2\x29E\x2A0\x5"+
		"\x9CO\x2\x29F\x29E\x3\x2\x2\x2\x2A0\x2A3\x3\x2\x2\x2\x2A1\x29F\x3\x2\x2"+
		"\x2\x2A1\x2A2\x3\x2\x2\x2\x2A2+\x3\x2\x2\x2\x2A3\x2A1\x3\x2\x2\x2\x2A4"+
		"\x2A6\t\n\x2\x2\x2A5\x2A4\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A5"+
		"\x3\x2\x2\x2\x2A7\x2A8\x3\x2\x2\x2\x2A8-\x3\x2\x2\x2\x2A9\x2AB\aJ\x2\x2"+
		"\x2AA\x2AC\a\x41\x2\x2\x2AB\x2AA\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC"+
		"\x2B0\x3\x2\x2\x2\x2AD\x2AE\x5\xF6|\x2\x2AE\x2AF\x5\xCA\x66\x2\x2AF\x2B1"+
		"\x3\x2\x2\x2\x2B0\x2AD\x3\x2\x2\x2\x2B0\x2B1\x3\x2\x2\x2\x2B1\x2B2\x3"+
		"\x2\x2\x2\x2B2\x2B3\x5\xEEx\x2\x2B3\x2B4\a\x15D\x2\x2\x2B4/\x3\x2\x2\x2"+
		"\x2B5\x2B7\x5\x8CG\x2\x2B6\x2B5\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7"+
		"\x2B9\x3\x2\x2\x2\x2B8\x2BA\x5,\x17\x2\x2B9\x2B8\x3\x2\x2\x2\x2B9\x2BA"+
		"\x3\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2BD\a#\x2\x2\x2BC\x2BE\aU\x2"+
		"\x2\x2BD\x2BC\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2BF\x3\x2\x2\x2"+
		"\x2BF\x2C4\x5\x62\x32\x2\x2C0\x2C1\a\x11E\x2\x2\x2C1\x2C3\x5\x62\x32\x2"+
		"\x2C2\x2C0\x3\x2\x2\x2\x2C3\x2C6\x3\x2\x2\x2\x2C4\x2C2\x3\x2\x2\x2\x2C4"+
		"\x2C5\x3\x2\x2\x2\x2C5\x2C7\x3\x2\x2\x2\x2C6\x2C4\x3\x2\x2\x2\x2C7\x2C8"+
		"\a\x15D\x2\x2\x2C8\x2DB\x3\x2\x2\x2\x2C9\x2CB\x5\x8CG\x2\x2CA\x2C9\x3"+
		"\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2CE\a\x41"+
		"\x2\x2\x2CD\x2CF\aU\x2\x2\x2CE\x2CD\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2"+
		"\x2CF\x2D0\x3\x2\x2\x2\x2D0\x2D5\x5\x62\x32\x2\x2D1\x2D2\a\x11E\x2\x2"+
		"\x2D2\x2D4\x5\x62\x32\x2\x2D3\x2D1\x3\x2\x2\x2\x2D4\x2D7\x3\x2\x2\x2\x2D5"+
		"\x2D3\x3\x2\x2\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2D8\x3\x2\x2\x2\x2D7\x2D5"+
		"\x3\x2\x2\x2\x2D8\x2D9\a\x15D\x2\x2\x2D9\x2DB\x3\x2\x2\x2\x2DA\x2B6\x3"+
		"\x2\x2\x2\x2DA\x2CA\x3\x2\x2\x2\x2DB\x31\x3\x2\x2\x2\x2DC\x2DE\x5\x8C"+
		"G\x2\x2DD\x2DC\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2\x2DE\x2E0\x3\x2\x2\x2"+
		"\x2DF\x2E1\x5\x8A\x46\x2\x2E0\x2DF\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1"+
		"\x2E2\x3\x2\x2\x2\x2E2\x2E4\x5\x34\x1B\x2\x2E3\x2E5\x5\xECw\x2\x2E4\x2E3"+
		"\x3\x2\x2\x2\x2E4\x2E5\x3\x2\x2\x2\x2E5\x2E6\x3\x2\x2\x2\x2E6\x2E9\x5"+
		"\x14\v\x2\x2E7\x2E8\a\xE\x2\x2\x2E8\x2EA\x5\x12C\x97\x2\x2E9\x2E7\x3\x2"+
		"\x2\x2\x2E9\x2EA\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2EC\x5\x16\f"+
		"\x2\x2EC\x2ED\x5\xE\b\x2\x2ED\x2F2\x5*\x16\x2\x2EE\x2EF\a\x19\x2\x2\x2EF"+
		"\x2F0\x5\x34\x1B\x2\x2F0\x2F1\a\x15D\x2\x2\x2F1\x2F3\x3\x2\x2\x2\x2F2"+
		"\x2EE\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x33\x3\x2\x2\x2\x2F4\x2F5"+
		"\t\v\x2\x2\x2F5\x35\x3\x2\x2\x2\x2F6\x2F8\x5,\x17\x2\x2F7\x2F6\x3\x2\x2"+
		"\x2\x2F7\x2F8\x3\x2\x2\x2\x2F8\x2F9\x3\x2\x2\x2\x2F9\x2FA\a\x11\x2\x2"+
		"\x2FA\x2FB\x5\x12C\x97\x2\x2FB\x2FC\x5\xCA\x66\x2\x2FC\x2FF\x5\xCCg\x2"+
		"\x2FD\x2FE\a\x6\x2\x2\x2FE\x300\x5\x100\x81\x2\x2FF\x2FD\x3\x2\x2\x2\x2FF"+
		"\x300\x3\x2\x2\x2\x300\x301\x3\x2\x2\x2\x301\x302\a\x15D\x2\x2\x302\x37"+
		"\x3\x2\x2\x2\x303\x305\x5> \x2\x304\x303\x3\x2\x2\x2\x304\x305\x3\x2\x2"+
		"\x2\x305\x306\x3\x2\x2\x2\x306\x308\at\x2\x2\x307\x309\x5\xECw\x2\x308"+
		"\x307\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A\x30D"+
		"\x5\x12C\x97\x2\x30B\x30C\a\x5\x2\x2\x30C\x30E\a\x12E\x2\x2\x30D\x30B"+
		"\x3\x2\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x30F\x3\x2\x2\x2\x30F\x311\x5"+
		"\xE\b\x2\x310\x312\x5:\x1E\x2\x311\x310\x3\x2\x2\x2\x312\x313\x3\x2\x2"+
		"\x2\x313\x311\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314\x318\x3\x2\x2\x2"+
		"\x315\x316\a\x19\x2\x2\x316\x317\at\x2\x2\x317\x319\a\x15D\x2\x2\x318"+
		"\x315\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2\x319\x39\x3\x2\x2\x2\x31A\x31B"+
		"\a\x30\x2\x2\x31B\x31C\a\x12\x2\x2\x31C\x31D\x5\x12C\x97\x2\x31D\x31E"+
		"\a\x11B\x2\x2\x31E\x31F\x5\x64\x33\x2\x31F\x322\a\x11C\x2\x2\x320\x321"+
		"\t\f\x2\x2\x321\x323\x5\xFC\x7F\x2\x322\x320\x3\x2\x2\x2\x322\x323\x3"+
		"\x2\x2\x2\x323\x324\x3\x2\x2\x2\x324\x325\x5\xE\b\x2\x325\x32F\x3\x2\x2"+
		"\x2\x326\x327\a\x30\x2\x2\x327\x32A\x5\x12C\x97\x2\x328\x329\t\f\x2\x2"+
		"\x329\x32B\x5\xFC\x7F\x2\x32A\x328\x3\x2\x2\x2\x32A\x32B\x3\x2\x2\x2\x32B"+
		"\x32C\x3\x2\x2\x2\x32C\x32D\x5\xE\b\x2\x32D\x32F\x3\x2\x2\x2\x32E\x31A"+
		"\x3\x2\x2\x2\x32E\x326\x3\x2\x2\x2\x32F;\x3\x2\x2\x2\x330\x332\x5> \x2"+
		"\x331\x330\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x333\x3\x2\x2\x2\x333"+
		"\x335\aH\x2\x2\x334\x336\x5\xECw\x2\x335\x334\x3\x2\x2\x2\x335\x336\x3"+
		"\x2\x2\x2\x336\x337\x3\x2\x2\x2\x337\x338\x5\x12C\x97\x2\x338\x33A\x5"+
		"\xE\b\x2\x339\x33B\x5:\x1E\x2\x33A\x339\x3\x2\x2\x2\x33B\x33C\x3\x2\x2"+
		"\x2\x33C\x33A\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\x341\x3\x2\x2\x2"+
		"\x33E\x33F\a\x19\x2\x2\x33F\x340\aH\x2\x2\x340\x342\a\x15D\x2\x2\x341"+
		"\x33E\x3\x2\x2\x2\x341\x342\x3\x2\x2\x2\x342=\x3\x2\x2\x2\x343\x345\t"+
		"\r\x2\x2\x344\x343\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346\x344\x3\x2\x2"+
		"\x2\x346\x347\x3\x2\x2\x2\x347?\x3\x2\x2\x2\x348\x349\a\t\x2\x2\x349\x34A"+
		"\a\x65\x2\x2\x34A\x34B\x5\xEEx\x2\x34B\x34F\x5\xE\b\x2\x34C\x34E\x5\f"+
		"\a\x2\x34D\x34C\x3\x2\x2\x2\x34E\x351\x3\x2\x2\x2\x34F\x34D\x3\x2\x2\x2"+
		"\x34F\x350\x3\x2\x2\x2\x350\x355\x3\x2\x2\x2\x351\x34F\x3\x2\x2\x2\x352"+
		"\x353\a\x19\x2\x2\x353\x354\a\x65\x2\x2\x354\x356\a\x15D\x2\x2\x355\x352"+
		"\x3\x2\x2\x2\x355\x356\x3\x2\x2\x2\x356\x41\x3\x2\x2\x2\x357\x359\x5\x8C"+
		"G\x2\x358\x357\x3\x2\x2\x2\x358\x359\x3\x2\x2\x2\x359\x35B\x3\x2\x2\x2"+
		"\x35A\x35C\x5\x46$\x2\x35B\x35A\x3\x2\x2\x2\x35B\x35C\x3\x2\x2\x2\x35C"+
		"\x35D\x3\x2\x2\x2\x35D\x35F\a\x62\x2\x2\x35E\x360\x5\xECw\x2\x35F\x35E"+
		"\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360\x361\x3\x2\x2\x2\x361\x363\x5"+
		"\x12C\x97\x2\x362\x364\x5H%\x2\x363\x362\x3\x2\x2\x2\x363\x364\x3\x2\x2"+
		"\x2\x364\x367\x3\x2\x2\x2\x365\x366\t\xE\x2\x2\x366\x368\x5\xFC\x7F\x2"+
		"\x367\x365\x3\x2\x2\x2\x367\x368\x3\x2\x2\x2\x368\x36D\x3\x2\x2\x2\x369"+
		"\x36A\a\x11E\x2\x2\x36A\x36C\x5\xFC\x7F\x2\x36B\x369\x3\x2\x2\x2\x36C"+
		"\x36F\x3\x2\x2\x2\x36D\x36B\x3\x2\x2\x2\x36D\x36E\x3\x2\x2\x2\x36E\x373"+
		"\x3\x2\x2\x2\x36F\x36D\x3\x2\x2\x2\x370\x372\x5L\'\x2\x371\x370\x3\x2"+
		"\x2\x2\x372\x375\x3\x2\x2\x2\x373\x371\x3\x2\x2\x2\x373\x374\x3\x2\x2"+
		"\x2\x374\x376\x3\x2\x2\x2\x375\x373\x3\x2\x2\x2\x376\x37A\x5\xE\b\x2\x377"+
		"\x379\x5t;\x2\x378\x377\x3\x2\x2\x2\x379\x37C\x3\x2\x2\x2\x37A\x378\x3"+
		"\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37D\x3\x2\x2\x2\x37C\x37A\x3\x2"+
		"\x2\x2\x37D\x37E\a\x19\x2\x2\x37E\x37F\a\x62\x2\x2\x37F\x380\a\x15D\x2"+
		"\x2\x380\x43\x3\x2\x2\x2\x381\x383\x5\x8CG\x2\x382\x381\x3\x2\x2\x2\x382"+
		"\x383\x3\x2\x2\x2\x383\x385\x3\x2\x2\x2\x384\x386\x5\x46$\x2\x385\x384"+
		"\x3\x2\x2\x2\x385\x386\x3\x2\x2\x2\x386\x387\x3\x2\x2\x2\x387\x389\a\xE"+
		"\x2\x2\x388\x38A\x5\xECw\x2\x389\x388\x3\x2\x2\x2\x389\x38A\x3\x2\x2\x2"+
		"\x38A\x38B\x3\x2\x2\x2\x38B\x38D\x5\x12C\x97\x2\x38C\x38E\x5H%\x2\x38D"+
		"\x38C\x3\x2\x2\x2\x38D\x38E\x3\x2\x2\x2\x38E\x391\x3\x2\x2\x2\x38F\x390"+
		"\a\'\x2\x2\x390\x392\x5\xFC\x7F\x2\x391\x38F\x3\x2\x2\x2\x391\x392\x3"+
		"\x2\x2\x2\x392\x39C\x3\x2\x2\x2\x393\x394\a^\x2\x2\x394\x399\x5\xFC\x7F"+
		"\x2\x395\x396\a\x11E\x2\x2\x396\x398\x5\xFC\x7F\x2\x397\x395\x3\x2\x2"+
		"\x2\x398\x39B\x3\x2\x2\x2\x399\x397\x3\x2\x2\x2\x399\x39A\x3\x2\x2\x2"+
		"\x39A\x39D\x3\x2\x2\x2\x39B\x399\x3\x2\x2\x2\x39C\x393\x3\x2\x2\x2\x39C"+
		"\x39D\x3\x2\x2\x2\x39D\x3A1\x3\x2\x2\x2\x39E\x3A0\x5L\'\x2\x39F\x39E\x3"+
		"\x2\x2\x2\x3A0\x3A3\x3\x2\x2\x2\x3A1\x39F\x3\x2\x2\x2\x3A1\x3A2\x3\x2"+
		"\x2\x2\x3A2\x3A4\x3\x2\x2\x2\x3A3\x3A1\x3\x2\x2\x2\x3A4\x3A8\x5\xE\b\x2"+
		"\x3A5\x3A7\x5t;\x2\x3A6\x3A5\x3\x2\x2\x2\x3A7\x3AA\x3\x2\x2\x2\x3A8\x3A6"+
		"\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9\x3AB\x3\x2\x2\x2\x3AA\x3A8\x3"+
		"\x2\x2\x2\x3AB\x3AC\a\x19\x2\x2\x3AC\x3AD\a\xE\x2\x2\x3AD\x3AE\a\x15D"+
		"\x2\x2\x3AE\x45\x3\x2\x2\x2\x3AF\x3B1\t\xF\x2\x2\x3B0\x3AF\x3\x2\x2\x2"+
		"\x3B1\x3B2\x3\x2\x2\x2\x3B2\x3B0\x3\x2\x2\x2\x3B2\x3B3\x3\x2\x2\x2\x3B3"+
		"G\x3\x2\x2\x2\x3B4\x3B5\a\xE5\x2\x2\x3B5\x3BD\x5J&\x2\x3B6\x3B8\a\x11E"+
		"\x2\x2\x3B7\x3B9\x5\x8CG\x2\x3B8\x3B7\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2"+
		"\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BC\x5J&\x2\x3BB\x3B6\x3\x2\x2\x2\x3BC\x3BF"+
		"\x3\x2\x2\x2\x3BD\x3BB\x3\x2\x2\x2\x3BD\x3BE\x3\x2\x2\x2\x3BE\x3C0\x3"+
		"\x2\x2\x2\x3BF\x3BD\x3\x2\x2\x2\x3C0\x3C1\a\xE7\x2\x2\x3C1I\x3\x2\x2\x2"+
		"\x3C2\x3C4\x5\x8CG\x2\x3C3\x3C2\x3\x2\x2\x2\x3C3\x3C4\x3\x2\x2\x2\x3C4"+
		"\x3C6\x3\x2\x2\x2\x3C5\x3C7\t\x10\x2\x2\x3C6\x3C5\x3\x2\x2\x2\x3C6\x3C7"+
		"\x3\x2\x2\x2\x3C7\x3C8\x3\x2\x2\x2\x3C8\x3C9\x5\x12C\x97\x2\x3C9K\x3\x2"+
		"\x2\x2\x3CA\x3CB\a\x96\x2\x2\x3CB\x3CC\x5\xF6|\x2\x3CC\x3CD\a,\x2\x2\x3CD"+
		"\x3D2\x5N(\x2\x3CE\x3CF\a\x11E\x2\x2\x3CF\x3D1\x5N(\x2\x3D0\x3CE\x3\x2"+
		"\x2\x2\x3D1\x3D4\x3\x2\x2\x2\x3D2\x3D0\x3\x2\x2\x2\x3D2\x3D3\x3\x2\x2"+
		"\x2\x3D3M\x3\x2\x2\x2\x3D4\x3D2\x3\x2\x2\x2\x3D5\x3DB\t\x11\x2\x2\x3D6"+
		"\x3DB\x5\x100\x81\x2\x3D7\x3D8\a\x66\x2\x2\x3D8\x3D9\a\x117\x2\x2\x3D9"+
		"\x3DB\a\x118\x2\x2\x3DA\x3D5\x3\x2\x2\x2\x3DA\x3D6\x3\x2\x2\x2\x3DA\x3D7"+
		"\x3\x2\x2\x2\x3DBO\x3\x2\x2\x2\x3DC\x3DE\x5\x8CG\x2\x3DD\x3DC\x3\x2\x2"+
		"\x2\x3DD\x3DE\x3\x2\x2\x2\x3DE\x3E0\x3\x2\x2\x2\x3DF\x3E1\x5\x46$\x2\x3E0"+
		"\x3DF\x3\x2\x2\x2\x3E0\x3E1\x3\x2\x2\x2\x3E1\x3E2\x3\x2\x2\x2\x3E2\x3E4"+
		"\ao\x2\x2\x3E3\x3E5\x5\xECw\x2\x3E4\x3E3\x3\x2\x2\x2\x3E4\x3E5\x3\x2\x2"+
		"\x2\x3E5\x3E6\x3\x2\x2\x2\x3E6\x3E8\x5\x12C\x97\x2\x3E7\x3E9\x5H%\x2\x3E8"+
		"\x3E7\x3\x2\x2\x2\x3E8\x3E9\x3\x2\x2\x2\x3E9\x3F3\x3\x2\x2\x2\x3EA\x3EB"+
		"\a^\x2\x2\x3EB\x3F0\x5\xFC\x7F\x2\x3EC\x3ED\a\x11E\x2\x2\x3ED\x3EF\x5"+
		"\xFC\x7F\x2\x3EE\x3EC\x3\x2\x2\x2\x3EF\x3F2\x3\x2\x2\x2\x3F0\x3EE\x3\x2"+
		"\x2\x2\x3F0\x3F1\x3\x2\x2\x2\x3F1\x3F4\x3\x2\x2\x2\x3F2\x3F0\x3\x2\x2"+
		"\x2\x3F3\x3EA\x3\x2\x2\x2\x3F3\x3F4\x3\x2\x2\x2\x3F4\x3F8\x3\x2\x2\x2"+
		"\x3F5\x3F7\x5L\'\x2\x3F6\x3F5\x3\x2\x2\x2\x3F7\x3FA\x3\x2\x2\x2\x3F8\x3F6"+
		"\x3\x2\x2\x2\x3F8\x3F9\x3\x2\x2\x2\x3F9\x3FB\x3\x2\x2\x2\x3FA\x3F8\x3"+
		"\x2\x2\x2\x3FB\x3FF\x5\xE\b\x2\x3FC\x3FE\x5t;\x2\x3FD\x3FC\x3\x2\x2\x2"+
		"\x3FE\x401\x3\x2\x2\x2\x3FF\x3FD\x3\x2\x2\x2\x3FF\x400\x3\x2\x2\x2\x400"+
		"\x402\x3\x2\x2\x2\x401\x3FF\x3\x2\x2\x2\x402\x403\a\x19\x2\x2\x403\x404"+
		"\ao\x2\x2\x404\x405\a\x15D\x2\x2\x405Q\x3\x2\x2\x2\x406\x408\x5\x8CG\x2"+
		"\x407\x406\x3\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x40A\x3\x2\x2\x2\x409"+
		"\x40B\x5\x46$\x2\x40A\x409\x3\x2\x2\x2\x40A\x40B\x3\x2\x2\x2\x40B\x40C"+
		"\x3\x2\x2\x2\x40C\x40E\aW\x2\x2\x40D\x40F\x5\xECw\x2\x40E\x40D\x3\x2\x2"+
		"\x2\x40E\x40F\x3\x2\x2\x2\x40F\x410\x3\x2\x2\x2\x410\x412\x5\x12C\x97"+
		"\x2\x411\x413\x5H%\x2\x412\x411\x3\x2\x2\x2\x412\x413\x3\x2\x2\x2\x413"+
		"\x415\x3\x2\x2\x2\x414\x416\x5$\x13\x2\x415\x414\x3\x2\x2\x2\x415\x416"+
		"\x3\x2\x2\x2\x416\x419\x3\x2\x2\x2\x417\x418\a\x6\x2\x2\x418\x41A\x5\xFC"+
		"\x7F\x2\x419\x417\x3\x2\x2\x2\x419\x41A\x3\x2\x2\x2\x41A\x41E\x3\x2\x2"+
		"\x2\x41B\x41D\x5L\'\x2\x41C\x41B\x3\x2\x2\x2\x41D\x420\x3\x2\x2\x2\x41E"+
		"\x41C\x3\x2\x2\x2\x41E\x41F\x3\x2\x2\x2\x41F\x422\x3\x2\x2\x2\x420\x41E"+
		"\x3\x2\x2\x2\x421\x423\x5\x18\r\x2\x422\x421\x3\x2\x2\x2\x422\x423\x3"+
		"\x2\x2\x2\x423\x424\x3\x2\x2\x2\x424\x425\a\x15D\x2\x2\x425S\x3\x2\x2"+
		"\x2\x426\x428\x5\x8CG\x2\x427\x426\x3\x2\x2\x2\x427\x428\x3\x2\x2\x2\x428"+
		"\x42A\x3\x2\x2\x2\x429\x42B\x5\x46$\x2\x42A\x429\x3\x2\x2\x2\x42A\x42B"+
		"\x3\x2\x2\x2\x42B\x42C\x3\x2\x2\x2\x42C\x42E\aY\x2\x2\x42D\x42F\x5\xEC"+
		"w\x2\x42E\x42D\x3\x2\x2\x2\x42E\x42F\x3\x2\x2\x2\x42F\x430\x3\x2\x2\x2"+
		"\x430\x433\x5\x12C\x97\x2\x431\x432\t\x12\x2\x2\x432\x434\x5\xFC\x7F\x2"+
		"\x433\x431\x3\x2\x2\x2\x433\x434\x3\x2\x2\x2\x434\x435\x3\x2\x2\x2\x435"+
		"\x437\x5\xE\b\x2\x436\x438\x5V,\x2\x437\x436\x3\x2\x2\x2\x438\x439\x3"+
		"\x2\x2\x2\x439\x437\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A\x43B\x3\x2"+
		"\x2\x2\x43B\x43D\a\x19\x2\x2\x43C\x43E\aY\x2\x2\x43D\x43C\x3\x2\x2\x2"+
		"\x43D\x43E\x3\x2\x2\x2\x43E\x43F\x3\x2\x2\x2\x43F\x440\a\x15D\x2\x2\x440"+
		"U\x3\x2\x2\x2\x441\x443\x5\x8CG\x2\x442\x441\x3\x2\x2\x2\x442\x443\x3"+
		"\x2\x2\x2\x443\x445\x3\x2\x2\x2\x444\x446\a\x30\x2\x2\x445\x444\x3\x2"+
		"\x2\x2\x445\x446\x3\x2\x2\x2\x446\x447\x3\x2\x2\x2\x447\x44B\x5\x12C\x97"+
		"\x2\x448\x449\x5\xCA\x66\x2\x449\x44A\x5\xCCg\x2\x44A\x44C\x3\x2\x2\x2"+
		"\x44B\x448\x3\x2\x2\x2\x44B\x44C\x3\x2\x2\x2\x44C\x44D\x3\x2\x2\x2\x44D"+
		"\x44E\x5\xE\b\x2\x44EW\x3\x2\x2\x2\x44F\x451\x5\x8CG\x2\x450\x44F\x3\x2"+
		"\x2\x2\x450\x451\x3\x2\x2\x2\x451\x453\x3\x2\x2\x2\x452\x454\x5\x8A\x46"+
		"\x2\x453\x452\x3\x2\x2\x2\x453\x454\x3\x2\x2\x2\x454\x455\x3\x2\x2\x2"+
		"\x455\x457\aZ\x2\x2\x456\x458\x5\xECw\x2\x457\x456\x3\x2\x2\x2\x457\x458"+
		"\x3\x2\x2\x2\x458\x459\x3\x2\x2\x2\x459\x45C\x5\x12C\x97\x2\x45A\x45B"+
		"\a\x6\x2\x2\x45B\x45D\x5\xFC\x7F\x2\x45C\x45A\x3\x2\x2\x2\x45C\x45D\x3"+
		"\x2\x2\x2\x45D\x472\x3\x2\x2\x2\x45E\x473\a\x15D\x2\x2\x45F\x461\x5Z."+
		"\x2\x460\x45F\x3\x2\x2\x2\x461\x462\x3\x2\x2\x2\x462\x460\x3\x2\x2\x2"+
		"\x462\x463\x3\x2\x2\x2\x463\x464\x3\x2\x2\x2\x464\x465\a\x15D\x2\x2\x465"+
		"\x473\x3\x2\x2\x2\x466\x468\x5\xE\b\x2\x467\x469\x5\\/\x2\x468\x467\x3"+
		"\x2\x2\x2\x469\x46A\x3\x2\x2\x2\x46A\x468\x3\x2\x2\x2\x46A\x46B\x3\x2"+
		"\x2\x2\x46B\x46C\x3\x2\x2\x2\x46C\x46E\a\x19\x2\x2\x46D\x46F\aZ\x2\x2"+
		"\x46E\x46D\x3\x2\x2\x2\x46E\x46F\x3\x2\x2\x2\x46F\x470\x3\x2\x2\x2\x470"+
		"\x471\a\x15D\x2\x2\x471\x473\x3\x2\x2\x2\x472\x45E\x3\x2\x2\x2\x472\x460"+
		"\x3\x2\x2\x2\x472\x466\x3\x2\x2\x2\x473Y\x3\x2\x2\x2\x474\x476\x5\x8C"+
		"G\x2\x475\x474\x3\x2\x2\x2\x475\x476\x3\x2\x2\x2\x476\x478\x3\x2\x2\x2"+
		"\x477\x479\x5n\x38\x2\x478\x477\x3\x2\x2\x2\x478\x479\x3\x2\x2\x2\x479"+
		"\x485\x3\x2\x2\x2\x47A\x47B\x6.\v\x2\x47B\x47D\au\x2\x2\x47C\x47E\x5p"+
		"\x39\x2\x47D\x47C\x3\x2\x2\x2\x47D\x47E\x3\x2\x2\x2\x47E\x486\x3\x2\x2"+
		"\x2\x47F\x480\x6.\f\x2\x480\x482\a\x8D\x2\x2\x481\x483\x5p\x39\x2\x482"+
		"\x481\x3\x2\x2\x2\x482\x483\x3\x2\x2\x2\x483\x486\x3\x2\x2\x2\x484\x486"+
		"\t\x13\x2\x2\x485\x47A\x3\x2\x2\x2\x485\x47F\x3\x2\x2\x2\x485\x484\x3"+
		"\x2\x2\x2\x486[\x3\x2\x2\x2\x487\x489\x5\x8CG\x2\x488\x487\x3\x2\x2\x2"+
		"\x488\x489\x3\x2\x2\x2\x489\x48B\x3\x2\x2\x2\x48A\x48C\x5n\x38\x2\x48B"+
		"\x48A\x3\x2\x2\x2\x48B\x48C\x3\x2\x2\x2\x48C\x4A1\x3\x2\x2\x2\x48D\x48E"+
		"\au\x2\x2\x48E\x48F\x5\xE\b\x2\x48F\x490\x5*\x16\x2\x490\x492\a\x19\x2"+
		"\x2\x491\x493\au\x2\x2\x492\x491\x3\x2\x2\x2\x492\x493\x3\x2\x2\x2\x493"+
		"\x4A2\x3\x2\x2\x2\x494\x495\au\x2\x2\x495\x496\a\x153\x2\x2\x496\x4A2"+
		"\x5\xCCg\x2\x497\x498\a\x8D\x2\x2\x498\x499\x5\xE\b\x2\x499\x49A\x5*\x16"+
		"\x2\x49A\x49C\a\x19\x2\x2\x49B\x49D\a\x8D\x2\x2\x49C\x49B\x3\x2\x2\x2"+
		"\x49C\x49D\x3\x2\x2\x2\x49D\x4A2\x3\x2\x2\x2\x49E\x49F\a\x8D\x2\x2\x49F"+
		"\x4A0\a\x153\x2\x2\x4A0\x4A2\x5\xCCg\x2\x4A1\x48D\x3\x2\x2\x2\x4A1\x494"+
		"\x3\x2\x2\x2\x4A1\x497\x3\x2\x2\x2\x4A1\x49E\x3\x2\x2\x2\x4A2\x4A3\x3"+
		"\x2\x2\x2\x4A3\x4A4\x5\xE\b\x2\x4A4]\x3\x2\x2\x2\x4A5\x4A7\x5\x8CG\x2"+
		"\x4A6\x4A5\x3\x2\x2\x2\x4A6\x4A7\x3\x2\x2\x2\x4A7\x4A8\x3\x2\x2\x2\x4A8"+
		"\x4A9\x5`\x31\x2\x4A9\x4AE\x5\x62\x32\x2\x4AA\x4AB\a\x11E\x2\x2\x4AB\x4AD"+
		"\x5\x62\x32\x2\x4AC\x4AA\x3\x2\x2\x2\x4AD\x4B0\x3\x2\x2\x2\x4AE\x4AC\x3"+
		"\x2\x2\x2\x4AE\x4AF\x3\x2\x2\x2\x4AF\x4B1\x3\x2\x2\x2\x4B0\x4AE\x3\x2"+
		"\x2\x2\x4B1\x4B2\x5\xE\b\x2\x4B2_\x3\x2\x2\x2\x4B3\x4B5\t\x14\x2\x2\x4B4"+
		"\x4B3\x3\x2\x2\x2\x4B5\x4B6\x3\x2\x2\x2\x4B6\x4B4\x3\x2\x2\x2\x4B6\x4B7"+
		"\x3\x2\x2\x2\x4B7\x61\x3\x2\x2\x2\x4B8\x4BA\a\x12\x2\x2\x4B9\x4B8\x3\x2"+
		"\x2\x2\x4B9\x4BA\x3\x2\x2\x2\x4BA\x4BB\x3\x2\x2\x2\x4BB\x4C0\x5\x12C\x97"+
		"\x2\x4BC\x4BD\a\x11B\x2\x2\x4BD\x4BE\x5\x64\x33\x2\x4BE\x4BF\a\x11C\x2"+
		"\x2\x4BF\x4C1\x3\x2\x2\x2\x4C0\x4BC\x3\x2\x2\x2\x4C0\x4C1\x3\x2\x2\x2"+
		"\x4C1\x4C5\x3\x2\x2\x2\x4C2\x4C3\x5\xCA\x66\x2\x4C3\x4C4\x5\xCCg\x2\x4C4"+
		"\x4C6\x3\x2\x2\x2\x4C5\x4C2\x3\x2\x2\x2\x4C5\x4C6\x3\x2\x2\x2\x4C6\x4C9"+
		"\x3\x2\x2\x2\x4C7\x4C8\t\f\x2\x2\x4C8\x4CA\x5\xFC\x7F\x2\x4C9\x4C7\x3"+
		"\x2\x2\x2\x4C9\x4CA\x3\x2\x2\x2\x4CA\x63\x3\x2\x2\x2\x4CB\x4CF\x5\xCC"+
		"g\x2\x4CC\x4CD\a\x11C\x2\x2\x4CD\x4CE\a\x11B\x2\x2\x4CE\x4D0\x5\xCCg\x2"+
		"\x4CF\x4CC\x3\x2\x2\x2\x4D0\x4D1\x3\x2\x2\x2\x4D1\x4CF\x3\x2\x2\x2\x4D1"+
		"\x4D2\x3\x2\x2\x2\x4D2\x4DC\x3\x2\x2\x2\x4D3\x4D6\x5\xCCg\x2\x4D4\x4D5"+
		"\a\x11E\x2\x2\x4D5\x4D7\x5\xCCg\x2\x4D6\x4D4\x3\x2\x2\x2\x4D7\x4D8\x3"+
		"\x2\x2\x2\x4D8\x4D6\x3\x2\x2\x2\x4D8\x4D9\x3\x2\x2\x2\x4D9\x4DC\x3\x2"+
		"\x2\x2\x4DA\x4DC\x5\xCCg\x2\x4DB\x4CB\x3\x2\x2\x2\x4DB\x4D3\x3\x2\x2\x2"+
		"\x4DB\x4DA\x3\x2\x2\x2\x4DC\x65\x3\x2\x2\x2\x4DD\x4DF\x5\x8CG\x2\x4DE"+
		"\x4DD\x3\x2\x2\x2\x4DE\x4DF\x3\x2\x2\x2\x4DF\x4E1\x3\x2\x2\x2\x4E0\x4E2"+
		"\x5\x8A\x46\x2\x4E1\x4E0\x3\x2\x2\x2\x4E1\x4E2\x3\x2\x2\x2\x4E2\x4E3\x3"+
		"\x2\x2\x2\x4E3\x4E5\aj\x2\x2\x4E4\x4E6\x5\xECw\x2\x4E5\x4E4\x3\x2\x2\x2"+
		"\x4E5\x4E6\x3\x2\x2\x2\x4E6\x4E9\x3\x2\x2\x2\x4E7\x4EA\a>\x2\x2\x4E8\x4EA"+
		"\x5\x12C\x97\x2\x4E9\x4E7\x3\x2\x2\x2\x4E9\x4E8\x3\x2\x2\x2\x4EA\x4EC"+
		"\x3\x2\x2\x2\x4EB\x4ED\x5h\x35\x2\x4EC\x4EB\x3\x2\x2\x2\x4EC\x4ED\x3\x2"+
		"\x2\x2\x4ED\x4F0\x3\x2\x2\x2\x4EE\x4EF\a\x6\x2\x2\x4EF\x4F1\x5\xFC\x7F"+
		"\x2\x4F0\x4EE\x3\x2\x2\x2\x4F0\x4F1\x3\x2\x2\x2\x4F1\x512\x3\x2\x2\x2"+
		"\x4F2\x4F6\aR\x2\x2\x4F3\x4F5\x5j\x36\x2\x4F4\x4F3\x3\x2\x2\x2\x4F5\x4F8"+
		"\x3\x2\x2\x2\x4F6\x4F4\x3\x2\x2\x2\x4F6\x4F7\x3\x2\x2\x2\x4F7\x4FC\x3"+
		"\x2\x2\x2\x4F8\x4F6\x3\x2\x2\x2\x4F9\x4FA\x5\xCA\x66\x2\x4FA\x4FB\x5\xCC"+
		"g\x2\x4FB\x4FD\x3\x2\x2\x2\x4FC\x4F9\x3\x2\x2\x2\x4FC\x4FD\x3\x2\x2\x2"+
		"\x4FD\x4FE\x3\x2\x2\x2\x4FE\x513\a\x15D\x2\x2\x4FF\x501\x5l\x37\x2\x500"+
		"\x4FF\x3\x2\x2\x2\x501\x502\x3\x2\x2\x2\x502\x500\x3\x2\x2\x2\x502\x503"+
		"\x3\x2\x2\x2\x503\x504\x3\x2\x2\x2\x504\x505\a\x15D\x2\x2\x505\x513\x3"+
		"\x2\x2\x2\x506\x508\x5\xE\b\x2\x507\x509\x5r:\x2\x508\x507\x3\x2\x2\x2"+
		"\x509\x50A\x3\x2\x2\x2\x50A\x508\x3\x2\x2\x2\x50A\x50B\x3\x2\x2\x2\x50B"+
		"\x50C\x3\x2\x2\x2\x50C\x50E\a\x19\x2\x2\x50D\x50F\aj\x2\x2\x50E\x50D\x3"+
		"\x2\x2\x2\x50E\x50F\x3\x2\x2\x2\x50F\x510\x3\x2\x2\x2\x510\x511\a\x15D"+
		"\x2\x2\x511\x513\x3\x2\x2\x2\x512\x4F2\x3\x2\x2\x2\x512\x500\x3\x2\x2"+
		"\x2\x512\x506\x3\x2\x2\x2\x513g\x3\x2\x2\x2\x514\x51D\a\x11B\x2\x2\x515"+
		"\x51A\x5&\x14\x2\x516\x517\a\x11E\x2\x2\x517\x519\x5&\x14\x2\x518\x516"+
		"\x3\x2\x2\x2\x519\x51C\x3\x2\x2\x2\x51A\x518\x3\x2\x2\x2\x51A\x51B\x3"+
		"\x2\x2\x2\x51B\x51E\x3\x2\x2\x2\x51C\x51A\x3\x2\x2\x2\x51D\x515\x3\x2"+
		"\x2\x2\x51D\x51E\x3\x2\x2\x2\x51E\x51F\x3\x2\x2\x2\x51F\x52D\a\x11C\x2"+
		"\x2\x520\x529\a\x117\x2\x2\x521\x526\x5&\x14\x2\x522\x523\a\x11E\x2\x2"+
		"\x523\x525\x5&\x14\x2\x524\x522\x3\x2\x2\x2\x525\x528\x3\x2\x2\x2\x526"+
		"\x524\x3\x2\x2\x2\x526\x527\x3\x2\x2\x2\x527\x52A\x3\x2\x2\x2\x528\x526"+
		"\x3\x2\x2\x2\x529\x521\x3\x2\x2\x2\x529\x52A\x3\x2\x2\x2\x52A\x52B\x3"+
		"\x2\x2\x2\x52B\x52D\a\x118\x2\x2\x52C\x514\x3\x2\x2\x2\x52C\x520\x3\x2"+
		"\x2\x2\x52Di\x3\x2\x2\x2\x52E\x530\x5\x8CG\x2\x52F\x52E\x3\x2\x2\x2\x52F"+
		"\x530\x3\x2\x2\x2\x530\x532\x3\x2\x2\x2\x531\x533\x5n\x38\x2\x532\x531"+
		"\x3\x2\x2\x2\x532\x533\x3\x2\x2\x2\x533\x534\x3\x2\x2\x2\x534\x535\t\x15"+
		"\x2\x2\x535k\x3\x2\x2\x2\x536\x538\x5\x8CG\x2\x537\x536\x3\x2\x2\x2\x537"+
		"\x538\x3\x2\x2\x2\x538\x53A\x3\x2\x2\x2\x539\x53B\x5n\x38\x2\x53A\x539"+
		"\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B\x547\x3\x2\x2\x2\x53C\x53D\x6"+
		"\x37\r\x2\x53D\x53F\t\x16\x2\x2\x53E\x540\x5\xCCg\x2\x53F\x53E\x3\x2\x2"+
		"\x2\x53F\x540\x3\x2\x2\x2\x540\x548\x3\x2\x2\x2\x541\x542\x6\x37\xE\x2"+
		"\x542\x544\t\x17\x2\x2\x543\x545\x5p\x39\x2\x544\x543\x3\x2\x2\x2\x544"+
		"\x545\x3\x2\x2\x2\x545\x548\x3\x2\x2\x2\x546\x548\t\x15\x2\x2\x547\x53C"+
		"\x3\x2\x2\x2\x547\x541\x3\x2\x2\x2\x547\x546\x3\x2\x2\x2\x548m\x3\x2\x2"+
		"\x2\x549\x54B\t\x18\x2\x2\x54A\x549\x3\x2\x2\x2\x54B\x54C\x3\x2\x2\x2"+
		"\x54C\x54A\x3\x2\x2\x2\x54C\x54D\x3\x2\x2\x2\x54Do\x3\x2\x2\x2\x54E\x553"+
		"\x5\xCCg\x2\x54F\x550\a\x11E\x2\x2\x550\x552\x5\xCCg\x2\x551\x54F\x3\x2"+
		"\x2\x2\x552\x555\x3\x2\x2\x2\x553\x551\x3\x2\x2\x2\x553\x554\x3\x2\x2"+
		"\x2\x554q\x3\x2\x2\x2\x555\x553\x3\x2\x2\x2\x556\x558\x5\x8CG\x2\x557"+
		"\x556\x3\x2\x2\x2\x557\x558\x3\x2\x2\x2\x558\x55A\x3\x2\x2\x2\x559\x55B"+
		"\x5n\x38\x2\x55A\x559\x3\x2\x2\x2\x55A\x55B\x3\x2\x2\x2\x55B\x570\x3\x2"+
		"\x2\x2\x55C\x55D\a]\x2\x2\x55D\x55E\x5\xE\b\x2\x55E\x55F\x5*\x16\x2\x55F"+
		"\x561\a\x19\x2\x2\x560\x562\a]\x2\x2\x561\x560\x3\x2\x2\x2\x561\x562\x3"+
		"\x2\x2\x2\x562\x571\x3\x2\x2\x2\x563\x564\a]\x2\x2\x564\x565\a\x153\x2"+
		"\x2\x565\x571\x5\xCCg\x2\x566\x567\t\x17\x2\x2\x567\x568\x5\xE\b\x2\x568"+
		"\x569\x5*\x16\x2\x569\x56B\a\x19\x2\x2\x56A\x56C\t\x17\x2\x2\x56B\x56A"+
		"\x3\x2\x2\x2\x56B\x56C\x3\x2\x2\x2\x56C\x571\x3\x2\x2\x2\x56D\x56E\t\x17"+
		"\x2\x2\x56E\x56F\a\x153\x2\x2\x56F\x571\x5\xCCg\x2\x570\x55C\x3\x2\x2"+
		"\x2\x570\x563\x3\x2\x2\x2\x570\x566\x3\x2\x2\x2\x570\x56D\x3\x2\x2\x2"+
		"\x571\x572\x3\x2\x2\x2\x572\x573\x5\xE\b\x2\x573s\x3\x2\x2\x2\x574\x585"+
		"\x5\x32\x1A\x2\x575\x585\x5|?\x2\x576\x585\x5v<\x2\x577\x585\x5~@\x2\x578"+
		"\x585\x5^\x30\x2\x579\x585\x5\x66\x34\x2\x57A\x585\x5\x86\x44\x2\x57B"+
		"\x585\x5P)\x2\x57C\x585\x5\x44#\x2\x57D\x585\x5R*\x2\x57E\x585\x5T+\x2"+
		"\x57F\x585\x5X-\x2\x580\x585\x5\x42\"\x2\x581\x582\x6;\xF\x2\x582\x585"+
		"\x5\"\x12\x2\x583\x585\x5\xE\b\x2\x584\x574\x3\x2\x2\x2\x584\x575\x3\x2"+
		"\x2\x2\x584\x576\x3\x2\x2\x2\x584\x577\x3\x2\x2\x2\x584\x578\x3\x2\x2"+
		"\x2\x584\x579\x3\x2\x2\x2\x584\x57A\x3\x2\x2\x2\x584\x57B\x3\x2\x2\x2"+
		"\x584\x57C\x3\x2\x2\x2\x584\x57D\x3\x2\x2\x2\x584\x57E\x3\x2\x2\x2\x584"+
		"\x57F\x3\x2\x2\x2\x584\x580\x3\x2\x2\x2\x584\x581\x3\x2\x2\x2\x584\x583"+
		"\x3\x2\x2\x2\x585u\x3\x2\x2\x2\x586\x588\x5\x8CG\x2\x587\x586\x3\x2\x2"+
		"\x2\x587\x588\x3\x2\x2\x2\x588\x58A\x3\x2\x2\x2\x589\x58B\x5z>\x2\x58A"+
		"\x589\x3\x2\x2\x2\x58A\x58B\x3\x2\x2\x2\x58B\x58C\x3\x2\x2\x2\x58C\x58E"+
		"\aT\x2\x2\x58D\x58F\x5$\x13\x2\x58E\x58D\x3\x2\x2\x2\x58E\x58F\x3\x2\x2"+
		"\x2\x58F\x592\x3\x2\x2\x2\x590\x591\a\x6\x2\x2\x591\x593\a\xAE\x2\x2\x592"+
		"\x590\x3\x2\x2\x2\x592\x593\x3\x2\x2\x2\x593\x595\x3\x2\x2\x2\x594\x596"+
		"\x5\x18\r\x2\x595\x594\x3\x2\x2\x2\x595\x596\x3\x2\x2\x2\x596\x599\x3"+
		"\x2\x2\x2\x597\x598\a\xE\x2\x2\x598\x59A\x5\x12C\x97\x2\x599\x597\x3\x2"+
		"\x2\x2\x599\x59A\x3\x2\x2\x2\x59A\x59D\x3\x2\x2\x2\x59B\x59C\a\x153\x2"+
		"\x2\x59C\x59E\x5\xCCg\x2\x59D\x59B\x3\x2\x2\x2\x59D\x59E\x3\x2\x2\x2\x59E"+
		"\x59F\x3\x2\x2\x2\x59F\x5A1\x5\xE\b\x2\x5A0\x5A2\x5x=\x2\x5A1\x5A0\x3"+
		"\x2\x2\x2\x5A1\x5A2\x3\x2\x2\x2\x5A2\x5A3\x3\x2\x2\x2\x5A3\x5A7\x5*\x16"+
		"\x2\x5A4\x5A5\a\x19\x2\x2\x5A5\x5A6\aT\x2\x2\x5A6\x5A8\a\x15D\x2\x2\x5A7"+
		"\x5A4\x3\x2\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8w\x3\x2\x2\x2\x5A9\x5AA\t"+
		"\x19\x2\x2\x5AA\x5AB\a\x117\x2\x2\x5AB\x5AC\x5\xE6t\x2\x5AC\x5AD\a\x118"+
		"\x2\x2\x5AD\x5AE\x5\xE\b\x2\x5AEy\x3\x2\x2\x2\x5AF\x5B1\t\x1A\x2\x2\x5B0"+
		"\x5AF\x3\x2\x2\x2\x5B1\x5B2\x3\x2\x2\x2\x5B2\x5B0\x3\x2\x2\x2\x5B2\x5B3"+
		"\x3\x2\x2\x2\x5B3{\x3\x2\x2\x2\x5B4\x5B5\a\x10\x2\x2\x5B5\x5B7\t\v\x2"+
		"\x2\x5B6\x5B8\n\b\x2\x2\x5B7\x5B6\x3\x2\x2\x2\x5B8\x5B9\x3\x2\x2\x2\x5B9"+
		"\x5B7\x3\x2\x2\x2\x5B9\x5BA\x3\x2\x2\x2\x5BA\x5BB\x3\x2\x2\x2\x5BB\x5BC"+
		"\x5\xE\b\x2\x5BC}\x3\x2\x2\x2\x5BD\x5BF\x5\x8CG\x2\x5BE\x5BD\x3\x2\x2"+
		"\x2\x5BE\x5BF\x3\x2\x2\x2\x5BF\x5C1\x3\x2\x2\x2\x5C0\x5C2\x5\x80\x41\x2"+
		"\x5C1\x5C0\x3\x2\x2\x2\x5C1\x5C2\x3\x2\x2\x2\x5C2\x5C3\x3\x2\x2\x2\x5C3"+
		"\x5C6\aX\x2\x2\x5C4\x5C5\a\x117\x2\x2\x5C5\x5C7\a\x118\x2\x2\x5C6\x5C4"+
		"\x3\x2\x2\x2\x5C6\x5C7\x3\x2\x2\x2\x5C7\x5CA\x3\x2\x2\x2\x5C8\x5C9\a\xE"+
		"\x2\x2\x5C9\x5CB\x5\x12C\x97\x2\x5CA\x5C8\x3\x2\x2\x2\x5CA\x5CB\x3\x2"+
		"\x2\x2\x5CB\x5CE\x3\x2\x2\x2\x5CC\x5CD\a\x153\x2\x2\x5CD\x5CF\x5\xCCg"+
		"\x2\x5CE\x5CC\x3\x2\x2\x2\x5CE\x5CF\x3\x2\x2\x2\x5CF\x5D0\x3\x2\x2\x2"+
		"\x5D0\x5D1\x5\xE\b\x2\x5D1\x5D5\x5*\x16\x2\x5D2\x5D3\a\x19\x2\x2\x5D3"+
		"\x5D4\aX\x2\x2\x5D4\x5D6\a\x15D\x2\x2\x5D5\x5D2\x3\x2\x2\x2\x5D5\x5D6"+
		"\x3\x2\x2\x2\x5D6\x7F\x3\x2\x2\x2\x5D7\x5D9\a\x7F\x2\x2\x5D8\x5D7\x3\x2"+
		"\x2\x2\x5D9\x5DA\x3\x2\x2\x2\x5DA\x5D8\x3\x2\x2\x2\x5DA\x5DB\x3\x2\x2"+
		"\x2\x5DB\x81\x3\x2\x2\x2\x5DC\x5DD\t\x1B\x2\x2\x5DD\x83\x3\x2\x2\x2\x5DE"+
		"\x5DF\t\x1C\x2\x2\x5DF\x85\x3\x2\x2\x2\x5E0\x5E2\x5\x8CG\x2\x5E1\x5E0"+
		"\x3\x2\x2\x2\x5E1\x5E2\x3\x2\x2\x2\x5E2\x5E4\x3\x2\x2\x2\x5E3\x5E5\x5"+
		"\x88\x45\x2\x5E4\x5E3\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5\x5E6\x3\x2"+
		"\x2\x2\x5E6\x5E9\ag\x2\x2\x5E7\x5EA\x5\x82\x42\x2\x5E8\x5EA\x5\x84\x43"+
		"\x2\x5E9\x5E7\x3\x2\x2\x2\x5E9\x5E8\x3\x2\x2\x2\x5EA\x5EC\x3\x2\x2\x2"+
		"\x5EB\x5ED\a\xE7\x2\x2\x5EC\x5EB\x3\x2\x2\x2\x5EC\x5ED\x3\x2\x2\x2\x5ED"+
		"\x5EE\x3\x2\x2\x2\x5EE\x5F1\x5$\x13\x2\x5EF\x5F0\a\x6\x2\x2\x5F0\x5F2"+
		"\x5\xFC\x7F\x2\x5F1\x5EF\x3\x2\x2\x2\x5F1\x5F2\x3\x2\x2\x2\x5F2\x5F5\x3"+
		"\x2\x2\x2\x5F3\x5F4\a\x153\x2\x2\x5F4\x5F6\x5\xCCg\x2\x5F5\x5F3\x3\x2"+
		"\x2\x2\x5F5\x5F6\x3\x2\x2\x2\x5F6\x5F7\x3\x2\x2\x2\x5F7\x5F8\x5\xE\b\x2"+
		"\x5F8\x5FC\x5*\x16\x2\x5F9\x5FA\a\x19\x2\x2\x5FA\x5FB\ag\x2\x2\x5FB\x5FD"+
		"\a\x15D\x2\x2\x5FC\x5F9\x3\x2\x2\x2\x5FC\x5FD\x3\x2\x2\x2\x5FD\x87\x3"+
		"\x2\x2\x2\x5FE\x600\t\x1D\x2\x2\x5FF\x5FE\x3\x2\x2\x2\x600\x601\x3\x2"+
		"\x2\x2\x601\x5FF\x3\x2\x2\x2\x601\x602\x3\x2\x2\x2\x602\x89\x3\x2\x2\x2"+
		"\x603\x605\t\x1E\x2\x2\x604\x603\x3\x2\x2\x2\x605\x606\x3\x2\x2\x2\x606"+
		"\x604\x3\x2\x2\x2\x606\x607\x3\x2\x2\x2\x607\x8B\x3\x2\x2\x2\x608\x60A"+
		"\x5\x8EH\x2\x609\x608\x3\x2\x2\x2\x60A\x60B\x3\x2\x2\x2\x60B\x609\x3\x2"+
		"\x2\x2\x60B\x60C\x3\x2\x2\x2\x60C\x8D\x3\x2\x2\x2\x60D\x60F\a\x11B\x2"+
		"\x2\x60E\x610\x5\x90I\x2\x60F\x60E\x3\x2\x2\x2\x60F\x610\x3\x2\x2\x2\x610"+
		"\x611\x3\x2\x2\x2\x611\x616\x5\x92J\x2\x612\x613\a\x11E\x2\x2\x613\x615"+
		"\x5\x92J\x2\x614\x612\x3\x2\x2\x2\x615\x618\x3\x2\x2\x2\x616\x614\x3\x2"+
		"\x2\x2\x616\x617\x3\x2\x2\x2\x617\x619\x3\x2\x2\x2\x618\x616\x3\x2\x2"+
		"\x2\x619\x61A\a\x11C\x2\x2\x61A\x61D\x3\x2\x2\x2\x61B\x61D\a\x13A\x2\x2"+
		"\x61C\x60D\x3\x2\x2\x2\x61C\x61B\x3\x2\x2\x2\x61D\x8F\x3\x2\x2\x2\x61E"+
		"\x61F\t\x1F\x2\x2\x61F\x620\a\x11D\x2\x2\x620\x91\x3\x2\x2\x2\x621\x62E"+
		"\x5\xEEx\x2\x622\x62B\a\x117\x2\x2\x623\x628\x5\x94K\x2\x624\x625\a\x11E"+
		"\x2\x2\x625\x627\x5\x94K\x2\x626\x624\x3\x2\x2\x2\x627\x62A\x3\x2\x2\x2"+
		"\x628\x626\x3\x2\x2\x2\x628\x629\x3\x2\x2\x2\x629\x62C\x3\x2\x2\x2\x62A"+
		"\x628\x3\x2\x2\x2\x62B\x623\x3\x2\x2\x2\x62B\x62C\x3\x2\x2\x2\x62C\x62D"+
		"\x3\x2\x2\x2\x62D\x62F\a\x118\x2\x2\x62E\x622\x3\x2\x2\x2\x62E\x62F\x3"+
		"\x2\x2\x2\x62F\x93\x3\x2\x2\x2\x630\x631\x5\xF6|\x2\x631\x632\x5\xCA\x66"+
		"\x2\x632\x633\x5\xCCg\x2\x633\x636\x3\x2\x2\x2\x634\x636\x5\xCCg\x2\x635"+
		"\x630\x3\x2\x2\x2\x635\x634\x3\x2\x2\x2\x636\x95\x3\x2\x2\x2\x637\x638"+
		"\a\x11B\x2\x2\x638\x639\x5\x98M\x2\x639\x63E\x5\x92J\x2\x63A\x63B\a\x11E"+
		"\x2\x2\x63B\x63D\x5\x92J\x2\x63C\x63A\x3\x2\x2\x2\x63D\x640\x3\x2\x2\x2"+
		"\x63E\x63C\x3\x2\x2\x2\x63E\x63F\x3\x2\x2\x2\x63F\x641\x3\x2\x2\x2\x640"+
		"\x63E\x3\x2\x2\x2\x641\x642\a\x11C\x2\x2\x642\x643\a\x15D\x2\x2\x643\x97"+
		"\x3\x2\x2\x2\x644\x645\a\x154\x2\x2\x645\x646\a\x11D\x2\x2\x646\x99\x3"+
		"\x2\x2\x2\x647\x648\a\x31\x2\x2\x648\x64D\x5\xF6|\x2\x649\x64A\a\x11E"+
		"\x2\x2\x64A\x64C\x5\xF6|\x2\x64B\x649\x3\x2\x2\x2\x64C\x64F\x3\x2\x2\x2"+
		"\x64D\x64B\x3\x2\x2\x2\x64D\x64E\x3\x2\x2\x2\x64E\x650\x3\x2\x2\x2\x64F"+
		"\x64D\x3\x2\x2\x2\x650\x651\a\x15D\x2\x2\x651\x66B\x3\x2\x2\x2\x652\x653"+
		"\x6N\x10\x2\x653\x654\a;\x2\x2\x654\x659\x5\xB6\\\x2\x655\x656\a\x11E"+
		"\x2\x2\x656\x658\x5\xB6\\\x2\x657\x655\x3\x2\x2\x2\x658\x65B\x3\x2\x2"+
		"\x2\x659\x657\x3\x2\x2\x2\x659\x65A\x3\x2\x2\x2\x65A\x65C\x3\x2\x2\x2"+
		"\x65B\x659\x3\x2\x2\x2\x65C\x65D\a\x15D\x2\x2\x65D\x66B\x3\x2\x2\x2\x65E"+
		"\x65F\x6N\x11\x2\x65F\x660\a;\x2\x2\x660\x665\x5\xC4\x63\x2\x661\x662"+
		"\a\x11E\x2\x2\x662\x664\x5\xC4\x63\x2\x663\x661\x3\x2\x2\x2\x664\x667"+
		"\x3\x2\x2\x2\x665\x663\x3\x2\x2\x2\x665\x666\x3\x2\x2\x2\x666\x668\x3"+
		"\x2\x2\x2\x667\x665\x3\x2\x2\x2\x668\x669\a\x15D\x2\x2\x669\x66B\x3\x2"+
		"\x2\x2\x66A\x647\x3\x2\x2\x2\x66A\x652\x3\x2\x2\x2\x66A\x65E\x3\x2\x2"+
		"\x2\x66B\x9B\x3\x2\x2\x2\x66C\x7C1\x5\xACW\x2\x66D\x66E\x6O\x12\x2\x66E"+
		"\x7C1\x5\xBA^\x2\x66F\x7C1\x5\xC6\x64\x2\x670\x671\x6O\x13\x2\x671\x7C1"+
		"\x5\xB4[\x2\x672\x7C1\x5\xB2Z\x2\x673\x674\x6O\x14\x2\x674\x7C1\x5\xB8"+
		"]\x2\x675\x677\a\x15\x2\x2\x676\x675\x3\x2\x2\x2\x676\x677\x3\x2\x2\x2"+
		"\x677\x678\x3\x2\x2\x2\x678\x679\aK\x2\x2\x679\x67A\x5\xCCg\x2\x67A\x67B"+
		"\x5\xE\b\x2\x67B\x681\x5*\x16\x2\x67C\x67E\a\x19\x2\x2\x67D\x67F\t \x2"+
		"\x2\x67E\x67D\x3\x2\x2\x2\x67E\x67F\x3\x2\x2\x2\x67F\x682\x3\x2\x2\x2"+
		"\x680\x682\a\x1B\x2\x2\x681\x67C\x3\x2\x2\x2\x681\x680\x3\x2\x2\x2\x682"+
		"\x683\x3\x2\x2\x2\x683\x684\x5\xE\b\x2\x684\x7C1\x3\x2\x2\x2\x685\x688"+
		"\a\x87\x2\x2\x686\x687\a\x117\x2\x2\x687\x689\a\x118\x2\x2\x688\x686\x3"+
		"\x2\x2\x2\x688\x689\x3\x2\x2\x2\x689\x68A\x3\x2\x2\x2\x68A\x7C1\x5\xE"+
		"\b\x2\x68B\x6A0\a!\x2\x2\x68C\x6A1\x5\xCCg\x2\x68D\x68F\a.\x2\x2\x68E"+
		"\x68D\x3\x2\x2\x2\x68E\x68F\x3\x2\x2\x2\x68F\x690\x3\x2\x2\x2\x690\x693"+
		"\a`\x2\x2\x691\x693\a\x93\x2\x2\x692\x68E\x3\x2\x2\x2\x692\x691\x3\x2"+
		"\x2\x2\x693\x694\x3\x2\x2\x2\x694\x695\x5\x12C\x97\x2\x695\x696\x5\xCA"+
		"\x66\x2\x696\x697\x5\xCCg\x2\x697\x6A1\x3\x2\x2\x2\x698\x699\a.\x2\x2"+
		"\x699\x69A\x5\x12C\x97\x2\x69A\x69B\x5\xCA\x66\x2\x69B\x69E\x5\xCCg\x2"+
		"\x69C\x69D\a\x6\x2\x2\x69D\x69F\x5\xFC\x7F\x2\x69E\x69C\x3\x2\x2\x2\x69E"+
		"\x69F\x3\x2\x2\x2\x69F\x6A1\x3\x2\x2\x2\x6A0\x68C\x3\x2\x2\x2\x6A0\x692"+
		"\x3\x2\x2\x2\x6A0\x698\x3\x2\x2\x2\x6A1\x6A2\x3\x2\x2\x2\x6A2\x6A3\t!"+
		"\x2\x2\x6A3\x6A6\x5\xCCg\x2\x6A4\x6A5\a\x42\x2\x2\x6A5\x6A7\x5\xCCg\x2"+
		"\x6A6\x6A4\x3\x2\x2\x2\x6A6\x6A7\x3\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8"+
		"\x6A9\x5\xE\b\x2\x6A9\x6AD\x5*\x16\x2\x6AA\x6AE\a\x34\x2\x2\x6AB\x6AC"+
		"\a\x19\x2\x2\x6AC\x6AE\a!\x2\x2\x6AD\x6AA\x3\x2\x2\x2\x6AD\x6AB\x3\x2"+
		"\x2\x2\x6AE\x6AF\x3\x2\x2\x2\x6AF\x6B0\x5\xE\b\x2\x6B0\x7C1\x3\x2\x2\x2"+
		"\x6B1\x6B2\a%\x2\x2\x6B2\x6B7\x5\xA0Q\x2\x6B3\x6B4\a\x18\x2\x2\x6B4\x6B6"+
		"\x5\xA0Q\x2\x6B5\x6B3\x3\x2\x2\x2\x6B6\x6B9\x3\x2\x2\x2\x6B7\x6B5\x3\x2"+
		"\x2\x2\x6B7\x6B8\x3\x2\x2\x2\x6B8\x6BE\x3\x2\x2\x2\x6B9\x6B7\x3\x2\x2"+
		"\x2\x6BA\x6BB\a\x17\x2\x2\x6BB\x6BC\x5\xE\b\x2\x6BC\x6BD\x5*\x16\x2\x6BD"+
		"\x6BF\x3\x2\x2\x2\x6BE\x6BA\x3\x2\x2\x2\x6BE\x6BF\x3\x2\x2\x2\x6BF\x6C5"+
		"\x3\x2\x2\x2\x6C0\x6C2\a\x19\x2\x2\x6C1\x6C3\a%\x2\x2\x6C2\x6C1\x3\x2"+
		"\x2\x2\x6C2\x6C3\x3\x2\x2\x2\x6C3\x6C6\x3\x2\x2\x2\x6C4\x6C6\a\x1C\x2"+
		"\x2\x6C5\x6C0\x3\x2\x2\x2\x6C5\x6C4\x3\x2\x2\x2\x6C6\x6C7\x3\x2\x2\x2"+
		"\x6C7\x6C8\x5\xE\b\x2\x6C8\x7C1\x3\x2\x2\x2\x6C9\x6CA\a\x15\x2\x2\x6CA"+
		"\x6CB\a\f\x2\x2\x6CB\x6D0\x5\xE\b\x2\x6CC\x6CD\a\f\x2\x2\x6CD\x6CF\x5"+
		"\xA0Q\x2\x6CE\x6CC\x3\x2\x2\x2\x6CF\x6D2\x3\x2\x2\x2\x6D0\x6CE\x3\x2\x2"+
		"\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D7\x3\x2\x2\x2\x6D2\x6D0\x3\x2\x2\x2"+
		"\x6D3\x6D4\a\x35\x2\x2\x6D4\x6D5\x5\xE\b\x2\x6D5\x6D6\x5*\x16\x2\x6D6"+
		"\x6D8\x3\x2\x2\x2\x6D7\x6D3\x3\x2\x2\x2\x6D7\x6D8\x3\x2\x2\x2\x6D8\x6DE"+
		"\x3\x2\x2\x2\x6D9\x6DB\a\x19\x2\x2\x6DA\x6DC\a\f\x2\x2\x6DB\x6DA\x3\x2"+
		"\x2\x2\x6DB\x6DC\x3\x2\x2\x2\x6DC\x6DF\x3\x2\x2\x2\x6DD\x6DF\a\x1A\x2"+
		"\x2\x6DE\x6D9\x3\x2\x2\x2\x6DE\x6DD\x3\x2\x2\x2\x6DF\x6E0\x3\x2\x2\x2"+
		"\x6E0\x6E1\x5\xE\b\x2\x6E1\x7C1\x3\x2\x2\x2\x6E2\x6E3\a\x1D\x2\x2\x6E3"+
		"\x7C1\x5\xE\b\x2\x6E4\x6E5\a/\x2\x2\x6E5\x7C1\x5\xE\b\x2\x6E6\x6E8\a\n"+
		"\x2\x2\x6E7\x6E9\x5\xCCg\x2\x6E8\x6E7\x3\x2\x2\x2\x6E8\x6E9\x3\x2\x2\x2"+
		"\x6E9\x6EA\x3\x2\x2\x2\x6EA\x7C1\x5\xE\b\x2\x6EB\x6EE\a=\x2\x2\x6EC\x6EF"+
		"\a\xAE\x2\x2\x6ED\x6EF\x5\xCCg\x2\x6EE\x6EC\x3\x2\x2\x2\x6EE\x6ED\x3\x2"+
		"\x2\x2\x6EE\x6EF\x3\x2\x2\x2\x6EF\x6F0\x3\x2\x2\x2\x6F0\x7C1\x5\xE\b\x2"+
		"\x6F1\x6FA\t\"\x2\x2\x6F2\x6F7\x5\xCCg\x2\x6F3\x6F4\a\x11E\x2\x2\x6F4"+
		"\x6F6\x5\xCCg\x2\x6F5\x6F3\x3\x2\x2\x2\x6F6\x6F9\x3\x2\x2\x2\x6F7\x6F5"+
		"\x3\x2\x2\x2\x6F7\x6F8\x3\x2\x2\x2\x6F8\x6FB\x3\x2\x2\x2\x6F9\x6F7\x3"+
		"\x2\x2\x2\x6FA\x6F2\x3\x2\x2\x2\x6FA\x6FB\x3\x2\x2\x2\x6FB\x6FC\x3\x2"+
		"\x2\x2\x6FC\x7C1\x5\xE\b\x2\x6FD\x6FE\a\t\x2\x2\x6FE\x6FF\a?\x2\x2\x6FF"+
		"\x700\x5\xE\b\x2\x700\x703\x5*\x16\x2\x701\x702\a<\x2\x2\x702\x704\x5"+
		"\xA6T\x2\x703\x701\x3\x2\x2\x2\x703\x704\x3\x2\x2\x2\x704\x709\x3\x2\x2"+
		"\x2\x705\x706\aN\x2\x2\x706\x707\x5\xE\b\x2\x707\x708\x5*\x16\x2\x708"+
		"\x70A\x3\x2\x2\x2\x709\x705\x3\x2\x2\x2\x709\x70A\x3\x2\x2\x2\x70A\x70B"+
		"\x3\x2\x2\x2\x70B\x70D\a\x19\x2\x2\x70C\x70E\a?\x2\x2\x70D\x70C\x3\x2"+
		"\x2\x2\x70D\x70E\x3\x2\x2\x2\x70E\x70F\x3\x2\x2\x2\x70F\x710\x5\xE\b\x2"+
		"\x710\x7C1\x3\x2\x2\x2\x711\x712\ak\x2\x2\x712\x713\x5\xE\b\x2\x713\x714"+
		"\x5*\x16\x2\x714\x715\aq\x2\x2\x715\x716\x5\xCCg\x2\x716\x717\x5\xE\b"+
		"\x2\x717\x7C1\x3\x2\x2\x2\x718\x71C\a\\\x2\x2\x719\x71A\a!\x2\x2\x71A"+
		"\x71C\a\xD3\x2\x2\x71B\x718\x3\x2\x2\x2\x71B\x719\x3\x2\x2\x2\x71C\x726"+
		"\x3\x2\x2\x2\x71D\x71E\a`\x2\x2\x71E\x727\x5\xF8}\x2\x71F\x722\x5\xF8"+
		"}\x2\x720\x721\a\x6\x2\x2\x721\x723\x5\xFC\x7F\x2\x722\x720\x3\x2\x2\x2"+
		"\x722\x723\x3\x2\x2\x2\x723\x727\x3\x2\x2\x2\x724\x725\a\x93\x2\x2\x725"+
		"\x727\x5\xF8}\x2\x726\x71D\x3\x2\x2\x2\x726\x71F\x3\x2\x2\x2\x726\x724"+
		"\x3\x2\x2\x2\x727\x728\x3\x2\x2\x2\x728\x729\a-\x2\x2\x729\x72A\x5\xCC"+
		"g\x2\x72A\x72B\x5\xE\b\x2\x72B\x72F\x5*\x16\x2\x72C\x730\a\x34\x2\x2\x72D"+
		"\x72E\a\x19\x2\x2\x72E\x730\a!\x2\x2\x72F\x72C\x3\x2\x2\x2\x72F\x72D\x3"+
		"\x2\x2\x2\x730\x731\x3\x2\x2\x2\x731\x732\x5\xE\b\x2\x732\x7C1\x3\x2\x2"+
		"\x2\x733\x735\aO\x2\x2\x734\x736\x5\xCCg\x2\x735\x734\x3\x2\x2\x2\x735"+
		"\x736\x3\x2\x2\x2\x736\x737\x3\x2\x2\x2\x737\x7C1\x5\xE\b\x2\x738\x739"+
		"\ap\x2\x2\x739\x73A\x5\xE\b\x2\x73A\x741\x5*\x16\x2\x73B\x73D\aM\x2\x2"+
		"\x73C\x73E\x5\xA4S\x2\x73D\x73C\x3\x2\x2\x2\x73D\x73E\x3\x2\x2\x2\x73E"+
		"\x740\x3\x2\x2\x2\x73F\x73B\x3\x2\x2\x2\x740\x743\x3\x2\x2\x2\x741\x73F"+
		"\x3\x2\x2\x2\x741\x742\x3\x2\x2\x2\x742\x748\x3\x2\x2\x2\x743\x741\x3"+
		"\x2\x2\x2\x744\x745\aN\x2\x2\x745\x746\x5\xE\b\x2\x746\x747\x5*\x16\x2"+
		"\x747\x749\x3\x2\x2\x2\x748\x744\x3\x2\x2\x2\x748\x749\x3\x2\x2\x2\x749"+
		"\x74A\x3\x2\x2\x2\x74A\x74C\a\x19\x2\x2\x74B\x74D\ap\x2\x2\x74C\x74B\x3"+
		"\x2\x2\x2\x74C\x74D\x3\x2\x2\x2\x74D\x74E\x3\x2\x2\x2\x74E\x74F\x5\xE"+
		"\b\x2\x74F\x7C1\x3\x2\x2\x2\x750\x751\a\t\x2\x2\x751\x752\a\x64\x2\x2"+
		"\x752\x753\x5\xCCg\x2\x753\x754\x5\xE\b\x2\x754\x755\x5*\x16\x2\x755\x757"+
		"\a\x19\x2\x2\x756\x758\a\x64\x2\x2\x757\x756\x3\x2\x2\x2\x757\x758\x3"+
		"\x2\x2\x2\x758\x759\x3\x2\x2\x2\x759\x75A\x5\xE\b\x2\x75A\x7C1\x3\x2\x2"+
		"\x2\x75B\x75C\a\x97\x2\x2\x75C\x75F\a=\x2\x2\x75D\x760\a\xAE\x2\x2\x75E"+
		"\x760\x5\xCCg\x2\x75F\x75D\x3\x2\x2\x2\x75F\x75E\x3\x2\x2\x2\x75F\x760"+
		"\x3\x2\x2\x2\x760\x761\x3\x2\x2\x2\x761\x7C1\x5\xE\b\x2\x762\x763\a\x97"+
		"\x2\x2\x763\x764\t#\x2\x2\x764\x7C1\x5\xE\b\x2\x765\x767\t$\x2\x2\x766"+
		"\x765\x3\x2\x2\x2\x766\x767\x3\x2\x2\x2\x767\x768\x3\x2\x2\x2\x768\x769"+
		"\a\x90\x2\x2\x769\x76A\x5\xCCg\x2\x76A\x76C\x5\xE\b\x2\x76B\x76D\x5\xA2"+
		"R\x2\x76C\x76B\x3\x2\x2\x2\x76D\x76E\x3\x2\x2\x2\x76E\x76C\x3\x2\x2\x2"+
		"\x76E\x76F\x3\x2\x2\x2\x76F\x770\x3\x2\x2\x2\x770\x772\a\x19\x2\x2\x771"+
		"\x773\a\x90\x2\x2\x772\x771\x3\x2\x2\x2\x772\x773\x3\x2\x2\x2\x773\x774"+
		"\x3\x2\x2\x2\x774\x775\x5\xE\b\x2\x775\x7C1\x3\x2\x2\x2\x776\x777\a\t"+
		"\x2\x2\x777\x77A\aJ\x2\x2\x778\x77B\x5\xCCg\x2\x779\x77B\x5\xA8U\x2\x77A"+
		"\x778\x3\x2\x2\x2\x77A\x779\x3\x2\x2\x2\x77B\x77C\x3\x2\x2\x2\x77C\x77D"+
		"\x5\xE\b\x2\x77D\x77E\x5*\x16\x2\x77E\x780\a\x19\x2\x2\x77F\x781\aJ\x2"+
		"\x2\x780\x77F\x3\x2\x2\x2\x780\x781\x3\x2\x2\x2\x781\x782\x3\x2\x2\x2"+
		"\x782\x783\x5\xE\b\x2\x783\x7C1\x3\x2\x2\x2\x784\x785\a\t\x2\x2\x785\x786"+
		"\a\x80\x2\x2\x786\x787\x5\xA8U\x2\x787\x788\x5\xE\b\x2\x788\x789\x5*\x16"+
		"\x2\x789\x78B\a\x19\x2\x2\x78A\x78C\a\x80\x2\x2\x78B\x78A\x3\x2\x2\x2"+
		"\x78B\x78C\x3\x2\x2\x2\x78C\x78D\x3\x2\x2\x2\x78D\x78E\x5\xE\b\x2\x78E"+
		"\x7C1\x3\x2\x2\x2\x78F\x790\a\x98\x2\x2\x790\x791\x5\xCCg\x2\x791\x792"+
		"\x5\xE\b\x2\x792\x793\x5*\x16\x2\x793\x795\a\x19\x2\x2\x794\x796\a\x98"+
		"\x2\x2\x795\x794\x3\x2\x2\x2\x795\x796\x3\x2\x2\x2\x796\x797\x3\x2\x2"+
		"\x2\x797\x798\x5\xE\b\x2\x798\x7C1\x3\x2\x2\x2\x799\x79A\a\t\x2\x2\x79A"+
		"\x79B\x5\x9EP\x2\x79B\x79C\x5\xE\b\x2\x79C\x79D\x5*\x16\x2\x79D\x79F\a"+
		"\x19\x2\x2\x79E\x7A0\x5\x9EP\x2\x79F\x79E\x3\x2\x2\x2\x79F\x7A0\x3\x2"+
		"\x2\x2\x7A0\x7A1\x3\x2\x2\x2\x7A1\x7A2\x5\xE\b\x2\x7A2\x7C1\x3\x2\x2\x2"+
		"\x7A3\x7A4\a\xE9\x2\x2\x7A4\x7A5\x5\xCCg\x2\x7A5\x7A6\x5\xE\b\x2\x7A6"+
		"\x7C1\x3\x2\x2\x2\x7A7\x7A8\t%\x2\x2\x7A8\x7A9\a\x139\x2\x2\x7A9\x7C1"+
		"\a\x15D\x2\x2\x7AA\x7AC\a\x15\x2\x2\x7AB\x7AD\a\x120\x2\x2\x7AC\x7AB\x3"+
		"\x2\x2\x2\x7AC\x7AD\x3\x2\x2\x2\x7AD\x7AE\x3\x2\x2\x2\x7AE\x7B1\x5\xFA"+
		"~\x2\x7AF\x7B0\a\x98\x2\x2\x7B0\x7B2\x5\xE6t\x2\x7B1\x7AF\x3\x2\x2\x2"+
		"\x7B1\x7B2\x3\x2\x2\x2\x7B2\x7B3\x3\x2\x2\x2\x7B3\x7B4\x5\xE\b\x2\x7B4"+
		"\x7C1\x3\x2\x2\x2\x7B5\x7B6\x6O\x15\x2\x7B6\x7BB\x5\xCCg\x2\x7B7\x7B8"+
		"\a\x11E\x2\x2\x7B8\x7BA\x5\xCCg\x2\x7B9\x7B7\x3\x2\x2\x2\x7BA\x7BD\x3"+
		"\x2\x2\x2\x7BB\x7B9\x3\x2\x2\x2\x7BB\x7BC\x3\x2\x2\x2\x7BC\x7BE\x3\x2"+
		"\x2\x2\x7BD\x7BB\x3\x2\x2\x2\x7BE\x7BF\x5\xE\b\x2\x7BF\x7C1\x3\x2\x2\x2"+
		"\x7C0\x66C\x3\x2\x2\x2\x7C0\x66D\x3\x2\x2\x2\x7C0\x66F\x3\x2\x2\x2\x7C0"+
		"\x670\x3\x2\x2\x2\x7C0\x672\x3\x2\x2\x2\x7C0\x673\x3\x2\x2\x2\x7C0\x676"+
		"\x3\x2\x2\x2\x7C0\x685\x3\x2\x2\x2\x7C0\x68B\x3\x2\x2\x2\x7C0\x6B1\x3"+
		"\x2\x2\x2\x7C0\x6C9\x3\x2\x2\x2\x7C0\x6E2\x3\x2\x2\x2\x7C0\x6E4\x3\x2"+
		"\x2\x2\x7C0\x6E6\x3\x2\x2\x2\x7C0\x6EB\x3\x2\x2\x2\x7C0\x6F1\x3\x2\x2"+
		"\x2\x7C0\x6FD\x3\x2\x2\x2\x7C0\x711\x3\x2\x2\x2\x7C0\x71B\x3\x2\x2\x2"+
		"\x7C0\x733\x3\x2\x2\x2\x7C0\x738\x3\x2\x2\x2\x7C0\x750\x3\x2\x2\x2\x7C0"+
		"\x75B\x3\x2\x2\x2\x7C0\x762\x3\x2\x2\x2\x7C0\x766\x3\x2\x2\x2\x7C0\x776"+
		"\x3\x2\x2\x2\x7C0\x784\x3\x2\x2\x2\x7C0\x78F\x3\x2\x2\x2\x7C0\x799\x3"+
		"\x2\x2\x2\x7C0\x7A3\x3\x2\x2\x2\x7C0\x7A7\x3\x2\x2\x2\x7C0\x7AA\x3\x2"+
		"\x2\x2\x7C0\x7B5\x3\x2\x2\x2\x7C1\x9D\x3\x2\x2\x2\x7C2\x7C3\t&\x2\x2\x7C3"+
		"\x9F\x3\x2\x2\x2\x7C4\x7C6\x5\xCCg\x2\x7C5\x7C7\a\xD4\x2\x2\x7C6\x7C5"+
		"\x3\x2\x2\x2\x7C6\x7C7\x3\x2\x2\x2\x7C7\x7C8\x3\x2\x2\x2\x7C8\x7C9\x5"+
		"\xE\b\x2\x7C9\x7CA\x5*\x16\x2\x7CA\xA1\x3\x2\x2\x2\x7CB\x7CC\a\f\x2\x2"+
		"\x7CC\x7CF\x5\xCCg\x2\x7CD\x7CE\a\x95\x2\x2\x7CE\x7D0\x5\xCCg\x2\x7CF"+
		"\x7CD\x3\x2\x2\x2\x7CF\x7D0\x3\x2\x2\x2\x7D0\x7DB\x3\x2\x2\x2\x7D1\x7D2"+
		"\a\f\x2\x2\x7D2\x7D3\x5\xF8}\x2\x7D3\x7D4\a\x6\x2\x2\x7D4\x7D7\x5\xFC"+
		"\x7F\x2\x7D5\x7D6\a\x95\x2\x2\x7D6\x7D8\x5\xCCg\x2\x7D7\x7D5\x3\x2\x2"+
		"\x2\x7D7\x7D8\x3\x2\x2\x2\x7D8\x7DB\x3\x2\x2\x2\x7D9\x7DB\a\x35\x2\x2"+
		"\x7DA\x7CB\x3\x2\x2\x2\x7DA\x7D1\x3\x2\x2\x2\x7DA\x7D9\x3\x2\x2\x2\x7DB"+
		"\x7DC\x3\x2\x2\x2\x7DC\x7DD\x5\xE\b\x2\x7DD\x7DE\x5*\x16\x2\x7DE\xA3\x3"+
		"\x2\x2\x2\x7DF\x7E1\a\x46\x2\x2\x7E0\x7DF\x3\x2\x2\x2\x7E0\x7E1\x3\x2"+
		"\x2\x2\x7E1\x7E3\x3\x2\x2\x2\x7E2\x7E4\x5\xF8}\x2\x7E3\x7E2\x3\x2\x2\x2"+
		"\x7E3\x7E4\x3\x2\x2\x2\x7E4\x7E7\x3\x2\x2\x2\x7E5\x7E6\a\x6\x2\x2\x7E6"+
		"\x7E8\x5\xFC\x7F\x2\x7E7\x7E5\x3\x2\x2\x2\x7E7\x7E8\x3\x2\x2\x2\x7E8\x7EB"+
		"\x3\x2\x2\x2\x7E9\x7EA\a\x95\x2\x2\x7EA\x7EC\x5\xCCg\x2\x7EB\x7E9\x3\x2"+
		"\x2\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC\x7ED\x3\x2\x2\x2\x7ED\x7EE\x5\xE\b\x2"+
		"\x7EE\x7EF\x5*\x16\x2\x7EF\xA5\x3\x2\x2\x2\x7F0\x7F1\aJ\x2\x2\x7F1\x7F3"+
		"\x5\xF8}\x2\x7F2\x7F0\x3\x2\x2\x2\x7F2\x7F3\x3\x2\x2\x2\x7F3\x7F4\x3\x2"+
		"\x2\x2\x7F4\x7F5\x5\xE\b\x2\x7F5\x7F6\x5*\x16\x2\x7F6\xA7\x3\x2\x2\x2"+
		"\x7F7\x7F9\a.\x2\x2\x7F8\x7F7\x3\x2\x2\x2\x7F8\x7F9\x3\x2\x2\x2\x7F9\x7FA"+
		"\x3\x2\x2\x2\x7FA\x7FD\a`\x2\x2\x7FB\x7FD\a\x93\x2\x2\x7FC\x7F8\x3\x2"+
		"\x2\x2\x7FC\x7FB\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2\x2\x7FE\x803\x5\xAAV\x2"+
		"\x7FF\x800\a\x11E\x2\x2\x800\x802\x5\xAAV\x2\x801\x7FF\x3\x2\x2\x2\x802"+
		"\x805\x3\x2\x2\x2\x803\x801\x3\x2\x2\x2\x803\x804\x3\x2\x2\x2\x804\x814"+
		"\x3\x2\x2\x2\x805\x803\x3\x2\x2\x2\x806\x807\a.\x2\x2\x807\x80C\x5\xAA"+
		"V\x2\x808\x809\a\x11E\x2\x2\x809\x80B\x5\xAAV\x2\x80A\x808\x3\x2\x2\x2"+
		"\x80B\x80E\x3\x2\x2\x2\x80C\x80A\x3\x2\x2\x2\x80C\x80D\x3\x2\x2\x2\x80D"+
		"\x811\x3\x2\x2\x2\x80E\x80C\x3\x2\x2\x2\x80F\x810\a\x6\x2\x2\x810\x812"+
		"\x5\xFC\x7F\x2\x811\x80F\x3\x2\x2\x2\x811\x812\x3\x2\x2\x2\x812\x814\x3"+
		"\x2\x2\x2\x813\x7FC\x3\x2\x2\x2\x813\x806\x3\x2\x2\x2\x814\xA9\x3\x2\x2"+
		"\x2\x815\x816\x5\xF8}\x2\x816\x817\x5\xCA\x66\x2\x817\x818\x5\xCCg\x2"+
		"\x818\xAB\x3\x2\x2\x2\x819\x81B\a.\x2\x2\x81A\x81C\a\x41\x2\x2\x81B\x81A"+
		"\x3\x2\x2\x2\x81B\x81C\x3\x2\x2\x2\x81C\x81D\x3\x2\x2\x2\x81D\x822\x5"+
		"\xAEX\x2\x81E\x81F\a\x11E\x2\x2\x81F\x821\x5\xAEX\x2\x820\x81E\x3\x2\x2"+
		"\x2\x821\x824\x3\x2\x2\x2\x822\x820\x3\x2\x2\x2\x822\x823\x3\x2\x2\x2"+
		"\x823\x825\x3\x2\x2\x2\x824\x822\x3\x2\x2\x2\x825\x826\x5\xE\b\x2\x826"+
		"\x88D\x3\x2\x2\x2\x827\x828\a\x41\x2\x2\x828\x829\a.\x2\x2\x829\x82E\x5"+
		"\xAEX\x2\x82A\x82B\a\x11E\x2\x2\x82B\x82D\x5\xAEX\x2\x82C\x82A\x3\x2\x2"+
		"\x2\x82D\x830\x3\x2\x2\x2\x82E\x82C\x3\x2\x2\x2\x82E\x82F\x3\x2\x2\x2"+
		"\x82F\x831\x3\x2\x2\x2\x830\x82E\x3\x2\x2\x2\x831\x832\x5\xE\b\x2\x832"+
		"\x88D\x3\x2\x2\x2\x833\x834\x6W\x16\x2\x834\x835\a\x41\x2\x2\x835\x83A"+
		"\x5\xAEX\x2\x836\x837\a\x11E\x2\x2\x837\x839\x5\xAEX\x2\x838\x836\x3\x2"+
		"\x2\x2\x839\x83C\x3\x2\x2\x2\x83A\x838\x3\x2\x2\x2\x83A\x83B\x3\x2\x2"+
		"\x2\x83B\x83D\x3\x2\x2\x2\x83C\x83A\x3\x2\x2\x2\x83D\x83E\x5\xE\b\x2\x83E"+
		"\x88D\x3\x2\x2\x2\x83F\x841\a\x41\x2\x2\x840\x83F\x3\x2\x2\x2\x840\x841"+
		"\x3\x2\x2\x2\x841\x842\x3\x2\x2\x2\x842\x843\a\x93\x2\x2\x843\x848\x5"+
		"\xB0Y\x2\x844\x845\a\x11E\x2\x2\x845\x847\x5\xB0Y\x2\x846\x844\x3\x2\x2"+
		"\x2\x847\x84A\x3\x2\x2\x2\x848\x846\x3\x2\x2\x2\x848\x849\x3\x2\x2\x2"+
		"\x849\x84B\x3\x2\x2\x2\x84A\x848\x3\x2\x2\x2\x84B\x84C\x5\xE\b\x2\x84C"+
		"\x88D\x3\x2\x2\x2\x84D\x84F\a\x41\x2\x2\x84E\x850\a.\x2\x2\x84F\x84E\x3"+
		"\x2\x2\x2\x84F\x850\x3\x2\x2\x2\x850\x851\x3\x2\x2\x2\x851\x852\a`\x2"+
		"\x2\x852\x857\x5\xB0Y\x2\x853\x854\a\x11E\x2\x2\x854\x856\x5\xB0Y\x2\x855"+
		"\x853\x3\x2\x2\x2\x856\x859\x3\x2\x2\x2\x857\x855\x3\x2\x2\x2\x857\x858"+
		"\x3\x2\x2\x2\x858\x85A\x3\x2\x2\x2\x859\x857\x3\x2\x2\x2\x85A\x85B\x5"+
		"\xE\b\x2\x85B\x88D\x3\x2\x2\x2\x85C\x85E\a.\x2\x2\x85D\x85F\a\x41\x2\x2"+
		"\x85E\x85D\x3\x2\x2\x2\x85E\x85F\x3\x2\x2\x2\x85F\x860\x3\x2\x2\x2\x860"+
		"\x861\a`\x2\x2\x861\x866\x5\xB0Y\x2\x862\x863\a\x11E\x2\x2\x863\x865\x5"+
		"\xB0Y\x2\x864\x862\x3\x2\x2\x2\x865\x868\x3\x2\x2\x2\x866\x864\x3\x2\x2"+
		"\x2\x866\x867\x3\x2\x2\x2\x867\x869\x3\x2\x2\x2\x868\x866\x3\x2\x2\x2"+
		"\x869\x86A\x5\xE\b\x2\x86A\x88D\x3\x2\x2\x2\x86B\x86D\aJ\x2\x2\x86C\x86E"+
		"\a\x41\x2\x2\x86D\x86C\x3\x2\x2\x2\x86D\x86E\x3\x2\x2\x2\x86E\x86F\x3"+
		"\x2\x2\x2\x86F\x870\a\x93\x2\x2\x870\x875\x5\xB0Y\x2\x871\x872\a\x11E"+
		"\x2\x2\x872\x874\x5\xB0Y\x2\x873\x871\x3\x2\x2\x2\x874\x877\x3\x2\x2\x2"+
		"\x875\x873\x3\x2\x2\x2\x875\x876\x3\x2\x2\x2\x876\x878\x3\x2\x2\x2\x877"+
		"\x875\x3\x2\x2\x2\x878\x879\x5\xE\b\x2\x879\x88D\x3\x2\x2\x2\x87A\x87C"+
		"\aJ\x2\x2\x87B\x87D\a\x41\x2\x2\x87C\x87B\x3\x2\x2\x2\x87C\x87D\x3\x2"+
		"\x2\x2\x87D\x87F\x3\x2\x2\x2\x87E\x880\a.\x2\x2\x87F\x87E\x3\x2\x2\x2"+
		"\x87F\x880\x3\x2\x2\x2\x880\x881\x3\x2\x2\x2\x881\x882\a`\x2\x2\x882\x887"+
		"\x5\xB0Y\x2\x883\x884\a\x11E\x2\x2\x884\x886\x5\xB0Y\x2\x885\x883\x3\x2"+
		"\x2\x2\x886\x889\x3\x2\x2\x2\x887\x885\x3\x2\x2\x2\x887\x888\x3\x2\x2"+
		"\x2\x888\x88A\x3\x2\x2\x2\x889\x887\x3\x2\x2\x2\x88A\x88B\x5\xE\b\x2\x88B"+
		"\x88D\x3\x2\x2\x2\x88C\x819\x3\x2\x2\x2\x88C\x827\x3\x2\x2\x2\x88C\x833"+
		"\x3\x2\x2\x2\x88C\x840\x3\x2\x2\x2\x88C\x84D\x3\x2\x2\x2\x88C\x85C\x3"+
		"\x2\x2\x2\x88C\x86B\x3\x2\x2\x2\x88C\x87A\x3\x2\x2\x2\x88D\xAD\x3\x2\x2"+
		"\x2\x88E\x890\aU\x2\x2\x88F\x88E\x3\x2\x2\x2\x88F\x890\x3\x2\x2\x2\x890"+
		"\x892\x3\x2\x2\x2\x891\x893\a\x12\x2\x2\x892\x891\x3\x2\x2\x2\x892\x893"+
		"\x3\x2\x2\x2\x893\x894\x3\x2\x2\x2\x894\x899\x5\xF8}\x2\x895\x896\a\x11B"+
		"\x2\x2\x896\x897\x5\x64\x33\x2\x897\x898\a\x11C\x2\x2\x898\x89A\x3\x2"+
		"\x2\x2\x899\x895\x3\x2\x2\x2\x899\x89A\x3\x2\x2\x2\x89A\x89E\x3\x2\x2"+
		"\x2\x89B\x89C\x5\xCA\x66\x2\x89C\x89D\x5\xCCg\x2\x89D\x89F\x3\x2\x2\x2"+
		"\x89E\x89B\x3\x2\x2\x2\x89E\x89F\x3\x2\x2\x2\x89F\x8A5\x3\x2\x2\x2\x8A0"+
		"\x8A1\t\f\x2\x2\x8A1\x8A3\x5\xFC\x7F\x2\x8A2\x8A4\x5\xBE`\x2\x8A3\x8A2"+
		"\x3\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A6\x3\x2\x2\x2\x8A5\x8A0\x3"+
		"\x2\x2\x2\x8A5\x8A6\x3\x2\x2\x2\x8A6\x8B9\x3\x2\x2\x2\x8A7\x8A8\x6X\x17"+
		"\x2\x8A8\x8A9\x5\xF8}\x2\x8A9\x8AA\a\x117\x2\x2\x8AA\x8AB\x5\x64\x33\x2"+
		"\x8AB\x8AF\a\x118\x2\x2\x8AC\x8AD\x5\xCA\x66\x2\x8AD\x8AE\x5\xCCg\x2\x8AE"+
		"\x8B0\x3\x2\x2\x2\x8AF\x8AC\x3\x2\x2\x2\x8AF\x8B0\x3\x2\x2\x2\x8B0\x8B6"+
		"\x3\x2\x2\x2\x8B1\x8B2\t\f\x2\x2\x8B2\x8B4\x5\xFC\x7F\x2\x8B3\x8B5\x5"+
		"\xBE`\x2\x8B4\x8B3\x3\x2\x2\x2\x8B4\x8B5\x3\x2\x2\x2\x8B5\x8B7\x3\x2\x2"+
		"\x2\x8B6\x8B1\x3\x2\x2\x2\x8B6\x8B7\x3\x2\x2\x2\x8B7\x8B9\x3\x2\x2\x2"+
		"\x8B8\x88F\x3\x2\x2\x2\x8B8\x8A7\x3\x2\x2\x2\x8B9\xAF\x3\x2\x2\x2\x8BA"+
		"\x8BC\aU\x2\x2\x8BB\x8BA\x3\x2\x2\x2\x8BB\x8BC\x3\x2\x2\x2\x8BC\x8BD\x3"+
		"\x2\x2\x2\x8BD\x8BE\x5\xF8}\x2\x8BE\x8BF\x5\xCA\x66\x2\x8BF\x8C0\x5\xCC"+
		"g\x2\x8C0\xB1\x3\x2\x2\x2\x8C1\x8C2\a \x2\x2\x8C2\x8C7\x5\xF6|\x2\x8C3"+
		"\x8C4\a\x11E\x2\x2\x8C4\x8C6\x5\xF6|\x2\x8C5\x8C3\x3\x2\x2\x2\x8C6\x8C9"+
		"\x3\x2\x2\x2\x8C7\x8C5\x3\x2\x2\x2\x8C7\x8C8\x3\x2\x2\x2\x8C8\x8CC\x3"+
		"\x2\x2\x2\x8C9\x8C7\x3\x2\x2\x2\x8CA\x8CB\a-\x2\x2\x8CB\x8CD\x5\xF6|\x2"+
		"\x8CC\x8CA\x3\x2\x2\x2\x8CC\x8CD\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE"+
		"\x8CF\x5\xE\b\x2\x8CF\xB3\x3\x2\x2\x2\x8D0\x8D1\a\x31\x2\x2\x8D1\x8D6"+
		"\x5\xFA~\x2\x8D2\x8D3\a\x11E\x2\x2\x8D3\x8D5\x5\xFA~\x2\x8D4\x8D2\x3\x2"+
		"\x2\x2\x8D5\x8D8\x3\x2\x2\x2\x8D6\x8D4\x3\x2\x2\x2\x8D6\x8D7\x3\x2\x2"+
		"\x2\x8D7\x8D9\x3\x2\x2\x2\x8D8\x8D6\x3\x2\x2\x2\x8D9\x8DA\x5\xE\b\x2\x8DA"+
		"\x8FD\x3\x2\x2\x2\x8DB\x8DC\a\x36\x2\x2\x8DC\x8E1\x5\xFA~\x2\x8DD\x8DE"+
		"\a\x11E\x2\x2\x8DE\x8E0\x5\xFA~\x2\x8DF\x8DD\x3\x2\x2\x2\x8E0\x8E3\x3"+
		"\x2\x2\x2\x8E1\x8DF\x3\x2\x2\x2\x8E1\x8E2\x3\x2\x2\x2\x8E2\x8E4\x3\x2"+
		"\x2\x2\x8E3\x8E1\x3\x2\x2\x2\x8E4\x8E5\x5\xE\b\x2\x8E5\x8FD\x3\x2\x2\x2"+
		"\x8E6\x8E7\a\x38\x2\x2\x8E7\x8EC\x5\xB6\\\x2\x8E8\x8E9\a\x11E\x2\x2\x8E9"+
		"\x8EB\x5\xB6\\\x2\x8EA\x8E8\x3\x2\x2\x2\x8EB\x8EE\x3\x2\x2\x2\x8EC\x8EA"+
		"\x3\x2\x2\x2\x8EC\x8ED\x3\x2\x2\x2\x8ED\x8EF\x3\x2\x2\x2\x8EE\x8EC\x3"+
		"\x2\x2\x2\x8EF\x8F0\x5\xE\b\x2\x8F0\x8FD\x3\x2\x2\x2\x8F1\x8F2\a;\x2\x2"+
		"\x8F2\x8F7\x5\xB6\\\x2\x8F3\x8F4\a\x11E\x2\x2\x8F4\x8F6\x5\xB6\\\x2\x8F5"+
		"\x8F3\x3\x2\x2\x2\x8F6\x8F9\x3\x2\x2\x2\x8F7\x8F5\x3\x2\x2\x2\x8F7\x8F8"+
		"\x3\x2\x2\x2\x8F8\x8FA\x3\x2\x2\x2\x8F9\x8F7\x3\x2\x2\x2\x8FA\x8FB\x5"+
		"\xE\b\x2\x8FB\x8FD\x3\x2\x2\x2\x8FC\x8D0\x3\x2\x2\x2\x8FC\x8DB\x3\x2\x2"+
		"\x2\x8FC\x8E6\x3\x2\x2\x2\x8FC\x8F1\x3\x2\x2\x2\x8FD\xB5\x3\x2\x2\x2\x8FE"+
		"\x900\a\x120\x2\x2\x8FF\x8FE\x3\x2\x2\x2\x8FF\x900\x3\x2\x2\x2\x900\x901"+
		"\x3\x2\x2\x2\x901\x906\x5\xFA~\x2\x902\x903\a\x11B\x2\x2\x903\x904\x5"+
		"\x64\x33\x2\x904\x905\a\x11C\x2\x2\x905\x907\x3\x2\x2\x2\x906\x902\x3"+
		"\x2\x2\x2\x906\x907\x3\x2\x2\x2\x907\x90B\x3\x2\x2\x2\x908\x909\x5\xCA"+
		"\x66\x2\x909\x90A\x5\xCCg\x2\x90A\x90C\x3\x2\x2\x2\x90B\x908\x3\x2\x2"+
		"\x2\x90B\x90C\x3\x2\x2\x2\x90C\xB7\x3\x2\x2\x2\x90D\x90E\a\xD1\x2\x2\x90E"+
		"\x913\x5\xBC_\x2\x90F\x910\a\x11E\x2\x2\x910\x912\x5\xBC_\x2\x911\x90F"+
		"\x3\x2\x2\x2\x912\x915\x3\x2\x2\x2\x913\x911\x3\x2\x2\x2\x913\x914\x3"+
		"\x2\x2\x2\x914\x916\x3\x2\x2\x2\x915\x913\x3\x2\x2\x2\x916\x917\x5\xE"+
		"\b\x2\x917\x967\x3\x2\x2\x2\x918\x919\a\x10\x2\x2\x919\x91E\x5\xBC_\x2"+
		"\x91A\x91B\a\x11E\x2\x2\x91B\x91D\x5\xBC_\x2\x91C\x91A\x3\x2\x2\x2\x91D"+
		"\x920\x3\x2\x2\x2\x91E\x91C\x3\x2\x2\x2\x91E\x91F\x3\x2\x2\x2\x91F\x921"+
		"\x3\x2\x2\x2\x920\x91E\x3\x2\x2\x2\x921\x922\x5\xE\b\x2\x922\x967\x3\x2"+
		"\x2\x2\x923\x924\a\x31\x2\x2\x924\x926\x5\xFA~\x2\x925\x927\x5\xC2\x62"+
		"\x2\x926\x925\x3\x2\x2\x2\x926\x927\x3\x2\x2\x2\x927\x92F\x3\x2\x2\x2"+
		"\x928\x929\a\x11E\x2\x2\x929\x92B\x5\xFA~\x2\x92A\x92C\x5\xC2\x62\x2\x92B"+
		"\x92A\x3\x2\x2\x2\x92B\x92C\x3\x2\x2\x2\x92C\x92E\x3\x2\x2\x2\x92D\x928"+
		"\x3\x2\x2\x2\x92E\x931\x3\x2\x2\x2\x92F\x92D\x3\x2\x2\x2\x92F\x930\x3"+
		"\x2\x2\x2\x930\x932\x3\x2\x2\x2\x931\x92F\x3\x2\x2\x2\x932\x933\x5\xE"+
		"\b\x2\x933\x967\x3\x2\x2\x2\x934\x935\a\x36\x2\x2\x935\x93D\x5\xFA~\x2"+
		"\x936\x937\a\x11E\x2\x2\x937\x939\x5\xFA~\x2\x938\x93A\x5\xC2\x62\x2\x939"+
		"\x938\x3\x2\x2\x2\x939\x93A\x3\x2\x2\x2\x93A\x93C\x3\x2\x2\x2\x93B\x936"+
		"\x3\x2\x2\x2\x93C\x93F\x3\x2\x2\x2\x93D\x93B\x3\x2\x2\x2\x93D\x93E\x3"+
		"\x2\x2\x2\x93E\x940\x3\x2\x2\x2\x93F\x93D\x3\x2\x2\x2\x940\x941\x5\xE"+
		"\b\x2\x941\x967\x3\x2\x2\x2\x942\x943\a\x38\x2\x2\x943\x948\x5\xC4\x63"+
		"\x2\x944\x945\a\x11E\x2\x2\x945\x947\x5\xC4\x63\x2\x946\x944\x3\x2\x2"+
		"\x2\x947\x94A\x3\x2\x2\x2\x948\x946\x3\x2\x2\x2\x948\x949\x3\x2\x2\x2"+
		"\x949\x94B\x3\x2\x2\x2\x94A\x948\x3\x2\x2\x2\x94B\x94C\x5\xE\b\x2\x94C"+
		"\x967\x3\x2\x2\x2\x94D\x94E\a;\x2\x2\x94E\x953\x5\xC4\x63\x2\x94F\x950"+
		"\a\x11E\x2\x2\x950\x952\x5\xC4\x63\x2\x951\x94F\x3\x2\x2\x2\x952\x955"+
		"\x3\x2\x2\x2\x953\x951\x3\x2\x2\x2\x953\x954\x3\x2\x2\x2\x954\x956\x3"+
		"\x2\x2\x2\x955\x953\x3\x2\x2\x2\x956\x957\x5\xE\b\x2\x957\x967\x3\x2\x2"+
		"\x2\x958\x95A\a;\x2\x2\x959\x95B\a\x9B\x2\x2\x95A\x959\x3\x2\x2\x2\x95A"+
		"\x95B\x3\x2\x2\x2\x95B\x95C\x3\x2\x2\x2\x95C\x961\x5\xBC_\x2\x95D\x95E"+
		"\a\x11E\x2\x2\x95E\x960\x5\xBC_\x2\x95F\x95D\x3\x2\x2\x2\x960\x963\x3"+
		"\x2\x2\x2\x961\x95F\x3\x2\x2\x2\x961\x962\x3\x2\x2\x2\x962\x964\x3\x2"+
		"\x2\x2\x963\x961\x3\x2\x2\x2\x964\x965\x5\xE\b\x2\x965\x967\x3\x2\x2\x2"+
		"\x966\x90D\x3\x2\x2\x2\x966\x918\x3\x2\x2\x2\x966\x923\x3\x2\x2\x2\x966"+
		"\x934\x3\x2\x2\x2\x966\x942\x3\x2\x2\x2\x966\x94D\x3\x2\x2\x2\x966\x958"+
		"\x3\x2\x2\x2\x967\xB9\x3\x2\x2\x2\x968\x969\a\xCC\x2\x2\x969\x96E\x5\xC0"+
		"\x61\x2\x96A\x96B\a\x11E\x2\x2\x96B\x96D\x5\xC0\x61\x2\x96C\x96A\x3\x2"+
		"\x2\x2\x96D\x970\x3\x2\x2\x2\x96E\x96C\x3\x2\x2\x2\x96E\x96F\x3\x2\x2"+
		"\x2\x96F\x971\x3\x2\x2\x2\x970\x96E\x3\x2\x2\x2\x971\x972\x5\xE\b\x2\x972"+
		"\x980\x3\x2\x2\x2\x973\x974\a.\x2\x2\x974\x975\a\x9B\x2\x2\x975\x97A\x5"+
		"\xBC_\x2\x976\x977\a\x11E\x2\x2\x977\x979\x5\xBC_\x2\x978\x976\x3\x2\x2"+
		"\x2\x979\x97C\x3\x2\x2\x2\x97A\x978\x3\x2\x2\x2\x97A\x97B\x3\x2\x2\x2"+
		"\x97B\x97D\x3\x2\x2\x2\x97C\x97A\x3\x2\x2\x2\x97D\x97E\x5\xE\b\x2\x97E"+
		"\x980\x3\x2\x2\x2\x97F\x968\x3\x2\x2\x2\x97F\x973\x3\x2\x2\x2\x980\xBB"+
		"\x3\x2\x2\x2\x981\x983\a\x120\x2\x2\x982\x981\x3\x2\x2\x2\x982\x983\x3"+
		"\x2\x2\x2\x983\x984\x3\x2\x2\x2\x984\x99B\x5\xFA~\x2\x985\x986\a\x11B"+
		"\x2\x2\x986\x98B\x5\xCCg\x2\x987\x988\a\x11E\x2\x2\x988\x98A\x5\xCCg\x2"+
		"\x989\x987\x3\x2\x2\x2\x98A\x98D\x3\x2\x2\x2\x98B\x989\x3\x2\x2\x2\x98B"+
		"\x98C\x3\x2\x2\x2\x98C\x98E\x3\x2\x2\x2\x98D\x98B\x3\x2\x2\x2\x98E\x98F"+
		"\a\x11C\x2\x2\x98F\x99C\x3\x2\x2\x2\x990\x991\a\x117\x2\x2\x991\x996\x5"+
		"\xCCg\x2\x992\x993\a\x11E\x2\x2\x993\x995\x5\xCCg\x2\x994\x992\x3\x2\x2"+
		"\x2\x995\x998\x3\x2\x2\x2\x996\x994\x3\x2\x2\x2\x996\x997\x3\x2\x2\x2"+
		"\x997\x999\x3\x2\x2\x2\x998\x996\x3\x2\x2\x2\x999\x99A\a\x118\x2\x2\x99A"+
		"\x99C\x3\x2\x2\x2\x99B\x985\x3\x2\x2\x2\x99B\x990\x3\x2\x2\x2\x99C\x99E"+
		"\x3\x2\x2\x2\x99D\x99F\x5\xC2\x62\x2\x99E\x99D\x3\x2\x2\x2\x99E\x99F\x3"+
		"\x2\x2\x2\x99F\xBD\x3\x2\x2\x2\x9A0\x9A1\a\x88\x2\x2\x9A1\x9A2\x5\xF6"+
		"|\x2\x9A2\xBF\x3\x2\x2\x2\x9A3\x9A5\x5\xFA~\x2\x9A4\x9A6\x5\xC2\x62\x2"+
		"\x9A5\x9A4\x3\x2\x2\x2\x9A5\x9A6\x3\x2\x2\x2\x9A6\xC1\x3\x2\x2\x2\x9A7"+
		"\x9A8\a\x6\x2\x2\x9A8\x9AA\x5\xFC\x7F\x2\x9A9\x9AB\x5\xBE`\x2\x9AA\x9A9"+
		"\x3\x2\x2\x2\x9AA\x9AB\x3\x2\x2\x2\x9AB\xC3\x3\x2\x2\x2\x9AC\x9AE\a\x120"+
		"\x2\x2\x9AD\x9AC\x3\x2\x2\x2\x9AD\x9AE\x3\x2\x2\x2\x9AE\x9AF\x3\x2\x2"+
		"\x2\x9AF\x9B3\x5\xFA~\x2\x9B0\x9B1\x5\xCA\x66\x2\x9B1\x9B2\x5\xCCg\x2"+
		"\x9B2\x9B4\x3\x2\x2\x2\x9B3\x9B0\x3\x2\x2\x2\x9B3\x9B4\x3\x2\x2\x2\x9B4"+
		"\x9B6\x3\x2\x2\x2\x9B5\x9B7\x5\xC2\x62\x2\x9B6\x9B5\x3\x2\x2\x2\x9B6\x9B7"+
		"\x3\x2\x2\x2\x9B7\xC5\x3\x2\x2\x2\x9B8\x9BA\x5\xC8\x65\x2\x9B9\x9B8\x3"+
		"\x2\x2\x2\x9B9\x9BA\x3\x2\x2\x2\x9BA\x9BB\x3\x2\x2\x2\x9BB\x9BC\a.\x2"+
		"\x2\x9BC\x9BD\x5\x12\n\x2\x9BD\x9BE\x5\x14\v\x2\x9BE\x9BF\x5\xE\b\x2\x9BF"+
		"\x9C0\x5*\x16\x2\x9C0\x9C1\a\x19\x2\x2\x9C1\x9C2\x5\x12\n\x2\x9C2\x9C3"+
		"\a\x15D\x2\x2\x9C3\xC7\x3\x2\x2\x2\x9C4\x9C6\t\'\x2\x2\x9C5\x9C4\x3\x2"+
		"\x2\x2\x9C6\x9C7\x3\x2\x2\x2\x9C7\x9C5\x3\x2\x2\x2\x9C7\x9C8\x3\x2\x2"+
		"\x2\x9C8\xC9\x3\x2\x2\x2\x9C9\x9CA\t(\x2\x2\x9CA\xCB\x3\x2\x2\x2\x9CB"+
		"\x9CC\bg\x1\x2\x9CC\x9CD\t)\x2\x2\x9CD\x9ED\x5\xF2z\x2\x9CE\x9CF\t)\x2"+
		"\x2\x9CF\x9D5\a\x120\x2\x2\x9D0\x9D6\x5\xF6|\x2\x9D1\x9D2\a\x117\x2\x2"+
		"\x9D2\x9D3\x5\xCCg\x2\x9D3\x9D4\a\x118\x2\x2\x9D4\x9D6\x3\x2\x2\x2\x9D5"+
		"\x9D0\x3\x2\x2\x2\x9D5\x9D1\x3\x2\x2\x2\x9D6\x9ED\x3\x2\x2\x2\x9D7\x9D8"+
		"\x5\x130\x99\x2\x9D8\x9D9\a\x117\x2\x2\x9D9\x9DA\x5\xE6t\x2\x9DA\x9DB"+
		"\a\x118\x2\x2\x9DB\x9ED\x3\x2\x2\x2\x9DC\x9DD\x6g\x18\x2\x9DD\x9DE\a\x117"+
		"\x2\x2\x9DE\x9DF\x5\xFC\x7F\x2\x9DF\x9E0\a\x118\x2\x2\x9E0\x9E1\x5\xCC"+
		"g\x19\x9E1\x9ED\x3\x2\x2\x2\x9E2\x9E3\az\x2\x2\x9E3\x9ED\x5\xCCg\x17\x9E4"+
		"\x9E5\x6g\x19\x2\x9E5\x9E6\a\x8F\x2\x2\x9E6\x9ED\x5\xCCg\x16\x9E7\x9E8"+
		"\t*\x2\x2\x9E8\x9ED\x5\xCCg\x15\x9E9\x9EA\t+\x2\x2\x9EA\x9ED\x5\xCCg\t"+
		"\x9EB\x9ED\x5\xCEh\x2\x9EC\x9CB\x3\x2\x2\x2\x9EC\x9CE\x3\x2\x2\x2\x9EC"+
		"\x9D7\x3\x2\x2\x2\x9EC\x9DC\x3\x2\x2\x2\x9EC\x9E2\x3\x2\x2\x2\x9EC\x9E4"+
		"\x3\x2\x2\x2\x9EC\x9E7\x3\x2\x2\x2\x9EC\x9E9\x3\x2\x2\x2\x9EC\x9EB\x3"+
		"\x2\x2\x2\x9ED\xA41\x3\x2\x2\x2\x9EE\x9EF\f\x12\x2\x2\x9EF\x9F0\a\xF4"+
		"\x2\x2\x9F0\xA40\x5\xCCg\x13\x9F1\x9F2\f\x11\x2\x2\x9F2\x9F3\t,\x2\x2"+
		"\x9F3\xA40\x5\xCCg\x12\x9F4\x9F5\f\x10\x2\x2\x9F5\x9F6\t-\x2\x2\x9F6\xA40"+
		"\x5\xCCg\x11\x9F7\x9F8\f\xF\x2\x2\x9F8\x9F9\a\xF5\x2\x2\x9F9\xA40\x5\xCC"+
		"g\x10\x9FA\x9FB\f\xE\x2\x2\x9FB\x9FC\a\xE7\x2\x2\x9FC\x9FD\a\xE7\x2\x2"+
		"\x9FD\xA40\x5\xCCg\xF\x9FE\x9FF\f\r\x2\x2\x9FF\xA00\t.\x2\x2\xA00\xA40"+
		"\x5\xCCg\xE\xA01\xA02\f\f\x2\x2\xA02\xA03\a\x120\x2\x2\xA03\xA40\x5\xCC"+
		"g\r\xA04\xA05\f\v\x2\x2\xA05\xA06\a\xF7\x2\x2\xA06\xA40\x5\xCCg\f\xA07"+
		"\xA08\f\n\x2\x2\xA08\xA09\a\x11F\x2\x2\xA09\xA40\x5\xCCg\v\xA0A\xA0B\f"+
		"\b\x2\x2\xA0B\xA0C\t/\x2\x2\xA0C\xA40\x5\xCCg\t\xA0D\xA0E\f\a\x2\x2\xA0E"+
		"\xA0F\t\x30\x2\x2\xA0F\xA40\x5\xCCg\b\xA10\xA11\f\x6\x2\x2\xA11\xA12\t"+
		"\x31\x2\x2\xA12\xA40\x5\xCCg\a\xA13\xA14\f\x5\x2\x2\xA14\xA15\t\x32\x2"+
		"\x2\xA15\xA40\x5\xCCg\x6\xA16\xA17\f\x4\x2\x2\xA17\xA18\t\x33\x2\x2\xA18"+
		"\xA40\x5\xCCg\x4\xA19\xA1A\f!\x2\x2\xA1A\xA1B\t\x34\x2\x2\xA1B\xA40\x5"+
		"\xF2z\x2\xA1C\xA1D\f\x1F\x2\x2\xA1D\xA1E\t\x34\x2\x2\xA1E\xA24\a\x120"+
		"\x2\x2\xA1F\xA25\x5\xF6|\x2\xA20\xA21\a\x117\x2\x2\xA21\xA22\x5\xCCg\x2"+
		"\xA22\xA23\a\x118\x2\x2\xA23\xA25\x3\x2\x2\x2\xA24\xA1F\x3\x2\x2\x2\xA24"+
		"\xA20\x3\x2\x2\x2\xA25\xA40\x3\x2\x2\x2\xA26\xA27\f\x1D\x2\x2\xA27\xA28"+
		"\a\x117\x2\x2\xA28\xA29\x5\xE6t\x2\xA29\xA2A\a\x118\x2\x2\xA2A\xA40\x3"+
		"\x2\x2\x2\xA2B\xA2C\f\x1B\x2\x2\xA2C\xA2D\a\x11B\x2\x2\xA2D\xA2E\x5\xE2"+
		"r\x2\xA2E\xA2F\a\x11C\x2\x2\xA2F\xA40\x3\x2\x2\x2\xA30\xA31\f\x1A\x2\x2"+
		"\xA31\xA32\a\xFA\x2\x2\xA32\xA40\x5\xD0i\x2\xA33\xA34\f\x18\x2\x2\xA34"+
		"\xA40\t\x35\x2\x2\xA35\xA36\f\x14\x2\x2\xA36\xA37\a,\x2\x2\xA37\xA3A\x5"+
		"\xFC\x7F\x2\xA38\xA39\a\x93\x2\x2\xA39\xA3B\x5\xF8}\x2\xA3A\xA38\x3\x2"+
		"\x2\x2\xA3A\xA3B\x3\x2\x2\x2\xA3B\xA40\x3\x2\x2\x2\xA3C\xA3D\f\x13\x2"+
		"\x2\xA3D\xA3E\ay\x2\x2\xA3E\xA40\x5\xFC\x7F\x2\xA3F\x9EE\x3\x2\x2\x2\xA3F"+
		"\x9F1\x3\x2\x2\x2\xA3F\x9F4\x3\x2\x2\x2\xA3F\x9F7\x3\x2\x2\x2\xA3F\x9FA"+
		"\x3\x2\x2\x2\xA3F\x9FE\x3\x2\x2\x2\xA3F\xA01\x3\x2\x2\x2\xA3F\xA04\x3"+
		"\x2\x2\x2\xA3F\xA07\x3\x2\x2\x2\xA3F\xA0A\x3\x2\x2\x2\xA3F\xA0D\x3\x2"+
		"\x2\x2\xA3F\xA10\x3\x2\x2\x2\xA3F\xA13\x3\x2\x2\x2\xA3F\xA16\x3\x2\x2"+
		"\x2\xA3F\xA19\x3\x2\x2\x2\xA3F\xA1C\x3\x2\x2\x2\xA3F\xA26\x3\x2\x2\x2"+
		"\xA3F\xA2B\x3\x2\x2\x2\xA3F\xA30\x3\x2\x2\x2\xA3F\xA33\x3\x2\x2\x2\xA3F"+
		"\xA35\x3\x2\x2\x2\xA3F\xA3C\x3\x2\x2\x2\xA40\xA43\x3\x2\x2\x2\xA41\xA3F"+
		"\x3\x2\x2\x2\xA41\xA42\x3\x2\x2\x2\xA42\xCD\x3\x2\x2\x2\xA43\xA41\x3\x2"+
		"\x2\x2\xA44\xACB\a>\x2\x2\xA45\xACB\a\x44\x2\x2\xA46\xACB\x5\x136\x9C"+
		"\x2\xA47\xACB\x5\x138\x9D\x2\xA48\xACB\x5\x104\x83\x2\xA49\xACB\x5\x108"+
		"\x85\x2\xA4A\xACB\x5\x10C\x87\x2\xA4B\xACB\x5\x116\x8C\x2\xA4C\xACB\x5"+
		"\x11C\x8F\x2\xA4D\xA4E\x6h\x30\x2\xA4E\xA4F\x5\xFC\x7F\x2\xA4F\xA50\a"+
		"\x119\x2\x2\xA50\xA51\x5\xCCg\x2\xA51\xA52\a\x11E\x2\x2\xA52\xA53\a\x121"+
		"\x2\x2\xA53\xA54\x5\xEEx\x2\xA54\xA55\a\x117\x2\x2\xA55\xA56\a\x118\x2"+
		"\x2\xA56\xA57\a\x11A\x2\x2\xA57\xACB\x3\x2\x2\x2\xA58\xA59\x6h\x31\x2"+
		"\xA59\xA5A\x5\xFC\x7F\x2\xA5A\xA5B\a\x119\x2\x2\xA5B\xA5C\x5\xE6t\x2\xA5C"+
		"\xA5E\a\x11A\x2\x2\xA5D\xA5F\x5\xD4k\x2\xA5E\xA5D\x3\x2\x2\x2\xA5E\xA5F"+
		"\x3\x2\x2\x2\xA5F\xACB\x3\x2\x2\x2\xA60\xA61\t\x36\x2\x2\xA61\xA62\a\x117"+
		"\x2\x2\xA62\xA63\x5\xCCg\x2\xA63\xA64\a\x118\x2\x2\xA64\xACB\x3\x2\x2"+
		"\x2\xA65\xA66\aG\x2\x2\xA66\xA67\a\x117\x2\x2\xA67\xA68\x5\xFC\x7F\x2"+
		"\xA68\xA69\a\x118\x2\x2\xA69\xACB\x3\x2\x2\x2\xA6A\xA6B\a@\x2\x2\xA6B"+
		"\xA6C\a\x117\x2\x2\xA6C\xA6D\x5\xFC\x7F\x2\xA6D\xA6E\a\x118\x2\x2\xA6E"+
		"\xACB\x3\x2\x2\x2\xA6F\xA70\aV\x2\x2\xA70\xA71\a\x117\x2\x2\xA71\xA72"+
		"\x5\xFC\x7F\x2\xA72\xA73\a\x118\x2\x2\xA73\xACB\x3\x2\x2\x2\xA74\xACB"+
		"\x5\xF2z\x2\xA75\xA76\x6h\x32\x2\xA76\xA77\x5\x134\x9B\x2\xA77\xA78\a"+
		"\x117\x2\x2\xA78\xA79\x5\xCCg\x2\xA79\xA7A\a\x118\x2\x2\xA7A\xACB\x3\x2"+
		"\x2\x2\xA7B\xA7C\x6h\x33\x2\xA7C\xA7D\x5\x132\x9A\x2\xA7D\xA7E\a\x117"+
		"\x2\x2\xA7E\xA7F\x5\xCCg\x2\xA7F\xA80\a\x118\x2\x2\xA80\xACB\x3\x2\x2"+
		"\x2\xA81\xA82\x6h\x34\x2\xA82\xA83\x5\x134\x9B\x2\xA83\xA84\a\x117\x2"+
		"\x2\xA84\xA85\a\r\x2\x2\xA85\xA86\a\x11E\x2\x2\xA86\xA87\x5\xCCg\x2\xA87"+
		"\xA88\a\x118\x2\x2\xA88\xACB\x3\x2\x2\x2\xA89\xA8A\x6h\x35\x2\xA8A\xA8B"+
		"\x5\x132\x9A\x2\xA8B\xA8C\a\x117\x2\x2\xA8C\xA8D\a\r\x2\x2\xA8D\xA8E\a"+
		"\x11E\x2\x2\xA8E\xA8F\x5\xCCg\x2\xA8F\xA90\a\x118\x2\x2\xA90\xACB\x3\x2"+
		"\x2\x2\xA91\xA92\aS\x2\x2\xA92\xA93\a\x117\x2\x2\xA93\xA94\x5\x134\x9B"+
		"\x2\xA94\xA95\a\x11E\x2\x2\xA95\xA96\x5\xCCg\x2\xA96\xA97\a\x118\x2\x2"+
		"\xA97\xACB\x3\x2\x2\x2\xA98\xA99\aS\x2\x2\xA99\xA9A\a\x117\x2\x2\xA9A"+
		"\xA9B\x5\x132\x9A\x2\xA9B\xA9C\a\x11E\x2\x2\xA9C\xA9D\x5\xCCg\x2\xA9D"+
		"\xA9E\a\x118\x2\x2\xA9E\xACB\x3\x2\x2\x2\xA9F\xAA0\a\xA6\x2\x2\xAA0\xAA1"+
		"\a\x117\x2\x2\xAA1\xAA2\x5\xFC\x7F\x2\xAA2\xAA3\a\x11E\x2\x2\xAA3\xAA4"+
		"\x5\xCCg\x2\xAA4\xAA5\a\x118\x2\x2\xAA5\xACB\x3\x2\x2\x2\xAA6\xACB\x5"+
		"\x102\x82\x2\xAA7\xACB\x5\x100\x81\x2\xAA8\xACB\x5\xEAv\x2\xAA9\xAAA\t"+
		"\x37\x2\x2\xAAA\xAAB\a\x117\x2\x2\xAAB\xAB0\x5\xCCg\x2\xAAC\xAAD\a\x11E"+
		"\x2\x2\xAAD\xAAF\x5\xCCg\x2\xAAE\xAAC\x3\x2\x2\x2\xAAF\xAB2\x3\x2\x2\x2"+
		"\xAB0\xAAE\x3\x2\x2\x2\xAB0\xAB1\x3\x2\x2\x2\xAB1\xAB3\x3\x2\x2\x2\xAB2"+
		"\xAB0\x3\x2\x2\x2\xAB3\xAB4\a\x118\x2\x2\xAB4\xACB\x3\x2\x2\x2\xAB5\xAB6"+
		"\x6h\x36\x2\xAB6\xACB\x5\xD2j\x2\xAB7\xAB8\a\x120\x2\x2\xAB8\xAB9\a\x117"+
		"\x2\x2\xAB9\xABA\x5\xCCg\x2\xABA\xABB\a\x118\x2\x2\xABB\xACB\x3\x2\x2"+
		"\x2\xABC\xABD\a\x120\x2\x2\xABD\xACB\x5\xF6|\x2\xABE\xABF\a\x117\x2\x2"+
		"\xABF\xAC4\x5\xCCg\x2\xAC0\xAC1\a\x11E\x2\x2\xAC1\xAC3\x5\xCCg\x2\xAC2"+
		"\xAC0\x3\x2\x2\x2\xAC3\xAC6\x3\x2\x2\x2\xAC4\xAC2\x3\x2\x2\x2\xAC4\xAC5"+
		"\x3\x2\x2\x2\xAC5\xAC7\x3\x2\x2\x2\xAC6\xAC4\x3\x2\x2\x2\xAC7\xAC8\a\x118"+
		"\x2\x2\xAC8\xACB\x3\x2\x2\x2\xAC9\xACB\av\x2\x2\xACA\xA44\x3\x2\x2\x2"+
		"\xACA\xA45\x3\x2\x2\x2\xACA\xA46\x3\x2\x2\x2\xACA\xA47\x3\x2\x2\x2\xACA"+
		"\xA48\x3\x2\x2\x2\xACA\xA49\x3\x2\x2\x2\xACA\xA4A\x3\x2\x2\x2\xACA\xA4B"+
		"\x3\x2\x2\x2\xACA\xA4C\x3\x2\x2\x2\xACA\xA4D\x3\x2\x2\x2\xACA\xA58\x3"+
		"\x2\x2\x2\xACA\xA60\x3\x2\x2\x2\xACA\xA65\x3\x2\x2\x2\xACA\xA6A\x3\x2"+
		"\x2\x2\xACA\xA6F\x3\x2\x2\x2\xACA\xA74\x3\x2\x2\x2\xACA\xA75\x3\x2\x2"+
		"\x2\xACA\xA7B\x3\x2\x2\x2\xACA\xA81\x3\x2\x2\x2\xACA\xA89\x3\x2\x2\x2"+
		"\xACA\xA91\x3\x2\x2\x2\xACA\xA98\x3\x2\x2\x2\xACA\xA9F\x3\x2\x2\x2\xACA"+
		"\xAA6\x3\x2\x2\x2\xACA\xAA7\x3\x2\x2\x2\xACA\xAA8\x3\x2\x2\x2\xACA\xAA9"+
		"\x3\x2\x2\x2\xACA\xAB5\x3\x2\x2\x2\xACA\xAB7\x3\x2\x2\x2\xACA\xABC\x3"+
		"\x2\x2\x2\xACA\xABE\x3\x2\x2\x2\xACA\xAC9\x3\x2\x2\x2\xACB\xCF\x3\x2\x2"+
		"\x2\xACC\xACD\bi\x1\x2\xACD\xACE\t\x34\x2\x2\xACE\xAD4\x5\xF2z\x2\xACF"+
		"\xAD0\a\x11B\x2\x2\xAD0\xAD1\x5\xE2r\x2\xAD1\xAD2\a\x11C\x2\x2\xAD2\xAD4"+
		"\x3\x2\x2\x2\xAD3\xACC\x3\x2\x2\x2\xAD3\xACF\x3\x2\x2\x2\xAD4\xAE7\x3"+
		"\x2\x2\x2\xAD5\xAD6\f\x5\x2\x2\xAD6\xAD7\a\xFA\x2\x2\xAD7\xAE6\x5\xD0"+
		"i\x5\xAD8\xAD9\f\b\x2\x2\xAD9\xADA\t\x34\x2\x2\xADA\xAE6\x5\xF2z\x2\xADB"+
		"\xADC\f\a\x2\x2\xADC\xADD\a\x117\x2\x2\xADD\xADE\x5\xE6t\x2\xADE\xADF"+
		"\a\x118\x2\x2\xADF\xAE6\x3\x2\x2\x2\xAE0\xAE1\f\x6\x2\x2\xAE1\xAE2\a\x11B"+
		"\x2\x2\xAE2\xAE3\x5\xE2r\x2\xAE3\xAE4\a\x11C\x2\x2\xAE4\xAE6\x3\x2\x2"+
		"\x2\xAE5\xAD5\x3\x2\x2\x2\xAE5\xAD8\x3\x2\x2\x2\xAE5\xADB\x3\x2\x2\x2"+
		"\xAE5\xAE0\x3\x2\x2\x2\xAE6\xAE9\x3\x2\x2\x2\xAE7\xAE5\x3\x2\x2\x2\xAE7"+
		"\xAE8\x3\x2\x2\x2\xAE8\xD1\x3\x2\x2\x2\xAE9\xAE7\x3\x2\x2\x2\xAEA\xAEB"+
		"\x6j;\x2\xAEB\xAEC\a\x31\x2\x2\xAEC\xAED\a\x122\x2\x2\xAED\xB27\x5\x12C"+
		"\x97\x2\xAEE\xAEF\a \x2\x2\xAEF\xAF3\a\x122\x2\x2\xAF0\xAF1\x5\x12C\x97"+
		"\x2\xAF1\xAF2\a\x122\x2\x2\xAF2\xAF4\x3\x2\x2\x2\xAF3\xAF0\x3\x2\x2\x2"+
		"\xAF3\xAF4\x3\x2\x2\x2\xAF4\xAF5\x3\x2\x2\x2\xAF5\xB27\x5\x12C\x97\x2"+
		"\xAF6\xAF7\x6j<\x2\xAF7\xAF8\x5\x12C\x97\x2\xAF8\xAF9\a\x122\x2\x2\xAF9"+
		"\xAFA\x5\x12C\x97\x2\xAFA\xB27\x3\x2\x2\x2\xAFB\xAFC\x6j=\x2\xAFC\xAFD"+
		"\a\x117\x2\x2\xAFD\xAFE\x5\x12C\x97\x2\xAFE\xAFF\a\x118\x2\x2\xAFF\xB00"+
		"\a\x122\x2\x2\xB00\xB01\x5\x12C\x97\x2\xB01\xB27\x3\x2\x2\x2\xB02\xB03"+
		"\x5\x12C\x97\x2\xB03\xB04\a\x122\x2\x2\xB04\xB05\a\x120\x2\x2\xB05\xB06"+
		"\x5\xCCg\x2\xB06\xB27\x3\x2\x2\x2\xB07\xB08\a \x2\x2\xB08\xB0C\a\x122"+
		"\x2\x2\xB09\xB0A\x5\x12C\x97\x2\xB0A\xB0B\a\x122\x2\x2\xB0B\xB0D\x3\x2"+
		"\x2\x2\xB0C\xB09\x3\x2\x2\x2\xB0C\xB0D\x3\x2\x2\x2\xB0D\xB0E\x3\x2\x2"+
		"\x2\xB0E\xB0F\a\x120\x2\x2\xB0F\xB27\x5\xCCg\x2\xB10\xB11\a\x117\x2\x2"+
		"\xB11\xB12\x5\x12C\x97\x2\xB12\xB13\a\x118\x2\x2\xB13\xB14\a\x122\x2\x2"+
		"\xB14\xB15\a\x120\x2\x2\xB15\xB16\x5\xCCg\x2\xB16\xB27\x3\x2\x2\x2\xB17"+
		"\xB1D\x5\x12C\x97\x2\xB18\xB19\a\x117\x2\x2\xB19\xB1A\x5\xCCg\x2\xB1A"+
		"\xB1B\a\x118\x2\x2\xB1B\xB1D\x3\x2\x2\x2\xB1C\xB17\x3\x2\x2\x2\xB1C\xB18"+
		"\x3\x2\x2\x2\xB1D\xB1E\x3\x2\x2\x2\xB1E\xB24\a\x122\x2\x2\xB1F\xB20\a"+
		"\x117\x2\x2\xB20\xB21\x5\xCCg\x2\xB21\xB22\a\x118\x2\x2\xB22\xB25\x3\x2"+
		"\x2\x2\xB23\xB25\x5\xCCg\x2\xB24\xB1F\x3\x2\x2\x2\xB24\xB23\x3\x2\x2\x2"+
		"\xB25\xB27\x3\x2\x2\x2\xB26\xAEA\x3\x2\x2\x2\xB26\xAEE\x3\x2\x2\x2\xB26"+
		"\xAF6\x3\x2\x2\x2\xB26\xAFB\x3\x2\x2\x2\xB26\xB02\x3\x2\x2\x2\xB26\xB07"+
		"\x3\x2\x2\x2\xB26\xB10\x3\x2\x2\x2\xB26\xB1C\x3\x2\x2\x2\xB27\xD3\x3\x2"+
		"\x2\x2\xB28\xB2B\x5\xD6l\x2\xB29\xB2B\x5\xE0q\x2\xB2A\xB28\x3\x2\x2\x2"+
		"\xB2A\xB29\x3\x2\x2\x2\xB2B\xD5\x3\x2\x2\x2\xB2C\xB35\a\x119\x2\x2\xB2D"+
		"\xB32\x5\xD8m\x2\xB2E\xB2F\a\x11E\x2\x2\xB2F\xB31\x5\xD8m\x2\xB30\xB2E"+
		"\x3\x2\x2\x2\xB31\xB34\x3\x2\x2\x2\xB32\xB30\x3\x2\x2\x2\xB32\xB33\x3"+
		"\x2\x2\x2\xB33\xB36\x3\x2\x2\x2\xB34\xB32\x3\x2\x2\x2\xB35\xB2D\x3\x2"+
		"\x2\x2\xB35\xB36\x3\x2\x2\x2\xB36\xB37\x3\x2\x2\x2\xB37\xB38\a\x11A\x2"+
		"\x2\xB38\xD7\x3\x2\x2\x2\xB39\xB3A\x5\xF6|\x2\xB3A\xB3B\x5\xCA\x66\x2"+
		"\xB3B\xB3C\x5\xDAn\x2\xB3C\xD9\x3\x2\x2\x2\xB3D\xB40\x5\xD4k\x2\xB3E\xB40"+
		"\x5\xCCg\x2\xB3F\xB3D\x3\x2\x2\x2\xB3F\xB3E\x3\x2\x2\x2\xB40\xDB\x3\x2"+
		"\x2\x2\xB41\xB42\a\x119\x2\x2\xB42\xB47\x5\xDEp\x2\xB43\xB44\a\x11E\x2"+
		"\x2\xB44\xB46\x5\xDEp\x2\xB45\xB43\x3\x2\x2\x2\xB46\xB49\x3\x2\x2\x2\xB47"+
		"\xB45\x3\x2\x2\x2\xB47\xB48\x3\x2\x2\x2\xB48\xB4A\x3\x2\x2\x2\xB49\xB47"+
		"\x3\x2\x2\x2\xB4A\xB4B\a\x11A\x2\x2\xB4B\xDD\x3\x2\x2\x2\xB4C\xB4F\x5"+
		"\xDCo\x2\xB4D\xB4F\x5\xCCg\x2\xB4E\xB4C\x3\x2\x2\x2\xB4E\xB4D\x3\x2\x2"+
		"\x2\xB4F\xDF\x3\x2\x2\x2\xB50\xB51\a\x119\x2\x2\xB51\xB56\x5\xDEp\x2\xB52"+
		"\xB53\a\x11E\x2\x2\xB53\xB55\x5\xDEp\x2\xB54\xB52\x3\x2\x2\x2\xB55\xB58"+
		"\x3\x2\x2\x2\xB56\xB54\x3\x2\x2\x2\xB56\xB57\x3\x2\x2\x2\xB57\xB59\x3"+
		"\x2\x2\x2\xB58\xB56\x3\x2\x2\x2\xB59\xB5A\a\x11A\x2\x2\xB5A\xE1\x3\x2"+
		"\x2\x2\xB5B\xB60\x5\xE4s\x2\xB5C\xB5D\a\x11E\x2\x2\xB5D\xB5F\x5\xE4s\x2"+
		"\xB5E\xB5C\x3\x2\x2\x2\xB5F\xB62\x3\x2\x2\x2\xB60\xB5E\x3\x2\x2\x2\xB60"+
		"\xB61\x3\x2\x2\x2\xB61\xE3\x3\x2\x2\x2\xB62\xB60\x3\x2\x2\x2\xB63\xB64"+
		"\x5\xCCg\x2\xB64\xE5\x3\x2\x2\x2\xB65\xB6A\x5\xE8u\x2\xB66\xB67\a\x11E"+
		"\x2\x2\xB67\xB69\x5\xE8u\x2\xB68\xB66\x3\x2\x2\x2\xB69\xB6C\x3\x2\x2\x2"+
		"\xB6A\xB68\x3\x2\x2\x2\xB6A\xB6B\x3\x2\x2\x2\xB6B\xE7\x3\x2\x2\x2\xB6C"+
		"\xB6A\x3\x2\x2\x2\xB6D\xB6E\x6u>\x2\xB6E\xB6F\x5\xF6|\x2\xB6F\xB71\a\x102"+
		"\x2\x2\xB70\xB72\t\x38\x2\x2\xB71\xB70\x3\x2\x2\x2\xB71\xB72\x3\x2\x2"+
		"\x2\xB72\xB74\x3\x2\x2\x2\xB73\xB75\x5\xCCg\x2\xB74\xB73\x3\x2\x2\x2\xB74"+
		"\xB75\x3\x2\x2\x2\xB75\xB87\x3\x2\x2\x2\xB76\xB77\ah\x2\x2\xB77\xB78\a"+
		"\x93\x2\x2\xB78\xB87\x5\xF8}\x2\xB79\xB7A\ah\x2\x2\xB7A\xB7B\x5\xF8}\x2"+
		"\xB7B\xB7C\a\x6\x2\x2\xB7C\xB7D\x5\xFC\x7F\x2\xB7D\xB87\x3\x2\x2\x2\xB7E"+
		"\xB7F\ah\x2\x2\xB7F\xB87\a\xD9\x2\x2\xB80\xB82\t\x38\x2\x2\xB81\xB80\x3"+
		"\x2\x2\x2\xB81\xB82\x3\x2\x2\x2\xB82\xB84\x3\x2\x2\x2\xB83\xB85\x5\xCC"+
		"g\x2\xB84\xB83\x3\x2\x2\x2\xB84\xB85\x3\x2\x2\x2\xB85\xB87\x3\x2\x2\x2"+
		"\xB86\xB6D\x3\x2\x2\x2\xB86\xB76\x3\x2\x2\x2\xB86\xB79\x3\x2\x2\x2\xB86"+
		"\xB7E\x3\x2\x2\x2\xB86\xB81\x3\x2\x2\x2\xB87\xE9\x3\x2\x2\x2\xB88\xB89"+
		"\t\x39\x2\x2\xB89\xB8A\a\x117\x2\x2\xB8A\xB8B\x5\xCCg\x2\xB8B\xB8D\a\x11E"+
		"\x2\x2\xB8C\xB8E\x5\xCCg\x2\xB8D\xB8C\x3\x2\x2\x2\xB8D\xB8E\x3\x2\x2\x2"+
		"\xB8E\xB8F\x3\x2\x2\x2\xB8F\xB91\a\x11E\x2\x2\xB90\xB92\x5\xCCg\x2\xB91"+
		"\xB90\x3\x2\x2\x2\xB91\xB92\x3\x2\x2\x2\xB92\xB93\x3\x2\x2\x2\xB93\xB94"+
		"\a\x118\x2\x2\xB94\xEB\x3\x2\x2\x2\xB95\xB96\bw\x1\x2\xB96\xB97\x5\xF0"+
		"y\x2\xB97\xB98\a\x123\x2\x2\xB98\xB9F\x3\x2\x2\x2\xB99\xB9A\f\x4\x2\x2"+
		"\xB9A\xB9B\x5\xF2z\x2\xB9B\xB9C\a\x123\x2\x2\xB9C\xB9E\x3\x2\x2\x2\xB9D"+
		"\xB99\x3\x2\x2\x2\xB9E\xBA1\x3\x2\x2\x2\xB9F\xB9D\x3\x2\x2\x2\xB9F\xBA0"+
		"\x3\x2\x2\x2\xBA0\xED\x3\x2\x2\x2\xBA1\xB9F\x3\x2\x2\x2\xBA2\xBA3\bx\x1"+
		"\x2\xBA3\xBA4\x5\xF0y\x2\xBA4\xBAA\x3\x2\x2\x2\xBA5\xBA6\f\x4\x2\x2\xBA6"+
		"\xBA7\a\x123\x2\x2\xBA7\xBA9\x5\xF2z\x2\xBA8\xBA5\x3\x2\x2\x2\xBA9\xBAC"+
		"\x3\x2\x2\x2\xBAA\xBA8\x3\x2\x2\x2\xBAA\xBAB\x3\x2\x2\x2\xBAB\xEF\x3\x2"+
		"\x2\x2\xBAC\xBAA\x3\x2\x2\x2\xBAD\xBAE\a#\x2\x2\xBAE\xBAF\a\x124\x2\x2"+
		"\xBAF\xBB6\x5\xF2z\x2\xBB0\xBB1\x5\xF6|\x2\xBB1\xBB2\a\x124\x2\x2\xBB2"+
		"\xBB3\x5\xF2z\x2\xBB3\xBB6\x3\x2\x2\x2\xBB4\xBB6\x5\xF2z\x2\xBB5\xBAD"+
		"\x3\x2\x2\x2\xBB5\xBB0\x3\x2\x2\x2\xBB5\xBB4\x3\x2\x2\x2\xBB6\xF1\x3\x2"+
		"\x2\x2\xBB7\xBB9\x5\x12C\x97\x2\xBB8\xBBA\x5\xF4{\x2\xBB9\xBB8\x3\x2\x2"+
		"\x2\xBB9\xBBA\x3\x2\x2\x2\xBBA\xF3\x3\x2\x2\x2\xBBB\xBBC\a\xE5\x2\x2\xBBC"+
		"\xBC1\x5\xFC\x7F\x2\xBBD\xBBE\a\x11E\x2\x2\xBBE\xBC0\x5\xFC\x7F\x2\xBBF"+
		"\xBBD\x3\x2\x2\x2\xBC0\xBC3\x3\x2\x2\x2\xBC1\xBBF\x3\x2\x2\x2\xBC1\xBC2"+
		"\x3\x2\x2\x2\xBC2\xBC4\x3\x2\x2\x2\xBC3\xBC1\x3\x2\x2\x2\xBC4\xBC5\a\xE7"+
		"\x2\x2\xBC5\xF5\x3\x2\x2\x2\xBC6\xBC7\x5\x12C\x97\x2\xBC7\xF7\x3\x2\x2"+
		"\x2\xBC8\xBC9\a\xD5\x2\x2\xBC9\xBCB\a\x123\x2\x2\xBCA\xBC8\x3\x2\x2\x2"+
		"\xBCA\xBCB\x3\x2\x2\x2\xBCB\xBCC\x3\x2\x2\x2\xBCC\xBCD\x5\x12C\x97\x2"+
		"\xBCD\xF9\x3\x2\x2\x2\xBCE\xBCF\a\xD5\x2\x2\xBCF\xBD1\a\x123\x2\x2\xBD0"+
		"\xBCE\x3\x2\x2\x2\xBD0\xBD1\x3\x2\x2\x2\xBD1\xBD2\x3\x2\x2\x2\xBD2\xBD3"+
		"\x5\xF6|\x2\xBD3\xFB\x3\x2\x2\x2\xBD4\xBD5\a\x9B\x2\x2\xBD5\xBD6\a\x88"+
		"\x2\x2\xBD6\xBE5\x5\x100\x81\x2\xBD7\xBD8\x5\x100\x81\x2\xBD8\xBD9\a\xA6"+
		"\x2\x2\xBD9\xBE5\x3\x2\x2\x2\xBDA\xBDC\x5\x100\x81\x2\xBDB\xBDD\x5\xFE"+
		"\x80\x2\xBDC\xBDB\x3\x2\x2\x2\xBDD\xBDE\x3\x2\x2\x2\xBDE\xBDC\x3\x2\x2"+
		"\x2\xBDE\xBDF\x3\x2\x2\x2\xBDF\xBE5\x3\x2\x2\x2\xBE0\xBE5\x5\x100\x81"+
		"\x2\xBE1\xBE2\x5\x100\x81\x2\xBE2\xBE3\a\xFA\x2\x2\xBE3\xBE5\x3\x2\x2"+
		"\x2\xBE4\xBD4\x3\x2\x2\x2\xBE4\xBD7\x3\x2\x2\x2\xBE4\xBDA\x3\x2\x2\x2"+
		"\xBE4\xBE0\x3\x2\x2\x2\xBE4\xBE1\x3\x2\x2\x2\xBE5\xFD\x3\x2\x2\x2\xBE6"+
		"\xBEA\a\x11B\x2\x2\xBE7\xBE9\a\x11E\x2\x2\xBE8\xBE7\x3\x2\x2\x2\xBE9\xBEC"+
		"\x3\x2\x2\x2\xBEA\xBE8\x3\x2\x2\x2\xBEA\xBEB\x3\x2\x2\x2\xBEB\xBED\x3"+
		"\x2\x2\x2\xBEC\xBEA\x3\x2\x2\x2\xBED\xBF0\a\x11C\x2\x2\xBEE\xBF0\a\x13A"+
		"\x2\x2\xBEF\xBE6\x3\x2\x2\x2\xBEF\xBEE\x3\x2\x2\x2\xBF0\xFF\x3\x2\x2\x2"+
		"\xBF1\xBF5\x5\x134\x9B\x2\xBF2\xBF5\x5\x132\x9A\x2\xBF3\xBF5\x5\xEEx\x2"+
		"\xBF4\xBF1\x3\x2\x2\x2\xBF4\xBF2\x3\x2\x2\x2\xBF4\xBF3\x3\x2\x2\x2\xBF5"+
		"\x101\x3\x2\x2\x2\xBF6\xBF9\x5\x134\x9B\x2\xBF7\xBF9\x5\x132\x9A\x2\xBF8"+
		"\xBF6\x3\x2\x2\x2\xBF8\xBF7\x3\x2\x2\x2\xBF9\x103\x3\x2\x2\x2\xBFA\xBFB"+
		"\a\xE5\x2\x2\xBFB\xBFC\x5\xFC\x7F\x2\xBFC\xBFD\a\xE7\x2\x2\xBFD\xBFF\x3"+
		"\x2\x2\x2\xBFE\xBFA\x3\x2\x2\x2\xBFE\xBFF\x3\x2\x2\x2\xBFF\xC00\x3\x2"+
		"\x2\x2\xC00\xC01\a\x119\x2\x2\xC01\xC14\a\x11A\x2\x2\xC02\xC03\a\xE5\x2"+
		"\x2\xC03\xC04\x5\xFC\x7F\x2\xC04\xC05\a\xE7\x2\x2\xC05\xC07\x3\x2\x2\x2"+
		"\xC06\xC02\x3\x2\x2\x2\xC06\xC07\x3\x2\x2\x2\xC07\xC08\x3\x2\x2\x2\xC08"+
		"\xC09\a\x119\x2\x2\xC09\xC0E\x5\x106\x84\x2\xC0A\xC0B\a\x11E\x2\x2\xC0B"+
		"\xC0D\x5\x106\x84\x2\xC0C\xC0A\x3\x2\x2\x2\xC0D\xC10\x3\x2\x2\x2\xC0E"+
		"\xC0C\x3\x2\x2\x2\xC0E\xC0F\x3\x2\x2\x2\xC0F\xC11\x3\x2\x2\x2\xC10\xC0E"+
		"\x3\x2\x2\x2\xC11\xC12\a\x11A\x2\x2\xC12\xC14\x3\x2\x2\x2\xC13\xBFE\x3"+
		"\x2\x2\x2\xC13\xC06\x3\x2\x2\x2\xC14\x105\x3\x2\x2\x2\xC15\xC17\x5\xCC"+
		"g\x2\xC16\xC15\x3\x2\x2\x2\xC16\xC17\x3\x2\x2\x2\xC17\x107\x3\x2\x2\x2"+
		"\xC18\xC19\a\xE\x2\x2\xC19\xC22\a\x119\x2\x2\xC1A\xC1F\x5\x10A\x86\x2"+
		"\xC1B\xC1C\a\x11E\x2\x2\xC1C\xC1E\x5\x10A\x86\x2\xC1D\xC1B\x3\x2\x2\x2"+
		"\xC1E\xC21\x3\x2\x2\x2\xC1F\xC1D\x3\x2\x2\x2\xC1F\xC20\x3\x2\x2\x2\xC20"+
		"\xC23\x3\x2\x2\x2\xC21\xC1F\x3\x2\x2\x2\xC22\xC1A\x3\x2\x2\x2\xC22\xC23"+
		"\x3\x2\x2\x2\xC23\xC24\x3\x2\x2\x2\xC24\xC25\a\x11A\x2\x2\xC25\x109\x3"+
		"\x2\x2\x2\xC26\xC27\x5\xF6|\x2\xC27\xC28\x5\xCA\x66\x2\xC28\xC29\x5\xCC"+
		"g\x2\xC29\xC2C\x3\x2\x2\x2\xC2A\xC2C\x5\xCCg\x2\xC2B\xC26\x3\x2\x2\x2"+
		"\xC2B\xC2A\x3\x2\x2\x2\xC2C\x10B\x3\x2\x2\x2\xC2D\xC2E\a\x119\x2\x2\xC2E"+
		"\xC30\a\xFC\x2\x2\xC2F\xC31\a\x153\x2\x2\xC30\xC2F\x3\x2\x2\x2\xC30\xC31"+
		"\x3\x2\x2\x2\xC31\xC32\x3\x2\x2\x2\xC32\xC33\x5\x10E\x88\x2\xC33\xC34"+
		"\a\x11A\x2\x2\xC34\xC4A\x3\x2\x2\x2\xC35\xC36\a\x119\x2\x2\xC36\xC38\a"+
		"\x11F\x2\x2\xC37\xC39\x5\x110\x89\x2\xC38\xC37\x3\x2\x2\x2\xC38\xC39\x3"+
		"\x2\x2\x2\xC39\xC3A\x3\x2\x2\x2\xC3A\xC3C\a\x11F\x2\x2\xC3B\xC3D\a\x153"+
		"\x2\x2\xC3C\xC3B\x3\x2\x2\x2\xC3C\xC3D\x3\x2\x2\x2\xC3D\xC3E\x3\x2\x2"+
		"\x2\xC3E\xC3F\x5\x10E\x88\x2\xC3F\xC40\a\x11A\x2\x2\xC40\xC4A\x3\x2\x2"+
		"\x2\xC41\xC43\a\x119\x2\x2\xC42\xC44\x5\x110\x89\x2\xC43\xC42\x3\x2\x2"+
		"\x2\xC43\xC44\x3\x2\x2\x2\xC44\xC45\x3\x2\x2\x2\xC45\xC46\a\x153\x2\x2"+
		"\xC46\xC47\x5\x10E\x88\x2\xC47\xC48\a\x11A\x2\x2\xC48\xC4A\x3\x2\x2\x2"+
		"\xC49\xC2D\x3\x2\x2\x2\xC49\xC35\x3\x2\x2\x2\xC49\xC41\x3\x2\x2\x2\xC4A"+
		"\x10D\x3\x2\x2\x2\xC4B\xC4D\x5\xCCg\x2\xC4C\xC4B\x3\x2\x2\x2\xC4C\xC4D"+
		"\x3\x2\x2\x2\xC4D\xC53\x3\x2\x2\x2\xC4E\xC4F\x5\xE\b\x2\xC4F\xC50\x5*"+
		"\x16\x2\xC50\xC53\x3\x2\x2\x2\xC51\xC53\x5\x114\x8B\x2\xC52\xC4C\x3\x2"+
		"\x2\x2\xC52\xC4E\x3\x2\x2\x2\xC52\xC51\x3\x2\x2\x2\xC53\x10F\x3\x2\x2"+
		"\x2\xC54\xC57\x5\x112\x8A\x2\xC55\xC57\x5\x118\x8D\x2\xC56\xC54\x3\x2"+
		"\x2\x2\xC56\xC55\x3\x2\x2\x2\xC57\x111\x3\x2\x2\x2\xC58\xC5D\x5\x12C\x97"+
		"\x2\xC59\xC5A\a\x11E\x2\x2\xC5A\xC5C\x5\x12C\x97\x2\xC5B\xC59\x3\x2\x2"+
		"\x2\xC5C\xC5F\x3\x2\x2\x2\xC5D\xC5B\x3\x2\x2\x2\xC5D\xC5E\x3\x2\x2\x2"+
		"\xC5E\x113\x3\x2\x2\x2\xC5F\xC5D\x3\x2\x2\x2\xC60\xC62\x5\xCCg\x2\xC61"+
		"\xC60\x3\x2\x2\x2\xC61\xC62\x3\x2\x2\x2\xC62\xC63\x3\x2\x2\x2\xC63\xC65"+
		"\a\x11E\x2\x2\xC64\xC61\x3\x2\x2\x2\xC65\xC66\x3\x2\x2\x2\xC66\xC64\x3"+
		"\x2\x2\x2\xC66\xC67\x3\x2\x2\x2\xC67\xC68\x3\x2\x2\x2\xC68\xC69\x5\xCC"+
		"g\x2\xC69\x115\x3\x2\x2\x2\xC6A\xC6C\ax\x2\x2\xC6B\xC6A\x3\x2\x2\x2\xC6B"+
		"\xC6C\x3\x2\x2\x2\xC6C\xC6D\x3\x2\x2\x2\xC6D\xC73\aW\x2\x2\xC6E\xC70\a"+
		"\x117\x2\x2\xC6F\xC71\x5\x118\x8D\x2\xC70\xC6F\x3\x2\x2\x2\xC70\xC71\x3"+
		"\x2\x2\x2\xC71\xC72\x3\x2\x2\x2\xC72\xC74\a\x118\x2\x2\xC73\xC6E\x3\x2"+
		"\x2\x2\xC73\xC74\x3\x2\x2\x2\xC74\xC75\x3\x2\x2\x2\xC75\xC76\a\x119\x2"+
		"\x2\xC76\xC77\x5\x10E\x88\x2\xC77\xC78\a\x11A\x2\x2\xC78\x117\x3\x2\x2"+
		"\x2\xC79\xC7E\x5\x11A\x8E\x2\xC7A\xC7B\a\x11E\x2\x2\xC7B\xC7D\x5\x11A"+
		"\x8E\x2\xC7C\xC7A\x3\x2\x2\x2\xC7D\xC80\x3\x2\x2\x2\xC7E\xC7C\x3\x2\x2"+
		"\x2\xC7E\xC7F\x3\x2\x2\x2\xC7F\x119\x3\x2\x2\x2\xC80\xC7E\x3\x2\x2\x2"+
		"\xC81\xC82\x5\x12C\x97\x2\xC82\xC83\x5(\x15\x2\xC83\xC84\x5\xFC\x7F\x2"+
		"\xC84\x11B\x3\x2\x2\x2\xC85\xC86\x5\x11E\x90\x2\xC86\xC87\x5\x120\x91"+
		"\x2\xC87\x11D\x3\x2\x2\x2\xC88\xC89\a\x81\x2\x2\xC89\xC8C\x5\x12C\x97"+
		"\x2\xC8A\xC8B\a\x6\x2\x2\xC8B\xC8D\x5\x100\x81\x2\xC8C\xC8A\x3\x2\x2\x2"+
		"\xC8C\xC8D\x3\x2\x2\x2\xC8D\xC8E\x3\x2\x2\x2\xC8E\xC8F\a-\x2\x2\xC8F\xC90"+
		"\x5\xCCg\x2\xC90\x11F\x3\x2\x2\x2\xC91\xC93\x5\x122\x92\x2\xC92\xC91\x3"+
		"\x2\x2\x2\xC93\xC96\x3\x2\x2\x2\xC94\xC92\x3\x2\x2\x2\xC94\xC95\x3\x2"+
		"\x2\x2\xC95\xC97\x3\x2\x2\x2\xC96\xC94\x3\x2\x2\x2\xC97\xC99\x5\x128\x95"+
		"\x2\xC98\xC9A\x5\x12A\x96\x2\xC99\xC98\x3\x2\x2\x2\xC99\xC9A\x3\x2\x2"+
		"\x2\xC9A\x121\x3\x2\x2\x2\xC9B\xCBC\x5\x11E\x90\x2\xC9C\xC9D\a\x86\x2"+
		"\x2\xC9D\xC9E\x5\x12C\x97\x2\xC9E\xC9F\x5\xCA\x66\x2\xC9F\xCA0\x5\xCC"+
		"g\x2\xCA0\xCBC\x3\x2\x2\x2\xCA1\xCA2\a\x96\x2\x2\xCA2\xCBC\x5\xCCg\x2"+
		"\xCA3\xCA4\a\x85\x2\x2\xCA4\xCA7\x5\x12C\x97\x2\xCA5\xCA6\a\x6\x2\x2\xCA6"+
		"\xCA8\x5\x100\x81\x2\xCA7\xCA5\x3\x2\x2\x2\xCA7\xCA8\x3\x2\x2\x2\xCA8"+
		"\xCA9\x3\x2\x2\x2\xCA9\xCAA\a-\x2\x2\xCAA\xCAB\x5\xCCg\x2\xCAB\xCAC\a"+
		"\x89\x2\x2\xCAC\xCAD\x5\xCCg\x2\xCAD\xCAE\a~\x2\x2\xCAE\xCB0\x5\xCCg\x2"+
		"\xCAF\xCB1\x5\x124\x93\x2\xCB0\xCAF\x3\x2\x2\x2\xCB0\xCB1\x3\x2\x2\x2"+
		"\xCB1\xCBC\x3\x2\x2\x2\xCB2\xCB3\a\x8A\x2\x2\xCB3\xCB8\x5\x126\x94\x2"+
		"\xCB4\xCB5\a\x11E\x2\x2\xCB5\xCB7\x5\x126\x94\x2\xCB6\xCB4\x3\x2\x2\x2"+
		"\xCB7\xCBA\x3\x2\x2\x2\xCB8\xCB6\x3\x2\x2\x2\xCB8\xCB9\x3\x2\x2\x2\xCB9"+
		"\xCBC\x3\x2\x2\x2\xCBA\xCB8\x3\x2\x2\x2\xCBB\xC9B\x3\x2\x2\x2\xCBB\xC9C"+
		"\x3\x2\x2\x2\xCBB\xCA1\x3\x2\x2\x2\xCBB\xCA3\x3\x2\x2\x2\xCBB\xCB2\x3"+
		"\x2\x2\x2\xCBC\x123\x3\x2\x2\x2\xCBD\xCBE\a\x84\x2\x2\xCBE\xCBF\x5\x12C"+
		"\x97\x2\xCBF\x125\x3\x2\x2\x2\xCC0\xCC2\x5\xCCg\x2\xCC1\xCC3\t:\x2\x2"+
		"\xCC2\xCC1\x3\x2\x2\x2\xCC2\xCC3\x3\x2\x2\x2\xCC3\x127\x3\x2\x2\x2\xCC4"+
		"\xCC5\a\x8E\x2\x2\xCC5\xCCC\x5\xCCg\x2\xCC6\xCC7\a\x82\x2\x2\xCC7\xCC8"+
		"\x5\xCCg\x2\xCC8\xCC9\a{\x2\x2\xCC9\xCCA\x5\xCCg\x2\xCCA\xCCC\x3\x2\x2"+
		"\x2\xCCB\xCC4\x3\x2\x2\x2\xCCB\xCC6\x3\x2\x2\x2\xCCC\x129\x3\x2\x2\x2"+
		"\xCCD\xCCE\a\x84\x2\x2\xCCE\xCCF\x5\x12C\x97\x2\xCCF\xCD0\x5\x120\x91"+
		"\x2\xCD0\x12B\x3\x2\x2\x2\xCD1\xCDA\a\x154\x2\x2\xCD2\xCDA\x5\x13C\x9F"+
		"\x2\xCD3\xCDA\x5\x13E\xA0\x2\xCD4\xCDA\x5\x15E\xB0\x2\xCD5\xCD6\x6\x97"+
		"\x41\x2\xCD6\xCDA\x5\x132\x9A\x2\xCD7\xCD8\x6\x97\x42\x2\xCD8\xCDA\x5"+
		"\x134\x9B\x2\xCD9\xCD1\x3\x2\x2\x2\xCD9\xCD2\x3\x2\x2\x2\xCD9\xCD3\x3"+
		"\x2\x2\x2\xCD9\xCD4\x3\x2\x2\x2\xCD9\xCD5\x3\x2\x2\x2\xCD9\xCD7\x3\x2"+
		"\x2\x2\xCDA\x12D\x3\x2\x2\x2\xCDB\xCE3\a\x154\x2\x2\xCDC\xCE3\a\x135\x2"+
		"\x2\xCDD\xCE3\x5\x13C\x9F\x2\xCDE\xCE3\x5\x13E\xA0\x2\xCDF\xCE3\x5\x15E"+
		"\xB0\x2\xCE0\xCE3\x5\x132\x9A\x2\xCE1\xCE3\x5\x134\x9B\x2\xCE2\xCDB\x3"+
		"\x2\x2\x2\xCE2\xCDC\x3\x2\x2\x2\xCE2\xCDD\x3\x2\x2\x2\xCE2\xCDE\x3\x2"+
		"\x2\x2\xCE2\xCDF\x3\x2\x2\x2\xCE2\xCE0\x3\x2\x2\x2\xCE2\xCE1\x3\x2\x2"+
		"\x2\xCE3\x12F\x3\x2\x2\x2\xCE4\xCE5\t;\x2\x2\xCE5\x131\x3\x2\x2\x2\xCE6"+
		"\xCE7\t<\x2\x2\xCE7\x133\x3\x2\x2\x2\xCE8\xCE9\t=\x2\x2\xCE9\x135\x3\x2"+
		"\x2\x2\xCEA\xCEB\t>\x2\x2\xCEB\x137\x3\x2\x2\x2\xCEC\xCED\a\x12E\x2\x2"+
		"\xCED\xCEE\a\x123\x2\x2\xCEE\xCEF\a\x12E\x2\x2\xCEF\xCF0\a\x123\x2\x2"+
		"\xCF0\xD0B\a\x12E\x2\x2\xCF1\xCF2\a\x119\x2\x2\xCF2\xCF3\a\xF4\x2\x2\xCF3"+
		"\xCF4\a\x12E\x2\x2\xCF4\xCF5\a\xF1\x2\x2\xCF5\xCF6\a\x12E\x2\x2\xCF6\xCF7"+
		"\a\xF1\x2\x2\xCF7\xD01\a\x12E\x2\x2\xCF8\xCFF\a\x12E\x2\x2\xCF9\xCFA\a"+
		"\x11D\x2\x2\xCFA\xCFD\a\x12E\x2\x2\xCFB\xCFC\a\x11D\x2\x2\xCFC\xCFE\a"+
		"\x12E\x2\x2\xCFD\xCFB\x3\x2\x2\x2\xCFD\xCFE\x3\x2\x2\x2\xCFE\xD00\x3\x2"+
		"\x2\x2\xCFF\xCF9\x3\x2\x2\x2\xCFF\xD00\x3\x2\x2\x2\xD00\xD02\x3\x2\x2"+
		"\x2\xD01\xCF8\x3\x2\x2\x2\xD01\xD02\x3\x2\x2\x2\xD02\xD06\x3\x2\x2\x2"+
		"\xD03\xD05\v\x2\x2\x2\xD04\xD03\x3\x2\x2\x2\xD05\xD08\x3\x2\x2\x2\xD06"+
		"\xD07\x3\x2\x2\x2\xD06\xD04\x3\x2\x2\x2\xD07\xD09\x3\x2\x2\x2\xD08\xD06"+
		"\x3\x2\x2\x2\xD09\xD0B\a\x11A\x2\x2\xD0A\xCEC\x3\x2\x2\x2\xD0A\xCF1\x3"+
		"\x2\x2\x2\xD0B\x139\x3\x2\x2\x2\xD0C\xD0D\t?\x2\x2\xD0D\x13B\x3\x2\x2"+
		"\x2\xD0E\xD0F\t@\x2\x2\xD0F\x13D\x3\x2\x2\x2\xD10\xD11\t\x41\x2\x2\xD11"+
		"\x13F\x3\x2\x2\x2\xD12\xD14\x5\x8CG\x2\xD13\xD12\x3\x2\x2\x2\xD13\xD14"+
		"\x3\x2\x2\x2\xD14\xD16\x3\x2\x2\x2\xD15\xD17\x5\x142\xA2\x2\xD16\xD15"+
		"\x3\x2\x2\x2\xD16\xD17\x3\x2\x2\x2\xD17\xD18\x3\x2\x2\x2\xD18\xD1A\a\xE"+
		"\x2\x2\xD19\xD1B\x5\xECw\x2\xD1A\xD19\x3\x2\x2\x2\xD1A\xD1B\x3\x2\x2\x2"+
		"\xD1B\xD1C\x3\x2\x2\x2\xD1C\xD1E\x5\x12C\x97\x2\xD1D\xD1F\x5H%\x2\xD1E"+
		"\xD1D\x3\x2\x2\x2\xD1E\xD1F\x3\x2\x2\x2\xD1F\xD29\x3\x2\x2\x2\xD20\xD21"+
		"\t\x42\x2\x2\xD21\xD26\x5\xFC\x7F\x2\xD22\xD23\a\x11E\x2\x2\xD23\xD25"+
		"\x5\xFC\x7F\x2\xD24\xD22\x3\x2\x2\x2\xD25\xD28\x3\x2\x2\x2\xD26\xD24\x3"+
		"\x2\x2\x2\xD26\xD27\x3\x2\x2\x2\xD27\xD2A\x3\x2\x2\x2\xD28\xD26\x3\x2"+
		"\x2\x2\xD29\xD20\x3\x2\x2\x2\xD29\xD2A\x3\x2\x2\x2\xD2A\xD34\x3\x2\x2"+
		"\x2\xD2B\xD2C\a^\x2\x2\xD2C\xD31\x5\xFC\x7F\x2\xD2D\xD2E\a\x11E\x2\x2"+
		"\xD2E\xD30\x5\xFC\x7F\x2\xD2F\xD2D\x3\x2\x2\x2\xD30\xD33\x3\x2\x2\x2\xD31"+
		"\xD2F\x3\x2\x2\x2\xD31\xD32\x3\x2\x2\x2\xD32\xD35\x3\x2\x2\x2\xD33\xD31"+
		"\x3\x2\x2\x2\xD34\xD2B\x3\x2\x2\x2\xD34\xD35\x3\x2\x2\x2\xD35\xD39\x3"+
		"\x2\x2\x2\xD36\xD38\x5L\'\x2\xD37\xD36\x3\x2\x2\x2\xD38\xD3B\x3\x2\x2"+
		"\x2\xD39\xD37\x3\x2\x2\x2\xD39\xD3A\x3\x2\x2\x2\xD3A\xD3C\x3\x2\x2\x2"+
		"\xD3B\xD39\x3\x2\x2\x2\xD3C\xD40\x5\xE\b\x2\xD3D\xD3F\x5\x144\xA3\x2\xD3E"+
		"\xD3D\x3\x2\x2\x2\xD3F\xD42\x3\x2\x2\x2\xD40\xD3E\x3\x2\x2\x2\xD40\xD41"+
		"\x3\x2\x2\x2\xD41\xD43\x3\x2\x2\x2\xD42\xD40\x3\x2\x2\x2\xD43\xD44\a\xC0"+
		"\x2\x2\xD44\xD45\x5\xE\b\x2\xD45\x141\x3\x2\x2\x2\xD46\xD48\t\x43\x2\x2"+
		"\xD47\xD46\x3\x2\x2\x2\xD48\xD49\x3\x2\x2\x2\xD49\xD47\x3\x2\x2\x2\xD49"+
		"\xD4A\x3\x2\x2\x2\xD4A\x143\x3\x2\x2\x2\xD4B\xD51\x5\x146\xA4\x2\xD4C"+
		"\xD51\x5\x152\xAA\x2\xD4D\xD51\x5\x15C\xAF\x2\xD4E\xD51\x5\x14A\xA6\x2"+
		"\xD4F\xD51\x5\x156\xAC\x2\xD50\xD4B\x3\x2\x2\x2\xD50\xD4C\x3\x2\x2\x2"+
		"\xD50\xD4D\x3\x2\x2\x2\xD50\xD4E\x3\x2\x2\x2\xD50\xD4F\x3\x2\x2\x2\xD51"+
		"\x145\x3\x2\x2\x2\xD52\xD53\x5\x148\xA5\x2\xD53\xD54\a\x11D\x2\x2\xD54"+
		"\xD55\x5\xE\b\x2\xD55\x147\x3\x2\x2\x2\xD56\xD57\t\x44\x2\x2\xD57\x149"+
		"\x3\x2\x2\x2\xD58\xD5A\x5\x8CG\x2\xD59\xD58\x3\x2\x2\x2\xD59\xD5A\x3\x2"+
		"\x2\x2\xD5A\xD5C\x3\x2\x2\x2\xD5B\xD5D\x5\x150\xA9\x2\xD5C\xD5B\x3\x2"+
		"\x2\x2\xD5C\xD5D\x3\x2\x2\x2\xD5D\xD5E\x3\x2\x2\x2\xD5E\xD5F\a\x32\x2"+
		"\x2\xD5F\xD61\x5\x12C\x97\x2\xD60\xD62\x5\x14C\xA7\x2\xD61\xD60\x3\x2"+
		"\x2\x2\xD61\xD62\x3\x2\x2\x2\xD62\xD6E\x3\x2\x2\x2\xD63\xD6F\x5\x14E\xA8"+
		"\x2\xD64\xD65\a\x11E\x2\x2\xD65\xD67\x5\x12C\x97\x2\xD66\xD68\x5\x14C"+
		"\xA7\x2\xD67\xD66\x3\x2\x2\x2\xD67\xD68\x3\x2\x2\x2\xD68\xD6A\x3\x2\x2"+
		"\x2\xD69\xD64\x3\x2\x2\x2\xD6A\xD6D\x3\x2\x2\x2\xD6B\xD69\x3\x2\x2\x2"+
		"\xD6B\xD6C\x3\x2\x2\x2\xD6C\xD6F\x3\x2\x2\x2\xD6D\xD6B\x3\x2\x2\x2\xD6E"+
		"\xD63\x3\x2\x2\x2\xD6E\xD6B\x3\x2\x2\x2\xD6F\xD70\x3\x2\x2\x2\xD70\xD71"+
		"\x5\xE\b\x2\xD71\x14B\x3\x2\x2\x2\xD72\xD7B\a\x117\x2\x2\xD73\xD78\x5"+
		"\x12C\x97\x2\xD74\xD75\a\x11E\x2\x2\xD75\xD77\x5\x12C\x97\x2\xD76\xD74"+
		"\x3\x2\x2\x2\xD77\xD7A\x3\x2\x2\x2\xD78\xD76\x3\x2\x2\x2\xD78\xD79\x3"+
		"\x2\x2\x2\xD79\xD7C\x3\x2\x2\x2\xD7A\xD78\x3\x2\x2\x2\xD7B\xD73\x3\x2"+
		"\x2\x2\xD7B\xD7C\x3\x2\x2\x2\xD7C\xD7D\x3\x2\x2\x2\xD7D\xD7E\a\x118\x2"+
		"\x2\xD7E\x14D\x3\x2\x2\x2\xD7F\xD80\a,\x2\x2\xD80\xD82\x5\x12C\x97\x2"+
		"\xD81\xD7F\x3\x2\x2\x2\xD81\xD82\x3\x2\x2\x2\xD82\xD85\x3\x2\x2\x2\xD83"+
		"\xD84\a-\x2\x2\xD84\xD86\x5\x12C\x97\x2\xD85\xD83\x3\x2\x2\x2\xD85\xD86"+
		"\x3\x2\x2\x2\xD86\x14F\x3\x2\x2\x2\xD87\xD89\t\x45\x2\x2\xD88\xD87\x3"+
		"\x2\x2\x2\xD89\xD8A\x3\x2\x2\x2\xD8A\xD88\x3\x2\x2\x2\xD8A\xD8B\x3\x2"+
		"\x2\x2\xD8B\x151\x3\x2\x2\x2\xD8C\xD8E\x5\x150\xA9\x2\xD8D\xD8C\x3\x2"+
		"\x2\x2\xD8D\xD8E\x3\x2\x2\x2\xD8E\xD8F\x3\x2\x2\x2\xD8F\xD90\a\x93\x2"+
		"\x2\xD90\xD9D\x5\x12C\x97\x2\xD91\xD9E\x5\x14E\xA8\x2\xD92\xD93\a\x11E"+
		"\x2\x2\xD93\xD95\x5\x12C\x97\x2\xD94\xD92\x3\x2\x2\x2\xD95\xD98\x3\x2"+
		"\x2\x2\xD96\xD94\x3\x2\x2\x2\xD96\xD97\x3\x2\x2\x2\xD97\xD9B\x3\x2\x2"+
		"\x2\xD98\xD96\x3\x2\x2\x2\xD99\xD9A\a\x6\x2\x2\xD9A\xD9C\x5\xFC\x7F\x2"+
		"\xD9B\xD99\x3\x2\x2\x2\xD9B\xD9C\x3\x2\x2\x2\xD9C\xD9E\x3\x2\x2\x2\xD9D"+
		"\xD91\x3\x2\x2\x2\xD9D\xD96\x3\x2\x2\x2\xD9E\xDA0\x3\x2\x2\x2\xD9F\xDA1"+
		"\a\xC9\x2\x2\xDA0\xD9F\x3\x2\x2\x2\xDA0\xDA1\x3\x2\x2\x2\xDA1\xDA3\x3"+
		"\x2\x2\x2\xDA2\xDA4\a\xC7\x2\x2\xDA3\xDA2\x3\x2\x2\x2\xDA3\xDA4\x3\x2"+
		"\x2\x2\xDA4\xDA6\x3\x2\x2\x2\xDA5\xDA7\x5\x154\xAB\x2\xDA6\xDA5\x3\x2"+
		"\x2\x2\xDA6\xDA7\x3\x2\x2\x2\xDA7\xDA9\x3\x2\x2\x2\xDA8\xDAA\a\xC6\x2"+
		"\x2\xDA9\xDA8\x3\x2\x2\x2\xDA9\xDAA\x3\x2\x2\x2\xDAA\xDAB\x3\x2\x2\x2"+
		"\xDAB\xDAC\x5\xE\b\x2\xDAC\x153\x3\x2\x2\x2\xDAD\xDAE\a\xBE\x2\x2\xDAE"+
		"\xDAF\x5\x148\xA5\x2\xDAF\x155\x3\x2\x2\x2\xDB0\xDB2\x5\x8CG\x2\xDB1\xDB0"+
		"\x3\x2\x2\x2\xDB1\xDB2\x3\x2\x2\x2\xDB2\xDB3\x3\x2\x2\x2\xDB3\xDB5\x5"+
		"\x158\xAD\x2\xDB4\xDB6\x5\x150\xA9\x2\xDB5\xDB4\x3\x2\x2\x2\xDB5\xDB6"+
		"\x3\x2\x2\x2\xDB6\xDB7\x3\x2\x2\x2\xDB7\xDB8\a\x32\x2\x2\xDB8\xDBB\x5"+
		"\x12C\x97\x2\xDB9\xDBA\a\x93\x2\x2\xDBA\xDBC\x5\x12C\x97\x2\xDBB\xDB9"+
		"\x3\x2\x2\x2\xDBB\xDBC\x3\x2\x2\x2\xDBC\xDBF\x3\x2\x2\x2\xDBD\xDBE\a\x6"+
		"\x2\x2\xDBE\xDC0\x5\xFC\x7F\x2\xDBF\xDBD\x3\x2\x2\x2\xDBF\xDC0\x3\x2\x2"+
		"\x2\xDC0\xDC1\x3\x2\x2\x2\xDC1\xDC2\x5\xE\b\x2\xDC2\x157\x3\x2\x2\x2\xDC3"+
		"\xDC5\t\x46\x2\x2\xDC4\xDC3\x3\x2\x2\x2\xDC5\xDC6\x3\x2\x2\x2\xDC6\xDC4"+
		"\x3\x2\x2\x2\xDC6\xDC7\x3\x2\x2\x2\xDC7\x159\x3\x2\x2\x2\xDC8\xDCA\x5"+
		"\x8CG\x2\xDC9\xDC8\x3\x2\x2\x2\xDC9\xDCA\x3\x2\x2\x2\xDCA\xDCC\x3\x2\x2"+
		"\x2\xDCB\xDCD\x5\x158\xAD\x2\xDCC\xDCB\x3\x2\x2\x2\xDCC\xDCD\x3\x2\x2"+
		"\x2\xDCD\xDCF\x3\x2\x2\x2\xDCE\xDD0\x5\x150\xA9\x2\xDCF\xDCE\x3\x2\x2"+
		"\x2\xDCF\xDD0\x3\x2\x2\x2\xDD0\xDD1\x3\x2\x2\x2\xDD1\xDD5\a\x32\x2\x2"+
		"\xDD2\xDD3\x5\x12C\x97\x2\xDD3\xDD4\a\x11D\x2\x2\xDD4\xDD6\x3\x2\x2\x2"+
		"\xDD5\xDD2\x3\x2\x2\x2\xDD5\xDD6\x3\x2\x2\x2\xDD6\xDD7\x3\x2\x2\x2\xDD7"+
		"\xDD8\x5\x14\v\x2\xDD8\xDD9\x5\xE\b\x2\xDD9\xDDD\x5*\x16\x2\xDDA\xDDB"+
		"\a\x19\x2\x2\xDDB\xDDC\a\x32\x2\x2\xDDC\xDDE\x5\xE\b\x2\xDDD\xDDA\x3\x2"+
		"\x2\x2\xDDD\xDDE\x3\x2\x2\x2\xDDE\x15B\x3\x2\x2\x2\xDDF\xDE1\x5\x8CG\x2"+
		"\xDE0\xDDF\x3\x2\x2\x2\xDE0\xDE1\x3\x2\x2\x2\xDE1\xDE2\x3\x2\x2\x2\xDE2"+
		"\xDE4\a\xC4\x2\x2\xDE3\xDE5\x5\x158\xAD\x2\xDE4\xDE3\x3\x2\x2\x2\xDE4"+
		"\xDE5\x3\x2\x2\x2\xDE5\xDE7\x3\x2\x2\x2\xDE6\xDE8\x5\x150\xA9\x2\xDE7"+
		"\xDE6\x3\x2\x2\x2\xDE7\xDE8\x3\x2\x2\x2\xDE8\xDE9\x3\x2\x2\x2\xDE9\xDEA"+
		"\a\x32\x2\x2\xDEA\xDEB\x5\x14\v\x2\xDEB\xDEC\x5\xE\b\x2\xDEC\xDF0\x5*"+
		"\x16\x2\xDED\xDEE\a\x19\x2\x2\xDEE\xDEF\a\x32\x2\x2\xDEF\xDF1\x5\xE\b"+
		"\x2\xDF0\xDED\x3\x2\x2\x2\xDF0\xDF1\x3\x2\x2\x2\xDF1\x15D\x3\x2\x2\x2"+
		"\xDF2\xDF3\tG\x2\x2\xDF3\x15F\x3\x2\x2\x2\xDF4\xDF6\x5\x8CG\x2\xDF5\xDF4"+
		"\x3\x2\x2\x2\xDF5\xDF6\x3\x2\x2\x2\xDF6\xDF7\x3\x2\x2\x2\xDF7\xDF9\a\x11"+
		"\x2\x2\xDF8\xDFA\x5\x46$\x2\xDF9\xDF8\x3\x2\x2\x2\xDF9\xDFA\x3\x2\x2\x2"+
		"\xDFA\xDFB\x3\x2\x2\x2\xDFB\xDFD\a\xE\x2\x2\xDFC\xDFE\x5\xECw\x2\xDFD"+
		"\xDFC\x3\x2\x2\x2\xDFD\xDFE\x3\x2\x2\x2\xDFE\xDFF\x3\x2\x2\x2\xDFF\xE01"+
		"\x5\x12C\x97\x2\xE00\xE02\x5H%\x2\xE01\xE00\x3\x2\x2\x2\xE01\xE02\x3\x2"+
		"\x2\x2\xE02\xE05\x3\x2\x2\x2\xE03\xE04\a\x6\x2\x2\xE04\xE06\x5\xFC\x7F"+
		"\x2\xE05\xE03\x3\x2\x2\x2\xE05\xE06\x3\x2\x2\x2\xE06\xE08\x3\x2\x2\x2"+
		"\xE07\xE09\x5\xBE`\x2\xE08\xE07\x3\x2\x2\x2\xE08\xE09\x3\x2\x2\x2\xE09"+
		"\xE0D\x3\x2\x2\x2\xE0A\xE0C\x5L\'\x2\xE0B\xE0A\x3\x2\x2\x2\xE0C\xE0F\x3"+
		"\x2\x2\x2\xE0D\xE0B\x3\x2\x2\x2\xE0D\xE0E\x3\x2\x2\x2\xE0E\xE11\x3\x2"+
		"\x2\x2\xE0F\xE0D\x3\x2\x2\x2\xE10\xE12\a\xCD\x2\x2\xE11\xE10\x3\x2\x2"+
		"\x2\xE11\xE12\x3\x2\x2\x2\xE12\xE13\x3\x2\x2\x2\xE13\xE17\x5\xE\b\x2\xE14"+
		"\xE16\x5\x162\xB2\x2\xE15\xE14\x3\x2\x2\x2\xE16\xE19\x3\x2\x2\x2\xE17"+
		"\xE15\x3\x2\x2\x2\xE17\xE18\x3\x2\x2\x2\xE18\xE1D\x3\x2\x2\x2\xE19\xE17"+
		"\x3\x2\x2\x2\xE1A\xE1E\a\xCB\x2\x2\xE1B\xE1C\a\x19\x2\x2\xE1C\xE1E\a\x11"+
		"\x2\x2\xE1D\xE1A\x3\x2\x2\x2\xE1D\xE1B\x3\x2\x2\x2\xE1E\xE1F\x3\x2\x2"+
		"\x2\xE1F\xE20\x5\xE\b\x2\xE20\x161\x3\x2\x2\x2\xE21\xE2A\x5\x166\xB4\x2"+
		"\xE22\xE2A\x5\x168\xB5\x2\xE23\xE2A\x5\x164\xB3\x2\xE24\xE2A\x5\x16C\xB7"+
		"\x2\xE25\xE2A\x5\x16E\xB8\x2\xE26\xE2A\x5\x170\xB9\x2\xE27\xE2A\x5v<\x2"+
		"\xE28\xE2A\x5~@\x2\xE29\xE21\x3\x2\x2\x2\xE29\xE22\x3\x2\x2\x2\xE29\xE23"+
		"\x3\x2\x2\x2\xE29\xE24\x3\x2\x2\x2\xE29\xE25\x3\x2\x2\x2\xE29\xE26\x3"+
		"\x2\x2\x2\xE29\xE27\x3\x2\x2\x2\xE29\xE28\x3\x2\x2\x2\xE2A\x163\x3\x2"+
		"\x2\x2\xE2B\xE2D\x5\x8CG\x2\xE2C\xE2B\x3\x2\x2\x2\xE2C\xE2D\x3\x2\x2\x2"+
		"\xE2D\xE2F\x3\x2\x2\x2\xE2E\xE30\x5\x8A\x46\x2\xE2F\xE2E\x3\x2\x2\x2\xE2F"+
		"\xE30\x3\x2\x2\x2\xE30\xE31\x3\x2\x2\x2\xE31\xE32\x5\x12\n\x2\xE32\xE35"+
		"\x5\x14\v\x2\xE33\xE34\a\xD0\x2\x2\xE34\xE36\x5\xCCg\x2\xE35\xE33\x3\x2"+
		"\x2\x2\xE35\xE36\x3\x2\x2\x2\xE36\xE3C\x3\x2\x2\x2\xE37\xE38\a\xCF\x2"+
		"\x2\xE38\xE39\a\x117\x2\x2\xE39\xE3A\x5\x12C\x97\x2\xE3A\xE3B\a\x118\x2"+
		"\x2\xE3B\xE3D\x3\x2\x2\x2\xE3C\xE37\x3\x2\x2\x2\xE3C\xE3D\x3\x2\x2\x2"+
		"\xE3D\xE3E\x3\x2\x2\x2\xE3E\xE3F\x5\xE\b\x2\xE3F\xE44\x5*\x16\x2\xE40"+
		"\xE41\a\x19\x2\x2\xE41\xE42\x5\x12\n\x2\xE42\xE43\a\x15D\x2\x2\xE43\xE45"+
		"\x3\x2\x2\x2\xE44\xE40\x3\x2\x2\x2\xE44\xE45\x3\x2\x2\x2\xE45\x165\x3"+
		"\x2\x2\x2\xE46\xE48\x5\x8CG\x2\xE47\xE46\x3\x2\x2\x2\xE47\xE48\x3\x2\x2"+
		"\x2\xE48\xE4A\x3\x2\x2\x2\xE49\xE4B\x5`\x31\x2\xE4A\xE49\x3\x2\x2\x2\xE4A"+
		"\xE4B\x3\x2\x2\x2\xE4B\xE4D\x3\x2\x2\x2\xE4C\xE4E\a \x2\x2\xE4D\xE4C\x3"+
		"\x2\x2\x2\xE4D\xE4E\x3\x2\x2\x2\xE4E\xE4F\x3\x2\x2\x2\xE4F\xE54\x5\x12C"+
		"\x97\x2\xE50\xE51\a\x11E\x2\x2\xE51\xE53\x5\x12C\x97\x2\xE52\xE50\x3\x2"+
		"\x2\x2\xE53\xE56\x3\x2\x2\x2\xE54\xE52\x3\x2\x2\x2\xE54\xE55\x3\x2\x2"+
		"\x2\xE55\xE59\x3\x2\x2\x2\xE56\xE54\x3\x2\x2\x2\xE57\xE58\a\x6\x2\x2\xE58"+
		"\xE5A\x5\xFC\x7F\x2\xE59\xE57\x3\x2\x2\x2\xE59\xE5A\x3\x2\x2\x2\xE5A\xE5B"+
		"\x3\x2\x2\x2\xE5B\xE5C\x5\xE\b\x2\xE5C\x167\x3\x2\x2\x2\xE5D\xE5F\x5`"+
		"\x31\x2\xE5E\xE5D\x3\x2\x2\x2\xE5E\xE5F\x3\x2\x2\x2\xE5F\xE61\x3\x2\x2"+
		"\x2\xE60\xE62\a \x2\x2\xE61\xE60\x3\x2\x2\x2\xE61\xE62\x3\x2\x2\x2\xE62"+
		"\xE63\x3\x2\x2\x2\xE63\xE64\x5\x16A\xB6\x2\xE64\xE65\x5\xE\b\x2\xE65\x169"+
		"\x3\x2\x2\x2\xE66\xE67\x5\xEEx\x2\xE67\xE68\x5\xCA\x66\x2\xE68\xE69\x5"+
		"\xCCg\x2\xE69\x16B\x3\x2\x2\x2\xE6A\xE6B\a^\x2\x2\xE6B\xE6D\x5\xFC\x7F"+
		"\x2\xE6C\xE6E\a\xCE\x2\x2\xE6D\xE6C\x3\x2\x2\x2\xE6D\xE6E\x3\x2\x2\x2"+
		"\xE6E\xE71\x3\x2\x2\x2\xE6F\xE70\a-\x2\x2\xE70\xE72\x5\xCCg\x2\xE71\xE6F"+
		"\x3\x2\x2\x2\xE71\xE72\x3\x2\x2\x2\xE72\xE73\x3\x2\x2\x2\xE73\xE74\x5"+
		"\xE\b\x2\xE74\x16D\x3\x2\x2\x2\xE75\xE77\x5\x8CG\x2\xE76\xE75\x3\x2\x2"+
		"\x2\xE76\xE77\x3\x2\x2\x2\xE77\xE78\x3\x2\x2\x2\xE78\xE79\au\x2\x2\xE79"+
		"\xE7B\a\xA4\x2\x2\xE7A\xE7C\x5`\x31\x2\xE7B\xE7A\x3\x2\x2\x2\xE7B\xE7C"+
		"\x3\x2\x2\x2\xE7C\xE7D\x3\x2\x2\x2\xE7D\xE7E\x5\x12C\x97\x2\xE7E\xE7F"+
		"\a\x6\x2\x2\xE7F\xE81\x5\xFC\x7F\x2\xE80\xE82\a\xD2\x2\x2\xE81\xE80\x3"+
		"\x2\x2\x2\xE81\xE82\x3\x2\x2\x2\xE82\xE8C\x3\x2\x2\x2\xE83\xE84\a\x98"+
		"\x2\x2\xE84\xE89\x5\x16A\xB6\x2\xE85\xE86\a\x11E\x2\x2\xE86\xE88\x5\x16A"+
		"\xB6\x2\xE87\xE85\x3\x2\x2\x2\xE88\xE8B\x3\x2\x2\x2\xE89\xE87\x3\x2\x2"+
		"\x2\xE89\xE8A\x3\x2\x2\x2\xE8A\xE8D\x3\x2\x2\x2\xE8B\xE89\x3\x2\x2\x2"+
		"\xE8C\xE83\x3\x2\x2\x2\xE8C\xE8D\x3\x2\x2\x2\xE8D\xE8E\x3\x2\x2\x2\xE8E"+
		"\xE8F\x5\xE\b\x2\xE8F\x16F\x3\x2\x2\x2\xE90\xE91\a\xD1\x2\x2\xE91\xE92"+
		"\x5\x12C\x97\x2\xE92\xE93\a\x11B\x2\x2\xE93\xE96\x5\xCCg\x2\xE94\xE95"+
		"\a\x11E\x2\x2\xE95\xE97\x5\xCCg\x2\xE96\xE94\x3\x2\x2\x2\xE96\xE97\x3"+
		"\x2\x2\x2\xE97\xE98\x3\x2\x2\x2\xE98\xE99\a\x11C\x2\x2\xE99\xE9A\x5\xE"+
		"\b\x2\xE9A\xEAF\x3\x2\x2\x2\xE9B\xE9C\a\xD1\x2\x2\xE9C\xE9D\x5\x12C\x97"+
		"\x2\xE9D\xE9E\a\x117\x2\x2\xE9E\xEA1\x5\xCCg\x2\xE9F\xEA0\a\x11E\x2\x2"+
		"\xEA0\xEA2\x5\xCCg\x2\xEA1\xE9F\x3\x2\x2\x2\xEA1\xEA2\x3\x2\x2\x2\xEA2"+
		"\xEA3\x3\x2\x2\x2\xEA3\xEA4\a\x118\x2\x2\xEA4\xEA5\x5\xE\b\x2\xEA5\xEAF"+
		"\x3\x2\x2\x2\xEA6\xEA7\x5\x12C\x97\x2\xEA7\xEA8\a\x11B\x2\x2\xEA8\xEA9"+
		"\x5\xCCg\x2\xEA9\xEAA\a\x11C\x2\x2\xEAA\xEAB\x5\xCA\x66\x2\xEAB\xEAC\x5"+
		"\xCCg\x2\xEAC\xEAD\x5\xE\b\x2\xEAD\xEAF\x3\x2\x2\x2\xEAE\xE90\x3\x2\x2"+
		"\x2\xEAE\xE9B\x3\x2\x2\x2\xEAE\xEA6\x3\x2\x2\x2\xEAF\x171\x3\x2\x2\x2"+
		"\x213\x178\x17A\x180\x188\x18C\x194\x19D\x1A4\x1C9\x1CE\x1D1\x1D4\x1D9"+
		"\x1E2\x1E5\x1F0\x1F2\x1F8\x1FB\x1FF\x204\x208\x20C\x210\x214\x219\x21C"+
		"\x222\x226\x229\x22F\x235\x238\x23C\x23E\x241\x248\x24B\x24F\x256\x25A"+
		"\x261\x264\x269\x26D\x270\x275\x27F\x282\x287\x28A\x290\x295\x298\x29C"+
		"\x2A1\x2A7\x2AB\x2B0\x2B6\x2B9\x2BD\x2C4\x2CA\x2CE\x2D5\x2DA\x2DD\x2E0"+
		"\x2E4\x2E9\x2F2\x2F7\x2FF\x304\x308\x30D\x313\x318\x322\x32A\x32E\x331"+
		"\x335\x33C\x341\x346\x34F\x355\x358\x35B\x35F\x363\x367\x36D\x373\x37A"+
		"\x382\x385\x389\x38D\x391\x399\x39C\x3A1\x3A8\x3B2\x3B8\x3BD\x3C3\x3C6"+
		"\x3D2\x3DA\x3DD\x3E0\x3E4\x3E8\x3F0\x3F3\x3F8\x3FF\x407\x40A\x40E\x412"+
		"\x415\x419\x41E\x422\x427\x42A\x42E\x433\x439\x43D\x442\x445\x44B\x450"+
		"\x453\x457\x45C\x462\x46A\x46E\x472\x475\x478\x47D\x482\x485\x488\x48B"+
		"\x492\x49C\x4A1\x4A6\x4AE\x4B6\x4B9\x4C0\x4C5\x4C9\x4D1\x4D8\x4DB\x4DE"+
		"\x4E1\x4E5\x4E9\x4EC\x4F0\x4F6\x4FC\x502\x50A\x50E\x512\x51A\x51D\x526"+
		"\x529\x52C\x52F\x532\x537\x53A\x53F\x544\x547\x54C\x553\x557\x55A\x561"+
		"\x56B\x570\x584\x587\x58A\x58E\x592\x595\x599\x59D\x5A1\x5A7\x5B2\x5B9"+
		"\x5BE\x5C1\x5C6\x5CA\x5CE\x5D5\x5DA\x5E1\x5E4\x5E9\x5EC\x5F1\x5F5\x5FC"+
		"\x601\x606\x60B\x60F\x616\x61C\x628\x62B\x62E\x635\x63E\x64D\x659\x665"+
		"\x66A\x676\x67E\x681\x688\x68E\x692\x69E\x6A0\x6A6\x6AD\x6B7\x6BE\x6C2"+
		"\x6C5\x6D0\x6D7\x6DB\x6DE\x6E8\x6EE\x6F7\x6FA\x703\x709\x70D\x71B\x722"+
		"\x726\x72F\x735\x73D\x741\x748\x74C\x757\x75F\x766\x76E\x772\x77A\x780"+
		"\x78B\x795\x79F\x7AC\x7B1\x7BB\x7C0\x7C6\x7CF\x7D7\x7DA\x7E0\x7E3\x7E7"+
		"\x7EB\x7F2\x7F8\x7FC\x803\x80C\x811\x813\x81B\x822\x82E\x83A\x840\x848"+
		"\x84F\x857\x85E\x866\x86D\x875\x87C\x87F\x887\x88C\x88F\x892\x899\x89E"+
		"\x8A3\x8A5\x8AF\x8B4\x8B6\x8B8\x8BB\x8C7\x8CC\x8D6\x8E1\x8EC\x8F7\x8FC"+
		"\x8FF\x906\x90B\x913\x91E\x926\x92B\x92F\x939\x93D\x948\x953\x95A\x961"+
		"\x966\x96E\x97A\x97F\x982\x98B\x996\x99B\x99E\x9A5\x9AA\x9AD\x9B3\x9B6"+
		"\x9B9\x9C7\x9D5\x9EC\xA24\xA3A\xA3F\xA41\xA5E\xAB0\xAC4\xACA\xAD3\xAE5"+
		"\xAE7\xAF3\xB0C\xB1C\xB24\xB26\xB2A\xB32\xB35\xB3F\xB47\xB4E\xB56\xB60"+
		"\xB6A\xB71\xB74\xB81\xB84\xB86\xB8D\xB91\xB9F\xBAA\xBB5\xBB9\xBC1\xBCA"+
		"\xBD0\xBDE\xBE4\xBEA\xBEF\xBF4\xBF8\xBFE\xC06\xC0E\xC13\xC16\xC1F\xC22"+
		"\xC2B\xC30\xC38\xC3C\xC43\xC49\xC4C\xC52\xC56\xC5D\xC61\xC66\xC6B\xC70"+
		"\xC73\xC7E\xC8C\xC94\xC99\xCA7\xCB0\xCB8\xCBB\xCC2\xCCB\xCD9\xCE2\xCFD"+
		"\xCFF\xD01\xD06\xD0A\xD13\xD16\xD1A\xD1E\xD26\xD29\xD31\xD34\xD39\xD40"+
		"\xD49\xD50\xD59\xD5C\xD61\xD67\xD6B\xD6E\xD78\xD7B\xD81\xD85\xD8A\xD8D"+
		"\xD96\xD9B\xD9D\xDA0\xDA3\xDA6\xDA9\xDB1\xDB5\xDBB\xDBF\xDC6\xDC9\xDCC"+
		"\xDCF\xDD5\xDDD\xDE0\xDE4\xDE7\xDF0\xDF5\xDF9\xDFD\xE01\xE05\xE08\xE0D"+
		"\xE11\xE17\xE1D\xE29\xE2C\xE2F\xE35\xE3C\xE44\xE47\xE4A\xE4D\xE54\xE59"+
		"\xE5E\xE61\xE6D\xE71\xE76\xE7B\xE81\xE89\xE8C\xE96\xEA1\xEAE";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser
